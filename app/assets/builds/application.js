(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/@rails/actioncable/src/adapters.js
  var adapters_default;
  var init_adapters = __esm({
    "node_modules/@rails/actioncable/src/adapters.js"() {
      adapters_default = {
        logger: typeof console !== "undefined" ? console : void 0,
        WebSocket: typeof WebSocket !== "undefined" ? WebSocket : void 0
      };
    }
  });

  // node_modules/@rails/actioncable/src/logger.js
  var logger_default;
  var init_logger = __esm({
    "node_modules/@rails/actioncable/src/logger.js"() {
      init_adapters();
      logger_default = {
        log(...messages2) {
          if (this.enabled) {
            messages2.push(Date.now());
            adapters_default.logger.log("[ActionCable]", ...messages2);
          }
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/connection_monitor.js
  var now, secondsSince, ConnectionMonitor, connection_monitor_default;
  var init_connection_monitor = __esm({
    "node_modules/@rails/actioncable/src/connection_monitor.js"() {
      init_logger();
      now = () => (/* @__PURE__ */ new Date()).getTime();
      secondsSince = (time) => (now() - time) / 1e3;
      ConnectionMonitor = class {
        constructor(connection) {
          this.visibilityDidChange = this.visibilityDidChange.bind(this);
          this.connection = connection;
          this.reconnectAttempts = 0;
        }
        start() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            addEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
          }
        }
        stop() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            removeEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log("ConnectionMonitor stopped");
          }
        }
        isRunning() {
          return this.startedAt && !this.stoppedAt;
        }
        recordPing() {
          this.pingedAt = now();
        }
        recordConnect() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          logger_default.log("ConnectionMonitor recorded connect");
        }
        recordDisconnect() {
          this.disconnectedAt = now();
          logger_default.log("ConnectionMonitor recorded disconnect");
        }
        // Private
        startPolling() {
          this.stopPolling();
          this.poll();
        }
        stopPolling() {
          clearTimeout(this.pollTimeout);
        }
        poll() {
          this.pollTimeout = setTimeout(
            () => {
              this.reconnectIfStale();
              this.poll();
            },
            this.getPollInterval()
          );
        }
        getPollInterval() {
          const { staleThreshold, reconnectionBackoffRate } = this.constructor;
          const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
          const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
          const jitter = jitterMax * Math.random();
          return staleThreshold * 1e3 * backoff * (1 + jitter);
        }
        reconnectIfStale() {
          if (this.connectionIsStale()) {
            logger_default.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              logger_default.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);
            } else {
              logger_default.log("ConnectionMonitor reopening");
              this.connection.reopen();
            }
          }
        }
        get refreshedAt() {
          return this.pingedAt ? this.pingedAt : this.startedAt;
        }
        connectionIsStale() {
          return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;
        }
        disconnectedRecently() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        }
        visibilityDidChange() {
          if (document.visibilityState === "visible") {
            setTimeout(
              () => {
                if (this.connectionIsStale() || !this.connection.isOpen()) {
                  logger_default.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
                  this.connection.reopen();
                }
              },
              200
            );
          }
        }
      };
      ConnectionMonitor.staleThreshold = 6;
      ConnectionMonitor.reconnectionBackoffRate = 0.15;
      connection_monitor_default = ConnectionMonitor;
    }
  });

  // node_modules/@rails/actioncable/src/internal.js
  var internal_default;
  var init_internal = __esm({
    "node_modules/@rails/actioncable/src/internal.js"() {
      internal_default = {
        "message_types": {
          "welcome": "welcome",
          "disconnect": "disconnect",
          "ping": "ping",
          "confirmation": "confirm_subscription",
          "rejection": "reject_subscription"
        },
        "disconnect_reasons": {
          "unauthorized": "unauthorized",
          "invalid_request": "invalid_request",
          "server_restart": "server_restart",
          "remote": "remote"
        },
        "default_mount_path": "/cable",
        "protocols": [
          "actioncable-v1-json",
          "actioncable-unsupported"
        ]
      };
    }
  });

  // node_modules/@rails/actioncable/src/connection.js
  var message_types, protocols, supportedProtocols, indexOf, Connection, connection_default;
  var init_connection = __esm({
    "node_modules/@rails/actioncable/src/connection.js"() {
      init_adapters();
      init_connection_monitor();
      init_internal();
      init_logger();
      ({ message_types, protocols } = internal_default);
      supportedProtocols = protocols.slice(0, protocols.length - 1);
      indexOf = [].indexOf;
      Connection = class {
        constructor(consumer2) {
          this.open = this.open.bind(this);
          this.consumer = consumer2;
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new connection_monitor_default(this);
          this.disconnected = true;
        }
        send(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        }
        open() {
          if (this.isActive()) {
            logger_default.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
            return false;
          } else {
            const socketProtocols = [...protocols, ...this.consumer.subprotocols || []];
            logger_default.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${socketProtocols}`);
            if (this.webSocket) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new adapters_default.WebSocket(this.consumer.url, socketProtocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        }
        close({ allowReconnect } = { allowReconnect: true }) {
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isOpen()) {
            return this.webSocket.close();
          }
        }
        reopen() {
          logger_default.log(`Reopening WebSocket, current state is ${this.getState()}`);
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error) {
              logger_default.log("Failed to reopen WebSocket", error);
            } finally {
              logger_default.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        }
        getProtocol() {
          if (this.webSocket) {
            return this.webSocket.protocol;
          }
        }
        isOpen() {
          return this.isState("open");
        }
        isActive() {
          return this.isState("open", "connecting");
        }
        triedToReconnect() {
          return this.monitor.reconnectAttempts > 0;
        }
        // Private
        isProtocolSupported() {
          return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;
        }
        isState(...states) {
          return indexOf.call(states, this.getState()) >= 0;
        }
        getState() {
          if (this.webSocket) {
            for (let state in adapters_default.WebSocket) {
              if (adapters_default.WebSocket[state] === this.webSocket.readyState) {
                return state.toLowerCase();
              }
            }
          }
          return null;
        }
        installEventHandlers() {
          for (let eventName in this.events) {
            const handler = this.events[eventName].bind(this);
            this.webSocket[`on${eventName}`] = handler;
          }
        }
        uninstallEventHandlers() {
          for (let eventName in this.events) {
            this.webSocket[`on${eventName}`] = function() {
            };
          }
        }
      };
      Connection.reopenDelay = 500;
      Connection.prototype.events = {
        message(event) {
          if (!this.isProtocolSupported()) {
            return;
          }
          const { identifier: identifier2, message, reason, reconnect, type: type4 } = JSON.parse(event.data);
          switch (type4) {
            case message_types.welcome:
              if (this.triedToReconnect()) {
                this.reconnectAttempted = true;
              }
              this.monitor.recordConnect();
              return this.subscriptions.reload();
            case message_types.disconnect:
              logger_default.log(`Disconnecting. Reason: ${reason}`);
              return this.close({ allowReconnect: reconnect });
            case message_types.ping:
              return this.monitor.recordPing();
            case message_types.confirmation:
              this.subscriptions.confirmSubscription(identifier2);
              if (this.reconnectAttempted) {
                this.reconnectAttempted = false;
                return this.subscriptions.notify(identifier2, "connected", { reconnected: true });
              } else {
                return this.subscriptions.notify(identifier2, "connected", { reconnected: false });
              }
            case message_types.rejection:
              return this.subscriptions.reject(identifier2);
            default:
              return this.subscriptions.notify(identifier2, "received", message);
          }
        },
        open() {
          logger_default.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
          this.disconnected = false;
          if (!this.isProtocolSupported()) {
            logger_default.log("Protocol is unsupported. Stopping monitor and disconnecting.");
            return this.close({ allowReconnect: false });
          }
        },
        close(event) {
          logger_default.log("WebSocket onclose event");
          if (this.disconnected) {
            return;
          }
          this.disconnected = true;
          this.monitor.recordDisconnect();
          return this.subscriptions.notifyAll("disconnected", { willAttemptReconnect: this.monitor.isRunning() });
        },
        error() {
          logger_default.log("WebSocket onerror event");
        }
      };
      connection_default = Connection;
    }
  });

  // node_modules/@rails/actioncable/src/subscription.js
  var extend, Subscription;
  var init_subscription = __esm({
    "node_modules/@rails/actioncable/src/subscription.js"() {
      extend = function(object4, properties) {
        if (properties != null) {
          for (let key in properties) {
            const value = properties[key];
            object4[key] = value;
          }
        }
        return object4;
      };
      Subscription = class {
        constructor(consumer2, params = {}, mixin) {
          this.consumer = consumer2;
          this.identifier = JSON.stringify(params);
          extend(this, mixin);
        }
        // Perform a channel action with the optional data passed as an attribute
        perform(action, data = {}) {
          data.action = action;
          return this.send(data);
        }
        send(data) {
          return this.consumer.send({ command: "message", identifier: this.identifier, data: JSON.stringify(data) });
        }
        unsubscribe() {
          return this.consumer.subscriptions.remove(this);
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/subscription_guarantor.js
  var SubscriptionGuarantor, subscription_guarantor_default;
  var init_subscription_guarantor = __esm({
    "node_modules/@rails/actioncable/src/subscription_guarantor.js"() {
      init_logger();
      SubscriptionGuarantor = class {
        constructor(subscriptions) {
          this.subscriptions = subscriptions;
          this.pendingSubscriptions = [];
        }
        guarantee(subscription) {
          if (this.pendingSubscriptions.indexOf(subscription) == -1) {
            logger_default.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
            this.pendingSubscriptions.push(subscription);
          } else {
            logger_default.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
          }
          this.startGuaranteeing();
        }
        forget(subscription) {
          logger_default.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
          this.pendingSubscriptions = this.pendingSubscriptions.filter((s) => s !== subscription);
        }
        startGuaranteeing() {
          this.stopGuaranteeing();
          this.retrySubscribing();
        }
        stopGuaranteeing() {
          clearTimeout(this.retryTimeout);
        }
        retrySubscribing() {
          this.retryTimeout = setTimeout(
            () => {
              if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
                this.pendingSubscriptions.map((subscription) => {
                  logger_default.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
                  this.subscriptions.subscribe(subscription);
                });
              }
            },
            500
          );
        }
      };
      subscription_guarantor_default = SubscriptionGuarantor;
    }
  });

  // node_modules/@rails/actioncable/src/subscriptions.js
  var Subscriptions;
  var init_subscriptions = __esm({
    "node_modules/@rails/actioncable/src/subscriptions.js"() {
      init_subscription();
      init_subscription_guarantor();
      init_logger();
      Subscriptions = class {
        constructor(consumer2) {
          this.consumer = consumer2;
          this.guarantor = new subscription_guarantor_default(this);
          this.subscriptions = [];
        }
        create(channelName, mixin) {
          const channel = channelName;
          const params = typeof channel === "object" ? channel : { channel };
          const subscription = new Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        }
        // Private
        add(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.subscribe(subscription);
          return subscription;
        }
        remove(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        }
        reject(identifier2) {
          return this.findAll(identifier2).map((subscription) => {
            this.forget(subscription);
            this.notify(subscription, "rejected");
            return subscription;
          });
        }
        forget(subscription) {
          this.guarantor.forget(subscription);
          this.subscriptions = this.subscriptions.filter((s) => s !== subscription);
          return subscription;
        }
        findAll(identifier2) {
          return this.subscriptions.filter((s) => s.identifier === identifier2);
        }
        reload() {
          return this.subscriptions.map((subscription) => this.subscribe(subscription));
        }
        notifyAll(callbackName, ...args) {
          return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
        }
        notify(subscription, callbackName, ...args) {
          let subscriptions;
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
        }
        subscribe(subscription) {
          if (this.sendCommand(subscription, "subscribe")) {
            this.guarantor.guarantee(subscription);
          }
        }
        confirmSubscription(identifier2) {
          logger_default.log(`Subscription confirmed ${identifier2}`);
          this.findAll(identifier2).map((subscription) => this.guarantor.forget(subscription));
        }
        sendCommand(subscription, command) {
          const { identifier: identifier2 } = subscription;
          return this.consumer.send({ command, identifier: identifier2 });
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/consumer.js
  function createWebSocketURL(url2) {
    if (typeof url2 === "function") {
      url2 = url2();
    }
    if (url2 && !/^wss?:/i.test(url2)) {
      const a = document.createElement("a");
      a.href = url2;
      a.href = a.href;
      a.protocol = a.protocol.replace("http", "ws");
      return a.href;
    } else {
      return url2;
    }
  }
  var Consumer;
  var init_consumer = __esm({
    "node_modules/@rails/actioncable/src/consumer.js"() {
      init_connection();
      init_subscriptions();
      Consumer = class {
        constructor(url2) {
          this._url = url2;
          this.subscriptions = new Subscriptions(this);
          this.connection = new connection_default(this);
          this.subprotocols = [];
        }
        get url() {
          return createWebSocketURL(this._url);
        }
        send(data) {
          return this.connection.send(data);
        }
        connect() {
          return this.connection.open();
        }
        disconnect() {
          return this.connection.close({ allowReconnect: false });
        }
        ensureActiveConnection() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        }
        addSubProtocol(subprotocol) {
          this.subprotocols = [...this.subprotocols, subprotocol];
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/index.js
  var src_exports = {};
  __export(src_exports, {
    Connection: () => connection_default,
    ConnectionMonitor: () => connection_monitor_default,
    Consumer: () => Consumer,
    INTERNAL: () => internal_default,
    Subscription: () => Subscription,
    SubscriptionGuarantor: () => subscription_guarantor_default,
    Subscriptions: () => Subscriptions,
    adapters: () => adapters_default,
    createConsumer: () => createConsumer,
    createWebSocketURL: () => createWebSocketURL,
    getConfig: () => getConfig,
    logger: () => logger_default
  });
  function createConsumer(url2 = getConfig("url") || internal_default.default_mount_path) {
    return new Consumer(url2);
  }
  function getConfig(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  var init_src = __esm({
    "node_modules/@rails/actioncable/src/index.js"() {
      init_connection();
      init_connection_monitor();
      init_consumer();
      init_internal();
      init_subscription();
      init_subscriptions();
      init_subscription_guarantor();
      init_adapters();
      init_logger();
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
          var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE2 = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
          var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format3) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format3, args);
              }
            }
          }
          function error(format3) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format3, args);
              }
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign3 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component11(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component11.prototype.isReactComponent = {};
          Component11.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component11.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component11.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component11.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign3(pureComponentPrototype, Component11.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef6() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type4;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromType(type4) {
            if (type4 == null) {
              return null;
            }
            {
              if (typeof type4.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type4 === "function") {
              return type4.displayName || type4.name || null;
            }
            if (typeof type4 === "string") {
              return type4;
            }
            switch (type4) {
              case REACT_FRAGMENT_TYPE2:
                return "Fragment";
              case REACT_PORTAL_TYPE2:
                return "Portal";
              case REACT_PROFILER_TYPE2:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE2:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE2:
                return "SuspenseList";
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_CONTEXT_TYPE2:
                  var context = type4;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE2:
                  var provider = type4;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE2:
                  return getWrappedName(type4, type4.render, "ForwardRef");
                case REACT_MEMO_TYPE2:
                  var outerName = type4.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type4.type) || "Memo";
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type4, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE2,
              // Built-in properties that belong on the element
              type: type4,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement258(type4, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type4 && type4.defaultProps) {
              var defaultProps = type4.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type4 === "function" ? type4.displayName || type4.name || "Unknown" : type4;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type4, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement19(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign3({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement22(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE2;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array4, escapedPrefix, nameSoFar, callback) {
            var type4 = typeof children;
            if (type4 === "undefined" || type4 === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type4) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE2:
                    case REACT_PORTAL_TYPE2:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array4, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement22(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array4.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
                }
              } else if (type4 === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray9(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement22(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext46(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE2,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE2,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer2 = {
                $$typeof: REACT_CONTEXT_TYPE2,
                _context: context
              };
              Object.defineProperties(Consumer2, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer2;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE2,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef122(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE2) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType2 = {
              $$typeof: REACT_FORWARD_REF_TYPE2,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType2, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render2.name && !render2.displayName) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType2;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type4) {
            if (typeof type4 === "string" || typeof type4 === "function") {
              return true;
            }
            if (type4 === REACT_FRAGMENT_TYPE2 || type4 === REACT_PROFILER_TYPE2 || enableDebugTracing || type4 === REACT_STRICT_MODE_TYPE2 || type4 === REACT_SUSPENSE_TYPE2 || type4 === REACT_SUSPENSE_LIST_TYPE2 || enableLegacyHidden || type4 === REACT_OFFSCREEN_TYPE2 || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type4 === "object" && type4 !== null) {
              if (type4.$$typeof === REACT_LAZY_TYPE2 || type4.$$typeof === REACT_MEMO_TYPE2 || type4.$$typeof === REACT_PROVIDER_TYPE2 || type4.$$typeof === REACT_CONTEXT_TYPE2 || type4.$$typeof === REACT_FORWARD_REF_TYPE2 || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type4.$$typeof === REACT_MODULE_REFERENCE || type4.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo13(type4, compare) {
            {
              if (!isValidElementType(type4)) {
                error("memo: The first argument must be a component. Instead received: %s", type4 === null ? "null" : typeof type4);
              }
            }
            var elementType2 = {
              $$typeof: REACT_MEMO_TYPE2,
              type: type4,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType2, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type4.name && !type4.displayName) {
                    type4.displayName = name;
                  }
                }
              });
            }
            return elementType2;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext147(Context3) {
            var dispatcher = resolveDispatcher();
            {
              if (Context3._context !== void 0) {
                var realContext = Context3._context;
                if (realContext.Consumer === Context3) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context3) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context3);
          }
          function useState95(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer3(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef126(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect92(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect10(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback32(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo99(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle29(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId4() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component12) {
            var prototype = Component12.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
            if (type4 == null) {
              return "";
            }
            if (typeof type4 === "function") {
              {
                return describeNativeComponentFrame(type4, shouldConstruct(type4));
              }
            }
            if (typeof type4 === "string") {
              return describeBuiltInComponentFrame(type4);
            }
            switch (type4) {
              case REACT_SUSPENSE_TYPE2:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE2:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_FORWARD_REF_TYPE2:
                  return describeFunctionComponentFrame(type4.render);
                case REACT_MEMO_TYPE2:
                  return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement22(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement22(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement22(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type4 = element.type;
              if (type4 === null || type4 === void 0 || typeof type4 === "string") {
                return;
              }
              var propTypes;
              if (typeof type4 === "function") {
                propTypes = type4.propTypes;
              } else if (typeof type4 === "object" && (type4.$$typeof === REACT_FORWARD_REF_TYPE2 || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type4.$$typeof === REACT_MEMO_TYPE2)) {
                propTypes = type4.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type4);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type4.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type4);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type4.getDefaultProps === "function" && !type4.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type4, props, children) {
            var validType = isValidElementType(type4);
            if (!validType) {
              var info = "";
              if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type4 === null) {
                typeString = "null";
              } else if (isArray(type4)) {
                typeString = "array";
              } else if (type4 !== void 0 && type4.$$typeof === REACT_ELEMENT_TYPE2) {
                typeString = "<" + (getComponentNameFromType(type4.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type4;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement258.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type4);
              }
            }
            if (type4 === REACT_FRAGMENT_TYPE2) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type4) {
            var validatedFactory = createElementWithValidation.bind(null, type4);
            validatedFactory.type = type4;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type4
                  });
                  return type4;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement19.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children6 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray9,
            only: onlyChild
          };
          exports.Children = Children6;
          exports.Component = Component11;
          exports.Fragment = REACT_FRAGMENT_TYPE2;
          exports.Profiler = REACT_PROFILER_TYPE2;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE2;
          exports.Suspense = REACT_SUSPENSE_TYPE2;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext46;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef6;
          exports.forwardRef = forwardRef122;
          exports.isValidElement = isValidElement22;
          exports.lazy = lazy;
          exports.memo = memo13;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback32;
          exports.useContext = useContext147;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect92;
          exports.useId = useId4;
          exports.useImperativeHandle = useImperativeHandle29;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect10;
          exports.useMemo = useMemo99;
          exports.useReducer = useReducer3;
          exports.useRef = useRef126;
          exports.useState = useState95;
          exports.useSyncExternalStore = useSyncExternalStore3;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index2 = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index2);
          }
          function peek3(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index2 = i;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index2 = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node2;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node2;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node2) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node2;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek3(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek3(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek3(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek3(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek3(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek3(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek3(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek3(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek3(taskQueue) === null && newTask === peek3(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek3(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React428 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React428.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format3) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format3, args);
              }
            }
          }
          function error(format3) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format3, args);
              }
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment29 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef2 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type4;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type4, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type4 === BOOLEANISH_STRING || type4 === BOOLEAN || type4 === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type4;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type4 = propertyInfo.type;
                node2[propertyName] = type4 === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
          var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE2 = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
          var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component11) {
            var prototype = Component11.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
            if (type4 == null) {
              return "";
            }
            if (typeof type4 === "function") {
              {
                return describeNativeComponentFrame(type4, shouldConstruct(type4));
              }
            }
            if (typeof type4 === "string") {
              return describeBuiltInComponentFrame(type4);
            }
            switch (type4) {
              case REACT_SUSPENSE_TYPE2:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE2:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_FORWARD_REF_TYPE2:
                  return describeFunctionComponentFrame(type4.render);
                case REACT_MEMO_TYPE2:
                  return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef2:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromType(type4) {
            if (type4 == null) {
              return null;
            }
            {
              if (typeof type4.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type4 === "function") {
              return type4.displayName || type4.name || null;
            }
            if (typeof type4 === "string") {
              return type4;
            }
            switch (type4) {
              case REACT_FRAGMENT_TYPE2:
                return "Fragment";
              case REACT_PORTAL_TYPE2:
                return "Portal";
              case REACT_PROFILER_TYPE2:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE2:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE2:
                return "SuspenseList";
            }
            if (typeof type4 === "object") {
              switch (type4.$$typeof) {
                case REACT_CONTEXT_TYPE2:
                  var context = type4;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE2:
                  var provider = type4;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE2:
                  return getWrappedName(type4, type4.render, "ForwardRef");
                case REACT_MEMO_TYPE2:
                  var outerName = type4.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type4.type) || "Memo";
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type4;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type4) {
            return type4.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type4 = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type4;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type4;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef2:
                return getWrappedName$1(type4, type4.render, "ForwardRef");
              case Fragment29:
                return "Fragment";
              case HostComponent:
                return type4;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type4);
              case Mode:
                if (type4 === REACT_STRICT_MODE_TYPE2) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type4 === "function") {
                  return type4.displayName || type4.name || null;
                }
                if (typeof type4 === "string") {
                  return type4;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current2 = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current2 === null) {
                return null;
              }
              var owner = current2._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current2 === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current2);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current2 = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current2 = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current2;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type4 = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type4 === "checkbox" || type4 === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set4.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign3({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type4 = props.type;
            if (value != null) {
              if (type4 === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type4 === "submit" || type4 === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type4 = props.type;
              var isButton = type4 === "submit" || type4 === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type4, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type4 !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React428.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign3({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign3({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type4) {
            switch (type4) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type4) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type4);
            }
            if (parentNamespace === SVG_NAMESPACE && type4 === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty2 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string3) {
              return string3.replace(hyphenPattern, function(_, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles) {
            var style3 = node2.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign3({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type4, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type4, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type4);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type4);
              }
            }
          }
          function validateProperties(type4, props) {
            if (isCustomComponent(type4, props)) {
              return;
            }
            warnInvalidARIAProps(type4, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type4, props) {
            {
              if (type4 !== "input" && type4 !== "textarea" && type4 !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type4 === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type4);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type4);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type4, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type4, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type4);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type4);
              }
            }
          };
          function validateProperties$2(type4, props, eventRegistry) {
            if (isCustomComponent(type4, props)) {
              return;
            }
            warnUnknownProperties(type4, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl2 = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl2();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl2 = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type4, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type4));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener2 = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener2 && typeof listener2 !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener2 + "` type.");
            }
            return listener2;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e3, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e3, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError2 = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError2 = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e3, f) {
            hasError2 = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e3, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError2) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError2;
          }
          function clearCaughtError() {
            if (hasError2) {
              var error2 = caughtError;
              hasError2 = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref2 = (
            /*                          */
            512
          );
          var Snapshot2 = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref2 | Snapshot2 | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot2 | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref2 | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref2 | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current3 = fiber.alternate;
                if (current3 !== null) {
                  suspenseState = current3.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign3({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, false);
            return listener2;
          }
          function addEventCaptureListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, true);
            return listener2;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              capture: true,
              passive
            });
            return listener2;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              passive
            });
            return listener2;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign3(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign3({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign3({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign3({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign3({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign3({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign3({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign3({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign3({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign3({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign3({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign3({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign3({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is2(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset3) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset3 && nodeEnd >= offset3) {
                  return {
                    node: node2,
                    offset: offset3 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start2 = length2 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length2 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start2 === -1 || end === -1) {
              return null;
            }
            return {
              start: start2,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end) {
              var temp = end;
              end = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range3 = doc.createRange();
              range3.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end) {
                selection.addRange(range3);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range3.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range3);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap2(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes2 = {
            animationend: makePrefixMap2("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap2("Animation", "AnimationIteration"),
            animationstart: makePrefixMap2("Animation", "AnimationStart"),
            transitionend: makePrefixMap2("Transition", "TransitionEnd")
          };
          var prefixedEventNames2 = {};
          var style2 = {};
          if (canUseDOM2) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes2.animationend.animation;
              delete vendorPrefixes2.animationiteration.animation;
              delete vendorPrefixes2.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes2.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName2(eventName) {
            if (prefixedEventNames2[eventName]) {
              return prefixedEventNames2[eventName];
            } else if (!vendorPrefixes2[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes2[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames2[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName2("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName2("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName2("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName2("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener2, currentTarget) {
            var type4 = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type4, listener2, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener2 = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener2, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener2 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener2);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener2);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener2, currentTarget) {
            return {
              instance,
              listener: listener2,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener2 = getListener(instance, reactEventName);
                  if (listener2 != null) {
                    listeners.push(createDispatchListener(instance, listener2, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type4, props) {
              validateProperties(type4, props);
              validateProperties$1(type4, props);
              validateProperties$2(type4, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names3 = [];
              attributeNames.forEach(function(name) {
                names3.push(name);
              });
              error("Extra attributes from the server: %s", names3);
            };
            warnForInvalidEventListener = function(registrationName, listener2) {
              if (listener2 === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener2);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop7() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop7;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement258(type4, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type4);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type4, props);
                if (!isCustomComponentTag && type4 !== type4.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type4);
                }
              }
              if (type4 === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type4, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type4);
                if (type4 === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type4);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type4)) {
                  warnedUnknownTags[type4] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type4);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes2 = domElement.attributes;
              for (var _i = 0; _i < attributes2.length; _i++) {
                var name = attributes2[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes2[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign3({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type4;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type4 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type4 = container.tagName;
                namespace = getChildNamespace(ownNamespace, type4);
                break;
              }
            }
            {
              var validatedTag = type4.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type4, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type4);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type4);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type4, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type4, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string3 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type4);
                validateDOMNesting(null, string3, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement258(type4, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type4, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type4, props, rootContainerInstance);
            switch (type4) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type4, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string3 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type4);
                validateDOMNesting(null, string3, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type4, oldProps, newProps);
          }
          function shouldSetTextContent(type4, props) {
            return type4 === "textarea" || type4 === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type4, newProps, internalInstanceHandle) {
            switch (type4) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type4, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type4, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type4, props) {
            if (instance.nodeType !== ELEMENT_NODE || type4.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type4, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type4, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type4, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type4);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type4, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type4);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type4, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type4);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component11, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component11)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type4 = workInProgress2.type;
              var contextTypes = type4.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type4) {
            {
              var childContextTypes = type4.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type4, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type4.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign3({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type4, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type4, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component11 = node2.type;
                    if (isContextProvider(Component11)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number4) {
            return 32 - clz32(number4);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type4 = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type4);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type4 = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type4);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array4 = [];
              set4.forEach(function(value) {
                array4.push(value);
              });
              return array4.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component11, baseProps) {
            if (Component11 && Component11.defaultProps) {
              var props = assign3({}, baseProps);
              var defaultProps = Component11.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current3, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current3.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current3 = workInProgress2.alternate;
            if (current3 !== null) {
              var currentQueue = current3.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign3({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current3 = workInProgress2.alternate;
              if (current3 !== null) {
                var currentQueue = current3.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React428.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type4, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type4) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign3({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE2 && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE2) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current3, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current3, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot2;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Snapshot2;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current3, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current3 !== null && current3.ref !== null && typeof current3.ref === "function" && current3.ref._stringRef === stringRef) {
                  return current3.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current3 = newFiber.alternate;
              if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current3, textContent, lanes) {
              if (current3 === null || current3.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current3, element, lanes) {
              var elementType2 = element.type;
              if (elementType2 === REACT_FRAGMENT_TYPE2) {
                return updateFragment2(returnFiber, current3, element.props.children, lanes, element.key);
              }
              if (current3 !== null) {
                if (current3.elementType === elementType2 || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current3, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType2 === "object" && elementType2 !== null && elementType2.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(elementType2) === current3.type) {
                  var existing = useFiber(current3, element.props);
                  existing.ref = coerceRef(returnFiber, current3, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current3, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current3, portal, lanes) {
              if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current3, fragment, lanes, key) {
              if (current3 === null || current3.tag !== Fragment29) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE2: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE2: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE2: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE2: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE2: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE2:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE2:
                  case REACT_PORTAL_TYPE2:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE2:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType2 = element.type;
                  if (elementType2 === REACT_FRAGMENT_TYPE2) {
                    if (child.tag === Fragment29) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType2 || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType2 === "object" && elementType2 !== null && elementType2.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(elementType2) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE2) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE2 && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE2:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE2:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current3, workInProgress2) {
            if (current3 !== null && workInProgress2.child !== current3.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout3 = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current3, workInProgress2, Component11, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current3 !== null && current3.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component11(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component11(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current3 !== null && (current3.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current3.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current3, workInProgress2, lanes) {
            workInProgress2.updateQueue = current3.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current3.lanes = removeLanes(current3.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current3 = currentlyRenderingFiber$1.alternate;
              if (current3 !== null) {
                nextCurrentHook = current3.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current3 = currentHook;
            var baseQueue = current3.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current3.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current3.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current3.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout3, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout3, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout3, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout3, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2) {
            if (current3 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current3, workInProgress2, Component11, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component11.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component11)
                  );
                }
              }
            }
            var render3 = Component11.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current3, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current3, workInProgress2, render3, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current3 !== null && !didReceiveUpdate) {
              bailoutHooks(current3, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current3, workInProgress2, Component11, nextProps, renderLanes2) {
            if (current3 === null) {
              var type4 = Component11.type;
              if (isSimpleFunctionComponent(type4) && Component11.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component11.defaultProps === void 0) {
                var resolvedType = type4;
                {
                  resolvedType = resolveFunctionForHotReloading(type4);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type4);
                }
                return updateSimpleMemoComponent(current3, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type4)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component11.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component11.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current3.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component11.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current3.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current3, workInProgress2, Component11, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE2) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current3 !== null) {
              var prevProps = current3.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current3.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current3.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current3, renderLanes2)) {
                  workInProgress2.lanes = current3.lanes;
                  return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                } else if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current3, workInProgress2, Component11, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current3 !== null ? current3.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current3, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current3, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current3, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current3, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current3 === null && ref !== null || current3 !== null && current3.ref !== ref) {
              workInProgress2.flags |= Ref2;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current3, workInProgress2, Component11, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component11.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component11)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component11, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current3, workInProgress2, Component11, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current3, workInProgress2, Component11, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current3 !== null && !didReceiveUpdate) {
              bailoutHooks(current3, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current3, workInProgress2, Component11, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component11.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component11)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component11)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2);
              constructClassInstance(workInProgress2, Component11, nextProps);
              mountClassInstance(workInProgress2, Component11, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current3 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component11, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current3, workInProgress2, Component11, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current3, workInProgress2, Component11, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current3, workInProgress2, Component11, shouldUpdate, hasContext, renderLanes2) {
            markRef(current3, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component11, false);
              }
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component11.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current3 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component11, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current3, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current3 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current3, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              }
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current3, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type4 = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current3 !== null ? current3.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type4, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type4, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current3, workInProgress2);
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current3, workInProgress2) {
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType2;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component11 = init(payload);
            workInProgress2.type = Component11;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component11);
            var resolvedProps = resolveDefaultProps(Component11, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component11);
                  workInProgress2.type = Component11 = resolveFunctionForHotReloading(Component11);
                }
                child = updateFunctionComponent(null, workInProgress2, Component11, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component11 = resolveClassForHotReloading(Component11);
                }
                child = updateClassComponent(null, workInProgress2, Component11, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef2: {
                {
                  workInProgress2.type = Component11 = resolveForwardRefForHotReloading(Component11);
                }
                child = updateForwardRef(null, workInProgress2, Component11, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component11.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component11)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component11,
                  resolveDefaultProps(Component11.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component11 !== null && typeof Component11 === "object" && Component11.$$typeof === REACT_LAZY_TYPE2) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component11 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component11, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component11)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component11, nextProps);
            mountClassInstance(workInProgress2, Component11, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component11, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component11, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component11, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component11.prototype && typeof Component11.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component11) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component11, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component11) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component11) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component11)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component11, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component11, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component11, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component11);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component11) {
            {
              if (Component11) {
                if (Component11.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component11.displayName || Component11.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component11.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component11) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component11.contextType === "object" && Component11.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component11) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current3, workInProgress2, renderLanes2) {
            if (current3 !== null) {
              var suspenseState = current3.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current3, renderLanes2) {
            return removeLanes(current3.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current3)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current3 === null || current3.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current3.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current3, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current3.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current3, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current3, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current3, offscreenProps) {
            return createWorkInProgress(current3, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current3, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current3.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current3.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current3,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current3.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current3, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current3, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current3.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current3);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current3.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type4 = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type4, index3, type4);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current3 !== null && (current3.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current3, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current3 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current3, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current3, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current3 !== null) {
                current3.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2) {
            if (current3 !== null) {
              workInProgress2.dependencies = current3.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current3, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current3, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current3.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current3];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current3);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current3, renderLanes2) {
            var updateLanes = current3.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component11 = workInProgress2.type;
                if (isContextProvider(Component11)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current3.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          function beginWork(current3, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current3 !== null) {
                return remountFiber(current3, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current3 !== null) {
              var oldProps = current3.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current3.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2);
                }
                if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current3, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType2 = workInProgress2.elementType;
                return mountLazyComponent(current3, workInProgress2, elementType2, renderLanes2);
              }
              case FunctionComponent: {
                var Component11 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component11 ? unresolvedProps : resolveDefaultProps(Component11, unresolvedProps);
                return updateFunctionComponent(current3, workInProgress2, Component11, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current3, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current3, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current3, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current3, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current3, workInProgress2, renderLanes2);
              case ForwardRef2: {
                var type4 = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type4 ? _unresolvedProps2 : resolveDefaultProps(type4, _unresolvedProps2);
                return updateForwardRef(current3, workInProgress2, type4, _resolvedProps2, renderLanes2);
              }
              case Fragment29:
                return updateFragment(current3, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current3, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current3, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current3, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current3, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current3, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current3, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref2;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current3, workInProgress2) {
            };
            updateHostComponent$1 = function(current3, workInProgress2, type4, newProps, rootContainerInstance) {
              var oldProps = current3.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type4, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current3, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current3 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current3, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef2:
              case Fragment29:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component11 = workInProgress2.type;
                if (isContextProvider(Component11)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current3 === null || current3.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current3 !== null) {
                      var prevState = current3.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot2;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current3, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type4 = workInProgress2.type;
                if (current3 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current3, workInProgress2, type4, newProps, rootContainerInstance);
                  if (current3.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type4, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type4, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current3 && workInProgress2.stateNode != null) {
                  var oldText = current3.memoizedProps;
                  updateHostText$1(current3, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current3 === null || current3.memoizedState !== null && current3.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current3 !== null && current3.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current3 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current3, workInProgress2);
                if (current3 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current3 === null || (current3.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now2();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current3 !== null) {
                  var _prevState = current3.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current3, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component11 = workInProgress2.type;
                if (isContextProvider(Component11)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current3, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current3, instance) {
            instance.props = current3.memoizedProps;
            instance.state = current3.memoizedState;
            if (current3.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current3);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current3, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout3, current3);
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current3, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current3, instance);
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current3, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current3, nearestMountedAncestor) {
            try {
              commitAttachRef(current3);
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current3, nearestMountedAncestor) {
            var ref = current3.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current3.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current3);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current3, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current3));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current3, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current3 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot2) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current3 !== null) {
                    var prevProps = current3.memoizedProps;
                    var prevState = current3.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout3) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout3) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout3) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout3) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout3) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current3, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout3 | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout3 | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current3 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current3.memoizedProps : resolveDefaultProps(finishedWork.type, current3.memoizedProps);
                        var prevState = current3.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current3 === null && finishedWork.flags & Update) {
                    var type4 = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type4, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current3 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref2) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout3) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current3 = finishedWork.alternate;
              if (current3 !== null) {
                var prevState = current3.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current3 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout3 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout3 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current3 !== null) {
                    safelyDetachRef(current3, current3.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current3 !== null) {
                    safelyDetachRef(current3, current3.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current3 !== null ? current3.memoizedProps : newProps;
                      var type4 = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type4, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current3 !== null ? current3.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current3 !== null) {
                      var prevRootState = current3.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current3 !== null && current3.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current3 = fiber.alternate;
                  var wasHidden = current3 !== null && current3.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current3 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current3, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout3, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout3, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current3, nearestMountedAncestor) {
            switch (current3.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (current3.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
                  recordPassiveEffectDuration(current3);
                } else {
                  commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout3 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout3 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current3 = root2.current;
            current3.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now2());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now2());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors2) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors2;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors2);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now2());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now2());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync3(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current3 = interruptedWork.alternate;
                unwindInterruptedWork(current3, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current3 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current3 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current3, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current3, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current3, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current3 = firstChild;
              var subtreeRoot = null;
              while (current3 !== null) {
                var primarySubtreeFlag = current3.subtreeFlags & fiberFlags;
                if (current3 !== subtreeRoot && current3.child !== null && primarySubtreeFlag !== NoFlags) {
                  current3 = current3.child;
                } else {
                  if ((current3.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current3);
                  }
                  if (current3.sibling !== null) {
                    current3 = current3.sibling;
                  } else {
                    current3 = subtreeRoot = current3.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current2;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current3, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current3, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current3, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current3, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current2;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type4) {
            {
              if (resolveFamily === null) {
                return type4;
              }
              var family = resolveFamily(type4);
              if (family === void 0) {
                return type4;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type4) {
            return resolveFunctionForHotReloading(type4);
          }
          function resolveForwardRefForHotReloading(type4) {
            {
              if (resolveFamily === null) {
                return type4;
              }
              var family = resolveFamily(type4);
              if (family === void 0) {
                if (type4 !== null && type4 !== void 0 && typeof type4.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type4.render);
                  if (type4.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE2,
                      render: currentRender
                    };
                    if (type4.displayName !== void 0) {
                      syntheticType.displayName = type4.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type4;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef2: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE2) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE2) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync3(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync3(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type4 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type4;
                  break;
                case ForwardRef2:
                  candidateType = type4.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type4 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type4;
                  break;
                case ForwardRef2:
                  candidateType = type4.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component11) {
            var prototype = Component11.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type4) {
            return typeof type4 === "function" && !shouldConstruct$1(type4) && type4.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component11) {
            if (typeof Component11 === "function") {
              return shouldConstruct$1(Component11) ? ClassComponent : FunctionComponent;
            } else if (Component11 !== void 0 && Component11 !== null) {
              var $$typeof = Component11.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE2) {
                return ForwardRef2;
              }
              if ($$typeof === REACT_MEMO_TYPE2) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current3, pendingProps) {
            var workInProgress2 = current3.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current3.tag, pendingProps, current3.key, current3.mode);
              workInProgress2.elementType = current3.elementType;
              workInProgress2.type = current3.type;
              workInProgress2.stateNode = current3.stateNode;
              {
                workInProgress2._debugSource = current3._debugSource;
                workInProgress2._debugOwner = current3._debugOwner;
                workInProgress2._debugHookTypes = current3._debugHookTypes;
              }
              workInProgress2.alternate = current3;
              current3.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current3.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current3.flags & StaticMask;
            workInProgress2.childLanes = current3.childLanes;
            workInProgress2.lanes = current3.lanes;
            workInProgress2.child = current3.child;
            workInProgress2.memoizedProps = current3.memoizedProps;
            workInProgress2.memoizedState = current3.memoizedState;
            workInProgress2.updateQueue = current3.updateQueue;
            var currentDependencies = current3.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current3.sibling;
            workInProgress2.index = current3.index;
            workInProgress2.ref = current3.ref;
            {
              workInProgress2.selfBaseDuration = current3.selfBaseDuration;
              workInProgress2.treeBaseDuration = current3.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current3._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current3.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current3.type);
                  break;
                case ForwardRef2:
                  workInProgress2.type = resolveForwardRefForHotReloading(current3.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current3 = workInProgress2.alternate;
            if (current3 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current3.childLanes;
              workInProgress2.lanes = current3.lanes;
              workInProgress2.child = current3.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current3.memoizedProps;
              workInProgress2.memoizedState = current3.memoizedState;
              workInProgress2.updateQueue = current3.updateQueue;
              workInProgress2.type = current3.type;
              var currentDependencies = current3.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current3.selfBaseDuration;
                workInProgress2.treeBaseDuration = current3.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type4, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type4;
            if (typeof type4 === "function") {
              if (shouldConstruct$1(type4)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type4 === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type4) {
                  case REACT_FRAGMENT_TYPE2:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE2:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE2:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE2:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE2:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE2:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type4 === "object" && type4 !== null) {
                      switch (type4.$$typeof) {
                        case REACT_PROVIDER_TYPE2:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE2:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE2:
                          fiberTag = ForwardRef2;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE2:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE2:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type4 == null ? type4 : typeof type4) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type4;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type4 = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type4, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment29, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE2;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE2;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE2;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE2;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE2,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component11 = fiber.type;
              if (isContextProvider(Component11)) {
                return processChildContext(fiber, Component11, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current2;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current3 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current3);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current3, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current2 !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current2) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync3(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index3) {
              var key = path2[index3];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              if (index3 + 1 === path2.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path2, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index3, value) {
              if (index3 >= path2.length) {
                return value;
              }
              var key = path2[index3];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path2, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path2, value) {
              return copyWithSetImpl(obj, path2, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path2, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path2) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path2, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current2;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync3(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE2) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync3();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync3(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode2(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render2(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode2(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync3(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync3);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync3(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode2;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render2;
          exports.unmountComponentAtNode = unmountComponentAtNode2;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js
  var require_use_sync_external_store_with_selector_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React428 = require_react();
          function is2(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          var useSyncExternalStore3 = React428.useSyncExternalStore;
          var useRef126 = React428.useRef, useEffect92 = React428.useEffect, useMemo99 = React428.useMemo, useDebugValue2 = React428.useDebugValue;
          function useSyncExternalStoreWithSelector3(subscribe, getSnapshot, getServerSnapshot, selector, isEqual3) {
            var instRef = useRef126(null);
            var inst;
            if (instRef.current === null) {
              inst = {
                hasValue: false,
                value: null
              };
              instRef.current = inst;
            } else {
              inst = instRef.current;
            }
            var _useMemo = useMemo99(function() {
              var hasMemo = false;
              var memoizedSnapshot;
              var memoizedSelection;
              var memoizedSelector = function(nextSnapshot) {
                if (!hasMemo) {
                  hasMemo = true;
                  memoizedSnapshot = nextSnapshot;
                  var _nextSelection = selector(nextSnapshot);
                  if (isEqual3 !== void 0) {
                    if (inst.hasValue) {
                      var currentSelection = inst.value;
                      if (isEqual3(currentSelection, _nextSelection)) {
                        memoizedSelection = currentSelection;
                        return currentSelection;
                      }
                    }
                  }
                  memoizedSelection = _nextSelection;
                  return _nextSelection;
                }
                var prevSnapshot = memoizedSnapshot;
                var prevSelection = memoizedSelection;
                if (objectIs(prevSnapshot, nextSnapshot)) {
                  return prevSelection;
                }
                var nextSelection = selector(nextSnapshot);
                if (isEqual3 !== void 0 && isEqual3(prevSelection, nextSelection)) {
                  return prevSelection;
                }
                memoizedSnapshot = nextSnapshot;
                memoizedSelection = nextSelection;
                return nextSelection;
              };
              var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
              var getSnapshotWithSelector = function() {
                return memoizedSelector(getSnapshot());
              };
              var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              };
              return [getSnapshotWithSelector, getServerSnapshotWithSelector];
            }, [getSnapshot, getServerSnapshot, selector, isEqual3]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
            var value = useSyncExternalStore3(subscribe, getSelection, getServerSelection);
            useEffect92(function() {
              inst.hasValue = true;
              inst.value = value;
            }, [value]);
            useDebugValue2(value);
            return value;
          }
          exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector3;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/use-sync-external-store/with-selector.js
  var require_with_selector = __commonJS({
    "node_modules/use-sync-external-store/with-selector.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_use_sync_external_store_with_selector_development();
      }
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        function classNames139() {
          var classes = "";
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (arg) {
              classes = appendClass(classes, parseValue2(arg));
            }
          }
          return classes;
        }
        function parseValue2(arg) {
          if (typeof arg === "string" || typeof arg === "number") {
            return arg;
          }
          if (typeof arg !== "object") {
            return "";
          }
          if (Array.isArray(arg)) {
            return classNames139.apply(null, arg);
          }
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
            return arg.toString();
          }
          var classes = "";
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes = appendClass(classes, key);
            }
          }
          return classes;
        }
        function appendClass(value, newClass) {
          if (!newClass) {
            return value;
          }
          if (value) {
            return value + " " + newClass;
          }
          return value + newClass;
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames139.default = classNames139;
          module2.exports = classNames139;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames139;
          });
        } else {
          window.classNames = classNames139;
        }
      })();
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
          var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE2 = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE2 = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
          var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type4) {
            if (typeof type4 === "string" || typeof type4 === "function") {
              return true;
            }
            if (type4 === REACT_FRAGMENT_TYPE2 || type4 === REACT_PROFILER_TYPE2 || enableDebugTracing || type4 === REACT_STRICT_MODE_TYPE2 || type4 === REACT_SUSPENSE_TYPE2 || type4 === REACT_SUSPENSE_LIST_TYPE2 || enableLegacyHidden || type4 === REACT_OFFSCREEN_TYPE2 || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type4 === "object" && type4 !== null) {
              if (type4.$$typeof === REACT_LAZY_TYPE2 || type4.$$typeof === REACT_MEMO_TYPE2 || type4.$$typeof === REACT_PROVIDER_TYPE2 || type4.$$typeof === REACT_CONTEXT_TYPE2 || type4.$$typeof === REACT_FORWARD_REF_TYPE2 || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type4.$$typeof === REACT_MODULE_REFERENCE || type4.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object4) {
            if (typeof object4 === "object" && object4 !== null) {
              var $$typeof = object4.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE2:
                  var type4 = object4.type;
                  switch (type4) {
                    case REACT_FRAGMENT_TYPE2:
                    case REACT_PROFILER_TYPE2:
                    case REACT_STRICT_MODE_TYPE2:
                    case REACT_SUSPENSE_TYPE2:
                    case REACT_SUSPENSE_LIST_TYPE2:
                      return type4;
                    default:
                      var $$typeofType = type4 && type4.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE2:
                        case REACT_CONTEXT_TYPE2:
                        case REACT_FORWARD_REF_TYPE2:
                        case REACT_LAZY_TYPE2:
                        case REACT_MEMO_TYPE2:
                        case REACT_PROVIDER_TYPE2:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE2:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE2;
          var ContextProvider = REACT_PROVIDER_TYPE2;
          var Element3 = REACT_ELEMENT_TYPE2;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE2;
          var Fragment29 = REACT_FRAGMENT_TYPE2;
          var Lazy = REACT_LAZY_TYPE2;
          var Memo2 = REACT_MEMO_TYPE2;
          var Portal2 = REACT_PORTAL_TYPE2;
          var Profiler = REACT_PROFILER_TYPE2;
          var StrictMode = REACT_STRICT_MODE_TYPE2;
          var Suspense = REACT_SUSPENSE_TYPE2;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE2;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object4) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object4) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object4) {
            return typeOf(object4) === REACT_CONTEXT_TYPE2;
          }
          function isContextProvider(object4) {
            return typeOf(object4) === REACT_PROVIDER_TYPE2;
          }
          function isElement(object4) {
            return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE2;
          }
          function isForwardRef(object4) {
            return typeOf(object4) === REACT_FORWARD_REF_TYPE2;
          }
          function isFragment4(object4) {
            return typeOf(object4) === REACT_FRAGMENT_TYPE2;
          }
          function isLazy(object4) {
            return typeOf(object4) === REACT_LAZY_TYPE2;
          }
          function isMemo2(object4) {
            return typeOf(object4) === REACT_MEMO_TYPE2;
          }
          function isPortal(object4) {
            return typeOf(object4) === REACT_PORTAL_TYPE2;
          }
          function isProfiler(object4) {
            return typeOf(object4) === REACT_PROFILER_TYPE2;
          }
          function isStrictMode(object4) {
            return typeOf(object4) === REACT_STRICT_MODE_TYPE2;
          }
          function isSuspense(object4) {
            return typeOf(object4) === REACT_SUSPENSE_TYPE2;
          }
          function isSuspenseList(object4) {
            return typeOf(object4) === REACT_SUSPENSE_LIST_TYPE2;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element3;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment29;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo2;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/dayjs/dayjs.min.js
  var require_dayjs_min = __commonJS({
    "node_modules/dayjs/dayjs.min.js"(exports, module2) {
      !function(t2, e3) {
        "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs = e3();
      }(exports, function() {
        "use strict";
        var t2 = 1e3, e3 = 6e4, n2 = 36e5, r2 = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o3 = "week", c = "month", f = "quarter", h = "year", d = "date", l2 = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
          var e4 = ["th", "st", "nd", "rd"], n3 = t3 % 100;
          return "[" + t3 + (e4[(n3 - 20) % 10] || e4[n3] || e4[0]) + "]";
        } }, m = function(t3, e4, n3) {
          var r3 = String(t3);
          return !r3 || r3.length >= e4 ? t3 : "" + Array(e4 + 1 - r3.length).join(n3) + t3;
        }, v = { s: m, z: function(t3) {
          var e4 = -t3.utcOffset(), n3 = Math.abs(e4), r3 = Math.floor(n3 / 60), i2 = n3 % 60;
          return (e4 <= 0 ? "+" : "-") + m(r3, 2, "0") + ":" + m(i2, 2, "0");
        }, m: function t3(e4, n3) {
          if (e4.date() < n3.date())
            return -t3(n3, e4);
          var r3 = 12 * (n3.year() - e4.year()) + (n3.month() - e4.month()), i2 = e4.clone().add(r3, c), s2 = n3 - i2 < 0, u2 = e4.clone().add(r3 + (s2 ? -1 : 1), c);
          return +(-(r3 + (n3 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
        }, a: function(t3) {
          return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
        }, p: function(t3) {
          return { M: c, y: h, w: o3, d: a, D: d, h: u, m: s, s: i, ms: r2, Q: f }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
        }, u: function(t3) {
          return void 0 === t3;
        } }, g = "en", D = {};
        D[g] = M;
        var p = "$isDayjsObject", S = function(t3) {
          return t3 instanceof _ || !(!t3 || !t3[p]);
        }, w = function t3(e4, n3, r3) {
          var i2;
          if (!e4)
            return g;
          if ("string" == typeof e4) {
            var s2 = e4.toLowerCase();
            D[s2] && (i2 = s2), n3 && (D[s2] = n3, i2 = s2);
            var u2 = e4.split("-");
            if (!i2 && u2.length > 1)
              return t3(u2[0]);
          } else {
            var a2 = e4.name;
            D[a2] = e4, i2 = a2;
          }
          return !r3 && i2 && (g = i2), i2 || !r3 && g;
        }, O = function(t3, e4) {
          if (S(t3))
            return t3.clone();
          var n3 = "object" == typeof e4 ? e4 : {};
          return n3.date = t3, n3.args = arguments, new _(n3);
        }, b = v;
        b.l = w, b.i = S, b.w = function(t3, e4) {
          return O(t3, { locale: e4.$L, utc: e4.$u, x: e4.$x, $offset: e4.$offset });
        };
        var _ = function() {
          function M2(t3) {
            this.$L = w(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p] = true;
          }
          var m2 = M2.prototype;
          return m2.parse = function(t3) {
            this.$d = function(t4) {
              var e4 = t4.date, n3 = t4.utc;
              if (null === e4)
                return /* @__PURE__ */ new Date(NaN);
              if (b.u(e4))
                return /* @__PURE__ */ new Date();
              if (e4 instanceof Date)
                return new Date(e4);
              if ("string" == typeof e4 && !/Z$/i.test(e4)) {
                var r3 = e4.match($);
                if (r3) {
                  var i2 = r3[2] - 1 || 0, s2 = (r3[7] || "0").substring(0, 3);
                  return n3 ? new Date(Date.UTC(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s2)) : new Date(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s2);
                }
              }
              return new Date(e4);
            }(t3), this.init();
          }, m2.init = function() {
            var t3 = this.$d;
            this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
          }, m2.$utils = function() {
            return b;
          }, m2.isValid = function() {
            return !(this.$d.toString() === l2);
          }, m2.isSame = function(t3, e4) {
            var n3 = O(t3);
            return this.startOf(e4) <= n3 && n3 <= this.endOf(e4);
          }, m2.isAfter = function(t3, e4) {
            return O(t3) < this.startOf(e4);
          }, m2.isBefore = function(t3, e4) {
            return this.endOf(e4) < O(t3);
          }, m2.$g = function(t3, e4, n3) {
            return b.u(t3) ? this[e4] : this.set(n3, t3);
          }, m2.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, m2.valueOf = function() {
            return this.$d.getTime();
          }, m2.startOf = function(t3, e4) {
            var n3 = this, r3 = !!b.u(e4) || e4, f2 = b.p(t3), l3 = function(t4, e5) {
              var i2 = b.w(n3.$u ? Date.UTC(n3.$y, e5, t4) : new Date(n3.$y, e5, t4), n3);
              return r3 ? i2 : i2.endOf(a);
            }, $2 = function(t4, e5) {
              return b.w(n3.toDate()[t4].apply(n3.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e5)), n3);
            }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
            switch (f2) {
              case h:
                return r3 ? l3(1, 0) : l3(31, 11);
              case c:
                return r3 ? l3(1, M3) : l3(0, M3 + 1);
              case o3:
                var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
                return l3(r3 ? m3 - D2 : m3 + (6 - D2), M3);
              case a:
              case d:
                return $2(v2 + "Hours", 0);
              case u:
                return $2(v2 + "Minutes", 1);
              case s:
                return $2(v2 + "Seconds", 2);
              case i:
                return $2(v2 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m2.endOf = function(t3) {
            return this.startOf(t3, false);
          }, m2.$set = function(t3, e4) {
            var n3, o4 = b.p(t3), f2 = "set" + (this.$u ? "UTC" : ""), l3 = (n3 = {}, n3[a] = f2 + "Date", n3[d] = f2 + "Date", n3[c] = f2 + "Month", n3[h] = f2 + "FullYear", n3[u] = f2 + "Hours", n3[s] = f2 + "Minutes", n3[i] = f2 + "Seconds", n3[r2] = f2 + "Milliseconds", n3)[o4], $2 = o4 === a ? this.$D + (e4 - this.$W) : e4;
            if (o4 === c || o4 === h) {
              var y2 = this.clone().set(d, 1);
              y2.$d[l3]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
            } else
              l3 && this.$d[l3]($2);
            return this.init(), this;
          }, m2.set = function(t3, e4) {
            return this.clone().$set(t3, e4);
          }, m2.get = function(t3) {
            return this[b.p(t3)]();
          }, m2.add = function(r3, f2) {
            var d2, l3 = this;
            r3 = Number(r3);
            var $2 = b.p(f2), y2 = function(t3) {
              var e4 = O(l3);
              return b.w(e4.date(e4.date() + Math.round(t3 * r3)), l3);
            };
            if ($2 === c)
              return this.set(c, this.$M + r3);
            if ($2 === h)
              return this.set(h, this.$y + r3);
            if ($2 === a)
              return y2(1);
            if ($2 === o3)
              return y2(7);
            var M3 = (d2 = {}, d2[s] = e3, d2[u] = n2, d2[i] = t2, d2)[$2] || 1, m3 = this.$d.getTime() + r3 * M3;
            return b.w(m3, this);
          }, m2.subtract = function(t3, e4) {
            return this.add(-1 * t3, e4);
          }, m2.format = function(t3) {
            var e4 = this, n3 = this.$locale();
            if (!this.isValid())
              return n3.invalidDate || l2;
            var r3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o4 = n3.weekdays, c2 = n3.months, f2 = n3.meridiem, h2 = function(t4, n4, i3, s3) {
              return t4 && (t4[n4] || t4(e4, r3)) || i3[n4].slice(0, s3);
            }, d2 = function(t4) {
              return b.s(s2 % 12 || 12, t4, "0");
            }, $2 = f2 || function(t4, e5, n4) {
              var r4 = t4 < 12 ? "AM" : "PM";
              return n4 ? r4.toLowerCase() : r4;
            };
            return r3.replace(y, function(t4, r4) {
              return r4 || function(t5) {
                switch (t5) {
                  case "YY":
                    return String(e4.$y).slice(-2);
                  case "YYYY":
                    return b.s(e4.$y, 4, "0");
                  case "M":
                    return a2 + 1;
                  case "MM":
                    return b.s(a2 + 1, 2, "0");
                  case "MMM":
                    return h2(n3.monthsShort, a2, c2, 3);
                  case "MMMM":
                    return h2(c2, a2);
                  case "D":
                    return e4.$D;
                  case "DD":
                    return b.s(e4.$D, 2, "0");
                  case "d":
                    return String(e4.$W);
                  case "dd":
                    return h2(n3.weekdaysMin, e4.$W, o4, 2);
                  case "ddd":
                    return h2(n3.weekdaysShort, e4.$W, o4, 3);
                  case "dddd":
                    return o4[e4.$W];
                  case "H":
                    return String(s2);
                  case "HH":
                    return b.s(s2, 2, "0");
                  case "h":
                    return d2(1);
                  case "hh":
                    return d2(2);
                  case "a":
                    return $2(s2, u2, true);
                  case "A":
                    return $2(s2, u2, false);
                  case "m":
                    return String(u2);
                  case "mm":
                    return b.s(u2, 2, "0");
                  case "s":
                    return String(e4.$s);
                  case "ss":
                    return b.s(e4.$s, 2, "0");
                  case "SSS":
                    return b.s(e4.$ms, 3, "0");
                  case "Z":
                    return i2;
                }
                return null;
              }(t4) || i2.replace(":", "");
            });
          }, m2.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m2.diff = function(r3, d2, l3) {
            var $2, y2 = this, M3 = b.p(d2), m3 = O(r3), v2 = (m3.utcOffset() - this.utcOffset()) * e3, g2 = this - m3, D2 = function() {
              return b.m(y2, m3);
            };
            switch (M3) {
              case h:
                $2 = D2() / 12;
                break;
              case c:
                $2 = D2();
                break;
              case f:
                $2 = D2() / 3;
                break;
              case o3:
                $2 = (g2 - v2) / 6048e5;
                break;
              case a:
                $2 = (g2 - v2) / 864e5;
                break;
              case u:
                $2 = g2 / n2;
                break;
              case s:
                $2 = g2 / e3;
                break;
              case i:
                $2 = g2 / t2;
                break;
              default:
                $2 = g2;
            }
            return l3 ? $2 : b.a($2);
          }, m2.daysInMonth = function() {
            return this.endOf(c).$D;
          }, m2.$locale = function() {
            return D[this.$L];
          }, m2.locale = function(t3, e4) {
            if (!t3)
              return this.$L;
            var n3 = this.clone(), r3 = w(t3, e4, true);
            return r3 && (n3.$L = r3), n3;
          }, m2.clone = function() {
            return b.w(this.$d, this);
          }, m2.toDate = function() {
            return new Date(this.valueOf());
          }, m2.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
          }, m2.toISOString = function() {
            return this.$d.toISOString();
          }, m2.toString = function() {
            return this.$d.toUTCString();
          }, M2;
        }(), k = _.prototype;
        return O.prototype = k, [["$ms", r2], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function(t3) {
          k[t3[1]] = function(e4) {
            return this.$g(e4, t3[0], t3[1]);
          };
        }), O.extend = function(t3, e4) {
          return t3.$i || (t3(e4, _, O), t3.$i = true), O;
        }, O.locale = w, O.isDayjs = S, O.unix = function(t3) {
          return O(1e3 * t3);
        }, O.en = D[g], O.Ls = D, O.p = {}, O;
      });
    }
  });

  // node_modules/dayjs/plugin/weekday.js
  var require_weekday = __commonJS({
    "node_modules/dayjs/plugin/weekday.js"(exports, module2) {
      !function(e3, t2) {
        "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_weekday = t2();
      }(exports, function() {
        "use strict";
        return function(e3, t2) {
          t2.prototype.weekday = function(e4) {
            var t3 = this.$locale().weekStart || 0, i = this.$W, n2 = (i < t3 ? i + 7 : i) - t3;
            return this.$utils().u(e4) ? n2 : this.subtract(n2, "day").add(e4, "day");
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/localeData.js
  var require_localeData = __commonJS({
    "node_modules/dayjs/plugin/localeData.js"(exports, module2) {
      !function(n2, e3) {
        "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (n2 = "undefined" != typeof globalThis ? globalThis : n2 || self).dayjs_plugin_localeData = e3();
      }(exports, function() {
        "use strict";
        return function(n2, e3, t2) {
          var r2 = e3.prototype, o3 = function(n3) {
            return n3 && (n3.indexOf ? n3 : n3.s);
          }, u = function(n3, e4, t3, r3, u2) {
            var i2 = n3.name ? n3 : n3.$locale(), a2 = o3(i2[e4]), s2 = o3(i2[t3]), f = a2 || s2.map(function(n4) {
              return n4.slice(0, r3);
            });
            if (!u2)
              return f;
            var d = i2.weekStart;
            return f.map(function(n4, e5) {
              return f[(e5 + (d || 0)) % 7];
            });
          }, i = function() {
            return t2.Ls[t2.locale()];
          }, a = function(n3, e4) {
            return n3.formats[e4] || function(n4) {
              return n4.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n5, e5, t3) {
                return e5 || t3.slice(1);
              });
            }(n3.formats[e4.toUpperCase()]);
          }, s = function() {
            var n3 = this;
            return { months: function(e4) {
              return e4 ? e4.format("MMMM") : u(n3, "months");
            }, monthsShort: function(e4) {
              return e4 ? e4.format("MMM") : u(n3, "monthsShort", "months", 3);
            }, firstDayOfWeek: function() {
              return n3.$locale().weekStart || 0;
            }, weekdays: function(e4) {
              return e4 ? e4.format("dddd") : u(n3, "weekdays");
            }, weekdaysMin: function(e4) {
              return e4 ? e4.format("dd") : u(n3, "weekdaysMin", "weekdays", 2);
            }, weekdaysShort: function(e4) {
              return e4 ? e4.format("ddd") : u(n3, "weekdaysShort", "weekdays", 3);
            }, longDateFormat: function(e4) {
              return a(n3.$locale(), e4);
            }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
          };
          r2.localeData = function() {
            return s.bind(this)();
          }, t2.localeData = function() {
            var n3 = i();
            return { firstDayOfWeek: function() {
              return n3.weekStart || 0;
            }, weekdays: function() {
              return t2.weekdays();
            }, weekdaysShort: function() {
              return t2.weekdaysShort();
            }, weekdaysMin: function() {
              return t2.weekdaysMin();
            }, months: function() {
              return t2.months();
            }, monthsShort: function() {
              return t2.monthsShort();
            }, longDateFormat: function(e4) {
              return a(n3, e4);
            }, meridiem: n3.meridiem, ordinal: n3.ordinal };
          }, t2.months = function() {
            return u(i(), "months");
          }, t2.monthsShort = function() {
            return u(i(), "monthsShort", "months", 3);
          }, t2.weekdays = function(n3) {
            return u(i(), "weekdays", null, null, n3);
          }, t2.weekdaysShort = function(n3) {
            return u(i(), "weekdaysShort", "weekdays", 3, n3);
          }, t2.weekdaysMin = function(n3) {
            return u(i(), "weekdaysMin", "weekdays", 2, n3);
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/weekOfYear.js
  var require_weekOfYear = __commonJS({
    "node_modules/dayjs/plugin/weekOfYear.js"(exports, module2) {
      !function(e3, t2) {
        "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_weekOfYear = t2();
      }(exports, function() {
        "use strict";
        var e3 = "week", t2 = "year";
        return function(i, n2, r2) {
          var f = n2.prototype;
          f.week = function(i2) {
            if (void 0 === i2 && (i2 = null), null !== i2)
              return this.add(7 * (i2 - this.week()), "day");
            var n3 = this.$locale().yearStart || 1;
            if (11 === this.month() && this.date() > 25) {
              var f2 = r2(this).startOf(t2).add(1, t2).date(n3), s = r2(this).endOf(e3);
              if (f2.isBefore(s))
                return 1;
            }
            var a = r2(this).startOf(t2).date(n3).startOf(e3).subtract(1, "millisecond"), o3 = this.diff(a, e3, true);
            return o3 < 0 ? r2(this).startOf("week").week() : Math.ceil(o3);
          }, f.weeks = function(e4) {
            return void 0 === e4 && (e4 = null), this.week(e4);
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/weekYear.js
  var require_weekYear = __commonJS({
    "node_modules/dayjs/plugin/weekYear.js"(exports, module2) {
      !function(e3, t2) {
        "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_weekYear = t2();
      }(exports, function() {
        "use strict";
        return function(e3, t2) {
          t2.prototype.weekYear = function() {
            var e4 = this.month(), t3 = this.week(), n2 = this.year();
            return 1 === t3 && 11 === e4 ? n2 + 1 : 0 === e4 && t3 >= 52 ? n2 - 1 : n2;
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/advancedFormat.js
  var require_advancedFormat = __commonJS({
    "node_modules/dayjs/plugin/advancedFormat.js"(exports, module2) {
      !function(e3, t2) {
        "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_advancedFormat = t2();
      }(exports, function() {
        "use strict";
        return function(e3, t2) {
          var r2 = t2.prototype, n2 = r2.format;
          r2.format = function(e4) {
            var t3 = this, r3 = this.$locale();
            if (!this.isValid())
              return n2.bind(this)(e4);
            var s = this.$utils(), a = (e4 || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function(e5) {
              switch (e5) {
                case "Q":
                  return Math.ceil((t3.$M + 1) / 3);
                case "Do":
                  return r3.ordinal(t3.$D);
                case "gggg":
                  return t3.weekYear();
                case "GGGG":
                  return t3.isoWeekYear();
                case "wo":
                  return r3.ordinal(t3.week(), "W");
                case "w":
                case "ww":
                  return s.s(t3.week(), "w" === e5 ? 1 : 2, "0");
                case "W":
                case "WW":
                  return s.s(t3.isoWeek(), "W" === e5 ? 1 : 2, "0");
                case "k":
                case "kk":
                  return s.s(String(0 === t3.$H ? 24 : t3.$H), "k" === e5 ? 1 : 2, "0");
                case "X":
                  return Math.floor(t3.$d.getTime() / 1e3);
                case "x":
                  return t3.$d.getTime();
                case "z":
                  return "[" + t3.offsetName() + "]";
                case "zzz":
                  return "[" + t3.offsetName("long") + "]";
                default:
                  return e5;
              }
            });
            return n2.bind(this)(a);
          };
        };
      });
    }
  });

  // node_modules/dayjs/plugin/customParseFormat.js
  var require_customParseFormat = __commonJS({
    "node_modules/dayjs/plugin/customParseFormat.js"(exports, module2) {
      !function(e3, t2) {
        "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_customParseFormat = t2();
      }(exports, function() {
        "use strict";
        var e3 = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, t2 = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n2 = /\d\d/, r2 = /\d\d?/, i = /\d*[^-_:/,()\s\d]+/, o3 = {}, s = function(e4) {
          return (e4 = +e4) + (e4 > 68 ? 1900 : 2e3);
        };
        var a = function(e4) {
          return function(t3) {
            this[e4] = +t3;
          };
        }, f = [/[+-]\d\d:?(\d\d)?|Z/, function(e4) {
          (this.zone || (this.zone = {})).offset = function(e5) {
            if (!e5)
              return 0;
            if ("Z" === e5)
              return 0;
            var t3 = e5.match(/([+-]|\d\d)/g), n3 = 60 * t3[1] + (+t3[2] || 0);
            return 0 === n3 ? 0 : "+" === t3[0] ? -n3 : n3;
          }(e4);
        }], h = function(e4) {
          var t3 = o3[e4];
          return t3 && (t3.indexOf ? t3 : t3.s.concat(t3.f));
        }, u = function(e4, t3) {
          var n3, r3 = o3.meridiem;
          if (r3) {
            for (var i2 = 1; i2 <= 24; i2 += 1)
              if (e4.indexOf(r3(i2, 0, t3)) > -1) {
                n3 = i2 > 12;
                break;
              }
          } else
            n3 = e4 === (t3 ? "pm" : "PM");
          return n3;
        }, d = { A: [i, function(e4) {
          this.afternoon = u(e4, false);
        }], a: [i, function(e4) {
          this.afternoon = u(e4, true);
        }], S: [/\d/, function(e4) {
          this.milliseconds = 100 * +e4;
        }], SS: [n2, function(e4) {
          this.milliseconds = 10 * +e4;
        }], SSS: [/\d{3}/, function(e4) {
          this.milliseconds = +e4;
        }], s: [r2, a("seconds")], ss: [r2, a("seconds")], m: [r2, a("minutes")], mm: [r2, a("minutes")], H: [r2, a("hours")], h: [r2, a("hours")], HH: [r2, a("hours")], hh: [r2, a("hours")], D: [r2, a("day")], DD: [n2, a("day")], Do: [i, function(e4) {
          var t3 = o3.ordinal, n3 = e4.match(/\d+/);
          if (this.day = n3[0], t3)
            for (var r3 = 1; r3 <= 31; r3 += 1)
              t3(r3).replace(/\[|\]/g, "") === e4 && (this.day = r3);
        }], M: [r2, a("month")], MM: [n2, a("month")], MMM: [i, function(e4) {
          var t3 = h("months"), n3 = (h("monthsShort") || t3.map(function(e5) {
            return e5.slice(0, 3);
          })).indexOf(e4) + 1;
          if (n3 < 1)
            throw new Error();
          this.month = n3 % 12 || n3;
        }], MMMM: [i, function(e4) {
          var t3 = h("months").indexOf(e4) + 1;
          if (t3 < 1)
            throw new Error();
          this.month = t3 % 12 || t3;
        }], Y: [/[+-]?\d+/, a("year")], YY: [n2, function(e4) {
          this.year = s(e4);
        }], YYYY: [/\d{4}/, a("year")], Z: f, ZZ: f };
        function c(n3) {
          var r3, i2;
          r3 = n3, i2 = o3 && o3.formats;
          for (var s2 = (n3 = r3.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t3, n4, r4) {
            var o4 = r4 && r4.toUpperCase();
            return n4 || i2[r4] || e3[r4] || i2[o4].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e4, t4, n5) {
              return t4 || n5.slice(1);
            });
          })).match(t2), a2 = s2.length, f2 = 0; f2 < a2; f2 += 1) {
            var h2 = s2[f2], u2 = d[h2], c2 = u2 && u2[0], l2 = u2 && u2[1];
            s2[f2] = l2 ? { regex: c2, parser: l2 } : h2.replace(/^\[|\]$/g, "");
          }
          return function(e4) {
            for (var t3 = {}, n4 = 0, r4 = 0; n4 < a2; n4 += 1) {
              var i3 = s2[n4];
              if ("string" == typeof i3)
                r4 += i3.length;
              else {
                var o4 = i3.regex, f3 = i3.parser, h3 = e4.slice(r4), u3 = o4.exec(h3)[0];
                f3.call(t3, u3), e4 = e4.replace(u3, "");
              }
            }
            return function(e5) {
              var t4 = e5.afternoon;
              if (void 0 !== t4) {
                var n5 = e5.hours;
                t4 ? n5 < 12 && (e5.hours += 12) : 12 === n5 && (e5.hours = 0), delete e5.afternoon;
              }
            }(t3), t3;
          };
        }
        return function(e4, t3, n3) {
          n3.p.customParseFormat = true, e4 && e4.parseTwoDigitYear && (s = e4.parseTwoDigitYear);
          var r3 = t3.prototype, i2 = r3.parse;
          r3.parse = function(e5) {
            var t4 = e5.date, r4 = e5.utc, s2 = e5.args;
            this.$u = r4;
            var a2 = s2[1];
            if ("string" == typeof a2) {
              var f2 = true === s2[2], h2 = true === s2[3], u2 = f2 || h2, d2 = s2[2];
              h2 && (d2 = s2[2]), o3 = this.$locale(), !f2 && d2 && (o3 = n3.Ls[d2]), this.$d = function(e6, t5, n4) {
                try {
                  if (["x", "X"].indexOf(t5) > -1)
                    return new Date(("X" === t5 ? 1e3 : 1) * e6);
                  var r5 = c(t5)(e6), i3 = r5.year, o4 = r5.month, s3 = r5.day, a3 = r5.hours, f3 = r5.minutes, h3 = r5.seconds, u3 = r5.milliseconds, d3 = r5.zone, l3 = /* @__PURE__ */ new Date(), m2 = s3 || (i3 || o4 ? 1 : l3.getDate()), M2 = i3 || l3.getFullYear(), Y = 0;
                  i3 && !o4 || (Y = o4 > 0 ? o4 - 1 : l3.getMonth());
                  var p = a3 || 0, v = f3 || 0, D = h3 || 0, g = u3 || 0;
                  return d3 ? new Date(Date.UTC(M2, Y, m2, p, v, D, g + 60 * d3.offset * 1e3)) : n4 ? new Date(Date.UTC(M2, Y, m2, p, v, D, g)) : new Date(M2, Y, m2, p, v, D, g);
                } catch (e7) {
                  return /* @__PURE__ */ new Date("");
                }
              }(t4, a2, r4), this.init(), d2 && true !== d2 && (this.$L = this.locale(d2).$L), u2 && t4 != this.format(a2) && (this.$d = /* @__PURE__ */ new Date("")), o3 = {};
            } else if (a2 instanceof Array)
              for (var l2 = a2.length, m = 1; m <= l2; m += 1) {
                s2[1] = a2[m - 1];
                var M = n3.apply(this, s2);
                if (M.isValid()) {
                  this.$d = M.$d, this.$L = M.$L, this.init();
                  break;
                }
                m === l2 && (this.$d = /* @__PURE__ */ new Date(""));
              }
            else
              i2.call(this, e5);
          };
        };
      });
    }
  });

  // node_modules/toggle-selection/index.js
  var require_toggle_selection = __commonJS({
    "node_modules/toggle-selection/index.js"(exports, module2) {
      module2.exports = function() {
        var selection = document.getSelection();
        if (!selection.rangeCount) {
          return function() {
          };
        }
        var active = document.activeElement;
        var ranges = [];
        for (var i = 0; i < selection.rangeCount; i++) {
          ranges.push(selection.getRangeAt(i));
        }
        switch (active.tagName.toUpperCase()) {
          case "INPUT":
          case "TEXTAREA":
            active.blur();
            break;
          default:
            active = null;
            break;
        }
        selection.removeAllRanges();
        return function() {
          selection.type === "Caret" && selection.removeAllRanges();
          if (!selection.rangeCount) {
            ranges.forEach(function(range3) {
              selection.addRange(range3);
            });
          }
          active && active.focus();
        };
      };
    }
  });

  // node_modules/copy-to-clipboard/index.js
  var require_copy_to_clipboard = __commonJS({
    "node_modules/copy-to-clipboard/index.js"(exports, module2) {
      "use strict";
      var deselectCurrent = require_toggle_selection();
      var clipboardToIE11Formatting = {
        "text/plain": "Text",
        "text/html": "Url",
        "default": "Text"
      };
      var defaultMessage = "Copy to clipboard: #{key}, Enter";
      function format3(message) {
        var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
        return message.replace(/#{\s*key\s*}/g, copyKey);
      }
      function copy2(text, options) {
        var debug, message, reselectPrevious, range3, selection, mark, success = false;
        if (!options) {
          options = {};
        }
        debug = options.debug || false;
        try {
          reselectPrevious = deselectCurrent();
          range3 = document.createRange();
          selection = document.getSelection();
          mark = document.createElement("span");
          mark.textContent = text;
          mark.ariaHidden = "true";
          mark.style.all = "unset";
          mark.style.position = "fixed";
          mark.style.top = 0;
          mark.style.clip = "rect(0, 0, 0, 0)";
          mark.style.whiteSpace = "pre";
          mark.style.webkitUserSelect = "text";
          mark.style.MozUserSelect = "text";
          mark.style.msUserSelect = "text";
          mark.style.userSelect = "text";
          mark.addEventListener("copy", function(e3) {
            e3.stopPropagation();
            if (options.format) {
              e3.preventDefault();
              if (typeof e3.clipboardData === "undefined") {
                debug && console.warn("unable to use e.clipboardData");
                debug && console.warn("trying IE specific stuff");
                window.clipboardData.clearData();
                var format4 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                window.clipboardData.setData(format4, text);
              } else {
                e3.clipboardData.clearData();
                e3.clipboardData.setData(options.format, text);
              }
            }
            if (options.onCopy) {
              e3.preventDefault();
              options.onCopy(e3.clipboardData);
            }
          });
          document.body.appendChild(mark);
          range3.selectNodeContents(mark);
          selection.addRange(range3);
          var successful = document.execCommand("copy");
          if (!successful) {
            throw new Error("copy command was unsuccessful");
          }
          success = true;
        } catch (err) {
          debug && console.error("unable to copy using execCommand: ", err);
          debug && console.warn("trying IE specific stuff");
          try {
            window.clipboardData.setData(options.format || "text", text);
            options.onCopy && options.onCopy(window.clipboardData);
            success = true;
          } catch (err2) {
            debug && console.error("unable to copy using clipboardData: ", err2);
            debug && console.error("falling back to prompt");
            message = format3("message" in options ? options.message : defaultMessage);
            window.prompt(message, text);
          }
        } finally {
          if (selection) {
            if (typeof selection.removeRange == "function") {
              selection.removeRange(range3);
            } else {
              selection.removeAllRanges();
            }
          }
          if (mark) {
            document.body.removeChild(mark);
          }
          reselectPrevious();
        }
        return success;
      }
      module2.exports = copy2;
    }
  });

  // node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js
  (function() {
    if (window.Reflect === void 0 || window.customElements === void 0 || window.customElements.polyfillWrapFlushCallback) {
      return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
      HTMLElement: function HTMLElement2() {
        return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
      }
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
  })();
  (function(prototype) {
    if (typeof prototype.requestSubmit == "function")
      return;
    prototype.requestSubmit = function(submitter) {
      if (submitter) {
        validateSubmitter(submitter, this);
        submitter.click();
      } else {
        submitter = document.createElement("input");
        submitter.type = "submit";
        submitter.hidden = true;
        this.appendChild(submitter);
        submitter.click();
        this.removeChild(submitter);
      }
    };
    function validateSubmitter(submitter, form) {
      submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
      submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
      submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function raise(errorConstructor, message, name) {
      throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
    }
  })(HTMLFormElement.prototype);
  var submittersByForm = /* @__PURE__ */ new WeakMap();
  function findSubmitterFromClickTarget(target) {
    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
  }
  function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
      submittersByForm.set(submitter.form, submitter);
    }
  }
  (function() {
    if ("submitter" in Event.prototype)
      return;
    let prototype = window.Event.prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
      prototype = window.SubmitEvent.prototype;
    } else if ("SubmitEvent" in window) {
      return;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
      get() {
        if (this.type == "submit" && this.target instanceof HTMLFormElement) {
          return submittersByForm.get(this.target);
        }
      }
    });
  })();
  var FrameLoadingStyle;
  (function(FrameLoadingStyle2) {
    FrameLoadingStyle2["eager"] = "eager";
    FrameLoadingStyle2["lazy"] = "lazy";
  })(FrameLoadingStyle || (FrameLoadingStyle = {}));
  var FrameElement = class _FrameElement extends HTMLElement {
    static get observedAttributes() {
      return ["disabled", "complete", "loading", "src"];
    }
    constructor() {
      super();
      this.loaded = Promise.resolve();
      this.delegate = new _FrameElement.delegateConstructor(this);
    }
    connectedCallback() {
      this.delegate.connect();
    }
    disconnectedCallback() {
      this.delegate.disconnect();
    }
    reload() {
      return this.delegate.sourceURLReloaded();
    }
    attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "complete") {
        this.delegate.completeChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
    get loading() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    set disabled(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
    get autoscroll() {
      return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
    get complete() {
      return !this.delegate.isLoading;
    }
    get isActive() {
      return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
      var _a, _b;
      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  };
  function frameLoadingStyleFromString(style2) {
    switch (style2.toLowerCase()) {
      case "lazy":
        return FrameLoadingStyle.lazy;
      default:
        return FrameLoadingStyle.eager;
    }
  }
  function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
  }
  function getAnchor(url2) {
    let anchorMatch;
    if (url2.hash) {
      return url2.hash.slice(1);
    } else if (anchorMatch = url2.href.match(/#(.*)$/)) {
      return anchorMatch[1];
    }
  }
  function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
  }
  function getExtension(url2) {
    return (getLastPathComponent(url2).match(/\.[^.]*$/) || [])[0] || "";
  }
  function isHTML(url2) {
    return !!getExtension(url2).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
  }
  function isPrefixedBy(baseURL, url2) {
    const prefix = getPrefix(url2);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
  }
  function locationIsVisitable(location2, rootLocation) {
    return isPrefixedBy(location2, rootLocation) && isHTML(location2);
  }
  function getRequestURL(url2) {
    const anchor = getAnchor(url2);
    return anchor != null ? url2.href.slice(0, -(anchor.length + 1)) : url2.href;
  }
  function toCacheKey(url2) {
    return getRequestURL(url2);
  }
  function urlsAreEqual(left, right) {
    return expandURL(left).href == expandURL(right).href;
  }
  function getPathComponents(url2) {
    return url2.pathname.split("/").slice(1);
  }
  function getLastPathComponent(url2) {
    return getPathComponents(url2).slice(-1)[0];
  }
  function getPrefix(url2) {
    return addTrailingSlash(url2.origin + url2.pathname);
  }
  function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
  }
  var FetchResponse = class {
    constructor(response) {
      this.response = response;
    }
    get succeeded() {
      return this.response.ok;
    }
    get failed() {
      return !this.succeeded;
    }
    get clientError() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
      return this.response.redirected;
    }
    get location() {
      return expandURL(this.response.url);
    }
    get isHTML() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
      return this.response.status;
    }
    get contentType() {
      return this.header("Content-Type");
    }
    get responseText() {
      return this.response.clone().text();
    }
    get responseHTML() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(void 0);
      }
    }
    header(name) {
      return this.response.headers.get(name);
    }
  };
  function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
      return element;
    } else {
      const createdScriptElement = document.createElement("script");
      const cspNonce = getMetaContent("csp-nonce");
      if (cspNonce) {
        createdScriptElement.nonce = cspNonce;
      }
      createdScriptElement.textContent = element.textContent;
      createdScriptElement.async = false;
      copyElementAttributes(createdScriptElement, element);
      return createdScriptElement;
    }
  }
  function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
      destinationElement.setAttribute(name, value);
    }
  }
  function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
  }
  function dispatch(eventName, { target, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
      cancelable,
      bubbles: true,
      composed: true,
      detail
    });
    if (target && target.isConnected) {
      target.dispatchEvent(event);
    } else {
      document.documentElement.dispatchEvent(event);
    }
    return event;
  }
  function nextAnimationFrame() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
  }
  function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
  }
  function nextMicrotask() {
    return Promise.resolve();
  }
  function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
  }
  function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match2 = lines[0].match(/^\s+/);
    const indent = match2 ? match2[0].length : 0;
    return lines.map((line2) => line2.slice(indent)).join("\n");
  }
  function interpolate(strings, values) {
    return strings.reduce((result, string3, i) => {
      const value = values[i] == void 0 ? "" : values[i];
      return result + string3 + value;
    }, "");
  }
  function uuid() {
    return Array.from({ length: 36 }).map((_, i) => {
      if (i == 8 || i == 13 || i == 18 || i == 23) {
        return "-";
      } else if (i == 14) {
        return "4";
      } else if (i == 19) {
        return (Math.floor(Math.random() * 4) + 8).toString(16);
      } else {
        return Math.floor(Math.random() * 15).toString(16);
      }
    }).join("");
  }
  function getAttribute(attributeName, ...elements) {
    for (const value of elements.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
      if (typeof value == "string")
        return value;
    }
    return null;
  }
  function hasAttribute(attributeName, ...elements) {
    return elements.some((element) => element && element.hasAttribute(attributeName));
  }
  function markAsBusy(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.setAttribute("busy", "");
      }
      element.setAttribute("aria-busy", "true");
    }
  }
  function clearBusyState(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.removeAttribute("busy");
      }
      element.removeAttribute("aria-busy");
    }
  }
  function waitForLoad(element, timeoutInMilliseconds = 2e3) {
    return new Promise((resolve) => {
      const onComplete = () => {
        element.removeEventListener("error", onComplete);
        element.removeEventListener("load", onComplete);
        resolve();
      };
      element.addEventListener("load", onComplete, { once: true });
      element.addEventListener("error", onComplete, { once: true });
      setTimeout(resolve, timeoutInMilliseconds);
    });
  }
  function getHistoryMethodForAction(action) {
    switch (action) {
      case "replace":
        return history.replaceState;
      case "advance":
      case "restore":
        return history.pushState;
    }
  }
  function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
  }
  function getVisitAction(...elements) {
    const action = getAttribute("data-turbo-action", ...elements);
    return isAction(action) ? action : null;
  }
  function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
  }
  function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
  }
  function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
      element = document.createElement("meta");
      element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
  }
  function findClosestRecursively(element, selector) {
    var _a;
    if (element instanceof Element) {
      return element.closest(selector) || findClosestRecursively(element.assignedSlot || ((_a = element.getRootNode()) === null || _a === void 0 ? void 0 : _a.host), selector);
    }
  }
  var FetchMethod;
  (function(FetchMethod2) {
    FetchMethod2[FetchMethod2["get"] = 0] = "get";
    FetchMethod2[FetchMethod2["post"] = 1] = "post";
    FetchMethod2[FetchMethod2["put"] = 2] = "put";
    FetchMethod2[FetchMethod2["patch"] = 3] = "patch";
    FetchMethod2[FetchMethod2["delete"] = 4] = "delete";
  })(FetchMethod || (FetchMethod = {}));
  function fetchMethodFromString(method4) {
    switch (method4.toLowerCase()) {
      case "get":
        return FetchMethod.get;
      case "post":
        return FetchMethod.post;
      case "put":
        return FetchMethod.put;
      case "patch":
        return FetchMethod.patch;
      case "delete":
        return FetchMethod.delete;
    }
  }
  var FetchRequest = class {
    constructor(delegate, method4, location2, body = new URLSearchParams(), target = null) {
      this.abortController = new AbortController();
      this.resolveRequestPromise = (_value) => {
      };
      this.delegate = delegate;
      this.method = method4;
      this.headers = this.defaultHeaders;
      this.body = body;
      this.url = location2;
      this.target = target;
    }
    get location() {
      return this.url;
    }
    get params() {
      return this.url.searchParams;
    }
    get entries() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
      this.abortController.abort();
    }
    async perform() {
      const { fetchOptions } = this;
      this.delegate.prepareRequest(this);
      await this.allowRequestToBeIntercepted(fetchOptions);
      try {
        this.delegate.requestStarted(this);
        const response = await fetch(this.url.href, fetchOptions);
        return await this.receive(response);
      } catch (error) {
        if (error.name !== "AbortError") {
          if (this.willDelegateErrorHandling(error)) {
            this.delegate.requestErrored(this, error);
          }
          throw error;
        }
      } finally {
        this.delegate.requestFinished(this);
      }
    }
    async receive(response) {
      const fetchResponse = new FetchResponse(response);
      const event = dispatch("turbo:before-fetch-response", {
        cancelable: true,
        detail: { fetchResponse },
        target: this.target
      });
      if (event.defaultPrevented) {
        this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
      } else if (fetchResponse.succeeded) {
        this.delegate.requestSucceededWithResponse(this, fetchResponse);
      } else {
        this.delegate.requestFailedWithResponse(this, fetchResponse);
      }
      return fetchResponse;
    }
    get fetchOptions() {
      var _a;
      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isSafe ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
    get defaultHeaders() {
      return {
        Accept: "text/html, application/xhtml+xml"
      };
    }
    get isSafe() {
      return this.method === FetchMethod.get;
    }
    get abortSignal() {
      return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
      this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    async allowRequestToBeIntercepted(fetchOptions) {
      const requestInterception = new Promise((resolve) => this.resolveRequestPromise = resolve);
      const event = dispatch("turbo:before-fetch-request", {
        cancelable: true,
        detail: {
          fetchOptions,
          url: this.url,
          resume: this.resolveRequestPromise
        },
        target: this.target
      });
      if (event.defaultPrevented)
        await requestInterception;
    }
    willDelegateErrorHandling(error) {
      const event = dispatch("turbo:fetch-request-error", {
        target: this.target,
        cancelable: true,
        detail: { request: this, error }
      });
      return !event.defaultPrevented;
    }
  };
  var AppearanceObserver = class {
    constructor(delegate, element) {
      this.started = false;
      this.intersect = (entries) => {
        const lastEntry = entries.slice(-1)[0];
        if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
          this.delegate.elementAppearedInViewport(this.element);
        }
      };
      this.delegate = delegate;
      this.element = element;
      this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  };
  var StreamMessage = class {
    static wrap(message) {
      if (typeof message == "string") {
        return new this(createDocumentFragment(message));
      } else {
        return message;
      }
    }
    constructor(fragment) {
      this.fragment = importStreamElements(fragment);
    }
  };
  StreamMessage.contentType = "text/vnd.turbo-stream.html";
  function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
      const streamElement = document.importNode(element, true);
      for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
        inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
      }
      element.replaceWith(streamElement);
    }
    return fragment;
  }
  var FormSubmissionState;
  (function(FormSubmissionState2) {
    FormSubmissionState2[FormSubmissionState2["initialized"] = 0] = "initialized";
    FormSubmissionState2[FormSubmissionState2["requesting"] = 1] = "requesting";
    FormSubmissionState2[FormSubmissionState2["waiting"] = 2] = "waiting";
    FormSubmissionState2[FormSubmissionState2["receiving"] = 3] = "receiving";
    FormSubmissionState2[FormSubmissionState2["stopping"] = 4] = "stopping";
    FormSubmissionState2[FormSubmissionState2["stopped"] = 5] = "stopped";
  })(FormSubmissionState || (FormSubmissionState = {}));
  var FormEnctype;
  (function(FormEnctype2) {
    FormEnctype2["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype2["multipart"] = "multipart/form-data";
    FormEnctype2["plain"] = "text/plain";
  })(FormEnctype || (FormEnctype = {}));
  function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
      case FormEnctype.multipart:
        return FormEnctype.multipart;
      case FormEnctype.plain:
        return FormEnctype.plain;
      default:
        return FormEnctype.urlEncoded;
    }
  }
  var FormSubmission = class _FormSubmission {
    static confirmMethod(message, _element, _submitter) {
      return Promise.resolve(confirm(message));
    }
    constructor(delegate, formElement, submitter, mustRedirect = false) {
      this.state = FormSubmissionState.initialized;
      this.delegate = delegate;
      this.formElement = formElement;
      this.submitter = submitter;
      this.formData = buildFormData(formElement, submitter);
      this.location = expandURL(this.action);
      if (this.method == FetchMethod.get) {
        mergeFormDataEntries(this.location, [...this.body.entries()]);
      }
      this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
      this.mustRedirect = mustRedirect;
    }
    get method() {
      var _a;
      const method4 = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method4.toLowerCase()) || FetchMethod.get;
    }
    get action() {
      var _a;
      const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
      if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
        return this.submitter.getAttribute("formaction") || "";
      } else {
        return this.formElement.getAttribute("action") || formElementAction || "";
      }
    }
    get body() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
    get enctype() {
      var _a;
      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isSafe() {
      return this.fetchRequest.isSafe;
    }
    get stringFormData() {
      return [...this.formData].reduce((entries, [name, value]) => {
        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
    async start() {
      const { initialized, requesting } = FormSubmissionState;
      const confirmationMessage = getAttribute("data-turbo-confirm", this.submitter, this.formElement);
      if (typeof confirmationMessage === "string") {
        const answer = await _FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
        if (!answer) {
          return;
        }
      }
      if (this.state == initialized) {
        this.state = requesting;
        return this.fetchRequest.perform();
      }
    }
    stop() {
      const { stopping, stopped } = FormSubmissionState;
      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
    prepareRequest(request) {
      if (!request.isSafe) {
        const token2 = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
        if (token2) {
          request.headers["X-CSRF-Token"] = token2;
        }
      }
      if (this.requestAcceptsTurboStreamResponse(request)) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      var _a;
      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      this.setSubmitsWith();
      dispatch("turbo:submit-start", {
        target: this.formElement,
        detail: { formSubmission: this }
      });
      this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
      this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        const error = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = { success: true, fetchResponse: response };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
    requestFailedWithResponse(request, response) {
      this.result = { success: false, fetchResponse: response };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error) {
      this.result = { success: false, error };
      this.delegate.formSubmissionErrored(this, error);
    }
    requestFinished(_request) {
      var _a;
      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      this.resetSubmitterText();
      dispatch("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({ formSubmission: this }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
    setSubmitsWith() {
      if (!this.submitter || !this.submitsWith)
        return;
      if (this.submitter.matches("button")) {
        this.originalSubmitText = this.submitter.innerHTML;
        this.submitter.innerHTML = this.submitsWith;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        this.originalSubmitText = input.value;
        input.value = this.submitsWith;
      }
    }
    resetSubmitterText() {
      if (!this.submitter || !this.originalSubmitText)
        return;
      if (this.submitter.matches("button")) {
        this.submitter.innerHTML = this.originalSubmitText;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        input.value = this.originalSubmitText;
      }
    }
    requestMustRedirect(request) {
      return !request.isSafe && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
      return !request.isSafe || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
    get submitsWith() {
      var _a;
      return (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("data-turbo-submits-with");
    }
  };
  function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
      formData.append(name, value || "");
    }
    return formData;
  }
  function getCookieValue(cookieName) {
    if (cookieName != null) {
      const cookies = document.cookie ? document.cookie.split("; ") : [];
      const cookie = cookies.find((cookie2) => cookie2.startsWith(cookieName));
      if (cookie) {
        const value = cookie.split("=").slice(1).join("=");
        return value ? decodeURIComponent(value) : void 0;
      }
    }
  }
  function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
  }
  function mergeFormDataEntries(url2, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
      if (value instanceof File)
        continue;
      searchParams.append(name, value);
    }
    url2.search = searchParams.toString();
    return url2;
  }
  var Snapshot = class {
    constructor(element) {
      this.element = element;
    }
    get activeElement() {
      return this.element.ownerDocument.activeElement;
    }
    get children() {
      return [...this.element.children];
    }
    hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
      return this.element.isConnected;
    }
    get firstAutofocusableElement() {
      const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
      for (const element of this.element.querySelectorAll("[autofocus]")) {
        if (element.closest(inertDisabledOrHidden) == null)
          return element;
        else
          continue;
      }
      return null;
    }
    get permanentElements() {
      return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id) {
      return getPermanentElementById(this.element, id);
    }
    getPermanentElementMapForSnapshot(snapshot) {
      const permanentElementMap = {};
      for (const currentPermanentElement of this.permanentElements) {
        const { id } = currentPermanentElement;
        const newPermanentElement = snapshot.getPermanentElementById(id);
        if (newPermanentElement) {
          permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
        }
      }
      return permanentElementMap;
    }
  };
  function getPermanentElementById(node2, id) {
    return node2.querySelector(`#${id}[data-turbo-permanent]`);
  }
  function queryPermanentElementsAll(node2) {
    return node2.querySelectorAll("[id][data-turbo-permanent]");
  }
  var FormSubmitObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.submitCaptured = () => {
        this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
        this.eventTarget.addEventListener("submit", this.submitBubbled, false);
      };
      this.submitBubbled = (event) => {
        if (!event.defaultPrevented) {
          const form = event.target instanceof HTMLFormElement ? event.target : void 0;
          const submitter = event.submitter || void 0;
          if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();
            event.stopImmediatePropagation();
            this.delegate.formSubmitted(form, submitter);
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  };
  function submissionDoesNotDismissDialog(form, submitter) {
    const method4 = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method4 != "dialog";
  }
  function submissionDoesNotTargetIFrame(form, submitter) {
    if ((submitter === null || submitter === void 0 ? void 0 : submitter.hasAttribute("formtarget")) || form.hasAttribute("target")) {
      const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
      for (const element of document.getElementsByName(target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var View = class {
    constructor(delegate, element) {
      this.resolveRenderPromise = (_value) => {
      };
      this.resolveInterceptionPromise = (_value) => {
      };
      this.delegate = delegate;
      this.element = element;
    }
    scrollToAnchor(anchor) {
      const element = this.snapshot.getElementForAnchor(anchor);
      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({ x: 0, y: 0 });
      }
    }
    scrollToAnchorFromLocation(location2) {
      this.scrollToAnchor(getAnchor(location2));
    }
    scrollToElement(element) {
      element.scrollIntoView();
    }
    focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
    scrollToPosition({ x, y }) {
      this.scrollRoot.scrollTo(x, y);
    }
    scrollToTop() {
      this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
      return window;
    }
    async render(renderer) {
      const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
      if (shouldRender) {
        try {
          this.renderPromise = new Promise((resolve) => this.resolveRenderPromise = resolve);
          this.renderer = renderer;
          await this.prepareToRenderSnapshot(renderer);
          const renderInterception = new Promise((resolve) => this.resolveInterceptionPromise = resolve);
          const options = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
          const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);
          if (!immediateRender)
            await renderInterception;
          await this.renderSnapshot(renderer);
          this.delegate.viewRenderedSnapshot(snapshot, isPreview);
          this.delegate.preloadOnLoadLinksForView(this.element);
          this.finishRenderingSnapshot(renderer);
        } finally {
          delete this.renderer;
          this.resolveRenderPromise(void 0);
          delete this.renderPromise;
        }
      } else {
        this.invalidate(renderer.reloadReason);
      }
    }
    invalidate(reason) {
      this.delegate.viewInvalidated(reason);
    }
    async prepareToRenderSnapshot(renderer) {
      this.markAsPreview(renderer.isPreview);
      await renderer.prepareToRender();
    }
    markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
    async renderSnapshot(renderer) {
      await renderer.render();
    }
    finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  };
  var FrameView = class extends View {
    missing() {
      this.element.innerHTML = `<strong class="turbo-frame-error">Content missing</strong>`;
    }
    get snapshot() {
      return new Snapshot(this.element);
    }
  };
  var LinkInterceptor = class {
    constructor(delegate, element) {
      this.clickBubbled = (event) => {
        if (this.respondsToEventTarget(event.target)) {
          this.clickEvent = event;
        } else {
          delete this.clickEvent;
        }
      };
      this.linkClicked = (event) => {
        if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {
          if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {
            this.clickEvent.preventDefault();
            event.preventDefault();
            this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);
          }
        }
        delete this.clickEvent;
      };
      this.willVisit = (_event) => {
        delete this.clickEvent;
      };
      this.delegate = delegate;
      this.element = element;
    }
    start() {
      this.element.addEventListener("click", this.clickBubbled);
      document.addEventListener("turbo:click", this.linkClicked);
      document.addEventListener("turbo:before-visit", this.willVisit);
    }
    stop() {
      this.element.removeEventListener("click", this.clickBubbled);
      document.removeEventListener("turbo:click", this.linkClicked);
      document.removeEventListener("turbo:before-visit", this.willVisit);
    }
    respondsToEventTarget(target) {
      const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
      return element && element.closest("turbo-frame, html") == this.element;
    }
  };
  var LinkClickObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.clickCaptured = () => {
        this.eventTarget.removeEventListener("click", this.clickBubbled, false);
        this.eventTarget.addEventListener("click", this.clickBubbled, false);
      };
      this.clickBubbled = (event) => {
        if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
          const target = event.composedPath && event.composedPath()[0] || event.target;
          const link = this.findLinkFromClickTarget(target);
          if (link && doesNotTargetIFrame(link)) {
            const location2 = this.getLocationForLink(link);
            if (this.delegate.willFollowLinkToLocation(link, location2, event)) {
              event.preventDefault();
              this.delegate.followedLinkToLocation(link, location2);
            }
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
    clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
    findLinkFromClickTarget(target) {
      return findClosestRecursively(target, "a[href]:not([target^=_]):not([download])");
    }
    getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  };
  function doesNotTargetIFrame(anchor) {
    if (anchor.hasAttribute("target")) {
      for (const element of document.getElementsByName(anchor.target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var FormLinkClickObserver = class {
    constructor(delegate, element) {
      this.delegate = delegate;
      this.linkInterceptor = new LinkClickObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
    }
    stop() {
      this.linkInterceptor.stop();
    }
    willFollowLinkToLocation(link, location2, originalEvent) {
      return this.delegate.willSubmitFormLinkToLocation(link, location2, originalEvent) && link.hasAttribute("data-turbo-method");
    }
    followedLinkToLocation(link, location2) {
      const form = document.createElement("form");
      const type4 = "hidden";
      for (const [name, value] of location2.searchParams) {
        form.append(Object.assign(document.createElement("input"), { type: type4, name, value }));
      }
      const action = Object.assign(location2, { search: "" });
      form.setAttribute("data-turbo", "true");
      form.setAttribute("action", action.href);
      form.setAttribute("hidden", "");
      const method4 = link.getAttribute("data-turbo-method");
      if (method4)
        form.setAttribute("method", method4);
      const turboFrame = link.getAttribute("data-turbo-frame");
      if (turboFrame)
        form.setAttribute("data-turbo-frame", turboFrame);
      const turboAction = getVisitAction(link);
      if (turboAction)
        form.setAttribute("data-turbo-action", turboAction);
      const turboConfirm = link.getAttribute("data-turbo-confirm");
      if (turboConfirm)
        form.setAttribute("data-turbo-confirm", turboConfirm);
      const turboStream = link.hasAttribute("data-turbo-stream");
      if (turboStream)
        form.setAttribute("data-turbo-stream", "");
      this.delegate.submittedFormLinkToLocation(link, location2, form);
      document.body.appendChild(form);
      form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
      requestAnimationFrame(() => form.requestSubmit());
    }
  };
  var Bardo = class {
    static async preservingPermanentElements(delegate, permanentElementMap, callback) {
      const bardo = new this(delegate, permanentElementMap);
      bardo.enter();
      await callback();
      bardo.leave();
    }
    constructor(delegate, permanentElementMap) {
      this.delegate = delegate;
      this.permanentElementMap = permanentElementMap;
    }
    enter() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];
        this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
    leave() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement] = this.permanentElementMap[id];
        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
        this.delegate.leavingBardo(currentPermanentElement);
      }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
      const placeholder = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
      const clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
      const placeholder = this.getPlaceholderById(permanentElement.id);
      placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
    getPlaceholderById(id) {
      return this.placeholders.find((element) => element.content == id);
    }
    get placeholders() {
      return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
  };
  function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
  }
  var Renderer = class {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      this.activeElement = null;
      this.currentSnapshot = currentSnapshot;
      this.newSnapshot = newSnapshot;
      this.isPreview = isPreview;
      this.willRender = willRender;
      this.renderElement = renderElement;
      this.promise = new Promise((resolve, reject) => this.resolvingFunctions = { resolve, reject });
    }
    get shouldRender() {
      return true;
    }
    get reloadReason() {
      return;
    }
    prepareToRender() {
      return;
    }
    finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
    async preservingPermanentElements(callback) {
      await Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
    }
    focusFirstAutofocusableElement() {
      const element = this.connectedSnapshot.firstAutofocusableElement;
      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
    enteringBardo(currentPermanentElement) {
      if (this.activeElement)
        return;
      if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
        this.activeElement = this.currentSnapshot.activeElement;
      }
    }
    leavingBardo(currentPermanentElement) {
      if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
        this.activeElement.focus();
        this.activeElement = null;
      }
    }
    get connectedSnapshot() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
      return this.currentSnapshot.element;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    get permanentElementMap() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  };
  function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
  }
  var FrameRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      var _a;
      const destinationRange = document.createRange();
      destinationRange.selectNodeContents(currentElement);
      destinationRange.deleteContents();
      const frameElement = newElement;
      const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        currentElement.appendChild(sourceRange.extractContents());
      }
    }
    constructor(delegate, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
      this.delegate = delegate;
    }
    get shouldRender() {
      return true;
    }
    async render() {
      await nextAnimationFrame();
      this.preservingPermanentElements(() => {
        this.loadFrameElement();
      });
      this.scrollFrameIntoView();
      await nextAnimationFrame();
      this.focusFirstAutofocusableElement();
      await nextAnimationFrame();
      this.activateScriptElements();
    }
    loadFrameElement() {
      this.delegate.willRenderFrame(this.currentElement, this.newElement);
      this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        const element = this.currentElement.firstElementChild;
        const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
        const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
        if (element) {
          element.scrollIntoView({ block, behavior });
          return true;
        }
      }
      return false;
    }
    activateScriptElements() {
      for (const inertScriptElement of this.newScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    get newScriptElements() {
      return this.currentElement.querySelectorAll("script");
    }
  };
  function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
      return value;
    } else {
      return defaultValue;
    }
  }
  function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
      return value;
    } else {
      return defaultValue;
    }
  }
  var ProgressBar = class _ProgressBar {
    static get defaultCSS() {
      return unindent`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${_ProgressBar.animationDuration}ms ease-out,
          opacity ${_ProgressBar.animationDuration / 2}ms ${_ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    constructor() {
      this.hiding = false;
      this.value = 0;
      this.visible = false;
      this.trickle = () => {
        this.setValue(this.value + Math.random() / 100);
      };
      this.stylesheetElement = this.createStylesheetElement();
      this.progressElement = this.createProgressElement();
      this.installStylesheetElement();
      this.setValue(0);
    }
    show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
    hide() {
      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(() => {
          this.uninstallProgressElement();
          this.stopTrickling();
          this.visible = false;
          this.hiding = false;
        });
      }
    }
    setValue(value) {
      this.value = value;
      this.refresh();
    }
    installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
    fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, _ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
    startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, _ProgressBar.animationDuration);
      }
    }
    stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
    refresh() {
      requestAnimationFrame(() => {
        this.progressElement.style.width = `${10 + this.value * 90}%`;
      });
    }
    createStylesheetElement() {
      const element = document.createElement("style");
      element.type = "text/css";
      element.textContent = _ProgressBar.defaultCSS;
      if (this.cspNonce) {
        element.nonce = this.cspNonce;
      }
      return element;
    }
    createProgressElement() {
      const element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
    get cspNonce() {
      return getMetaContent("csp-nonce");
    }
  };
  ProgressBar.animationDuration = 300;
  var HeadSnapshot = class extends Snapshot {
    constructor() {
      super(...arguments);
      this.detailsByOuterHTML = this.children.filter((element) => !elementIsNoscript(element)).map((element) => elementWithoutNonce(element)).reduce((result, element) => {
        const { outerHTML } = element;
        const details = outerHTML in result ? result[outerHTML] : {
          type: elementType(element),
          tracked: elementIsTracked(element),
          elements: []
        };
        return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
      }, {});
    }
    get trackedElementSignature() {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked).join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML)).map((outerHTML) => this.detailsByOuterHTML[outerHTML]).filter(({ type: type4 }) => type4 == matchedType).map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { type: type4, tracked, elements } = this.detailsByOuterHTML[outerHTML];
        if (type4 == null && !tracked) {
          return [...result, ...elements];
        } else if (elements.length > 1) {
          return [...result, ...elements.slice(1)];
        } else {
          return result;
        }
      }, []);
    }
    getMetaValue(name) {
      const element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { elements: [element] } = this.detailsByOuterHTML[outerHTML];
        return elementIsMetaElementWithName(element, name) ? element : result;
      }, void 0);
    }
  };
  function elementType(element) {
    if (elementIsScript(element)) {
      return "script";
    } else if (elementIsStylesheet(element)) {
      return "stylesheet";
    }
  }
  function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
  }
  function elementIsScript(element) {
    const tagName = element.localName;
    return tagName == "script";
  }
  function elementIsNoscript(element) {
    const tagName = element.localName;
    return tagName == "noscript";
  }
  function elementIsStylesheet(element) {
    const tagName = element.localName;
    return tagName == "style" || tagName == "link" && element.getAttribute("rel") == "stylesheet";
  }
  function elementIsMetaElementWithName(element, name) {
    const tagName = element.localName;
    return tagName == "meta" && element.getAttribute("name") == name;
  }
  function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
      element.setAttribute("nonce", "");
    }
    return element;
  }
  var PageSnapshot = class _PageSnapshot extends Snapshot {
    static fromHTMLString(html = "") {
      return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
      return new this(body, new HeadSnapshot(head));
    }
    constructor(element, headSnapshot) {
      super(element);
      this.headSnapshot = headSnapshot;
    }
    clone() {
      const clonedElement = this.element.cloneNode(true);
      const selectElements = this.element.querySelectorAll("select");
      const clonedSelectElements = clonedElement.querySelectorAll("select");
      for (const [index2, source] of selectElements.entries()) {
        const clone = clonedSelectElements[index2];
        for (const option of clone.selectedOptions)
          option.selected = false;
        for (const option of source.selectedOptions)
          clone.options[option.index].selected = true;
      }
      for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
        clonedPasswordInput.value = "";
      }
      return new _PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
      return this.headSnapshot.element;
    }
    get rootLocation() {
      var _a;
      const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    get cacheControlValue() {
      return this.getSetting("cache-control");
    }
    get isPreviewable() {
      return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
      return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
      return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
      return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
  };
  var TimingMetric;
  (function(TimingMetric2) {
    TimingMetric2["visitStart"] = "visitStart";
    TimingMetric2["requestStart"] = "requestStart";
    TimingMetric2["requestEnd"] = "requestEnd";
    TimingMetric2["visitEnd"] = "visitEnd";
  })(TimingMetric || (TimingMetric = {}));
  var VisitState;
  (function(VisitState2) {
    VisitState2["initialized"] = "initialized";
    VisitState2["started"] = "started";
    VisitState2["canceled"] = "canceled";
    VisitState2["failed"] = "failed";
    VisitState2["completed"] = "completed";
  })(VisitState || (VisitState = {}));
  var defaultOptions = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => {
    },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false
  };
  var SystemStatusCode;
  (function(SystemStatusCode2) {
    SystemStatusCode2[SystemStatusCode2["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode2[SystemStatusCode2["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode2[SystemStatusCode2["contentTypeMismatch"] = -2] = "contentTypeMismatch";
  })(SystemStatusCode || (SystemStatusCode = {}));
  var Visit = class {
    constructor(delegate, location2, restorationIdentifier, options = {}) {
      this.identifier = uuid();
      this.timingMetrics = {};
      this.followedRedirect = false;
      this.historyChanged = false;
      this.scrolled = false;
      this.shouldCacheSnapshot = true;
      this.acceptsStreamResponse = false;
      this.snapshotCached = false;
      this.state = VisitState.initialized;
      this.delegate = delegate;
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier || uuid();
      const { action, historyChanged, referrer, snapshot, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse } = Object.assign(Object.assign({}, defaultOptions), options);
      this.action = action;
      this.historyChanged = historyChanged;
      this.referrer = referrer;
      this.snapshot = snapshot;
      this.snapshotHTML = snapshotHTML;
      this.response = response;
      this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
      this.visitCachedSnapshot = visitCachedSnapshot;
      this.willRender = willRender;
      this.updateHistory = updateHistory;
      this.scrolled = !willRender;
      this.shouldCacheSnapshot = shouldCacheSnapshot;
      this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    get restorationData() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
      return this.isSamePage;
    }
    start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
    cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }
        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
    complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.followRedirect();
        if (!this.followedRedirect) {
          this.adapter.visitCompleted(this);
          this.delegate.visitCompleted(this);
        }
      }
    }
    fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
    changeHistory() {
      var _a;
      if (!this.historyChanged && this.updateHistory) {
        const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        const method4 = getHistoryMethodForAction(actionForHistory);
        this.history.update(method4, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
    issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
    simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
    startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
      this.response = response;
      if (response) {
        const { statusCode } = response;
        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
    finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
      if (this.response) {
        const { statusCode, responseHTML } = this.response;
        this.render(async () => {
          if (this.shouldCacheSnapshot)
            this.cacheSnapshot();
          if (this.view.renderPromise)
            await this.view.renderPromise;
          if (isSuccessful(statusCode) && responseHTML != null) {
            await this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            this.complete();
          } else {
            await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
            this.adapter.visitRendered(this);
            this.fail();
          }
        });
      }
    }
    getCachedSnapshot() {
      const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
    getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
    hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
      const snapshot = this.getCachedSnapshot();
      if (snapshot) {
        const isPreview = this.shouldIssueRequest();
        this.render(async () => {
          this.cacheSnapshot();
          if (this.isSamePage) {
            this.adapter.visitRendered(this);
          } else {
            if (this.view.renderPromise)
              await this.view.renderPromise;
            await this.view.renderPage(snapshot, isPreview, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            if (!isPreview) {
              this.complete();
            }
          }
        });
      }
    }
    followRedirect() {
      var _a;
      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: "replace",
          response: this.response,
          shouldCacheSnapshot: false,
          willRender: false
        });
        this.followedRedirect = true;
      }
    }
    goToSamePageAnchor() {
      if (this.isSamePage) {
        this.render(async () => {
          this.cacheSnapshot();
          this.performScroll();
          this.changeHistory();
          this.adapter.visitRendered(this);
        });
      }
    }
    prepareRequest(request) {
      if (this.acceptsStreamResponse) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted() {
      this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) {
    }
    async requestSucceededWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.redirectedToLocation = response.redirected ? response.location : void 0;
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    async requestFailedWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    requestErrored(_request, _error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
    requestFinished() {
      this.finishRequest();
    }
    performScroll() {
      if (!this.scrolled && !this.view.forceReloaded) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }
        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }
        this.scrolled = true;
      }
    }
    scrollToRestoredPosition() {
      const { scrollPosition } = this.restorationData;
      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
    scrollToAnchor() {
      const anchor = getAnchor(this.location);
      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
    recordTimingMetric(metric) {
      this.timingMetrics[metric] = (/* @__PURE__ */ new Date()).getTime();
    }
    getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;
        case "advance":
        case "restore":
          return history.pushState;
      }
    }
    hasPreloadedResponse() {
      return typeof this.response == "object";
    }
    shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
    cacheSnapshot() {
      if (!this.snapshotCached) {
        this.view.cacheSnapshot(this.snapshot).then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
        this.snapshotCached = true;
      }
    }
    async render(callback) {
      this.cancelRender();
      await new Promise((resolve) => {
        this.frame = requestAnimationFrame(() => resolve());
      });
      await callback();
      delete this.frame;
    }
    cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  };
  function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
  }
  var BrowserAdapter = class {
    constructor(session2) {
      this.progressBar = new ProgressBar();
      this.showProgressBar = () => {
        this.progressBar.show();
      };
      this.session = session2;
    }
    visitProposedToLocation(location2, options) {
      this.navigator.startVisit(location2, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);
    }
    visitStarted(visit2) {
      this.location = visit2.location;
      visit2.loadCachedSnapshot();
      visit2.issueRequest();
      visit2.goToSamePageAnchor();
    }
    visitRequestStarted(visit2) {
      this.progressBar.setValue(0);
      if (visit2.hasCachedSnapshot() || visit2.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
    visitRequestCompleted(visit2) {
      visit2.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit2, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload({
            reason: "request_failed",
            context: {
              statusCode
            }
          });
        default:
          return visit2.loadResponse();
      }
    }
    visitRequestFinished(_visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
    visitCompleted(_visit) {
    }
    pageInvalidated(reason) {
      this.reload(reason);
    }
    visitFailed(_visit) {
    }
    visitRendered(_visit) {
    }
    formSubmissionStarted(_formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
      this.progressBar.hide();
      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
    showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
    hideFormProgressBar() {
      this.progressBar.hide();
      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
    reload(reason) {
      var _a;
      dispatch("turbo:reload", { detail: reason });
      window.location.href = ((_a = this.location) === null || _a === void 0 ? void 0 : _a.toString()) || window.location.href;
    }
    get navigator() {
      return this.session.navigator;
    }
  };
  var CacheObserver = class {
    constructor() {
      this.selector = "[data-turbo-temporary]";
      this.deprecatedSelector = "[data-turbo-cache=false]";
      this.started = false;
      this.removeTemporaryElements = (_event) => {
        for (const element of this.temporaryElements) {
          element.remove();
        }
      };
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    get temporaryElements() {
      return [...document.querySelectorAll(this.selector), ...this.temporaryElementsWithDeprecation];
    }
    get temporaryElementsWithDeprecation() {
      const elements = document.querySelectorAll(this.deprecatedSelector);
      if (elements.length) {
        console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`);
      }
      return [...elements];
    }
  };
  var FrameRedirector = class {
    constructor(session2, element) {
      this.session = session2;
      this.element = element;
      this.linkInterceptor = new LinkInterceptor(this, element);
      this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
      this.formSubmitObserver.start();
    }
    stop() {
      this.linkInterceptor.stop();
      this.formSubmitObserver.stop();
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldRedirect(element);
    }
    linkClickIntercepted(element, url2, event) {
      const frame = this.findFrameElement(element);
      if (frame) {
        frame.delegate.linkClickIntercepted(element, url2, event);
      }
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == null && this.shouldSubmit(element, submitter) && this.shouldRedirect(element, submitter);
    }
    formSubmitted(element, submitter) {
      const frame = this.findFrameElement(element, submitter);
      if (frame) {
        frame.delegate.formSubmitted(element, submitter);
      }
    }
    shouldSubmit(form, submitter) {
      var _a;
      const action = getAction(form, submitter);
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
      const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);
      if (isNavigatable) {
        const frame = this.findFrameElement(element, submitter);
        return frame ? frame != element.closest("turbo-frame") : false;
      } else {
        return false;
      }
    }
    findFrameElement(element, submitter) {
      const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
      if (id && id != "_top") {
        const frame = this.element.querySelector(`#${id}:not([disabled])`);
        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  };
  var History = class {
    constructor(delegate) {
      this.restorationIdentifier = uuid();
      this.restorationData = {};
      this.started = false;
      this.pageLoaded = false;
      this.onPopState = (event) => {
        if (this.shouldHandlePopState()) {
          const { turbo } = event.state || {};
          if (turbo) {
            this.location = new URL(window.location.href);
            const { restorationIdentifier } = turbo;
            this.restorationIdentifier = restorationIdentifier;
            this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
          }
        }
      };
      this.onPageLoad = async (_event) => {
        await nextMicrotask();
        this.pageLoaded = true;
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
    push(location2, restorationIdentifier) {
      this.update(history.pushState, location2, restorationIdentifier);
    }
    replace(location2, restorationIdentifier) {
      this.update(history.replaceState, location2, restorationIdentifier);
    }
    update(method4, location2, restorationIdentifier = uuid()) {
      const state = { turbo: { restorationIdentifier } };
      method4.call(history, state, "", location2.href);
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
      const { restorationIdentifier } = this;
      const restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
      var _a;
      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
    relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
    shouldHandlePopState() {
      return this.pageIsLoaded();
    }
    pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  };
  var Navigator = class {
    constructor(delegate) {
      this.delegate = delegate;
    }
    proposeVisit(location2, options = {}) {
      if (this.delegate.allowsVisitingLocationWithAction(location2, options.action)) {
        if (locationIsVisitable(location2, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location2, options);
        } else {
          window.location.href = location2.toString();
        }
      }
    }
    startVisit(locatable, restorationIdentifier, options = {}) {
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options));
      this.currentVisit.start();
    }
    submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
    stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }
      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === "function") {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
    async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
      if (formSubmission == this.formSubmission) {
        const responseHTML = await fetchResponse.responseHTML;
        if (responseHTML) {
          const shouldCacheSnapshot = formSubmission.isSafe;
          if (!shouldCacheSnapshot) {
            this.view.clearSnapshotCache();
          }
          const { statusCode, redirected } = fetchResponse;
          const action = this.getActionForFormSubmission(formSubmission);
          const visitOptions = {
            action,
            shouldCacheSnapshot,
            response: { statusCode, responseHTML, redirected }
          };
          this.proposeVisit(fetchResponse.location, visitOptions);
        }
      }
    }
    async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      const responseHTML = await fetchResponse.responseHTML;
      if (responseHTML) {
        const snapshot = PageSnapshot.fromHTMLString(responseHTML);
        if (fetchResponse.serverError) {
          await this.view.renderError(snapshot, this.currentVisit);
        } else {
          await this.view.renderPage(snapshot, false, true, this.currentVisit);
        }
        this.view.scrollToTop();
        this.view.clearSnapshotCache();
      }
    }
    formSubmissionErrored(formSubmission, error) {
      console.error(error);
    }
    formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === "function") {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
    visitStarted(visit2) {
      this.delegate.visitStarted(visit2);
    }
    visitCompleted(visit2) {
      this.delegate.visitCompleted(visit2);
    }
    locationWithActionIsSamePage(location2, action) {
      const anchor = getAnchor(location2);
      const currentAnchor = getAnchor(this.view.lastRenderedLocation);
      const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
      return action !== "replace" && getRequestURL(location2) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    getActionForFormSubmission({ submitter, formElement }) {
      return getVisitAction(submitter, formElement) || "advance";
    }
  };
  var PageStage;
  (function(PageStage2) {
    PageStage2[PageStage2["initial"] = 0] = "initial";
    PageStage2[PageStage2["loading"] = 1] = "loading";
    PageStage2[PageStage2["interactive"] = 2] = "interactive";
    PageStage2[PageStage2["complete"] = 3] = "complete";
  })(PageStage || (PageStage = {}));
  var PageObserver = class {
    constructor(delegate) {
      this.stage = PageStage.initial;
      this.started = false;
      this.interpretReadyState = () => {
        const { readyState } = this;
        if (readyState == "interactive") {
          this.pageIsInteractive();
        } else if (readyState == "complete") {
          this.pageIsComplete();
        }
      };
      this.pageWillUnload = () => {
        this.delegate.pageWillUnload();
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }
        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
    pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
    pageIsComplete() {
      this.pageIsInteractive();
      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
    get readyState() {
      return document.readyState;
    }
  };
  var ScrollObserver = class {
    constructor(delegate) {
      this.started = false;
      this.onScroll = () => {
        this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
    updatePosition(position2) {
      this.delegate.scrollPositionChanged(position2);
    }
  };
  var StreamMessageRenderer = class {
    render({ fragment }) {
      Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
      newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() {
    }
  };
  function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
      const { id } = permanentElementInDocument;
      for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
        const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);
        if (elementInStream) {
          permanentElementMap[id] = [permanentElementInDocument, elementInStream];
        }
      }
    }
    return permanentElementMap;
  }
  var StreamObserver = class {
    constructor(delegate) {
      this.sources = /* @__PURE__ */ new Set();
      this.started = false;
      this.inspectFetchResponse = (event) => {
        const response = fetchResponseFromEvent(event);
        if (response && fetchResponseIsStream(response)) {
          event.preventDefault();
          this.receiveMessageResponse(response);
        }
      };
      this.receiveMessageEvent = (event) => {
        if (this.started && typeof event.data == "string") {
          this.receiveMessageHTML(event.data);
        }
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
    disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
    streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
    async receiveMessageResponse(response) {
      const html = await response.responseHTML;
      if (html) {
        this.receiveMessageHTML(html);
      }
    }
    receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
  };
  function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
      return fetchResponse;
    }
  }
  function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
  }
  var ErrorRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      const { documentElement, body } = document;
      documentElement.replaceChild(newElement, body);
    }
    async render() {
      this.replaceHeadAndBody();
      this.activateScriptElements();
    }
    replaceHeadAndBody() {
      const { documentElement, head } = document;
      documentElement.replaceChild(this.newHead, head);
      this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
      for (const replaceableElement of this.scriptElements) {
        const parentNode = replaceableElement.parentNode;
        if (parentNode) {
          const element = activateScriptElement(replaceableElement);
          parentNode.replaceChild(element, replaceableElement);
        }
      }
    }
    get newHead() {
      return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
      return document.documentElement.querySelectorAll("script");
    }
  };
  var PageRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      if (document.body && newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(newElement);
      } else {
        document.documentElement.appendChild(newElement);
      }
    }
    get shouldRender() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
      if (!this.newSnapshot.isVisitable) {
        return {
          reason: "turbo_visit_control_is_reload"
        };
      }
      if (!this.trackedElementsAreIdentical) {
        return {
          reason: "tracked_element_mismatch"
        };
      }
    }
    async prepareToRender() {
      await this.mergeHead();
    }
    async render() {
      if (this.willRender) {
        await this.replaceBody();
      }
    }
    finishRendering() {
      super.finishRendering();
      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
    get currentHeadSnapshot() {
      return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
      return this.newSnapshot.headSnapshot;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    async mergeHead() {
      const mergedHeadElements = this.mergeProvisionalElements();
      const newStylesheetElements = this.copyNewHeadStylesheetElements();
      this.copyNewHeadScriptElements();
      await mergedHeadElements;
      await newStylesheetElements;
    }
    async replaceBody() {
      await this.preservingPermanentElements(async () => {
        this.activateNewBody();
        await this.assignNewBody();
      });
    }
    get trackedElementsAreIdentical() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    async copyNewHeadStylesheetElements() {
      const loadingElements = [];
      for (const element of this.newHeadStylesheetElements) {
        loadingElements.push(waitForLoad(element));
        document.head.appendChild(element);
      }
      await Promise.all(loadingElements);
    }
    copyNewHeadScriptElements() {
      for (const element of this.newHeadScriptElements) {
        document.head.appendChild(activateScriptElement(element));
      }
    }
    async mergeProvisionalElements() {
      const newHeadElements = [...this.newHeadProvisionalElements];
      for (const element of this.currentHeadProvisionalElements) {
        if (!this.isCurrentElementInElementList(element, newHeadElements)) {
          document.head.removeChild(element);
        }
      }
      for (const element of newHeadElements) {
        document.head.appendChild(element);
      }
    }
    isCurrentElementInElementList(element, elementList) {
      for (const [index2, newElement] of elementList.entries()) {
        if (element.tagName == "TITLE") {
          if (newElement.tagName != "TITLE") {
            continue;
          }
          if (element.innerHTML == newElement.innerHTML) {
            elementList.splice(index2, 1);
            return true;
          }
        }
        if (newElement.isEqualNode(element)) {
          elementList.splice(index2, 1);
          return true;
        }
      }
      return false;
    }
    removeCurrentHeadProvisionalElements() {
      for (const element of this.currentHeadProvisionalElements) {
        document.head.removeChild(element);
      }
    }
    copyNewHeadProvisionalElements() {
      for (const element of this.newHeadProvisionalElements) {
        document.head.appendChild(element);
      }
    }
    activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
      for (const inertScriptElement of this.newBodyScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    async assignNewBody() {
      await this.renderElement(this.currentElement, this.newElement);
    }
    get newHeadStylesheetElements() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
      return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
      return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
      return this.newElement.querySelectorAll("script");
    }
  };
  var SnapshotCache = class {
    constructor(size) {
      this.keys = [];
      this.snapshots = {};
      this.size = size;
    }
    has(location2) {
      return toCacheKey(location2) in this.snapshots;
    }
    get(location2) {
      if (this.has(location2)) {
        const snapshot = this.read(location2);
        this.touch(location2);
        return snapshot;
      }
    }
    put(location2, snapshot) {
      this.write(location2, snapshot);
      this.touch(location2);
      return snapshot;
    }
    clear() {
      this.snapshots = {};
    }
    read(location2) {
      return this.snapshots[toCacheKey(location2)];
    }
    write(location2, snapshot) {
      this.snapshots[toCacheKey(location2)] = snapshot;
    }
    touch(location2) {
      const key = toCacheKey(location2);
      const index2 = this.keys.indexOf(key);
      if (index2 > -1)
        this.keys.splice(index2, 1);
      this.keys.unshift(key);
      this.trim();
    }
    trim() {
      for (const key of this.keys.splice(this.size)) {
        delete this.snapshots[key];
      }
    }
  };
  var PageView = class extends View {
    constructor() {
      super(...arguments);
      this.snapshotCache = new SnapshotCache(10);
      this.lastRenderedLocation = new URL(location.href);
      this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit2) {
      const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
      if (!renderer.shouldRender) {
        this.forceReloaded = true;
      } else {
        visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      }
      return this.render(renderer);
    }
    renderError(snapshot, visit2) {
      visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
      return this.render(renderer);
    }
    clearSnapshotCache() {
      this.snapshotCache.clear();
    }
    async cacheSnapshot(snapshot = this.snapshot) {
      if (snapshot.isCacheable) {
        this.delegate.viewWillCacheSnapshot();
        const { lastRenderedLocation: location2 } = this;
        await nextEventLoopTick();
        const cachedSnapshot = snapshot.clone();
        this.snapshotCache.put(location2, cachedSnapshot);
        return cachedSnapshot;
      }
    }
    getCachedSnapshotForLocation(location2) {
      return this.snapshotCache.get(location2);
    }
    get snapshot() {
      return PageSnapshot.fromElement(this.element);
    }
  };
  var Preloader = class {
    constructor(delegate) {
      this.selector = "a[data-turbo-preload]";
      this.delegate = delegate;
    }
    get snapshotCache() {
      return this.delegate.navigator.view.snapshotCache;
    }
    start() {
      if (document.readyState === "loading") {
        return document.addEventListener("DOMContentLoaded", () => {
          this.preloadOnLoadLinksForView(document.body);
        });
      } else {
        this.preloadOnLoadLinksForView(document.body);
      }
    }
    preloadOnLoadLinksForView(element) {
      for (const link of element.querySelectorAll(this.selector)) {
        this.preloadURL(link);
      }
    }
    async preloadURL(link) {
      const location2 = new URL(link.href);
      if (this.snapshotCache.has(location2)) {
        return;
      }
      try {
        const response = await fetch(location2.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
        const responseText = await response.text();
        const snapshot = PageSnapshot.fromHTMLString(responseText);
        this.snapshotCache.put(location2, snapshot);
      } catch (_) {
      }
    }
  };
  var Session = class {
    constructor() {
      this.navigator = new Navigator(this);
      this.history = new History(this);
      this.preloader = new Preloader(this);
      this.view = new PageView(this, document.documentElement);
      this.adapter = new BrowserAdapter(this);
      this.pageObserver = new PageObserver(this);
      this.cacheObserver = new CacheObserver();
      this.linkClickObserver = new LinkClickObserver(this, window);
      this.formSubmitObserver = new FormSubmitObserver(this, document);
      this.scrollObserver = new ScrollObserver(this);
      this.streamObserver = new StreamObserver(this);
      this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
      this.frameRedirector = new FrameRedirector(this, document.documentElement);
      this.streamMessageRenderer = new StreamMessageRenderer();
      this.drive = true;
      this.enabled = true;
      this.progressBarDelay = 500;
      this.started = false;
      this.formMode = "on";
    }
    start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.preloader.start();
        this.started = true;
        this.enabled = true;
      }
    }
    disable() {
      this.enabled = false;
    }
    stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
    registerAdapter(adapter) {
      this.adapter = adapter;
    }
    visit(location2, options = {}) {
      const frameElement = options.frame ? document.getElementById(options.frame) : null;
      if (frameElement instanceof FrameElement) {
        frameElement.src = location2.toString();
        frameElement.loaded;
      } else {
        this.navigator.proposeVisit(expandURL(location2), options);
      }
    }
    connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
      this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
      this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
    setFormMode(mode) {
      this.formMode = mode;
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location2, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location2, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated({
          reason: "turbo_disabled"
        });
      }
    }
    scrollPositionChanged(position2) {
      this.history.updateRestorationData({ scrollPosition: position2 });
    }
    willSubmitFormLinkToLocation(link, location2) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() {
    }
    willFollowLinkToLocation(link, location2, event) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location2, event);
    }
    followedLinkToLocation(link, location2) {
      const action = this.getActionForLink(link);
      const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
      this.visit(location2.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location2, action) {
      return this.locationWithActionIsSamePage(location2, action) || this.applicationAllowsVisitingLocation(location2);
    }
    visitProposedToLocation(location2, options) {
      extendURLWithDeprecatedProperties(location2);
      this.adapter.visitProposedToLocation(location2, options);
    }
    visitStarted(visit2) {
      if (!visit2.acceptsStreamResponse) {
        markAsBusy(document.documentElement);
      }
      extendURLWithDeprecatedProperties(visit2.location);
      if (!visit2.silent) {
        this.notifyApplicationAfterVisitingLocation(visit2.location, visit2.action);
      }
    }
    visitCompleted(visit2) {
      clearBusyState(document.documentElement);
      this.notifyApplicationAfterPageLoad(visit2.getTimingMetrics());
    }
    locationWithActionIsSamePage(location2, action) {
      return this.navigator.locationWithActionIsSamePage(location2, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
      const action = getAction(form, submitter);
      return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
    formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
      var _a;
      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
    allowsImmediateRender({ element }, options) {
      const event = this.notifyApplicationBeforeRender(element, options);
      const { defaultPrevented, detail: { render: render2 } } = event;
      if (this.view.renderer && render2) {
        this.view.renderer.renderElement = render2;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
      this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
      this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location2, ev) {
      const event = this.notifyApplicationAfterClickingLinkToLocation(link, location2, ev);
      return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location2) {
      const event = this.notifyApplicationBeforeVisitingLocation(location2);
      return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location2, event) {
      return dispatch("turbo:click", {
        target: link,
        detail: { url: location2.href, originalEvent: event },
        cancelable: true
      });
    }
    notifyApplicationBeforeVisitingLocation(location2) {
      return dispatch("turbo:before-visit", {
        detail: { url: location2.href },
        cancelable: true
      });
    }
    notifyApplicationAfterVisitingLocation(location2, action) {
      return dispatch("turbo:visit", { detail: { url: location2.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
      return dispatch("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options) {
      return dispatch("turbo:before-render", {
        detail: Object.assign({ newBody }, options),
        cancelable: true
      });
    }
    notifyApplicationAfterRender() {
      return dispatch("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
      return dispatch("turbo:load", {
        detail: { url: this.location.href, timing }
      });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
    notifyApplicationAfterFrameLoad(frame) {
      return dispatch("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch("turbo:frame-render", {
        detail: { fetchResponse },
        target: frame,
        cancelable: true
      });
    }
    submissionIsNavigatable(form, submitter) {
      if (this.formMode == "off") {
        return false;
      } else {
        const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
        if (this.formMode == "optin") {
          return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
        } else {
          return submitterIsNavigatable && this.elementIsNavigatable(form);
        }
      }
    }
    elementIsNavigatable(element) {
      const container = findClosestRecursively(element, "[data-turbo]");
      const withinFrame = findClosestRecursively(element, "turbo-frame");
      if (this.drive || withinFrame) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
    getActionForLink(link) {
      return getVisitAction(link) || "advance";
    }
    get snapshot() {
      return this.view.snapshot;
    }
  };
  function extendURLWithDeprecatedProperties(url2) {
    Object.defineProperties(url2, deprecatedLocationPropertyDescriptors);
  }
  var deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
      get() {
        return this.toString();
      }
    }
  };
  var Cache = class {
    constructor(session2) {
      this.session = session2;
    }
    clear() {
      this.session.clearCache();
    }
    resetCacheControl() {
      this.setCacheControl("");
    }
    exemptPageFromCache() {
      this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
      this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
      setMetaContent("turbo-cache-control", value);
    }
  };
  var StreamActions = {
    after() {
      this.targetElements.forEach((e3) => {
        var _a;
        return (_a = e3.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e3.nextSibling);
      });
    },
    append() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e3) => e3.append(this.templateContent));
    },
    before() {
      this.targetElements.forEach((e3) => {
        var _a;
        return (_a = e3.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e3);
      });
    },
    prepend() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e3) => e3.prepend(this.templateContent));
    },
    remove() {
      this.targetElements.forEach((e3) => e3.remove());
    },
    replace() {
      this.targetElements.forEach((e3) => e3.replaceWith(this.templateContent));
    },
    update() {
      this.targetElements.forEach((targetElement) => {
        targetElement.innerHTML = "";
        targetElement.append(this.templateContent);
      });
    }
  };
  var session = new Session();
  var cache = new Cache(session);
  var { navigator: navigator$1 } = session;
  function start() {
    session.start();
  }
  function registerAdapter(adapter) {
    session.registerAdapter(adapter);
  }
  function visit(location2, options) {
    session.visit(location2, options);
  }
  function connectStreamSource(source) {
    session.connectStreamSource(source);
  }
  function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
  }
  function renderStreamMessage(message) {
    session.renderStreamMessage(message);
  }
  function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
  }
  function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
  }
  function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
  }
  function setFormMode(mode) {
    session.setFormMode(mode);
  }
  var Turbo = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session,
    cache,
    PageRenderer,
    PageSnapshot,
    FrameRenderer,
    start,
    registerAdapter,
    visit,
    connectStreamSource,
    disconnectStreamSource,
    renderStreamMessage,
    clearCache,
    setProgressBarDelay,
    setConfirmMethod,
    setFormMode,
    StreamActions
  });
  var TurboFrameMissingError = class extends Error {
  };
  var FrameController = class {
    constructor(element) {
      this.fetchResponseLoaded = (_fetchResponse) => {
      };
      this.currentFetchRequest = null;
      this.resolveVisitPromise = () => {
      };
      this.connected = false;
      this.hasBeenLoaded = false;
      this.ignoredAttributes = /* @__PURE__ */ new Set();
      this.action = null;
      this.visitCachedSnapshot = ({ element: element2 }) => {
        const frame = element2.querySelector("#" + this.element.id);
        if (frame && this.previousFrameElement) {
          frame.replaceChildren(...this.previousFrameElement.children);
        }
        delete this.previousFrameElement;
      };
      this.element = element;
      this.view = new FrameView(this, this.element);
      this.appearanceObserver = new AppearanceObserver(this, this.element);
      this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
      this.linkInterceptor = new LinkInterceptor(this, this.element);
      this.restorationIdentifier = uuid();
      this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
      if (!this.connected) {
        this.connected = true;
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        } else {
          this.loadSourceURL();
        }
        this.formLinkClickObserver.start();
        this.linkInterceptor.start();
        this.formSubmitObserver.start();
      }
    }
    disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkInterceptor.stop();
        this.formSubmitObserver.stop();
      }
    }
    disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
    sourceURLChanged() {
      if (this.isIgnoringChangesTo("src"))
        return;
      if (this.element.isConnected) {
        this.complete = false;
      }
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
    sourceURLReloaded() {
      const { src } = this.element;
      this.ignoringChangesToAttribute("complete", () => {
        this.element.removeAttribute("complete");
      });
      this.element.src = null;
      this.element.src = src;
      return this.element.loaded;
    }
    completeChanged() {
      if (this.isIgnoringChangesTo("complete"))
        return;
      this.loadSourceURL();
    }
    loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
    async loadSourceURL() {
      if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
        this.element.loaded = this.visit(expandURL(this.sourceURL));
        this.appearanceObserver.stop();
        await this.element.loaded;
        this.hasBeenLoaded = true;
      }
    }
    async loadResponse(fetchResponse) {
      if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
        this.sourceURL = fetchResponse.response.url;
      }
      try {
        const html = await fetchResponse.responseHTML;
        if (html) {
          const document2 = parseHTMLDocument(html);
          const pageSnapshot = PageSnapshot.fromDocument(document2);
          if (pageSnapshot.isVisitable) {
            await this.loadFrameResponse(fetchResponse, document2);
          } else {
            await this.handleUnvisitableFrameResponse(fetchResponse);
          }
        }
      } finally {
        this.fetchResponseLoaded = () => {
        };
      }
    }
    elementAppearedInViewport(element) {
      this.proposeVisitIfNavigatedWithAction(element, element);
      this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
      return this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
      const frame = this.findFrameElement(link);
      if (frame)
        form.setAttribute("data-turbo-frame", frame.id);
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldInterceptNavigation(element);
    }
    linkClickIntercepted(element, location2) {
      this.navigateFrame(element, location2);
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }
      this.formSubmission = new FormSubmission(this, element, submitter);
      const { fetchRequest } = this.formSubmission;
      this.prepareRequest(fetchRequest);
      this.formSubmission.start();
    }
    prepareRequest(request) {
      var _a;
      request.headers["Turbo-Frame"] = this.id;
      if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
      this.resolveVisitPromise();
    }
    async requestSucceededWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    async requestFailedWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    requestErrored(request, error) {
      console.error(error);
      this.resolveVisitPromise();
    }
    requestFinished(_request) {
      clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
      const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
      if (!formSubmission.isSafe) {
        session.clearCache();
      }
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
      session.clearCache();
    }
    formSubmissionErrored(formSubmission, error) {
      console.error(error);
    }
    formSubmissionFinished({ formElement }) {
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options) {
      const event = dispatch("turbo:before-frame-render", {
        target: this.element,
        detail: Object.assign({ newFrame }, options),
        cancelable: true
      });
      const { defaultPrevented, detail: { render: render2 } } = event;
      if (this.view.renderer && render2) {
        this.view.renderer.renderElement = render2;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
    }
    preloadOnLoadLinksForView(element) {
      session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() {
    }
    willRenderFrame(currentElement, _newElement) {
      this.previousFrameElement = currentElement.cloneNode(true);
    }
    async loadFrameResponse(fetchResponse, document2) {
      const newFrameElement = await this.extractForeignFrameElement(document2.body);
      if (newFrameElement) {
        const snapshot = new Snapshot(newFrameElement);
        const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
        if (this.view.renderPromise)
          await this.view.renderPromise;
        this.changeHistory();
        await this.view.render(renderer);
        this.complete = true;
        session.frameRendered(fetchResponse, this.element);
        session.frameLoaded(this.element);
        this.fetchResponseLoaded(fetchResponse);
      } else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
        this.handleFrameMissingFromResponse(fetchResponse);
      }
    }
    async visit(url2) {
      var _a;
      const request = new FetchRequest(this, FetchMethod.get, url2, new URLSearchParams(), this.element);
      (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
      this.currentFetchRequest = request;
      return new Promise((resolve) => {
        this.resolveVisitPromise = () => {
          this.resolveVisitPromise = () => {
          };
          this.currentFetchRequest = null;
          resolve();
        };
        request.perform();
      });
    }
    navigateFrame(element, url2, submitter) {
      const frame = this.findFrameElement(element, submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      this.withCurrentNavigationElement(element, () => {
        frame.src = url2;
      });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      this.action = getVisitAction(submitter, element, frame);
      if (this.action) {
        const pageSnapshot = PageSnapshot.fromElement(frame).clone();
        const { visitCachedSnapshot } = frame.delegate;
        frame.delegate.fetchResponseLoaded = (fetchResponse) => {
          if (frame.src) {
            const { statusCode, redirected } = fetchResponse;
            const responseHTML = frame.ownerDocument.documentElement.outerHTML;
            const response = { statusCode, redirected, responseHTML };
            const options = {
              response,
              visitCachedSnapshot,
              willRender: false,
              updateHistory: false,
              restorationIdentifier: this.restorationIdentifier,
              snapshot: pageSnapshot
            };
            if (this.action)
              options.action = this.action;
            session.visit(frame.src, options);
          }
        };
      }
    }
    changeHistory() {
      if (this.action) {
        const method4 = getHistoryMethodForAction(this.action);
        session.history.update(method4, expandURL(this.element.src || ""), this.restorationIdentifier);
      }
    }
    async handleUnvisitableFrameResponse(fetchResponse) {
      console.warn(`The response (${fetchResponse.statusCode}) from <turbo-frame id="${this.element.id}"> is performing a full page visit due to turbo-visit-control.`);
      await this.visitResponse(fetchResponse.response);
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
      this.element.setAttribute("complete", "");
      const response = fetchResponse.response;
      const visit2 = async (url2, options = {}) => {
        if (url2 instanceof Response) {
          this.visitResponse(url2);
        } else {
          session.visit(url2, options);
        }
      };
      const event = dispatch("turbo:frame-missing", {
        target: this.element,
        detail: { response, visit: visit2 },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    handleFrameMissingFromResponse(fetchResponse) {
      this.view.missing();
      this.throwFrameMissingError(fetchResponse);
    }
    throwFrameMissingError(fetchResponse) {
      const message = `The response (${fetchResponse.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;
      throw new TurboFrameMissingError(message);
    }
    async visitResponse(response) {
      const wrapped = new FetchResponse(response);
      const responseHTML = await wrapped.responseHTML;
      const { location: location2, redirected, statusCode } = wrapped;
      return session.visit(location2, { response: { redirected, statusCode, responseHTML } });
    }
    findFrameElement(element, submitter) {
      var _a;
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
    async extractForeignFrameElement(container) {
      let element;
      const id = CSS.escape(this.id);
      try {
        element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);
        if (element) {
          return element;
        }
        element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);
        if (element) {
          await element.loaded;
          return await this.extractForeignFrameElement(element);
        }
      } catch (error) {
        console.error(error);
        return new FrameElement();
      }
      return null;
    }
    formActionIsVisitable(form, submitter) {
      const action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }
      if (!this.enabled || id == "_top") {
        return false;
      }
      if (id) {
        const frameElement = getFrameElementById(id);
        if (frameElement) {
          return !frameElement.disabled;
        }
      }
      if (!session.elementIsNavigatable(element)) {
        return false;
      }
      if (submitter && !session.elementIsNavigatable(submitter)) {
        return false;
      }
      return true;
    }
    get id() {
      return this.element.id;
    }
    get enabled() {
      return !this.element.disabled;
    }
    get sourceURL() {
      if (this.element.src) {
        return this.element.src;
      }
    }
    set sourceURL(sourceURL) {
      this.ignoringChangesToAttribute("src", () => {
        this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      });
    }
    get loadingStyle() {
      return this.element.loading;
    }
    get isLoading() {
      return this.formSubmission !== void 0 || this.resolveVisitPromise() !== void 0;
    }
    get complete() {
      return this.element.hasAttribute("complete");
    }
    set complete(value) {
      this.ignoringChangesToAttribute("complete", () => {
        if (value) {
          this.element.setAttribute("complete", "");
        } else {
          this.element.removeAttribute("complete");
        }
      });
    }
    get isActive() {
      return this.element.isActive && this.connected;
    }
    get rootLocation() {
      var _a;
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    isIgnoringChangesTo(attributeName) {
      return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
      this.ignoredAttributes.add(attributeName);
      callback();
      this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
      this.currentNavigationElement = element;
      callback();
      delete this.currentNavigationElement;
    }
  };
  function getFrameElementById(id) {
    if (id != null) {
      const element = document.getElementById(id);
      if (element instanceof FrameElement) {
        return element;
      }
    }
  }
  function activateElement(element, currentURL) {
    if (element) {
      const src = element.getAttribute("src");
      if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
        throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
      }
      if (element.ownerDocument !== document) {
        element = document.importNode(element, true);
      }
      if (element instanceof FrameElement) {
        element.connectedCallback();
        element.disconnectedCallback();
        return element;
      }
    }
  }
  var StreamElement = class _StreamElement extends HTMLElement {
    static async renderElement(newElement) {
      await newElement.performAction();
    }
    async connectedCallback() {
      try {
        await this.render();
      } catch (error) {
        console.error(error);
      } finally {
        this.disconnect();
      }
    }
    async render() {
      var _a;
      return (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = (async () => {
        const event = this.beforeRenderEvent;
        if (this.dispatchEvent(event)) {
          await nextAnimationFrame();
          await event.detail.render(this);
        }
      })();
    }
    disconnect() {
      try {
        this.remove();
      } catch (_a) {
      }
    }
    removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach((c) => c.remove());
    }
    get duplicateChildren() {
      var _a;
      const existingChildren = this.targetElements.flatMap((e3) => [...e3.children]).filter((c) => !!c.id);
      const newChildrenIds = [...((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || []].filter((c) => !!c.id).map((c) => c.id);
      return existingChildren.filter((c) => newChildrenIds.includes(c.id));
    }
    get performAction() {
      if (this.action) {
        const actionFunction = StreamActions[this.action];
        if (actionFunction) {
          return actionFunction;
        }
        this.raise("unknown action");
      }
      this.raise("action attribute is missing");
    }
    get targetElements() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
    get templateContent() {
      return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
      if (this.firstElementChild === null) {
        const template = this.ownerDocument.createElement("template");
        this.appendChild(template);
        return template;
      } else if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }
      this.raise("first child element must be a <template> element");
    }
    get action() {
      return this.getAttribute("action");
    }
    get target() {
      return this.getAttribute("target");
    }
    get targets() {
      return this.getAttribute("targets");
    }
    raise(message) {
      throw new Error(`${this.description}: ${message}`);
    }
    get description() {
      var _a, _b;
      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true,
        detail: { newStream: this, render: _StreamElement.renderElement }
      });
    }
    get targetElementsById() {
      var _a;
      const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
    get targetElementsByQuery() {
      var _a;
      const elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
      if (elements.length !== 0) {
        return Array.prototype.slice.call(elements);
      } else {
        return [];
      }
    }
  };
  var StreamSourceElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.streamSource = null;
    }
    connectedCallback() {
      this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
      connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
      if (this.streamSource) {
        disconnectStreamSource(this.streamSource);
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
  };
  FrameElement.delegateConstructor = FrameController;
  if (customElements.get("turbo-frame") === void 0) {
    customElements.define("turbo-frame", FrameElement);
  }
  if (customElements.get("turbo-stream") === void 0) {
    customElements.define("turbo-stream", StreamElement);
  }
  if (customElements.get("turbo-stream-source") === void 0) {
    customElements.define("turbo-stream-source", StreamSourceElement);
  }
  (() => {
    let element = document.currentScript;
    if (!element)
      return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
      return;
    element = element.parentElement;
    while (element) {
      if (element == document.body) {
        return console.warn(unindent`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
      }
      element = element.parentElement;
    }
  })();
  window.Turbo = Turbo;
  start();

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js
  var consumer;
  async function getConsumer() {
    return consumer || setConsumer(createConsumer2().then(setConsumer));
  }
  function setConsumer(newConsumer) {
    return consumer = newConsumer;
  }
  async function createConsumer2() {
    const { createConsumer: createConsumer3 } = await Promise.resolve().then(() => (init_src(), src_exports));
    return createConsumer3();
  }
  async function subscribeTo(channel, mixin) {
    const { subscriptions } = await getConsumer();
    return subscriptions.create(channel, mixin);
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/snakeize.js
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return obj;
    if (obj instanceof Date || obj instanceof RegExp)
      return obj;
    if (Array.isArray(obj))
      return obj.map(walk);
    return Object.keys(obj).reduce(function(acc, key) {
      var camel = key[0].toLowerCase() + key.slice(1).replace(/([A-Z]+)/g, function(m, x) {
        return "_" + x.toLowerCase();
      });
      acc[camel] = walk(obj[key]);
      return acc;
    }, {});
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js
  var TurboCableStreamSourceElement = class extends HTMLElement {
    async connectedCallback() {
      connectStreamSource(this);
      this.subscription = await subscribeTo(this.channel, {
        received: this.dispatchMessageEvent.bind(this),
        connected: this.subscriptionConnected.bind(this),
        disconnected: this.subscriptionDisconnected.bind(this)
      });
    }
    disconnectedCallback() {
      disconnectStreamSource(this);
      if (this.subscription)
        this.subscription.unsubscribe();
    }
    dispatchMessageEvent(data) {
      const event = new MessageEvent("message", { data });
      return this.dispatchEvent(event);
    }
    subscriptionConnected() {
      this.setAttribute("connected", "");
    }
    subscriptionDisconnected() {
      this.removeAttribute("connected");
    }
    get channel() {
      const channel = this.getAttribute("channel");
      const signed_stream_name = this.getAttribute("signed-stream-name");
      return { channel, signed_stream_name, ...walk({ ...this.dataset }) };
    }
  };
  if (customElements.get("turbo-cable-stream-source") === void 0) {
    customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/fetch_requests.js
  function encodeMethodIntoRequestBody(event) {
    if (event.target instanceof HTMLFormElement) {
      const { target: form, detail: { fetchOptions } } = event;
      form.addEventListener("turbo:submit-start", ({ detail: { formSubmission: { submitter } } }) => {
        const body = isBodyInit(fetchOptions.body) ? fetchOptions.body : new URLSearchParams();
        const method4 = determineFetchMethod(submitter, body, form);
        if (!/get/i.test(method4)) {
          if (/post/i.test(method4)) {
            body.delete("_method");
          } else {
            body.set("_method", method4);
          }
          fetchOptions.method = "post";
        }
      }, { once: true });
    }
  }
  function determineFetchMethod(submitter, body, form) {
    const formMethod = determineFormMethod(submitter);
    const overrideMethod = body.get("_method");
    const method4 = form.getAttribute("method") || "get";
    if (typeof formMethod == "string") {
      return formMethod;
    } else if (typeof overrideMethod == "string") {
      return overrideMethod;
    } else {
      return method4;
    }
  }
  function determineFormMethod(submitter) {
    if (submitter instanceof HTMLButtonElement || submitter instanceof HTMLInputElement) {
      if (submitter.hasAttribute("formmethod")) {
        return submitter.formMethod;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
  function isBodyInit(body) {
    return body instanceof FormData || body instanceof URLSearchParams;
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js
  addEventListener("turbo:before-fetch-request", encodeMethodIntoRequestBody);

  // app/javascript/application.jsx
  var import_react138 = __toESM(require_react());
  var import_react_dom8 = __toESM(require_react_dom());

  // node_modules/react-redux/dist/react-redux.mjs
  var React2 = __toESM(require_react(), 1);
  var import_with_selector = __toESM(require_with_selector(), 1);
  var ReactOriginal = __toESM(require_react(), 1);
  var React = (
    // prettier-ignore
    // @ts-ignore
    "default" in ReactOriginal ? ReactOriginal["default"] : ReactOriginal
  );
  var ContextKey = Symbol.for(`react-redux-context`);
  var gT = typeof globalThis !== "undefined" ? globalThis : (
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    {}
  );
  function getContext() {
    if (!React.createContext)
      return {};
    const contextMap = gT[ContextKey] ?? (gT[ContextKey] = /* @__PURE__ */ new Map());
    let realContext = contextMap.get(React.createContext);
    if (!realContext) {
      realContext = React.createContext(
        null
      );
      if (true) {
        realContext.displayName = "ReactRedux";
      }
      contextMap.set(React.createContext, realContext);
    }
    return realContext;
  }
  var ReactReduxContext = /* @__PURE__ */ getContext();
  var notInitialized = () => {
    throw new Error("uSES not initialized!");
  };
  var useSyncExternalStoreWithSelector = notInitialized;
  var initializeUseSelector = (fn) => {
    useSyncExternalStoreWithSelector = fn;
  };
  var REACT_ELEMENT_TYPE = Symbol.for("react.element");
  var REACT_PORTAL_TYPE = Symbol.for("react.portal");
  var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
  var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
  var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
  var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
  var REACT_CONTEXT_TYPE = Symbol.for("react.context");
  var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
  var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
  var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
  var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
  var REACT_MEMO_TYPE = Symbol.for("react.memo");
  var REACT_LAZY_TYPE = Symbol.for("react.lazy");
  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
  var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Memo = REACT_MEMO_TYPE;
  function defaultNoopBatch(callback) {
    callback();
  }
  function createListenerCollection() {
    let first = null;
    let last = null;
    return {
      clear() {
        first = null;
        last = null;
      },
      notify() {
        defaultNoopBatch(() => {
          let listener2 = first;
          while (listener2) {
            listener2.callback();
            listener2 = listener2.next;
          }
        });
      },
      get() {
        const listeners = [];
        let listener2 = first;
        while (listener2) {
          listeners.push(listener2);
          listener2 = listener2.next;
        }
        return listeners;
      },
      subscribe(callback) {
        let isSubscribed = true;
        const listener2 = last = {
          callback,
          next: null,
          prev: last
        };
        if (listener2.prev) {
          listener2.prev.next = listener2;
        } else {
          first = listener2;
        }
        return function unsubscribe() {
          if (!isSubscribed || first === null)
            return;
          isSubscribed = false;
          if (listener2.next) {
            listener2.next.prev = listener2.prev;
          } else {
            last = listener2.prev;
          }
          if (listener2.prev) {
            listener2.prev.next = listener2.next;
          } else {
            first = listener2.next;
          }
        };
      }
    };
  }
  var nullListeners = {
    notify() {
    },
    get: () => []
  };
  function createSubscription(store2, parentSub) {
    let unsubscribe;
    let listeners = nullListeners;
    let subscriptionsAmount = 0;
    let selfSubscribed = false;
    function addNestedSub(listener2) {
      trySubscribe();
      const cleanupListener = listeners.subscribe(listener2);
      let removed = false;
      return () => {
        if (!removed) {
          removed = true;
          cleanupListener();
          tryUnsubscribe();
        }
      };
    }
    function notifyNestedSubs() {
      listeners.notify();
    }
    function handleChangeWrapper() {
      if (subscription.onStateChange) {
        subscription.onStateChange();
      }
    }
    function isSubscribed() {
      return selfSubscribed;
    }
    function trySubscribe() {
      subscriptionsAmount++;
      if (!unsubscribe) {
        unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store2.subscribe(handleChangeWrapper);
        listeners = createListenerCollection();
      }
    }
    function tryUnsubscribe() {
      subscriptionsAmount--;
      if (unsubscribe && subscriptionsAmount === 0) {
        unsubscribe();
        unsubscribe = void 0;
        listeners.clear();
        listeners = nullListeners;
      }
    }
    function trySubscribeSelf() {
      if (!selfSubscribed) {
        selfSubscribed = true;
        trySubscribe();
      }
    }
    function tryUnsubscribeSelf() {
      if (selfSubscribed) {
        selfSubscribed = false;
        tryUnsubscribe();
      }
    }
    const subscription = {
      addNestedSub,
      notifyNestedSubs,
      handleChangeWrapper,
      isSubscribed,
      trySubscribe: trySubscribeSelf,
      tryUnsubscribe: tryUnsubscribeSelf,
      getListeners: () => listeners
    };
    return subscription;
  }
  var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  var useIsomorphicLayoutEffect = canUseDOM ? React.useLayoutEffect : React.useEffect;
  var FORWARD_REF_STATICS = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {
    [ForwardRef]: FORWARD_REF_STATICS,
    [Memo]: MEMO_STATICS
  };
  var objectPrototype = Object.prototype;
  var useSyncExternalStore2 = notInitialized;
  var initializeConnect = (fn) => {
    useSyncExternalStore2 = fn;
  };
  function Provider({
    store: store2,
    context,
    children,
    serverState,
    stabilityCheck = "once",
    identityFunctionCheck = "once"
  }) {
    const contextValue = React.useMemo(() => {
      const subscription = createSubscription(store2);
      return {
        store: store2,
        subscription,
        getServerState: serverState ? () => serverState : void 0,
        stabilityCheck,
        identityFunctionCheck
      };
    }, [store2, serverState, stabilityCheck, identityFunctionCheck]);
    const previousState = React.useMemo(() => store2.getState(), [store2]);
    useIsomorphicLayoutEffect(() => {
      const { subscription } = contextValue;
      subscription.onStateChange = subscription.notifyNestedSubs;
      subscription.trySubscribe();
      if (previousState !== store2.getState()) {
        subscription.notifyNestedSubs();
      }
      return () => {
        subscription.tryUnsubscribe();
        subscription.onStateChange = void 0;
      };
    }, [contextValue, previousState]);
    const Context3 = context || ReactReduxContext;
    return /* @__PURE__ */ React.createElement(Context3.Provider, { value: contextValue }, children);
  }
  var Provider_default = Provider;
  initializeUseSelector(import_with_selector.useSyncExternalStoreWithSelector);
  initializeConnect(React2.useSyncExternalStore);

  // node_modules/redux/dist/redux.mjs
  var $$observable = /* @__PURE__ */ (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
  var symbol_observable_default = $$observable;
  var randomString = () => Math.random().toString(36).substring(7).split("").join(".");
  var ActionTypes = {
    INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,
    REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,
    PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`
  };
  var actionTypes_default = ActionTypes;
  function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    let proto2 = obj;
    while (Object.getPrototypeOf(proto2) !== null) {
      proto2 = Object.getPrototypeOf(proto2);
    }
    return Object.getPrototypeOf(obj) === proto2 || Object.getPrototypeOf(obj) === null;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    const type4 = typeof val;
    switch (type4) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type4;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    const constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    let typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore(reducer, preloadedState, enhancer) {
    if (typeof reducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`);
    }
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);
      }
      return enhancer(createStore)(reducer, preloadedState);
    }
    let currentReducer = reducer;
    let currentState = preloadedState;
    let currentListeners = /* @__PURE__ */ new Map();
    let nextListeners = currentListeners;
    let listenerIdCounter = 0;
    let isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = /* @__PURE__ */ new Map();
        currentListeners.forEach((listener2, key) => {
          nextListeners.set(key, listener2);
        });
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener2) {
      if (typeof listener2 !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener2)}'`);
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      let isSubscribed = true;
      ensureCanMutateNextListeners();
      const listenerId = listenerIdCounter++;
      nextListeners.set(listenerId, listener2);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        nextListeners.delete(listenerId);
        currentListeners = null;
      };
    }
    function dispatch2(action) {
      if (!isPlainObject(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (typeof action.type !== "string") {
        throw new Error(false ? formatProdErrorMessage(17) : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      const listeners = currentListeners = nextListeners;
      listeners.forEach((listener2) => {
        listener2();
      });
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);
      }
      currentReducer = nextReducer;
      dispatch2({
        type: actionTypes_default.REPLACE
      });
    }
    function observable() {
      const outerSubscribe = subscribe;
      return {
        /**
         * The minimal observable subscription method.
         * @param observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);
          }
          function observeState() {
            const observerAsObserver = observer;
            if (observerAsObserver.next) {
              observerAsObserver.next(getState());
            }
          }
          observeState();
          const unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        },
        [symbol_observable_default]() {
          return this;
        }
      };
    }
    dispatch2({
      type: actionTypes_default.INIT
    });
    const store2 = {
      dispatch: dispatch2,
      subscribe,
      getState,
      replaceReducer,
      [symbol_observable_default]: observable
    };
    return store2;
  }
  function warning(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
  function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    const reducerKeys = Object.keys(reducers);
    const argumentName = action && action.type === actionTypes_default.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
    if (reducerKeys.length === 0) {
      return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    }
    if (!isPlainObject(inputState)) {
      return `The ${argumentName} has unexpected type of "${kindOf(inputState)}". Expected argument to be an object with the following keys: "${reducerKeys.join('", "')}"`;
    }
    const unexpectedKeys = Object.keys(inputState).filter((key) => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);
    unexpectedKeys.forEach((key) => {
      unexpectedKeyCache[key] = true;
    });
    if (action && action.type === actionTypes_default.REPLACE)
      return;
    if (unexpectedKeys.length > 0) {
      return `Unexpected ${unexpectedKeys.length > 1 ? "keys" : "key"} "${unexpectedKeys.join('", "')}" found in ${argumentName}. Expected to find one of the known reducer keys instead: "${reducerKeys.join('", "')}". Unexpected keys will be ignored.`;
    }
  }
  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach((key) => {
      const reducer = reducers[key];
      const initialState2 = reducer(void 0, {
        type: actionTypes_default.INIT
      });
      if (typeof initialState2 === "undefined") {
        throw new Error(false ? formatProdErrorMessage(12) : `The slice reducer for key "${key}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
      }
      if (typeof reducer(void 0, {
        type: actionTypes_default.PROBE_UNKNOWN_ACTION()
      }) === "undefined") {
        throw new Error(false ? formatProdErrorMessage(13) : `The slice reducer for key "${key}" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
      }
    });
  }
  function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for (let i = 0; i < reducerKeys.length; i++) {
      const key = reducerKeys[i];
      if (true) {
        if (typeof reducers[key] === "undefined") {
          warning(`No reducer provided for key "${key}"`);
        }
      }
      if (typeof reducers[key] === "function") {
        finalReducers[key] = reducers[key];
      }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (true) {
      unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
      assertReducerShape(finalReducers);
    } catch (e3) {
      shapeAssertionError = e3;
    }
    return function combination(state = {}, action) {
      if (shapeAssertionError) {
        throw shapeAssertionError;
      }
      if (true) {
        const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) {
          warning(warningMessage);
        }
      }
      let hasChanged = false;
      const nextState = {};
      for (let i = 0; i < finalReducerKeys.length; i++) {
        const key = finalReducerKeys[i];
        const reducer = finalReducers[key];
        const previousStateForKey = state[key];
        const nextStateForKey = reducer(previousStateForKey, action);
        if (typeof nextStateForKey === "undefined") {
          const actionType = action && action.type;
          throw new Error(false ? formatProdErrorMessage(14) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
        }
        nextState[key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }
      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }
  function compose(...funcs) {
    if (funcs.length === 0) {
      return (arg) => arg;
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce((a, b) => (...args) => a(b(...args)));
  }
  function applyMiddleware(...middlewares) {
    return (createStore2) => (reducer, preloadedState) => {
      const store2 = createStore2(reducer, preloadedState);
      let dispatch2 = () => {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      const middlewareAPI = {
        getState: store2.getState,
        dispatch: (action, ...args) => dispatch2(action, ...args)
      };
      const chain = middlewares.map((middleware) => middleware(middlewareAPI));
      dispatch2 = compose(...chain)(store2.dispatch);
      return {
        ...store2,
        dispatch: dispatch2
      };
    };
  }
  function isAction2(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
  }

  // node_modules/immer/dist/immer.mjs
  var NOTHING = Symbol.for("immer-nothing");
  var DRAFTABLE = Symbol.for("immer-draftable");
  var DRAFT_STATE = Symbol.for("immer-state");
  var errors = true ? [
    // All error codes, starting by 0:
    function(plugin) {
      return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \`enable${plugin}()\` when initializing your application.`;
    },
    function(thing) {
      return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;
    },
    "This object has been frozen and should not be mutated",
    function(data) {
      return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + data;
    },
    "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
    "Immer forbids circular references",
    "The first or second argument to `produce` must be a function",
    "The third argument to `produce` must be a function or undefined",
    "First argument to `createDraft` must be a plain object, an array, or an immerable object",
    "First argument to `finishDraft` must be a draft returned by `createDraft`",
    function(thing) {
      return `'current' expects a draft, got: ${thing}`;
    },
    "Object.defineProperty() cannot be used on an Immer draft",
    "Object.setPrototypeOf() cannot be used on an Immer draft",
    "Immer only supports deleting array indices",
    "Immer only supports setting array indices and the 'length' property",
    function(thing) {
      return `'original' expects a draft, got: ${thing}`;
    }
    // Note: if more errors are added, the errorOffset in Patches.ts should be increased
    // See Patches.ts for additional errors
  ] : [];
  function die(error, ...args) {
    if (true) {
      const e3 = errors[error];
      const msg = typeof e3 === "function" ? e3.apply(null, args) : e3;
      throw new Error(`[Immer] ${msg}`);
    }
    throw new Error(
      `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`
    );
  }
  var getPrototypeOf = Object.getPrototypeOf;
  function isDraft(value) {
    return !!value && !!value[DRAFT_STATE];
  }
  function isDraftable(value) {
    if (!value)
      return false;
    return isPlainObject2(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);
  }
  var objectCtorString = Object.prototype.constructor.toString();
  function isPlainObject2(value) {
    if (!value || typeof value !== "object")
      return false;
    const proto2 = getPrototypeOf(value);
    if (proto2 === null) {
      return true;
    }
    const Ctor = Object.hasOwnProperty.call(proto2, "constructor") && proto2.constructor;
    if (Ctor === Object)
      return true;
    return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString;
  }
  function each(obj, iter) {
    if (getArchtype(obj) === 0) {
      Object.entries(obj).forEach(([key, value]) => {
        iter(key, value, obj);
      });
    } else {
      obj.forEach((entry, index2) => iter(index2, entry, obj));
    }
  }
  function getArchtype(thing) {
    const state = thing[DRAFT_STATE];
    return state ? state.type_ : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0;
  }
  function has(thing, prop) {
    return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
  }
  function set(thing, propOrOldValue, value) {
    const t2 = getArchtype(thing);
    if (t2 === 2)
      thing.set(propOrOldValue, value);
    else if (t2 === 3) {
      thing.add(value);
    } else
      thing[propOrOldValue] = value;
  }
  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function isMap(target) {
    return target instanceof Map;
  }
  function isSet(target) {
    return target instanceof Set;
  }
  function latest(state) {
    return state.copy_ || state.base_;
  }
  function shallowCopy(base, strict) {
    if (isMap(base)) {
      return new Map(base);
    }
    if (isSet(base)) {
      return new Set(base);
    }
    if (Array.isArray(base))
      return Array.prototype.slice.call(base);
    if (!strict && isPlainObject2(base)) {
      if (!getPrototypeOf(base)) {
        const obj = /* @__PURE__ */ Object.create(null);
        return Object.assign(obj, base);
      }
      return { ...base };
    }
    const descriptors = Object.getOwnPropertyDescriptors(base);
    delete descriptors[DRAFT_STATE];
    let keys2 = Reflect.ownKeys(descriptors);
    for (let i = 0; i < keys2.length; i++) {
      const key = keys2[i];
      const desc = descriptors[key];
      if (desc.writable === false) {
        desc.writable = true;
        desc.configurable = true;
      }
      if (desc.get || desc.set)
        descriptors[key] = {
          configurable: true,
          writable: true,
          // could live with !!desc.set as well here...
          enumerable: desc.enumerable,
          value: base[key]
        };
    }
    return Object.create(getPrototypeOf(base), descriptors);
  }
  function freeze(obj, deep = false) {
    if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))
      return obj;
    if (getArchtype(obj) > 1) {
      obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
    }
    Object.freeze(obj);
    if (deep)
      each(obj, (_key, value) => freeze(value, true), true);
    return obj;
  }
  function dontMutateFrozenCollections() {
    die(2);
  }
  function isFrozen(obj) {
    return Object.isFrozen(obj);
  }
  var plugins = {};
  function getPlugin(pluginKey) {
    const plugin = plugins[pluginKey];
    if (!plugin) {
      die(0, pluginKey);
    }
    return plugin;
  }
  var currentScope;
  function getCurrentScope() {
    return currentScope;
  }
  function createScope(parent_, immer_) {
    return {
      drafts_: [],
      parent_,
      immer_,
      // Whenever the modified draft contains a draft from another scope, we
      // need to prevent auto-freezing so the unowned draft can be finalized.
      canAutoFreeze_: true,
      unfinalizedDrafts_: 0
    };
  }
  function usePatchesInScope(scope, patchListener) {
    if (patchListener) {
      getPlugin("Patches");
      scope.patches_ = [];
      scope.inversePatches_ = [];
      scope.patchListener_ = patchListener;
    }
  }
  function revokeScope(scope) {
    leaveScope(scope);
    scope.drafts_.forEach(revokeDraft);
    scope.drafts_ = null;
  }
  function leaveScope(scope) {
    if (scope === currentScope) {
      currentScope = scope.parent_;
    }
  }
  function enterScope(immer2) {
    return currentScope = createScope(currentScope, immer2);
  }
  function revokeDraft(draft) {
    const state = draft[DRAFT_STATE];
    if (state.type_ === 0 || state.type_ === 1)
      state.revoke_();
    else
      state.revoked_ = true;
  }
  function processResult(result, scope) {
    scope.unfinalizedDrafts_ = scope.drafts_.length;
    const baseDraft = scope.drafts_[0];
    const isReplaced = result !== void 0 && result !== baseDraft;
    if (isReplaced) {
      if (baseDraft[DRAFT_STATE].modified_) {
        revokeScope(scope);
        die(4);
      }
      if (isDraftable(result)) {
        result = finalize(scope, result);
        if (!scope.parent_)
          maybeFreeze(scope, result);
      }
      if (scope.patches_) {
        getPlugin("Patches").generateReplacementPatches_(
          baseDraft[DRAFT_STATE].base_,
          result,
          scope.patches_,
          scope.inversePatches_
        );
      }
    } else {
      result = finalize(scope, baseDraft, []);
    }
    revokeScope(scope);
    if (scope.patches_) {
      scope.patchListener_(scope.patches_, scope.inversePatches_);
    }
    return result !== NOTHING ? result : void 0;
  }
  function finalize(rootScope, value, path2) {
    if (isFrozen(value))
      return value;
    const state = value[DRAFT_STATE];
    if (!state) {
      each(
        value,
        (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path2),
        true
        // See #590, don't recurse into non-enumerable of non drafted objects
      );
      return value;
    }
    if (state.scope_ !== rootScope)
      return value;
    if (!state.modified_) {
      maybeFreeze(rootScope, state.base_, true);
      return state.base_;
    }
    if (!state.finalized_) {
      state.finalized_ = true;
      state.scope_.unfinalizedDrafts_--;
      const result = state.copy_;
      let resultEach = result;
      let isSet2 = false;
      if (state.type_ === 3) {
        resultEach = new Set(result);
        result.clear();
        isSet2 = true;
      }
      each(
        resultEach,
        (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path2, isSet2)
      );
      maybeFreeze(rootScope, result, false);
      if (path2 && rootScope.patches_) {
        getPlugin("Patches").generatePatches_(
          state,
          path2,
          rootScope.patches_,
          rootScope.inversePatches_
        );
      }
    }
    return state.copy_;
  }
  function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {
    if (childValue === targetObject)
      die(5);
    if (isDraft(childValue)) {
      const path2 = rootPath && parentState && parentState.type_ !== 3 && // Set objects are atomic since they have no keys.
      !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;
      const res = finalize(rootScope, childValue, path2);
      set(targetObject, prop, res);
      if (isDraft(res)) {
        rootScope.canAutoFreeze_ = false;
      } else
        return;
    } else if (targetIsSet) {
      targetObject.add(childValue);
    }
    if (isDraftable(childValue) && !isFrozen(childValue)) {
      if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
        return;
      }
      finalize(rootScope, childValue);
      if (!parentState || !parentState.scope_.parent_)
        maybeFreeze(rootScope, childValue);
    }
  }
  function maybeFreeze(scope, value, deep = false) {
    if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
      freeze(value, deep);
    }
  }
  function createProxyProxy(base, parent) {
    const isArray = Array.isArray(base);
    const state = {
      type_: isArray ? 1 : 0,
      // Track which produce call this is associated with.
      scope_: parent ? parent.scope_ : getCurrentScope(),
      // True for both shallow and deep changes.
      modified_: false,
      // Used during finalization.
      finalized_: false,
      // Track which properties have been assigned (true) or deleted (false).
      assigned_: {},
      // The parent draft state.
      parent_: parent,
      // The base state.
      base_: base,
      // The base proxy.
      draft_: null,
      // set below
      // The base copy with any updated values.
      copy_: null,
      // Called by the `produce` function.
      revoke_: null,
      isManual_: false
    };
    let target = state;
    let traps = objectTraps;
    if (isArray) {
      target = [state];
      traps = arrayTraps;
    }
    const { revoke, proxy } = Proxy.revocable(target, traps);
    state.draft_ = proxy;
    state.revoke_ = revoke;
    return proxy;
  }
  var objectTraps = {
    get(state, prop) {
      if (prop === DRAFT_STATE)
        return state;
      const source = latest(state);
      if (!has(source, prop)) {
        return readPropFromProto(state, source, prop);
      }
      const value = source[prop];
      if (state.finalized_ || !isDraftable(value)) {
        return value;
      }
      if (value === peek(state.base_, prop)) {
        prepareCopy(state);
        return state.copy_[prop] = createProxy(value, state);
      }
      return value;
    },
    has(state, prop) {
      return prop in latest(state);
    },
    ownKeys(state) {
      return Reflect.ownKeys(latest(state));
    },
    set(state, prop, value) {
      const desc = getDescriptorFromProto(latest(state), prop);
      if (desc?.set) {
        desc.set.call(state.draft_, value);
        return true;
      }
      if (!state.modified_) {
        const current2 = peek(latest(state), prop);
        const currentState = current2?.[DRAFT_STATE];
        if (currentState && currentState.base_ === value) {
          state.copy_[prop] = value;
          state.assigned_[prop] = false;
          return true;
        }
        if (is(value, current2) && (value !== void 0 || has(state.base_, prop)))
          return true;
        prepareCopy(state);
        markChanged(state);
      }
      if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'
      (value !== void 0 || prop in state.copy_) || // special case: NaN
      Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
        return true;
      state.copy_[prop] = value;
      state.assigned_[prop] = true;
      return true;
    },
    deleteProperty(state, prop) {
      if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
        state.assigned_[prop] = false;
        prepareCopy(state);
        markChanged(state);
      } else {
        delete state.assigned_[prop];
      }
      if (state.copy_) {
        delete state.copy_[prop];
      }
      return true;
    },
    // Note: We never coerce `desc.value` into an Immer draft, because we can't make
    // the same guarantee in ES5 mode.
    getOwnPropertyDescriptor(state, prop) {
      const owner = latest(state);
      const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
      if (!desc)
        return desc;
      return {
        writable: true,
        configurable: state.type_ !== 1 || prop !== "length",
        enumerable: desc.enumerable,
        value: owner[prop]
      };
    },
    defineProperty() {
      die(11);
    },
    getPrototypeOf(state) {
      return getPrototypeOf(state.base_);
    },
    setPrototypeOf() {
      die(12);
    }
  };
  var arrayTraps = {};
  each(objectTraps, (key, fn) => {
    arrayTraps[key] = function() {
      arguments[0] = arguments[0][0];
      return fn.apply(this, arguments);
    };
  });
  arrayTraps.deleteProperty = function(state, prop) {
    if (isNaN(parseInt(prop)))
      die(13);
    return arrayTraps.set.call(this, state, prop, void 0);
  };
  arrayTraps.set = function(state, prop, value) {
    if (prop !== "length" && isNaN(parseInt(prop)))
      die(14);
    return objectTraps.set.call(this, state[0], prop, value, state[0]);
  };
  function peek(draft, prop) {
    const state = draft[DRAFT_STATE];
    const source = state ? latest(state) : draft;
    return source[prop];
  }
  function readPropFromProto(state, source, prop) {
    const desc = getDescriptorFromProto(source, prop);
    return desc ? `value` in desc ? desc.value : (
      // This is a very special case, if the prop is a getter defined by the
      // prototype, we should invoke it with the draft as context!
      desc.get?.call(state.draft_)
    ) : void 0;
  }
  function getDescriptorFromProto(source, prop) {
    if (!(prop in source))
      return void 0;
    let proto2 = getPrototypeOf(source);
    while (proto2) {
      const desc = Object.getOwnPropertyDescriptor(proto2, prop);
      if (desc)
        return desc;
      proto2 = getPrototypeOf(proto2);
    }
    return void 0;
  }
  function markChanged(state) {
    if (!state.modified_) {
      state.modified_ = true;
      if (state.parent_) {
        markChanged(state.parent_);
      }
    }
  }
  function prepareCopy(state) {
    if (!state.copy_) {
      state.copy_ = shallowCopy(
        state.base_,
        state.scope_.immer_.useStrictShallowCopy_
      );
    }
  }
  var Immer2 = class {
    constructor(config) {
      this.autoFreeze_ = true;
      this.useStrictShallowCopy_ = false;
      this.produce = (base, recipe, patchListener) => {
        if (typeof base === "function" && typeof recipe !== "function") {
          const defaultBase = recipe;
          recipe = base;
          const self2 = this;
          return function curriedProduce(base2 = defaultBase, ...args) {
            return self2.produce(base2, (draft) => recipe.call(this, draft, ...args));
          };
        }
        if (typeof recipe !== "function")
          die(6);
        if (patchListener !== void 0 && typeof patchListener !== "function")
          die(7);
        let result;
        if (isDraftable(base)) {
          const scope = enterScope(this);
          const proxy = createProxy(base, void 0);
          let hasError2 = true;
          try {
            result = recipe(proxy);
            hasError2 = false;
          } finally {
            if (hasError2)
              revokeScope(scope);
            else
              leaveScope(scope);
          }
          usePatchesInScope(scope, patchListener);
          return processResult(result, scope);
        } else if (!base || typeof base !== "object") {
          result = recipe(base);
          if (result === void 0)
            result = base;
          if (result === NOTHING)
            result = void 0;
          if (this.autoFreeze_)
            freeze(result, true);
          if (patchListener) {
            const p = [];
            const ip = [];
            getPlugin("Patches").generateReplacementPatches_(base, result, p, ip);
            patchListener(p, ip);
          }
          return result;
        } else
          die(1, base);
      };
      this.produceWithPatches = (base, recipe) => {
        if (typeof base === "function") {
          return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));
        }
        let patches, inversePatches;
        const result = this.produce(base, recipe, (p, ip) => {
          patches = p;
          inversePatches = ip;
        });
        return [result, patches, inversePatches];
      };
      if (typeof config?.autoFreeze === "boolean")
        this.setAutoFreeze(config.autoFreeze);
      if (typeof config?.useStrictShallowCopy === "boolean")
        this.setUseStrictShallowCopy(config.useStrictShallowCopy);
    }
    createDraft(base) {
      if (!isDraftable(base))
        die(8);
      if (isDraft(base))
        base = current(base);
      const scope = enterScope(this);
      const proxy = createProxy(base, void 0);
      proxy[DRAFT_STATE].isManual_ = true;
      leaveScope(scope);
      return proxy;
    }
    finishDraft(draft, patchListener) {
      const state = draft && draft[DRAFT_STATE];
      if (!state || !state.isManual_)
        die(9);
      const { scope_: scope } = state;
      usePatchesInScope(scope, patchListener);
      return processResult(void 0, scope);
    }
    /**
     * Pass true to automatically freeze all copies created by Immer.
     *
     * By default, auto-freezing is enabled.
     */
    setAutoFreeze(value) {
      this.autoFreeze_ = value;
    }
    /**
     * Pass true to enable strict shallow copy.
     *
     * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
     */
    setUseStrictShallowCopy(value) {
      this.useStrictShallowCopy_ = value;
    }
    applyPatches(base, patches) {
      let i;
      for (i = patches.length - 1; i >= 0; i--) {
        const patch = patches[i];
        if (patch.path.length === 0 && patch.op === "replace") {
          base = patch.value;
          break;
        }
      }
      if (i > -1) {
        patches = patches.slice(i + 1);
      }
      const applyPatchesImpl = getPlugin("Patches").applyPatches_;
      if (isDraft(base)) {
        return applyPatchesImpl(base, patches);
      }
      return this.produce(
        base,
        (draft) => applyPatchesImpl(draft, patches)
      );
    }
  };
  function createProxy(value, parent) {
    const draft = isMap(value) ? getPlugin("MapSet").proxyMap_(value, parent) : isSet(value) ? getPlugin("MapSet").proxySet_(value, parent) : createProxyProxy(value, parent);
    const scope = parent ? parent.scope_ : getCurrentScope();
    scope.drafts_.push(draft);
    return draft;
  }
  function current(value) {
    if (!isDraft(value))
      die(10, value);
    return currentImpl(value);
  }
  function currentImpl(value) {
    if (!isDraftable(value) || isFrozen(value))
      return value;
    const state = value[DRAFT_STATE];
    let copy2;
    if (state) {
      if (!state.modified_)
        return state.base_;
      state.finalized_ = true;
      copy2 = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);
    } else {
      copy2 = shallowCopy(value, true);
    }
    each(copy2, (key, childValue) => {
      set(copy2, key, currentImpl(childValue));
    });
    if (state) {
      state.finalized_ = false;
    }
    return copy2;
  }
  var immer = new Immer2();
  var produce = immer.produce;
  var produceWithPatches = immer.produceWithPatches.bind(
    immer
  );
  var setAutoFreeze = immer.setAutoFreeze.bind(immer);
  var setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);
  var applyPatches = immer.applyPatches.bind(immer);
  var createDraft = immer.createDraft.bind(immer);
  var finishDraft = immer.finishDraft.bind(immer);

  // node_modules/reselect/dist/reselect.mjs
  var runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult) => {
    if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {
      let isInputSameAsOutput = false;
      try {
        const emptyObject = {};
        if (resultFunc(emptyObject) === emptyObject)
          isInputSameAsOutput = true;
      } catch {
      }
      if (isInputSameAsOutput) {
        let stack = void 0;
        try {
          throw new Error();
        } catch (e3) {
          ;
          ({ stack } = e3);
        }
        console.warn(
          "The result function returned its own inputs without modification. e.g\n`createSelector([state => state.todos], todos => todos)`\nThis could lead to inefficient memoization and unnecessary re-renders.\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.",
          { stack }
        );
      }
    }
  };
  var runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs) => {
    const { memoize, memoizeOptions } = options;
    const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;
    const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);
    const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);
    if (!areInputSelectorResultsEqual) {
      let stack = void 0;
      try {
        throw new Error();
      } catch (e3) {
        ;
        ({ stack } = e3);
      }
      console.warn(
        "An input selector returned a different result when passed same arguments.\nThis means your output selector will likely run more frequently than intended.\nAvoid returning a new reference inside your input selector, e.g.\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`",
        {
          arguments: inputSelectorArgs,
          firstInputs: inputSelectorResults,
          secondInputs: inputSelectorResultsCopy,
          stack
        }
      );
    }
  };
  var globalDevModeChecks = {
    inputStabilityCheck: "once",
    identityFunctionCheck: "once"
  };
  function assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {
    if (typeof func !== "function") {
      throw new TypeError(errorMessage);
    }
  }
  function assertIsObject(object4, errorMessage = `expected an object, instead received ${typeof object4}`) {
    if (typeof object4 !== "object") {
      throw new TypeError(errorMessage);
    }
  }
  function assertIsArrayOfFunctions(array4, errorMessage = `expected all items to be functions, instead received the following types: `) {
    if (!array4.every((item) => typeof item === "function")) {
      const itemTypes = array4.map(
        (item) => typeof item === "function" ? `function ${item.name || "unnamed"}()` : typeof item
      ).join(", ");
      throw new TypeError(`${errorMessage}[${itemTypes}]`);
    }
  }
  var ensureIsArray = (item) => {
    return Array.isArray(item) ? item : [item];
  };
  function getDependencies(createSelectorArgs) {
    const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;
    assertIsArrayOfFunctions(
      dependencies,
      `createSelector expects all input-selectors to be functions, but received the following types: `
    );
    return dependencies;
  }
  function collectInputSelectorResults(dependencies, inputSelectorArgs) {
    const inputSelectorResults = [];
    const { length: length2 } = dependencies;
    for (let i = 0; i < length2; i++) {
      inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));
    }
    return inputSelectorResults;
  }
  var getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {
    const { identityFunctionCheck, inputStabilityCheck } = {
      ...globalDevModeChecks,
      ...devModeChecks
    };
    return {
      identityFunctionCheck: {
        shouldRun: identityFunctionCheck === "always" || identityFunctionCheck === "once" && firstRun,
        run: runIdentityFunctionCheck
      },
      inputStabilityCheck: {
        shouldRun: inputStabilityCheck === "always" || inputStabilityCheck === "once" && firstRun,
        run: runInputStabilityCheck
      }
    };
  };
  var REDUX_PROXY_LABEL = Symbol();
  var proto = Object.getPrototypeOf({});
  var StrongRef = class {
    constructor(value) {
      this.value = value;
    }
    deref() {
      return this.value;
    }
  };
  var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
  var UNTERMINATED = 0;
  var TERMINATED = 1;
  function createCacheNode() {
    return {
      s: UNTERMINATED,
      v: void 0,
      o: null,
      p: null
    };
  }
  function weakMapMemoize(func, options = {}) {
    let fnNode = createCacheNode();
    const { resultEqualityCheck } = options;
    let lastResult;
    let resultsCount = 0;
    function memoized() {
      let cacheNode = fnNode;
      const { length: length2 } = arguments;
      for (let i = 0, l2 = length2; i < l2; i++) {
        const arg = arguments[i];
        if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
          let objectCache = cacheNode.o;
          if (objectCache === null) {
            cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
          }
          const objectNode = objectCache.get(arg);
          if (objectNode === void 0) {
            cacheNode = createCacheNode();
            objectCache.set(arg, cacheNode);
          } else {
            cacheNode = objectNode;
          }
        } else {
          let primitiveCache = cacheNode.p;
          if (primitiveCache === null) {
            cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
          }
          const primitiveNode = primitiveCache.get(arg);
          if (primitiveNode === void 0) {
            cacheNode = createCacheNode();
            primitiveCache.set(arg, cacheNode);
          } else {
            cacheNode = primitiveNode;
          }
        }
      }
      const terminatedNode = cacheNode;
      let result;
      if (cacheNode.s === TERMINATED) {
        result = cacheNode.v;
      } else {
        result = func.apply(null, arguments);
        resultsCount++;
      }
      terminatedNode.s = TERMINATED;
      if (resultEqualityCheck) {
        const lastResultValue = lastResult?.deref?.() ?? lastResult;
        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {
          result = lastResultValue;
          resultsCount !== 0 && resultsCount--;
        }
        const needsWeakRef = typeof result === "object" && result !== null || typeof result === "function";
        lastResult = needsWeakRef ? new Ref(result) : result;
      }
      terminatedNode.v = result;
      return result;
    }
    memoized.clearCache = () => {
      fnNode = createCacheNode();
      memoized.resetResultsCount();
    };
    memoized.resultsCount = () => resultsCount;
    memoized.resetResultsCount = () => {
      resultsCount = 0;
    };
    return memoized;
  }
  function createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {
    const createSelectorCreatorOptions = typeof memoizeOrOptions === "function" ? {
      memoize: memoizeOrOptions,
      memoizeOptions: memoizeOptionsFromArgs
    } : memoizeOrOptions;
    const createSelector2 = (...createSelectorArgs) => {
      let recomputations = 0;
      let dependencyRecomputations = 0;
      let lastResult;
      let directlyPassedOptions = {};
      let resultFunc = createSelectorArgs.pop();
      if (typeof resultFunc === "object") {
        directlyPassedOptions = resultFunc;
        resultFunc = createSelectorArgs.pop();
      }
      assertIsFunction(
        resultFunc,
        `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`
      );
      const combinedOptions = {
        ...createSelectorCreatorOptions,
        ...directlyPassedOptions
      };
      const {
        memoize,
        memoizeOptions = [],
        argsMemoize = weakMapMemoize,
        argsMemoizeOptions = [],
        devModeChecks = {}
      } = combinedOptions;
      const finalMemoizeOptions = ensureIsArray(memoizeOptions);
      const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
      const dependencies = getDependencies(createSelectorArgs);
      const memoizedResultFunc = memoize(function recomputationWrapper() {
        recomputations++;
        return resultFunc.apply(
          null,
          arguments
        );
      }, ...finalMemoizeOptions);
      let firstRun = true;
      const selector = argsMemoize(function dependenciesChecker() {
        dependencyRecomputations++;
        const inputSelectorResults = collectInputSelectorResults(
          dependencies,
          arguments
        );
        lastResult = memoizedResultFunc.apply(null, inputSelectorResults);
        if (true) {
          const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);
          if (identityFunctionCheck.shouldRun) {
            identityFunctionCheck.run(
              resultFunc,
              inputSelectorResults,
              lastResult
            );
          }
          if (inputStabilityCheck.shouldRun) {
            const inputSelectorResultsCopy = collectInputSelectorResults(
              dependencies,
              arguments
            );
            inputStabilityCheck.run(
              { inputSelectorResults, inputSelectorResultsCopy },
              { memoize, memoizeOptions: finalMemoizeOptions },
              arguments
            );
          }
          if (firstRun)
            firstRun = false;
        }
        return lastResult;
      }, ...finalArgsMemoizeOptions);
      return Object.assign(selector, {
        resultFunc,
        memoizedResultFunc,
        dependencies,
        dependencyRecomputations: () => dependencyRecomputations,
        resetDependencyRecomputations: () => {
          dependencyRecomputations = 0;
        },
        lastResult: () => lastResult,
        recomputations: () => recomputations,
        resetRecomputations: () => {
          recomputations = 0;
        },
        memoize,
        argsMemoize
      });
    };
    Object.assign(createSelector2, {
      withTypes: () => createSelector2
    });
    return createSelector2;
  }
  var createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
  var createStructuredSelector = Object.assign(
    (inputSelectorsObject, selectorCreator = createSelector) => {
      assertIsObject(
        inputSelectorsObject,
        `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`
      );
      const inputSelectorKeys = Object.keys(inputSelectorsObject);
      const dependencies = inputSelectorKeys.map(
        (key) => inputSelectorsObject[key]
      );
      const structuredSelector = selectorCreator(
        dependencies,
        (...inputSelectorResults) => {
          return inputSelectorResults.reduce((composition, value, index2) => {
            composition[inputSelectorKeys[index2]] = value;
            return composition;
          }, {});
        }
      );
      return structuredSelector;
    },
    { withTypes: () => createStructuredSelector }
  );

  // node_modules/redux-thunk/dist/redux-thunk.mjs
  function createThunkMiddleware(extraArgument) {
    const middleware = ({ dispatch: dispatch2, getState }) => (next2) => (action) => {
      if (typeof action === "function") {
        return action(dispatch2, getState, extraArgument);
      }
      return next2(action);
    };
    return middleware;
  }
  var thunk = createThunkMiddleware();
  var withExtraArgument = createThunkMiddleware;

  // node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs
  var createDraftSafeSelectorCreator = (...args) => {
    const createSelector2 = createSelectorCreator(...args);
    const createDraftSafeSelector2 = Object.assign((...args2) => {
      const selector = createSelector2(...args2);
      const wrappedSelector = (value, ...rest) => selector(isDraft(value) ? current(value) : value, ...rest);
      Object.assign(wrappedSelector, selector);
      return wrappedSelector;
    }, {
      withTypes: () => createDraftSafeSelector2
    });
    return createDraftSafeSelector2;
  };
  var createDraftSafeSelector = createDraftSafeSelectorCreator(weakMapMemoize);
  var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
    if (arguments.length === 0)
      return void 0;
    if (typeof arguments[0] === "object")
      return compose;
    return compose.apply(null, arguments);
  };
  var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
    return function(noop32) {
      return noop32;
    };
  };
  var hasMatchFunction = (v) => {
    return v && typeof v.match === "function";
  };
  function createAction(type4, prepareAction) {
    function actionCreator(...args) {
      if (prepareAction) {
        let prepared = prepareAction(...args);
        if (!prepared) {
          throw new Error(false ? formatProdErrorMessage(0) : "prepareAction did not return an object");
        }
        return {
          type: type4,
          payload: prepared.payload,
          ..."meta" in prepared && {
            meta: prepared.meta
          },
          ..."error" in prepared && {
            error: prepared.error
          }
        };
      }
      return {
        type: type4,
        payload: args[0]
      };
    }
    actionCreator.toString = () => `${type4}`;
    actionCreator.type = type4;
    actionCreator.match = (action) => isAction2(action) && action.type === type4;
    return actionCreator;
  }
  function isActionCreator(action) {
    return typeof action === "function" && "type" in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
    hasMatchFunction(action);
  }
  function getMessage(type4) {
    const splitType = type4 ? `${type4}`.split("/") : [];
    const actionName = splitType[splitType.length - 1] || "actionCreator";
    return `Detected an action creator with type "${type4 || "unknown"}" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${actionName}())\` instead of \`dispatch(${actionName})\`. This is necessary even if the action has no payload.`;
  }
  function createActionCreatorInvariantMiddleware(options = {}) {
    if (false) {
      return () => (next2) => (action) => next2(action);
    }
    const {
      isActionCreator: isActionCreator2 = isActionCreator
    } = options;
    return () => (next2) => (action) => {
      if (isActionCreator2(action)) {
        console.warn(getMessage(action.type));
      }
      return next2(action);
    };
  }
  function getTimeMeasureUtils(maxDelay, fnName) {
    let elapsed = 0;
    return {
      measureTime(fn) {
        const started = Date.now();
        try {
          return fn();
        } finally {
          const finished = Date.now();
          elapsed += finished - started;
        }
      },
      warnIfExceeded() {
        if (elapsed > maxDelay) {
          console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
        }
      }
    };
  }
  var Tuple = class _Tuple extends Array {
    constructor(...items) {
      super(...items);
      Object.setPrototypeOf(this, _Tuple.prototype);
    }
    static get [Symbol.species]() {
      return _Tuple;
    }
    concat(...arr) {
      return super.concat.apply(this, arr);
    }
    prepend(...arr) {
      if (arr.length === 1 && Array.isArray(arr[0])) {
        return new _Tuple(...arr[0].concat(this));
      }
      return new _Tuple(...arr.concat(this));
    }
  };
  function freezeDraftable(val) {
    return isDraftable(val) ? produce(val, () => {
    }) : val;
  }
  function emplace(map, key, handler) {
    if (map.has(key)) {
      let value = map.get(key);
      if (handler.update) {
        value = handler.update(value, key, map);
        map.set(key, value);
      }
      return value;
    }
    if (!handler.insert)
      throw new Error(false ? formatProdErrorMessage(10) : "No insert provided for key not already in map");
    const inserted = handler.insert(key, map);
    map.set(key, inserted);
    return inserted;
  }
  function isImmutableDefault(value) {
    return typeof value !== "object" || value == null || Object.isFrozen(value);
  }
  function trackForMutations(isImmutable, ignorePaths, obj) {
    const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
    return {
      detectMutations() {
        return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
      }
    };
  }
  function trackProperties(isImmutable, ignorePaths = [], obj, path2 = "", checkedObjects = /* @__PURE__ */ new Set()) {
    const tracked = {
      value: obj
    };
    if (!isImmutable(obj) && !checkedObjects.has(obj)) {
      checkedObjects.add(obj);
      tracked.children = {};
      for (const key in obj) {
        const childPath = path2 ? path2 + "." + key : key;
        if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
          continue;
        }
        tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
      }
    }
    return tracked;
  }
  function detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path2 = "") {
    const prevObj = trackedProperty ? trackedProperty.value : void 0;
    const sameRef = prevObj === obj;
    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
      return {
        wasMutated: true,
        path: path2
      };
    }
    if (isImmutable(prevObj) || isImmutable(obj)) {
      return {
        wasMutated: false
      };
    }
    const keysToDetect = {};
    for (let key in trackedProperty.children) {
      keysToDetect[key] = true;
    }
    for (let key in obj) {
      keysToDetect[key] = true;
    }
    const hasIgnoredPaths = ignoredPaths.length > 0;
    for (let key in keysToDetect) {
      const nestedPath = path2 ? path2 + "." + key : key;
      if (hasIgnoredPaths) {
        const hasMatches = ignoredPaths.some((ignored) => {
          if (ignored instanceof RegExp) {
            return ignored.test(nestedPath);
          }
          return nestedPath === ignored;
        });
        if (hasMatches) {
          continue;
        }
      }
      const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);
      if (result.wasMutated) {
        return result;
      }
    }
    return {
      wasMutated: false
    };
  }
  function createImmutableStateInvariantMiddleware(options = {}) {
    if (false) {
      return () => (next2) => (action) => next2(action);
    } else {
      let stringify22 = function(obj, serializer, indent, decycler) {
        return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);
      }, getSerialize2 = function(serializer, decycler) {
        let stack = [], keys2 = [];
        if (!decycler)
          decycler = function(_, value) {
            if (stack[0] === value)
              return "[Circular ~]";
            return "[Circular ~." + keys2.slice(0, stack.indexOf(value)).join(".") + "]";
          };
        return function(key, value) {
          if (stack.length > 0) {
            var thisPos = stack.indexOf(this);
            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
            ~thisPos ? keys2.splice(thisPos, Infinity, key) : keys2.push(key);
            if (~stack.indexOf(value))
              value = decycler.call(this, key, value);
          } else
            stack.push(value);
          return serializer == null ? value : serializer.call(this, key, value);
        };
      };
      var stringify4 = stringify22, getSerialize = getSerialize2;
      let {
        isImmutable = isImmutableDefault,
        ignoredPaths,
        warnAfter = 32
      } = options;
      const track = trackForMutations.bind(null, isImmutable, ignoredPaths);
      return ({
        getState
      }) => {
        let state = getState();
        let tracker = track(state);
        let result;
        return (next2) => (action) => {
          const measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
          measureUtils.measureTime(() => {
            state = getState();
            result = tracker.detectMutations();
            tracker = track(state);
            if (result.wasMutated) {
              throw new Error(false ? formatProdErrorMessage(19) : `A state mutation was detected between dispatches, in the path '${result.path || ""}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
            }
          });
          const dispatchedAction = next2(action);
          measureUtils.measureTime(() => {
            state = getState();
            result = tracker.detectMutations();
            tracker = track(state);
            if (result.wasMutated) {
              throw new Error(false ? formatProdErrorMessage(20) : `A state mutation was detected inside a dispatch, in the path: ${result.path || ""}. Take a look at the reducer(s) handling the action ${stringify22(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
            }
          });
          measureUtils.warnIfExceeded();
          return dispatchedAction;
        };
      };
    }
  }
  function isPlain(val) {
    const type4 = typeof val;
    return val == null || type4 === "string" || type4 === "boolean" || type4 === "number" || Array.isArray(val) || isPlainObject(val);
  }
  function findNonSerializableValue(value, path2 = "", isSerializable = isPlain, getEntries, ignoredPaths = [], cache2) {
    let foundNestedSerializable;
    if (!isSerializable(value)) {
      return {
        keyPath: path2 || "<root>",
        value
      };
    }
    if (typeof value !== "object" || value === null) {
      return false;
    }
    if (cache2?.has(value))
      return false;
    const entries = getEntries != null ? getEntries(value) : Object.entries(value);
    const hasIgnoredPaths = ignoredPaths.length > 0;
    for (const [key, nestedValue] of entries) {
      const nestedPath = path2 ? path2 + "." + key : key;
      if (hasIgnoredPaths) {
        const hasMatches = ignoredPaths.some((ignored) => {
          if (ignored instanceof RegExp) {
            return ignored.test(nestedPath);
          }
          return nestedPath === ignored;
        });
        if (hasMatches) {
          continue;
        }
      }
      if (!isSerializable(nestedValue)) {
        return {
          keyPath: nestedPath,
          value: nestedValue
        };
      }
      if (typeof nestedValue === "object") {
        foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache2);
        if (foundNestedSerializable) {
          return foundNestedSerializable;
        }
      }
    }
    if (cache2 && isNestedFrozen(value))
      cache2.add(value);
    return false;
  }
  function isNestedFrozen(value) {
    if (!Object.isFrozen(value))
      return false;
    for (const nestedValue of Object.values(value)) {
      if (typeof nestedValue !== "object" || nestedValue === null)
        continue;
      if (!isNestedFrozen(nestedValue))
        return false;
    }
    return true;
  }
  function createSerializableStateInvariantMiddleware(options = {}) {
    if (false) {
      return () => (next2) => (action) => next2(action);
    } else {
      const {
        isSerializable = isPlain,
        getEntries,
        ignoredActions = [],
        ignoredActionPaths = ["meta.arg", "meta.baseQueryMeta"],
        ignoredPaths = [],
        warnAfter = 32,
        ignoreState = false,
        ignoreActions = false,
        disableCache = false
      } = options;
      const cache2 = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
      return (storeAPI) => (next2) => (action) => {
        if (!isAction2(action)) {
          return next2(action);
        }
        const result = next2(action);
        const measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {
          measureUtils.measureTime(() => {
            const foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths, cache2);
            if (foundActionNonSerializableValue) {
              const {
                keyPath,
                value
              } = foundActionNonSerializableValue;
              console.error(`A non-serializable value was detected in an action, in the path: \`${keyPath}\`. Value:`, value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
            }
          });
        }
        if (!ignoreState) {
          measureUtils.measureTime(() => {
            const state = storeAPI.getState();
            const foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths, cache2);
            if (foundStateNonSerializableValue) {
              const {
                keyPath,
                value
              } = foundStateNonSerializableValue;
              console.error(`A non-serializable value was detected in the state, in the path: \`${keyPath}\`. Value:`, value, `
Take a look at the reducer(s) handling this action type: ${action.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);
            }
          });
          measureUtils.warnIfExceeded();
        }
        return result;
      };
    }
  }
  function isBoolean(x) {
    return typeof x === "boolean";
  }
  var buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {
    const {
      thunk: thunk2 = true,
      immutableCheck = true,
      serializableCheck = true,
      actionCreatorCheck = true
    } = options ?? {};
    let middlewareArray = new Tuple();
    if (thunk2) {
      if (isBoolean(thunk2)) {
        middlewareArray.push(thunk);
      } else {
        middlewareArray.push(withExtraArgument(thunk2.extraArgument));
      }
    }
    if (true) {
      if (immutableCheck) {
        let immutableOptions = {};
        if (!isBoolean(immutableCheck)) {
          immutableOptions = immutableCheck;
        }
        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
      }
      if (serializableCheck) {
        let serializableOptions = {};
        if (!isBoolean(serializableCheck)) {
          serializableOptions = serializableCheck;
        }
        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
      }
      if (actionCreatorCheck) {
        let actionCreatorOptions = {};
        if (!isBoolean(actionCreatorCheck)) {
          actionCreatorOptions = actionCreatorCheck;
        }
        middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));
      }
    }
    return middlewareArray;
  };
  var SHOULD_AUTOBATCH = "RTK_autoBatch";
  var createQueueWithTimer = (timeout) => {
    return (notify) => {
      setTimeout(notify, timeout);
    };
  };
  var rAF = typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);
  var autoBatchEnhancer = (options = {
    type: "raf"
  }) => (next2) => (...args) => {
    const store2 = next2(...args);
    let notifying = true;
    let shouldNotifyAtEndOfTick = false;
    let notificationQueued = false;
    const listeners = /* @__PURE__ */ new Set();
    const queueCallback = options.type === "tick" ? queueMicrotask : options.type === "raf" ? rAF : options.type === "callback" ? options.queueNotification : createQueueWithTimer(options.timeout);
    const notifyListeners = () => {
      notificationQueued = false;
      if (shouldNotifyAtEndOfTick) {
        shouldNotifyAtEndOfTick = false;
        listeners.forEach((l2) => l2());
      }
    };
    return Object.assign({}, store2, {
      // Override the base `store.subscribe` method to keep original listeners
      // from running if we're delaying notifications
      subscribe(listener2) {
        const wrappedListener = () => notifying && listener2();
        const unsubscribe = store2.subscribe(wrappedListener);
        listeners.add(listener2);
        return () => {
          unsubscribe();
          listeners.delete(listener2);
        };
      },
      // Override the base `store.dispatch` method so that we can check actions
      // for the `shouldAutoBatch` flag and determine if batching is active
      dispatch(action) {
        try {
          notifying = !action?.meta?.[SHOULD_AUTOBATCH];
          shouldNotifyAtEndOfTick = !notifying;
          if (shouldNotifyAtEndOfTick) {
            if (!notificationQueued) {
              notificationQueued = true;
              queueCallback(notifyListeners);
            }
          }
          return store2.dispatch(action);
        } finally {
          notifying = true;
        }
      }
    });
  };
  var buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {
    const {
      autoBatch = true
    } = options ?? {};
    let enhancerArray = new Tuple(middlewareEnhancer);
    if (autoBatch) {
      enhancerArray.push(autoBatchEnhancer(typeof autoBatch === "object" ? autoBatch : void 0));
    }
    return enhancerArray;
  };
  var IS_PRODUCTION = false;
  function configureStore(options) {
    const getDefaultMiddleware = buildGetDefaultMiddleware();
    const {
      reducer = void 0,
      middleware,
      devTools = true,
      preloadedState = void 0,
      enhancers = void 0
    } = options || {};
    let rootReducer;
    if (typeof reducer === "function") {
      rootReducer = reducer;
    } else if (isPlainObject(reducer)) {
      rootReducer = combineReducers(reducer);
    } else {
      throw new Error(false ? formatProdErrorMessage(1) : "`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers");
    }
    if (!IS_PRODUCTION && middleware && typeof middleware !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : "`middleware` field must be a callback");
    }
    let finalMiddleware;
    if (typeof middleware === "function") {
      finalMiddleware = middleware(getDefaultMiddleware);
      if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
        throw new Error(false ? formatProdErrorMessage(3) : "when using a middleware builder function, an array of middleware must be returned");
      }
    } else {
      finalMiddleware = getDefaultMiddleware();
    }
    if (!IS_PRODUCTION && finalMiddleware.some((item) => typeof item !== "function")) {
      throw new Error(false ? formatProdErrorMessage(4) : "each middleware provided to configureStore must be a function");
    }
    let finalCompose = compose;
    if (devTools) {
      finalCompose = composeWithDevTools({
        // Enable capture of stack traces for dispatched Redux actions
        trace: !IS_PRODUCTION,
        ...typeof devTools === "object" && devTools
      });
    }
    const middlewareEnhancer = applyMiddleware(...finalMiddleware);
    const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);
    if (!IS_PRODUCTION && enhancers && typeof enhancers !== "function") {
      throw new Error(false ? formatProdErrorMessage(5) : "`enhancers` field must be a callback");
    }
    let storeEnhancers = typeof enhancers === "function" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();
    if (!IS_PRODUCTION && !Array.isArray(storeEnhancers)) {
      throw new Error(false ? formatProdErrorMessage(6) : "`enhancers` callback must return an array");
    }
    if (!IS_PRODUCTION && storeEnhancers.some((item) => typeof item !== "function")) {
      throw new Error(false ? formatProdErrorMessage(7) : "each enhancer provided to configureStore must be a function");
    }
    if (!IS_PRODUCTION && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {
      console.error("middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`");
    }
    const composedEnhancer = finalCompose(...storeEnhancers);
    return createStore(rootReducer, preloadedState, composedEnhancer);
  }
  function executeReducerBuilderCallback(builderCallback) {
    const actionsMap = {};
    const actionMatchers = [];
    let defaultCaseReducer;
    const builder = {
      addCase(typeOrActionCreator, reducer) {
        if (true) {
          if (actionMatchers.length > 0) {
            throw new Error(false ? formatProdErrorMessage(26) : "`builder.addCase` should only be called before calling `builder.addMatcher`");
          }
          if (defaultCaseReducer) {
            throw new Error(false ? formatProdErrorMessage(27) : "`builder.addCase` should only be called before calling `builder.addDefaultCase`");
          }
        }
        const type4 = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
        if (!type4) {
          throw new Error(false ? formatProdErrorMessage(28) : "`builder.addCase` cannot be called with an empty action type");
        }
        if (type4 in actionsMap) {
          throw new Error(false ? formatProdErrorMessage(29) : `\`builder.addCase\` cannot be called with two reducers for the same action type '${type4}'`);
        }
        actionsMap[type4] = reducer;
        return builder;
      },
      addMatcher(matcher, reducer) {
        if (true) {
          if (defaultCaseReducer) {
            throw new Error(false ? formatProdErrorMessage(30) : "`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
          }
        }
        actionMatchers.push({
          matcher,
          reducer
        });
        return builder;
      },
      addDefaultCase(reducer) {
        if (true) {
          if (defaultCaseReducer) {
            throw new Error(false ? formatProdErrorMessage(31) : "`builder.addDefaultCase` can only be called once");
          }
        }
        defaultCaseReducer = reducer;
        return builder;
      }
    };
    builderCallback(builder);
    return [actionsMap, actionMatchers, defaultCaseReducer];
  }
  function isStateFunction(x) {
    return typeof x === "function";
  }
  function createReducer(initialState2, mapOrBuilderCallback) {
    if (true) {
      if (typeof mapOrBuilderCallback === "object") {
        throw new Error(false ? formatProdErrorMessage(8) : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
      }
    }
    let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);
    let getInitialState;
    if (isStateFunction(initialState2)) {
      getInitialState = () => freezeDraftable(initialState2());
    } else {
      const frozenInitialState = freezeDraftable(initialState2);
      getInitialState = () => frozenInitialState;
    }
    function reducer(state = getInitialState(), action) {
      let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({
        matcher
      }) => matcher(action)).map(({
        reducer: reducer2
      }) => reducer2)];
      if (caseReducers.filter((cr) => !!cr).length === 0) {
        caseReducers = [finalDefaultCaseReducer];
      }
      return caseReducers.reduce((previousState, caseReducer) => {
        if (caseReducer) {
          if (isDraft(previousState)) {
            const draft = previousState;
            const result = caseReducer(draft, action);
            if (result === void 0) {
              return previousState;
            }
            return result;
          } else if (!isDraftable(previousState)) {
            const result = caseReducer(previousState, action);
            if (result === void 0) {
              if (previousState === null) {
                return previousState;
              }
              throw new Error(false ? formatProdErrorMessage(9) : "A case reducer on a non-draftable value must not return undefined");
            }
            return result;
          } else {
            return produce(previousState, (draft) => {
              return caseReducer(draft, action);
            });
          }
        }
        return previousState;
      }, state);
    }
    reducer.getInitialState = getInitialState;
    return reducer;
  }
  var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
  var nanoid = (size = 21) => {
    let id = "";
    let i = size;
    while (i--) {
      id += urlAlphabet[Math.random() * 64 | 0];
    }
    return id;
  };
  var matches = (matcher, action) => {
    if (hasMatchFunction(matcher)) {
      return matcher.match(action);
    } else {
      return matcher(action);
    }
  };
  function isAnyOf(...matchers2) {
    return (action) => {
      return matchers2.some((matcher) => matches(matcher, action));
    };
  }
  var commonProperties = ["name", "message", "stack", "code"];
  var RejectWithValue = class {
    constructor(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    /*
    type-only property to distinguish between RejectWithValue and FulfillWithMeta
    does not exist at runtime
    */
    _type;
  };
  var FulfillWithMeta = class {
    constructor(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    /*
    type-only property to distinguish between RejectWithValue and FulfillWithMeta
    does not exist at runtime
    */
    _type;
  };
  var miniSerializeError = (value) => {
    if (typeof value === "object" && value !== null) {
      const simpleError = {};
      for (const property of commonProperties) {
        if (typeof value[property] === "string") {
          simpleError[property] = value[property];
        }
      }
      return simpleError;
    }
    return {
      message: String(value)
    };
  };
  var createAsyncThunk = /* @__PURE__ */ (() => {
    function createAsyncThunk2(typePrefix, payloadCreator, options) {
      const fulfilled = createAction(typePrefix + "/fulfilled", (payload, requestId, arg, meta) => ({
        payload,
        meta: {
          ...meta || {},
          arg,
          requestId,
          requestStatus: "fulfilled"
        }
      }));
      const pending = createAction(typePrefix + "/pending", (requestId, arg, meta) => ({
        payload: void 0,
        meta: {
          ...meta || {},
          arg,
          requestId,
          requestStatus: "pending"
        }
      }));
      const rejected = createAction(typePrefix + "/rejected", (error, requestId, arg, payload, meta) => ({
        payload,
        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
        meta: {
          ...meta || {},
          arg,
          requestId,
          rejectedWithValue: !!payload,
          requestStatus: "rejected",
          aborted: error?.name === "AbortError",
          condition: error?.name === "ConditionError"
        }
      }));
      function actionCreator(arg) {
        return (dispatch2, getState, extra) => {
          const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();
          const abortController = new AbortController();
          let abortHandler;
          let abortReason;
          function abort(reason) {
            abortReason = reason;
            abortController.abort();
          }
          const promise = async function() {
            let finalAction;
            try {
              let conditionResult = options?.condition?.(arg, {
                getState,
                extra
              });
              if (isThenable(conditionResult)) {
                conditionResult = await conditionResult;
              }
              if (conditionResult === false || abortController.signal.aborted) {
                throw {
                  name: "ConditionError",
                  message: "Aborted due to condition callback returning false."
                };
              }
              const abortedPromise = new Promise((_, reject) => {
                abortHandler = () => {
                  reject({
                    name: "AbortError",
                    message: abortReason || "Aborted"
                  });
                };
                abortController.signal.addEventListener("abort", abortHandler);
              });
              dispatch2(pending(requestId, arg, options?.getPendingMeta?.({
                requestId,
                arg
              }, {
                getState,
                extra
              })));
              finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
                dispatch: dispatch2,
                getState,
                extra,
                requestId,
                signal: abortController.signal,
                abort,
                rejectWithValue: (value, meta) => {
                  return new RejectWithValue(value, meta);
                },
                fulfillWithValue: (value, meta) => {
                  return new FulfillWithMeta(value, meta);
                }
              })).then((result) => {
                if (result instanceof RejectWithValue) {
                  throw result;
                }
                if (result instanceof FulfillWithMeta) {
                  return fulfilled(result.payload, requestId, arg, result.meta);
                }
                return fulfilled(result, requestId, arg);
              })]);
            } catch (err) {
              finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);
            } finally {
              if (abortHandler) {
                abortController.signal.removeEventListener("abort", abortHandler);
              }
            }
            const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
            if (!skipDispatch) {
              dispatch2(finalAction);
            }
            return finalAction;
          }();
          return Object.assign(promise, {
            abort,
            requestId,
            arg,
            unwrap() {
              return promise.then(unwrapResult);
            }
          });
        };
      }
      return Object.assign(actionCreator, {
        pending,
        rejected,
        fulfilled,
        settled: isAnyOf(rejected, fulfilled),
        typePrefix
      });
    }
    createAsyncThunk2.withTypes = () => createAsyncThunk2;
    return createAsyncThunk2;
  })();
  function unwrapResult(action) {
    if (action.meta && action.meta.rejectedWithValue) {
      throw action.payload;
    }
    if (action.error) {
      throw action.error;
    }
    return action.payload;
  }
  function isThenable(value) {
    return value !== null && typeof value === "object" && typeof value.then === "function";
  }
  var asyncThunkSymbol = Symbol.for("rtk-slice-createasyncthunk");
  var asyncThunkCreator = {
    [asyncThunkSymbol]: createAsyncThunk
  };
  function getType(slice2, actionKey) {
    return `${slice2}/${actionKey}`;
  }
  function buildCreateSlice({
    creators
  } = {}) {
    const cAT = creators?.asyncThunk?.[asyncThunkSymbol];
    return function createSlice2(options) {
      const {
        name,
        reducerPath = name
      } = options;
      if (!name) {
        throw new Error(false ? formatProdErrorMessage(11) : "`name` is a required option for createSlice");
      }
      if (typeof process !== "undefined" && true) {
        if (options.initialState === void 0) {
          console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
        }
      }
      const reducers = (typeof options.reducers === "function" ? options.reducers(buildReducerCreators()) : options.reducers) || {};
      const reducerNames = Object.keys(reducers);
      const context = {
        sliceCaseReducersByName: {},
        sliceCaseReducersByType: {},
        actionCreators: {},
        sliceMatchers: []
      };
      const contextMethods = {
        addCase(typeOrActionCreator, reducer2) {
          const type4 = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
          if (!type4) {
            throw new Error(false ? formatProdErrorMessage(12) : "`context.addCase` cannot be called with an empty action type");
          }
          if (type4 in context.sliceCaseReducersByType) {
            throw new Error(false ? formatProdErrorMessage(13) : "`context.addCase` cannot be called with two reducers for the same action type: " + type4);
          }
          context.sliceCaseReducersByType[type4] = reducer2;
          return contextMethods;
        },
        addMatcher(matcher, reducer2) {
          context.sliceMatchers.push({
            matcher,
            reducer: reducer2
          });
          return contextMethods;
        },
        exposeAction(name2, actionCreator) {
          context.actionCreators[name2] = actionCreator;
          return contextMethods;
        },
        exposeCaseReducer(name2, reducer2) {
          context.sliceCaseReducersByName[name2] = reducer2;
          return contextMethods;
        }
      };
      reducerNames.forEach((reducerName) => {
        const reducerDefinition = reducers[reducerName];
        const reducerDetails = {
          reducerName,
          type: getType(name, reducerName),
          createNotation: typeof options.reducers === "function"
        };
        if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
          handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);
        } else {
          handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);
        }
      });
      function buildReducer() {
        if (true) {
          if (typeof options.extraReducers === "object") {
            throw new Error(false ? formatProdErrorMessage(14) : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
          }
        }
        const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];
        const finalCaseReducers = {
          ...extraReducers,
          ...context.sliceCaseReducersByType
        };
        return createReducer(options.initialState, (builder) => {
          for (let key in finalCaseReducers) {
            builder.addCase(key, finalCaseReducers[key]);
          }
          for (let sM of context.sliceMatchers) {
            builder.addMatcher(sM.matcher, sM.reducer);
          }
          for (let m of actionMatchers) {
            builder.addMatcher(m.matcher, m.reducer);
          }
          if (defaultCaseReducer) {
            builder.addDefaultCase(defaultCaseReducer);
          }
        });
      }
      const selectSelf = (state) => state;
      const injectedSelectorCache = /* @__PURE__ */ new Map();
      let _reducer;
      function reducer(state, action) {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer(state, action);
      }
      function getInitialState() {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer.getInitialState();
      }
      function makeSelectorProps(reducerPath2, injected = false) {
        function selectSlice(state) {
          let sliceState = state[reducerPath2];
          if (typeof sliceState === "undefined") {
            if (injected) {
              sliceState = getInitialState();
            } else if (true) {
              throw new Error(false ? formatProdErrorMessage(15) : "selectSlice returned undefined for an uninjected slice reducer");
            }
          }
          return sliceState;
        }
        function getSelectors(selectState = selectSelf) {
          const selectorCache = emplace(injectedSelectorCache, injected, {
            insert: () => /* @__PURE__ */ new WeakMap()
          });
          return emplace(selectorCache, selectState, {
            insert: () => {
              const map = {};
              for (const [name2, selector] of Object.entries(options.selectors ?? {})) {
                map[name2] = wrapSelector(selector, selectState, getInitialState, injected);
              }
              return map;
            }
          });
        }
        return {
          reducerPath: reducerPath2,
          getSelectors,
          get selectors() {
            return getSelectors(selectSlice);
          },
          selectSlice
        };
      }
      const slice2 = {
        name,
        reducer,
        actions: context.actionCreators,
        caseReducers: context.sliceCaseReducersByName,
        getInitialState,
        ...makeSelectorProps(reducerPath),
        injectInto(injectable, {
          reducerPath: pathOpt,
          ...config
        } = {}) {
          const newReducerPath = pathOpt ?? reducerPath;
          injectable.inject({
            reducerPath: newReducerPath,
            reducer
          }, config);
          return {
            ...slice2,
            ...makeSelectorProps(newReducerPath, true)
          };
        }
      };
      return slice2;
    };
  }
  function wrapSelector(selector, selectState, getInitialState, injected) {
    function wrapper(rootState, ...args) {
      let sliceState = selectState(rootState);
      if (typeof sliceState === "undefined") {
        if (injected) {
          sliceState = getInitialState();
        } else if (true) {
          throw new Error(false ? formatProdErrorMessage(16) : "selectState returned undefined for an uninjected slice reducer");
        }
      }
      return selector(sliceState, ...args);
    }
    wrapper.unwrapped = selector;
    return wrapper;
  }
  var createSlice = buildCreateSlice();
  function buildReducerCreators() {
    function asyncThunk(payloadCreator, config) {
      return {
        _reducerDefinitionType: "asyncThunk",
        payloadCreator,
        ...config
      };
    }
    asyncThunk.withTypes = () => asyncThunk;
    return {
      reducer(caseReducer) {
        return Object.assign({
          // hack so the wrapping function has the same name as the original
          // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
          [caseReducer.name](...args) {
            return caseReducer(...args);
          }
        }[caseReducer.name], {
          _reducerDefinitionType: "reducer"
          /* reducer */
        });
      },
      preparedReducer(prepare2, reducer) {
        return {
          _reducerDefinitionType: "reducerWithPrepare",
          prepare: prepare2,
          reducer
        };
      },
      asyncThunk
    };
  }
  function handleNormalReducerDefinition({
    type: type4,
    reducerName,
    createNotation
  }, maybeReducerWithPrepare, context) {
    let caseReducer;
    let prepareCallback;
    if ("reducer" in maybeReducerWithPrepare) {
      if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {
        throw new Error(false ? formatProdErrorMessage(17) : "Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.");
      }
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }
    context.addCase(type4, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type4, prepareCallback) : createAction(type4));
  }
  function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
    return reducerDefinition._reducerDefinitionType === "asyncThunk";
  }
  function isCaseReducerWithPrepareDefinition(reducerDefinition) {
    return reducerDefinition._reducerDefinitionType === "reducerWithPrepare";
  }
  function handleThunkCaseReducerDefinition({
    type: type4,
    reducerName
  }, reducerDefinition, context, cAT) {
    if (!cAT) {
      throw new Error(false ? formatProdErrorMessage(18) : "Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.");
    }
    const {
      payloadCreator,
      fulfilled,
      pending,
      rejected,
      settled,
      options
    } = reducerDefinition;
    const thunk2 = cAT(type4, payloadCreator, options);
    context.exposeAction(reducerName, thunk2);
    if (fulfilled) {
      context.addCase(thunk2.fulfilled, fulfilled);
    }
    if (pending) {
      context.addCase(thunk2.pending, pending);
    }
    if (rejected) {
      context.addCase(thunk2.rejected, rejected);
    }
    if (settled) {
      context.addMatcher(thunk2.settled, settled);
    }
    context.exposeCaseReducer(reducerName, {
      fulfilled: fulfilled || noop,
      pending: pending || noop,
      rejected: rejected || noop,
      settled: settled || noop
    });
  }
  function noop() {
  }
  var listener = "listener";
  var completed = "completed";
  var cancelled = "cancelled";
  var taskCancelled = `task-${cancelled}`;
  var taskCompleted = `task-${completed}`;
  var listenerCancelled = `${listener}-${cancelled}`;
  var listenerCompleted = `${listener}-${completed}`;
  var assertFunction = (func, expected) => {
    if (typeof func !== "function") {
      throw new Error(false ? formatProdErrorMessage(32) : `${expected} is not a function`);
    }
  };
  var {
    assign
  } = Object;
  var alm = "listenerMiddleware";
  var getListenerEntryPropsFrom = (options) => {
    let {
      type: type4,
      actionCreator,
      matcher,
      predicate,
      effect
    } = options;
    if (type4) {
      predicate = createAction(type4).match;
    } else if (actionCreator) {
      type4 = actionCreator.type;
      predicate = actionCreator.match;
    } else if (matcher) {
      predicate = matcher;
    } else if (predicate) {
    } else {
      throw new Error(false ? formatProdErrorMessage(21) : "Creating or removing a listener requires one of the known fields for matching an action");
    }
    assertFunction(effect, "options.listener");
    return {
      predicate,
      type: type4,
      effect
    };
  };
  var createListenerEntry = Object.assign((options) => {
    const {
      type: type4,
      predicate,
      effect
    } = getListenerEntryPropsFrom(options);
    const id = nanoid();
    const entry = {
      id,
      effect,
      type: type4,
      predicate,
      pending: /* @__PURE__ */ new Set(),
      unsubscribe: () => {
        throw new Error(false ? formatProdErrorMessage(22) : "Unsubscribe not initialized");
      }
    };
    return entry;
  }, {
    withTypes: () => createListenerEntry
  });
  var addListener = Object.assign(createAction(`${alm}/add`), {
    withTypes: () => addListener
  });
  var clearAllListeners = createAction(`${alm}/removeAll`);
  var removeListener = Object.assign(createAction(`${alm}/remove`), {
    withTypes: () => removeListener
  });
  var ORIGINAL_STATE = Symbol.for("rtk-state-proxy-original");

  // app/javascript/services/localStorage.service.ts
  var testUser = {
    id: 1,
    name: "pochi"
  };
  var persistUser = (user) => {
    localStorage.sertItem("user", JSON.stringify(user));
  };
  var ReadUser = () => {
    const userStr = localStorage.getItem("user");
    return userStr ? JSON.parse(userStr) : testUser;
  };

  // app/javascript/store/slices/userSlice.ts
  var initialState = {
    user: ReadUser()
  };
  var setUser = createAction(
    "user/setUser",
    (newUser) => {
      persistUser(newUser);
      return {
        payload: newUser
      };
    }
  );
  var userSlice = createSlice({
    name: "user",
    initialState,
    reducers: {},
    extraReducers: (builder) => {
      builder.addCase(setUser, (state, action) => {
        state.user = action.payload;
      });
    }
  });
  var userSlice_default = userSlice.reducer;

  // app/javascript/store/slices/index.ts
  var slices_default = {
    user: userSlice_default
  };

  // app/javascript/store/store.ts
  var store = configureStore({
    reducer: slices_default
    // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(errorLoggingMiddleware),
  });

  // app/javascript/App.jsx
  var import_react137 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/rc-resize-observer/es/index.js
  var React9 = __toESM(require_react());

  // node_modules/rc-util/es/Children/toArray.js
  var import_react = __toESM(require_react());
  var import_react_is = __toESM(require_react_is());
  function toArray(children) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var ret = [];
    import_react.default.Children.forEach(children, function(child) {
      if ((child === void 0 || child === null) && !option.keepEmpty) {
        return;
      }
      if (Array.isArray(child)) {
        ret = ret.concat(toArray(child));
      } else if ((0, import_react_is.isFragment)(child) && child.props) {
        ret = ret.concat(toArray(child.props.children, option));
      } else {
        ret.push(child);
      }
    });
    return ret;
  }

  // node_modules/rc-util/es/warning.js
  var warned = {};
  var preWarningFns = [];
  var preMessage = function preMessage2(fn) {
    preWarningFns.push(fn);
  };
  function warning2(valid, message) {
    if (!valid && console !== void 0) {
      var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
        return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "warning");
      }, message);
      if (finalMessage) {
        console.error("Warning: ".concat(finalMessage));
      }
    }
  }
  function note(valid, message) {
    if (!valid && console !== void 0) {
      var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
        return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "note");
      }, message);
      if (finalMessage) {
        console.warn("Note: ".concat(finalMessage));
      }
    }
  }
  function resetWarned() {
    warned = {};
  }
  function call(method4, valid, message) {
    if (!valid && !warned[message]) {
      method4(false, message);
      warned[message] = true;
    }
  }
  function warningOnce(valid, message) {
    call(warning2, valid, message);
  }
  function noteOnce(valid, message) {
    call(note, valid, message);
  }
  warningOnce.preMessage = preMessage;
  warningOnce.resetWarned = resetWarned;
  warningOnce.noteOnce = noteOnce;
  var warning_default = warningOnce;

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(o3) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
      return typeof o4;
    } : function(o4) {
      return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
    }, _typeof(o3);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function toPrimitive(t2, r2) {
    if ("object" != _typeof(t2) || !t2)
      return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r2 || "default");
      if ("object" != _typeof(i))
        return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t2);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function toPropertyKey(t2) {
    var i = toPrimitive(t2, "string");
    return "symbol" == _typeof(i) ? i : String(i);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    key = toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread2(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
        _defineProperty(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }

  // node_modules/rc-util/es/Dom/findDOMNode.js
  var import_react2 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  function isDOM(node2) {
    return node2 instanceof HTMLElement || node2 instanceof SVGElement;
  }
  function findDOMNode(node2) {
    if (isDOM(node2)) {
      return node2;
    }
    if (node2 instanceof import_react2.default.Component) {
      return import_react_dom.default.findDOMNode(node2);
    }
    return null;
  }

  // node_modules/rc-util/es/ref.js
  var import_react3 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is());

  // node_modules/rc-util/es/hooks/useMemo.js
  var React5 = __toESM(require_react());
  function useMemo(getValue4, condition, shouldUpdate) {
    var cacheRef = React5.useRef({});
    if (!("value" in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
      cacheRef.current.value = getValue4();
      cacheRef.current.condition = condition;
    }
    return cacheRef.current.value;
  }

  // node_modules/rc-util/es/ref.js
  function fillRef(ref, node2) {
    if (typeof ref === "function") {
      ref(node2);
    } else if (_typeof(ref) === "object" && ref && "current" in ref) {
      ref.current = node2;
    }
  }
  function composeRef() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    var refList = refs.filter(function(ref) {
      return ref;
    });
    if (refList.length <= 1) {
      return refList[0];
    }
    return function(node2) {
      refs.forEach(function(ref) {
        fillRef(ref, node2);
      });
    };
  }
  function useComposeRef() {
    for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      refs[_key2] = arguments[_key2];
    }
    return useMemo(function() {
      return composeRef.apply(void 0, refs);
    }, refs, function(prev2, next2) {
      return prev2.length !== next2.length || prev2.every(function(ref, i) {
        return ref !== next2[i];
      });
    });
  }
  function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;
    var type4 = (0, import_react_is2.isMemo)(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;
    if (typeof type4 === "function" && !((_type$prototype = type4.prototype) !== null && _type$prototype !== void 0 && _type$prototype.render)) {
      return false;
    }
    if (typeof nodeOrComponent === "function" && !((_nodeOrComponent$prot = nodeOrComponent.prototype) !== null && _nodeOrComponent$prot !== void 0 && _nodeOrComponent$prot.render)) {
      return false;
    }
    return true;
  }
  function supportNodeRef(node2) {
    if (!/* @__PURE__ */ (0, import_react3.isValidElement)(node2)) {
      return false;
    }
    if ((0, import_react_is2.isFragment)(node2)) {
      return false;
    }
    return supportRef(node2);
  }

  // node_modules/rc-resize-observer/es/SingleObserver/index.js
  var React8 = __toESM(require_react());

  // node_modules/rc-resize-observer/es/Collection.js
  var React6 = __toESM(require_react());
  var CollectionContext = /* @__PURE__ */ React6.createContext(null);
  function Collection(_ref) {
    var children = _ref.children, onBatchResize = _ref.onBatchResize;
    var resizeIdRef = React6.useRef(0);
    var resizeInfosRef = React6.useRef([]);
    var onCollectionResize = React6.useContext(CollectionContext);
    var onResize2 = React6.useCallback(function(size, element, data) {
      resizeIdRef.current += 1;
      var currentId = resizeIdRef.current;
      resizeInfosRef.current.push({
        size,
        element,
        data
      });
      Promise.resolve().then(function() {
        if (currentId === resizeIdRef.current) {
          onBatchResize === null || onBatchResize === void 0 || onBatchResize(resizeInfosRef.current);
          resizeInfosRef.current = [];
        }
      });
      onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(size, element, data);
    }, [onBatchResize, onCollectionResize]);
    return /* @__PURE__ */ React6.createElement(CollectionContext.Provider, {
      value: onResize2
    }, children);
  }

  // node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
  var MapShim = function() {
    if (typeof Map !== "undefined") {
      return Map;
    }
    function getIndex(arr, key) {
      var result = -1;
      arr.some(function(entry, index2) {
        if (entry[0] === key) {
          result = index2;
          return true;
        }
        return false;
      });
      return result;
    }
    return (
      /** @class */
      function() {
        function class_1() {
          this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
          /**
           * @returns {boolean}
           */
          get: function() {
            return this.__entries__.length;
          },
          enumerable: true,
          configurable: true
        });
        class_1.prototype.get = function(key) {
          var index2 = getIndex(this.__entries__, key);
          var entry = this.__entries__[index2];
          return entry && entry[1];
        };
        class_1.prototype.set = function(key, value) {
          var index2 = getIndex(this.__entries__, key);
          if (~index2) {
            this.__entries__[index2][1] = value;
          } else {
            this.__entries__.push([key, value]);
          }
        };
        class_1.prototype.delete = function(key) {
          var entries = this.__entries__;
          var index2 = getIndex(entries, key);
          if (~index2) {
            entries.splice(index2, 1);
          }
        };
        class_1.prototype.has = function(key) {
          return !!~getIndex(this.__entries__, key);
        };
        class_1.prototype.clear = function() {
          this.__entries__.splice(0);
        };
        class_1.prototype.forEach = function(callback, ctx) {
          if (ctx === void 0) {
            ctx = null;
          }
          for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
            var entry = _a[_i];
            callback.call(ctx, entry[1], entry[0]);
          }
        };
        return class_1;
      }()
    );
  }();
  var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
  var global$1 = function() {
    if (typeof global !== "undefined" && global.Math === Math) {
      return global;
    }
    if (typeof self !== "undefined" && self.Math === Math) {
      return self;
    }
    if (typeof window !== "undefined" && window.Math === Math) {
      return window;
    }
    return Function("return this")();
  }();
  var requestAnimationFrame$1 = function() {
    if (typeof requestAnimationFrame === "function") {
      return requestAnimationFrame.bind(global$1);
    }
    return function(callback) {
      return setTimeout(function() {
        return callback(Date.now());
      }, 1e3 / 60);
    };
  }();
  var trailingTimeout = 2;
  function throttle(callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    function resolvePending() {
      if (leadingCall) {
        leadingCall = false;
        callback();
      }
      if (trailingCall) {
        proxy();
      }
    }
    function timeoutCallback() {
      requestAnimationFrame$1(resolvePending);
    }
    function proxy() {
      var timeStamp = Date.now();
      if (leadingCall) {
        if (timeStamp - lastCallTime < trailingTimeout) {
          return;
        }
        trailingCall = true;
      } else {
        leadingCall = true;
        trailingCall = false;
        setTimeout(timeoutCallback, delay);
      }
      lastCallTime = timeStamp;
    }
    return proxy;
  }
  var REFRESH_DELAY = 20;
  var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
  var mutationObserverSupported = typeof MutationObserver !== "undefined";
  var ResizeObserverController = (
    /** @class */
    function() {
      function ResizeObserverController2() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      ResizeObserverController2.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
        }
        if (!this.connected_) {
          this.connect_();
        }
      };
      ResizeObserverController2.prototype.removeObserver = function(observer) {
        var observers2 = this.observers_;
        var index2 = observers2.indexOf(observer);
        if (~index2) {
          observers2.splice(index2, 1);
        }
        if (!observers2.length && this.connected_) {
          this.disconnect_();
        }
      };
      ResizeObserverController2.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) {
          this.refresh();
        }
      };
      ResizeObserverController2.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
          return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
          return observer.broadcastActive();
        });
        return activeObservers.length > 0;
      };
      ResizeObserverController2.prototype.connect_ = function() {
        if (!isBrowser || this.connected_) {
          return;
        }
        document.addEventListener("transitionend", this.onTransitionEnd_);
        window.addEventListener("resize", this.refresh);
        if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);
          this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        } else {
          document.addEventListener("DOMSubtreeModified", this.refresh);
          this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
      };
      ResizeObserverController2.prototype.disconnect_ = function() {
        if (!isBrowser || !this.connected_) {
          return;
        }
        document.removeEventListener("transitionend", this.onTransitionEnd_);
        window.removeEventListener("resize", this.refresh);
        if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
          document.removeEventListener("DOMSubtreeModified", this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
      };
      ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
        var isReflowProperty = transitionKeys.some(function(key) {
          return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
          this.refresh();
        }
      };
      ResizeObserverController2.getInstance = function() {
        if (!this.instance_) {
          this.instance_ = new ResizeObserverController2();
        }
        return this.instance_;
      };
      ResizeObserverController2.instance_ = null;
      return ResizeObserverController2;
    }()
  );
  var defineConfigurable = function(target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
      var key = _a[_i];
      Object.defineProperty(target, key, {
        value: props[key],
        enumerable: false,
        writable: false,
        configurable: true
      });
    }
    return target;
  };
  var getWindowOf = function(target) {
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    return ownerGlobal || global$1;
  };
  var emptyRect = createRectInit(0, 0, 0, 0);
  function toFloat(value) {
    return parseFloat(value) || 0;
  }
  function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function(size, position2) {
      var value = styles["border-" + position2 + "-width"];
      return size + toFloat(value);
    }, 0);
  }
  function getPaddings(styles) {
    var positions = ["top", "right", "bottom", "left"];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
      var position2 = positions_1[_i];
      var value = styles["padding-" + position2];
      paddings[position2] = toFloat(value);
    }
    return paddings;
  }
  function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
  }
  function getHTMLElementContentRect(target) {
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    if (!clientWidth && !clientHeight) {
      return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    var width = toFloat(styles.width), height = toFloat(styles.height);
    if (styles.boxSizing === "border-box") {
      if (Math.round(width + horizPad) !== clientWidth) {
        width -= getBordersSize(styles, "left", "right") + horizPad;
      }
      if (Math.round(height + vertPad) !== clientHeight) {
        height -= getBordersSize(styles, "top", "bottom") + vertPad;
      }
    }
    if (!isDocumentElement(target)) {
      var vertScrollbar = Math.round(width + horizPad) - clientWidth;
      var horizScrollbar = Math.round(height + vertPad) - clientHeight;
      if (Math.abs(vertScrollbar) !== 1) {
        width -= vertScrollbar;
      }
      if (Math.abs(horizScrollbar) !== 1) {
        height -= horizScrollbar;
      }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
  }
  var isSVGGraphicsElement = function() {
    if (typeof SVGGraphicsElement !== "undefined") {
      return function(target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
      };
    }
    return function(target) {
      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
    };
  }();
  function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
  }
  function getContentRect(target) {
    if (!isBrowser) {
      return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
      return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
  }
  function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    defineConfigurable(rect, {
      x,
      y,
      width,
      height,
      top: y,
      right: x + width,
      bottom: height + y,
      left: x
    });
    return rect;
  }
  function createRectInit(x, y, width, height) {
    return { x, y, width, height };
  }
  var ResizeObservation = (
    /** @class */
    function() {
      function ResizeObservation2(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
      }
      ResizeObservation2.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
      };
      ResizeObservation2.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
      };
      return ResizeObservation2;
    }()
  );
  var ResizeObserverEntry = (
    /** @class */
    /* @__PURE__ */ function() {
      function ResizeObserverEntry2(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, { target, contentRect });
      }
      return ResizeObserverEntry2;
    }()
  );
  var ResizeObserverSPI = (
    /** @class */
    function() {
      function ResizeObserverSPI2(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== "function") {
          throw new TypeError("The callback provided as parameter 1 is not a function.");
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
      }
      ResizeObserverSPI2.prototype.observe = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (observations.has(target)) {
          return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
      };
      ResizeObserverSPI2.prototype.unobserve = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (!observations.has(target)) {
          return;
        }
        observations.delete(target);
        if (!observations.size) {
          this.controller_.removeObserver(this);
        }
      };
      ResizeObserverSPI2.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
      };
      ResizeObserverSPI2.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
          if (observation.isActive()) {
            _this.activeObservations_.push(observation);
          }
        });
      };
      ResizeObserverSPI2.prototype.broadcastActive = function() {
        if (!this.hasActive()) {
          return;
        }
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
      };
      ResizeObserverSPI2.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
      };
      ResizeObserverSPI2.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI2;
    }()
  );
  var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
  var ResizeObserver2 = (
    /** @class */
    /* @__PURE__ */ function() {
      function ResizeObserver4(callback) {
        if (!(this instanceof ResizeObserver4)) {
          throw new TypeError("Cannot call a class as a function.");
        }
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
      }
      return ResizeObserver4;
    }()
  );
  [
    "observe",
    "unobserve",
    "disconnect"
  ].forEach(function(method4) {
    ResizeObserver2.prototype[method4] = function() {
      var _a;
      return (_a = observers.get(this))[method4].apply(_a, arguments);
    };
  });
  var index = function() {
    if (typeof global$1.ResizeObserver !== "undefined") {
      return global$1.ResizeObserver;
    }
    return ResizeObserver2;
  }();
  var ResizeObserver_es_default = index;

  // node_modules/rc-resize-observer/es/utils/observerUtil.js
  var elementListeners = /* @__PURE__ */ new Map();
  function onResize(entities) {
    entities.forEach(function(entity) {
      var _elementListeners$get;
      var target = entity.target;
      (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 || _elementListeners$get.forEach(function(listener2) {
        return listener2(target);
      });
    });
  }
  var resizeObserver = new ResizeObserver_es_default(onResize);
  function observe(element, callback) {
    if (!elementListeners.has(element)) {
      elementListeners.set(element, /* @__PURE__ */ new Set());
      resizeObserver.observe(element);
    }
    elementListeners.get(element).add(callback);
  }
  function unobserve(element, callback) {
    if (elementListeners.has(element)) {
      elementListeners.get(element).delete(callback);
      if (!elementListeners.get(element).size) {
        resizeObserver.unobserve(element);
        elementListeners.delete(element);
      }
    }
  }

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o3, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o4, p2) {
      o4.__proto__ = p2;
      return o4;
    };
    return _setPrototypeOf(o3, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inherits.js
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
  function _getPrototypeOf(o3) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf(o3);
  }

  // node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
  function _isNativeReflectConstruct() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct = function _isNativeReflectConstruct3() {
      return !!t2;
    })();
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
  function _possibleConstructorReturn(self2, call2) {
    if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
      return call2;
    } else if (call2 !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  }

  // node_modules/@babel/runtime/helpers/esm/createSuper.js
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }

  // node_modules/rc-resize-observer/es/SingleObserver/DomWrapper.js
  var React7 = __toESM(require_react());
  var DomWrapper = /* @__PURE__ */ function(_React$Component) {
    _inherits(DomWrapper3, _React$Component);
    var _super = _createSuper(DomWrapper3);
    function DomWrapper3() {
      _classCallCheck(this, DomWrapper3);
      return _super.apply(this, arguments);
    }
    _createClass(DomWrapper3, [{
      key: "render",
      value: function render2() {
        return this.props.children;
      }
    }]);
    return DomWrapper3;
  }(React7.Component);

  // node_modules/rc-resize-observer/es/SingleObserver/index.js
  function SingleObserver(props, ref) {
    var children = props.children, disabled = props.disabled;
    var elementRef = React8.useRef(null);
    var wrapperRef = React8.useRef(null);
    var onCollectionResize = React8.useContext(CollectionContext);
    var isRenderProps = typeof children === "function";
    var mergedChildren = isRenderProps ? children(elementRef) : children;
    var sizeRef = React8.useRef({
      width: -1,
      height: -1,
      offsetWidth: -1,
      offsetHeight: -1
    });
    var canRef = !isRenderProps && /* @__PURE__ */ React8.isValidElement(mergedChildren) && supportRef(mergedChildren);
    var originRef = canRef ? mergedChildren.ref : null;
    var mergedRef = useComposeRef(originRef, elementRef);
    var getDom = function getDom2() {
      var _elementRef$current;
      return findDOMNode(elementRef.current) || // Support `nativeElement` format
      (elementRef.current && _typeof(elementRef.current) === "object" ? findDOMNode((_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.nativeElement) : null) || findDOMNode(wrapperRef.current);
    };
    React8.useImperativeHandle(ref, function() {
      return getDom();
    });
    var propsRef = React8.useRef(props);
    propsRef.current = props;
    var onInternalResize = React8.useCallback(function(target) {
      var _propsRef$current = propsRef.current, onResize2 = _propsRef$current.onResize, data = _propsRef$current.data;
      var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);
      if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {
        var size = {
          width: fixedWidth,
          height: fixedHeight,
          offsetWidth,
          offsetHeight
        };
        sizeRef.current = size;
        var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;
        var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;
        var sizeInfo = _objectSpread2(_objectSpread2({}, size), {}, {
          offsetWidth: mergedOffsetWidth,
          offsetHeight: mergedOffsetHeight
        });
        onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(sizeInfo, target, data);
        if (onResize2) {
          Promise.resolve().then(function() {
            onResize2(sizeInfo, target);
          });
        }
      }
    }, []);
    React8.useEffect(function() {
      var currentElement = getDom();
      if (currentElement && !disabled) {
        observe(currentElement, onInternalResize);
      }
      return function() {
        return unobserve(currentElement, onInternalResize);
      };
    }, [elementRef.current, disabled]);
    return /* @__PURE__ */ React8.createElement(DomWrapper, {
      ref: wrapperRef
    }, canRef ? /* @__PURE__ */ React8.cloneElement(mergedChildren, {
      ref: mergedRef
    }) : mergedChildren);
  }
  var RefSingleObserver = /* @__PURE__ */ React8.forwardRef(SingleObserver);
  if (true) {
    RefSingleObserver.displayName = "SingleObserver";
  }
  var SingleObserver_default = RefSingleObserver;

  // node_modules/rc-resize-observer/es/index.js
  var INTERNAL_PREFIX_KEY = "rc-observer-key";
  function ResizeObserver3(props, ref) {
    var children = props.children;
    var childNodes = typeof children === "function" ? [children] : toArray(children);
    if (true) {
      if (childNodes.length > 1) {
        warning2(false, "Find more than one child node with `children` in ResizeObserver. Please use ResizeObserver.Collection instead.");
      } else if (childNodes.length === 0) {
        warning2(false, "`children` of ResizeObserver is empty. Nothing is in observe.");
      }
    }
    return childNodes.map(function(child, index2) {
      var key = (child === null || child === void 0 ? void 0 : child.key) || "".concat(INTERNAL_PREFIX_KEY, "-").concat(index2);
      return /* @__PURE__ */ React9.createElement(SingleObserver_default, _extends({}, props, {
        key,
        ref: index2 === 0 ? ref : void 0
      }), child);
    });
  }
  var RefResizeObserver = /* @__PURE__ */ React9.forwardRef(ResizeObserver3);
  if (true) {
    RefResizeObserver.displayName = "ResizeObserver";
  }
  RefResizeObserver.Collection = Collection;
  var es_default = RefResizeObserver;

  // node_modules/rc-util/es/omit.js
  function omit(obj, fields) {
    var clone = _objectSpread2({}, obj);
    if (Array.isArray(fields)) {
      fields.forEach(function(key) {
        delete clone[key];
      });
    }
    return clone;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o3, minLen) {
    if (!o3)
      return;
    if (typeof o3 === "string")
      return _arrayLikeToArray(o3, minLen);
    var n2 = Object.prototype.toString.call(o3).slice(8, -1);
    if (n2 === "Object" && o3.constructor)
      n2 = o3.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o3);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o3, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // node_modules/rc-util/es/raf.js
  var raf = function raf2(callback) {
    return +setTimeout(callback, 16);
  };
  var caf = function caf2(num) {
    return clearTimeout(num);
  };
  if (typeof window !== "undefined" && "requestAnimationFrame" in window) {
    raf = function raf3(callback) {
      return window.requestAnimationFrame(callback);
    };
    caf = function caf3(handle) {
      return window.cancelAnimationFrame(handle);
    };
  }
  var rafUUID = 0;
  var rafIds = /* @__PURE__ */ new Map();
  function cleanup(id) {
    rafIds.delete(id);
  }
  var wrapperRaf = function wrapperRaf2(callback) {
    var times = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    rafUUID += 1;
    var id = rafUUID;
    function callRef(leftTimes) {
      if (leftTimes === 0) {
        cleanup(id);
        callback();
      } else {
        var realId = raf(function() {
          callRef(leftTimes - 1);
        });
        rafIds.set(id, realId);
      }
    }
    callRef(times);
    return id;
  };
  wrapperRaf.cancel = function(id) {
    var realId = rafIds.get(id);
    cleanup(id);
    return caf(realId);
  };
  if (true) {
    wrapperRaf.ids = function() {
      return rafIds;
    };
  }
  var raf_default = wrapperRaf;

  // node_modules/antd/es/config-provider/index.js
  var React38 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(r2, l2) {
    var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u, a = [], f = true, o3 = false;
      try {
        if (i = (t2 = t2.call(r2)).next, 0 === l2) {
          if (Object(t2) !== t2)
            return;
          f = false;
        } else
          for (; !(f = (e3 = i.call(t2)).done) && (a.push(e3.value), a.length !== l2); f = true)
            ;
      } catch (r3) {
        o3 = true, n2 = r3;
      } finally {
        try {
          if (!f && null != t2["return"] && (u = t2["return"](), Object(u) !== u))
            return;
        } finally {
          if (o3)
            throw n2;
        }
      }
      return a;
    }
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  // node_modules/@ant-design/cssinjs/node_modules/@emotion/hash/dist/hash.browser.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var hash_browser_esm_default = murmur2;

  // node_modules/rc-util/es/Dom/canUseDom.js
  function canUseDom() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
  }

  // node_modules/rc-util/es/Dom/contains.js
  function contains(root, n2) {
    if (!root) {
      return false;
    }
    if (root.contains) {
      return root.contains(n2);
    }
    var node2 = n2;
    while (node2) {
      if (node2 === root) {
        return true;
      }
      node2 = node2.parentNode;
    }
    return false;
  }

  // node_modules/rc-util/es/Dom/dynamicCSS.js
  var APPEND_ORDER = "data-rc-order";
  var APPEND_PRIORITY = "data-rc-priority";
  var MARK_KEY = "rc-util-key";
  var containerCache = /* @__PURE__ */ new Map();
  function getMark() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, mark = _ref.mark;
    if (mark) {
      return mark.startsWith("data-") ? mark : "data-".concat(mark);
    }
    return MARK_KEY;
  }
  function getContainer(option) {
    if (option.attachTo) {
      return option.attachTo;
    }
    var head = document.querySelector("head");
    return head || document.body;
  }
  function getOrder(prepend) {
    if (prepend === "queue") {
      return "prependQueue";
    }
    return prepend ? "prepend" : "append";
  }
  function findStyles(container) {
    return Array.from((containerCache.get(container) || container).children).filter(function(node2) {
      return node2.tagName === "STYLE";
    });
  }
  function injectCSS(css) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!canUseDom()) {
      return null;
    }
    var csp = option.csp, prepend = option.prepend, _option$priority = option.priority, priority = _option$priority === void 0 ? 0 : _option$priority;
    var mergedOrder = getOrder(prepend);
    var isPrependQueue = mergedOrder === "prependQueue";
    var styleNode = document.createElement("style");
    styleNode.setAttribute(APPEND_ORDER, mergedOrder);
    if (isPrependQueue && priority) {
      styleNode.setAttribute(APPEND_PRIORITY, "".concat(priority));
    }
    if (csp !== null && csp !== void 0 && csp.nonce) {
      styleNode.nonce = csp === null || csp === void 0 ? void 0 : csp.nonce;
    }
    styleNode.innerHTML = css;
    var container = getContainer(option);
    var firstChild = container.firstChild;
    if (prepend) {
      if (isPrependQueue) {
        var existStyle = findStyles(container).filter(function(node2) {
          if (!["prepend", "prependQueue"].includes(node2.getAttribute(APPEND_ORDER))) {
            return false;
          }
          var nodePriority = Number(node2.getAttribute(APPEND_PRIORITY) || 0);
          return priority >= nodePriority;
        });
        if (existStyle.length) {
          container.insertBefore(styleNode, existStyle[existStyle.length - 1].nextSibling);
          return styleNode;
        }
      }
      container.insertBefore(styleNode, firstChild);
    } else {
      container.appendChild(styleNode);
    }
    return styleNode;
  }
  function findExistNode(key) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var container = getContainer(option);
    return findStyles(container).find(function(node2) {
      return node2.getAttribute(getMark(option)) === key;
    });
  }
  function removeCSS(key) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var existNode = findExistNode(key, option);
    if (existNode) {
      var container = getContainer(option);
      container.removeChild(existNode);
    }
  }
  function syncRealContainer(container, option) {
    var cachedRealContainer = containerCache.get(container);
    if (!cachedRealContainer || !contains(document, cachedRealContainer)) {
      var placeholderStyle = injectCSS("", option);
      var parentNode = placeholderStyle.parentNode;
      containerCache.set(container, parentNode);
      container.removeChild(placeholderStyle);
    }
  }
  function updateCSS(css, key) {
    var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var container = getContainer(option);
    syncRealContainer(container, option);
    var existNode = findExistNode(key, option);
    if (existNode) {
      var _option$csp, _option$csp2;
      if ((_option$csp = option.csp) !== null && _option$csp !== void 0 && _option$csp.nonce && existNode.nonce !== ((_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce)) {
        var _option$csp3;
        existNode.nonce = (_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce;
      }
      if (existNode.innerHTML !== css) {
        existNode.innerHTML = css;
      }
      return existNode;
    }
    var newNode = injectCSS(css, option);
    newNode.setAttribute(getMark(option), key);
    return newNode;
  }

  // node_modules/@ant-design/cssinjs/es/hooks/useCacheToken.js
  var import_react4 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  // node_modules/rc-util/es/isEqual.js
  function isEqual(obj1, obj2) {
    var shallow = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var refSet = /* @__PURE__ */ new Set();
    function deepEqual(a, b) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var circular = refSet.has(a);
      warning_default(!circular, "Warning: There may be circular references");
      if (circular) {
        return false;
      }
      if (a === b) {
        return true;
      }
      if (shallow && level > 1) {
        return false;
      }
      refSet.add(a);
      var newLevel = level + 1;
      if (Array.isArray(a)) {
        if (!Array.isArray(b) || a.length !== b.length) {
          return false;
        }
        for (var i = 0; i < a.length; i++) {
          if (!deepEqual(a[i], b[i], newLevel)) {
            return false;
          }
        }
        return true;
      }
      if (a && b && _typeof(a) === "object" && _typeof(b) === "object") {
        var keys2 = Object.keys(a);
        if (keys2.length !== Object.keys(b).length) {
          return false;
        }
        return keys2.every(function(key) {
          return deepEqual(a[key], b[key], newLevel);
        });
      }
      return false;
    }
    return deepEqual(obj1, obj2);
  }
  var isEqual_default = isEqual;

  // node_modules/@ant-design/cssinjs/es/StyleContext.js
  var React10 = __toESM(require_react());

  // node_modules/@ant-design/cssinjs/es/Cache.js
  var SPLIT = "%";
  function pathKey(keys2) {
    return keys2.join(SPLIT);
  }
  var Entity = /* @__PURE__ */ function() {
    function Entity2(instanceId) {
      _classCallCheck(this, Entity2);
      _defineProperty(this, "instanceId", void 0);
      _defineProperty(this, "cache", /* @__PURE__ */ new Map());
      this.instanceId = instanceId;
    }
    _createClass(Entity2, [{
      key: "get",
      value: function get2(keys2) {
        return this.opGet(pathKey(keys2));
      }
      /** A fast get cache with `get` concat. */
    }, {
      key: "opGet",
      value: function opGet(keyPathStr) {
        return this.cache.get(keyPathStr) || null;
      }
    }, {
      key: "update",
      value: function update(keys2, valueFn) {
        return this.opUpdate(pathKey(keys2), valueFn);
      }
      /** A fast get cache with `get` concat. */
    }, {
      key: "opUpdate",
      value: function opUpdate(keyPathStr, valueFn) {
        var prevValue = this.cache.get(keyPathStr);
        var nextValue = valueFn(prevValue);
        if (nextValue === null) {
          this.cache.delete(keyPathStr);
        } else {
          this.cache.set(keyPathStr, nextValue);
        }
      }
    }]);
    return Entity2;
  }();
  var Cache_default = Entity;

  // node_modules/@ant-design/cssinjs/es/StyleContext.js
  var ATTR_TOKEN = "data-token-hash";
  var ATTR_MARK = "data-css-hash";
  var ATTR_CACHE_PATH = "data-cache-path";
  var CSS_IN_JS_INSTANCE = "__cssinjs_instance__";
  function createCache() {
    var cssinjsInstanceId = Math.random().toString(12).slice(2);
    if (typeof document !== "undefined" && document.head && document.body) {
      var styles = document.body.querySelectorAll("style[".concat(ATTR_MARK, "]")) || [];
      var firstChild = document.head.firstChild;
      Array.from(styles).forEach(function(style2) {
        style2[CSS_IN_JS_INSTANCE] = style2[CSS_IN_JS_INSTANCE] || cssinjsInstanceId;
        if (style2[CSS_IN_JS_INSTANCE] === cssinjsInstanceId) {
          document.head.insertBefore(style2, firstChild);
        }
      });
      var styleHash = {};
      Array.from(document.querySelectorAll("style[".concat(ATTR_MARK, "]"))).forEach(function(style2) {
        var hash = style2.getAttribute(ATTR_MARK);
        if (styleHash[hash]) {
          if (style2[CSS_IN_JS_INSTANCE] === cssinjsInstanceId) {
            var _style$parentNode;
            (_style$parentNode = style2.parentNode) === null || _style$parentNode === void 0 || _style$parentNode.removeChild(style2);
          }
        } else {
          styleHash[hash] = true;
        }
      });
    }
    return new Cache_default(cssinjsInstanceId);
  }
  var StyleContext = /* @__PURE__ */ React10.createContext({
    hashPriority: "low",
    cache: createCache(),
    defaultCache: true
  });
  var StyleContext_default = StyleContext;

  // node_modules/@ant-design/cssinjs/es/theme/ThemeCache.js
  function sameDerivativeOption(left, right) {
    if (left.length !== right.length) {
      return false;
    }
    for (var i = 0; i < left.length; i++) {
      if (left[i] !== right[i]) {
        return false;
      }
    }
    return true;
  }
  var ThemeCache = /* @__PURE__ */ function() {
    function ThemeCache2() {
      _classCallCheck(this, ThemeCache2);
      _defineProperty(this, "cache", void 0);
      _defineProperty(this, "keys", void 0);
      _defineProperty(this, "cacheCallTimes", void 0);
      this.cache = /* @__PURE__ */ new Map();
      this.keys = [];
      this.cacheCallTimes = 0;
    }
    _createClass(ThemeCache2, [{
      key: "size",
      value: function size() {
        return this.keys.length;
      }
    }, {
      key: "internalGet",
      value: function internalGet(derivativeOption) {
        var _cache2, _cache3;
        var updateCallTimes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var cache2 = {
          map: this.cache
        };
        derivativeOption.forEach(function(derivative2) {
          if (!cache2) {
            cache2 = void 0;
          } else {
            var _cache;
            cache2 = (_cache = cache2) === null || _cache === void 0 || (_cache = _cache.map) === null || _cache === void 0 ? void 0 : _cache.get(derivative2);
          }
        });
        if ((_cache2 = cache2) !== null && _cache2 !== void 0 && _cache2.value && updateCallTimes) {
          cache2.value[1] = this.cacheCallTimes++;
        }
        return (_cache3 = cache2) === null || _cache3 === void 0 ? void 0 : _cache3.value;
      }
    }, {
      key: "get",
      value: function get2(derivativeOption) {
        var _this$internalGet;
        return (_this$internalGet = this.internalGet(derivativeOption, true)) === null || _this$internalGet === void 0 ? void 0 : _this$internalGet[0];
      }
    }, {
      key: "has",
      value: function has2(derivativeOption) {
        return !!this.internalGet(derivativeOption);
      }
    }, {
      key: "set",
      value: function set3(derivativeOption, value) {
        var _this = this;
        if (!this.has(derivativeOption)) {
          if (this.size() + 1 > ThemeCache2.MAX_CACHE_SIZE + ThemeCache2.MAX_CACHE_OFFSET) {
            var _this$keys$reduce = this.keys.reduce(function(result, key) {
              var _result = _slicedToArray(result, 2), callTimes = _result[1];
              if (_this.internalGet(key)[1] < callTimes) {
                return [key, _this.internalGet(key)[1]];
              }
              return result;
            }, [this.keys[0], this.cacheCallTimes]), _this$keys$reduce2 = _slicedToArray(_this$keys$reduce, 1), targetKey = _this$keys$reduce2[0];
            this.delete(targetKey);
          }
          this.keys.push(derivativeOption);
        }
        var cache2 = this.cache;
        derivativeOption.forEach(function(derivative2, index2) {
          if (index2 === derivativeOption.length - 1) {
            cache2.set(derivative2, {
              value: [value, _this.cacheCallTimes++]
            });
          } else {
            var cacheValue = cache2.get(derivative2);
            if (!cacheValue) {
              cache2.set(derivative2, {
                map: /* @__PURE__ */ new Map()
              });
            } else if (!cacheValue.map) {
              cacheValue.map = /* @__PURE__ */ new Map();
            }
            cache2 = cache2.get(derivative2).map;
          }
        });
      }
    }, {
      key: "deleteByPath",
      value: function deleteByPath(currentCache, derivatives) {
        var cache2 = currentCache.get(derivatives[0]);
        if (derivatives.length === 1) {
          var _cache$value;
          if (!cache2.map) {
            currentCache.delete(derivatives[0]);
          } else {
            currentCache.set(derivatives[0], {
              map: cache2.map
            });
          }
          return (_cache$value = cache2.value) === null || _cache$value === void 0 ? void 0 : _cache$value[0];
        }
        var result = this.deleteByPath(cache2.map, derivatives.slice(1));
        if ((!cache2.map || cache2.map.size === 0) && !cache2.value) {
          currentCache.delete(derivatives[0]);
        }
        return result;
      }
    }, {
      key: "delete",
      value: function _delete(derivativeOption) {
        if (this.has(derivativeOption)) {
          this.keys = this.keys.filter(function(item) {
            return !sameDerivativeOption(item, derivativeOption);
          });
          return this.deleteByPath(this.cache, derivativeOption);
        }
        return void 0;
      }
    }]);
    return ThemeCache2;
  }();
  _defineProperty(ThemeCache, "MAX_CACHE_SIZE", 20);
  _defineProperty(ThemeCache, "MAX_CACHE_OFFSET", 5);

  // node_modules/@ant-design/cssinjs/es/theme/Theme.js
  var uuid2 = 0;
  var Theme = /* @__PURE__ */ function() {
    function Theme2(derivatives) {
      _classCallCheck(this, Theme2);
      _defineProperty(this, "derivatives", void 0);
      _defineProperty(this, "id", void 0);
      this.derivatives = Array.isArray(derivatives) ? derivatives : [derivatives];
      this.id = uuid2;
      if (derivatives.length === 0) {
        warning2(derivatives.length > 0, "[Ant Design CSS-in-JS] Theme should have at least one derivative function.");
      }
      uuid2 += 1;
    }
    _createClass(Theme2, [{
      key: "getDerivativeToken",
      value: function getDerivativeToken(token2) {
        return this.derivatives.reduce(function(result, derivative2) {
          return derivative2(token2, result);
        }, void 0);
      }
    }]);
    return Theme2;
  }();

  // node_modules/@ant-design/cssinjs/es/theme/createTheme.js
  var cacheThemes = new ThemeCache();
  function createTheme(derivatives) {
    var derivativeArr = Array.isArray(derivatives) ? derivatives : [derivatives];
    if (!cacheThemes.has(derivativeArr)) {
      cacheThemes.set(derivativeArr, new Theme(derivativeArr));
    }
    return cacheThemes.get(derivativeArr);
  }

  // node_modules/@ant-design/cssinjs/es/util/index.js
  var resultCache = /* @__PURE__ */ new WeakMap();
  var RESULT_VALUE = {};
  function memoResult(callback, deps) {
    var current2 = resultCache;
    for (var i = 0; i < deps.length; i += 1) {
      var dep = deps[i];
      if (!current2.has(dep)) {
        current2.set(dep, /* @__PURE__ */ new WeakMap());
      }
      current2 = current2.get(dep);
    }
    if (!current2.has(RESULT_VALUE)) {
      current2.set(RESULT_VALUE, callback());
    }
    return current2.get(RESULT_VALUE);
  }
  var flattenTokenCache = /* @__PURE__ */ new WeakMap();
  function flattenToken(token2) {
    var str = flattenTokenCache.get(token2) || "";
    if (!str) {
      Object.keys(token2).forEach(function(key) {
        var value = token2[key];
        str += key;
        if (value instanceof Theme) {
          str += value.id;
        } else if (value && _typeof(value) === "object") {
          str += flattenToken(value);
        } else {
          str += value;
        }
      });
      flattenTokenCache.set(token2, str);
    }
    return str;
  }
  function token2key(token2, salt) {
    return hash_browser_esm_default("".concat(salt, "_").concat(flattenToken(token2)));
  }
  var randomSelectorKey = "random-".concat(Date.now(), "-").concat(Math.random()).replace(/\./g, "");
  var checkContent = "_bAmBoO_";
  function supportSelector(styleStr, handleElement, supportCheck) {
    if (canUseDom()) {
      var _getComputedStyle$con, _ele$parentNode;
      updateCSS(styleStr, randomSelectorKey);
      var _ele = document.createElement("div");
      _ele.style.position = "fixed";
      _ele.style.left = "0";
      _ele.style.top = "0";
      handleElement === null || handleElement === void 0 || handleElement(_ele);
      document.body.appendChild(_ele);
      if (true) {
        _ele.innerHTML = "Test";
        _ele.style.zIndex = "9999999";
      }
      var support = supportCheck ? supportCheck(_ele) : (_getComputedStyle$con = getComputedStyle(_ele).content) === null || _getComputedStyle$con === void 0 ? void 0 : _getComputedStyle$con.includes(checkContent);
      (_ele$parentNode = _ele.parentNode) === null || _ele$parentNode === void 0 || _ele$parentNode.removeChild(_ele);
      removeCSS(randomSelectorKey);
      return support;
    }
    return false;
  }
  var canLayer = void 0;
  function supportLayer() {
    if (canLayer === void 0) {
      canLayer = supportSelector("@layer ".concat(randomSelectorKey, " { .").concat(randomSelectorKey, ' { content: "').concat(checkContent, '"!important; } }'), function(ele) {
        ele.className = randomSelectorKey;
      });
    }
    return canLayer;
  }
  var isClientSide = canUseDom();
  function unit(num) {
    if (typeof num === "number") {
      return "".concat(num, "px");
    }
    return num;
  }
  function toStyleStr(style2, tokenKey, styleId) {
    var _objectSpread22;
    var customizeAttrs = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var plain = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    if (plain) {
      return style2;
    }
    var attrs = _objectSpread2(_objectSpread2({}, customizeAttrs), {}, (_objectSpread22 = {}, _defineProperty(_objectSpread22, ATTR_TOKEN, tokenKey), _defineProperty(_objectSpread22, ATTR_MARK, styleId), _objectSpread22));
    var attrStr = Object.keys(attrs).map(function(attr) {
      var val = attrs[attr];
      return val ? "".concat(attr, '="').concat(val, '"') : null;
    }).filter(function(v) {
      return v;
    }).join(" ");
    return "<style ".concat(attrStr, ">").concat(style2, "</style>");
  }

  // node_modules/@ant-design/cssinjs/es/util/css-variables.js
  var token2CSSVar = function token2CSSVar2(token2) {
    var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    return "--".concat(prefix ? "".concat(prefix, "-") : "").concat(token2).replace(/([a-z0-9])([A-Z])/g, "$1-$2").replace(/([A-Z]+)([A-Z][a-z0-9]+)/g, "$1-$2").replace(/([a-z])([A-Z0-9])/g, "$1-$2").toLowerCase();
  };
  var serializeCSSVar = function serializeCSSVar2(cssVars, hashId, options) {
    if (!Object.keys(cssVars).length) {
      return "";
    }
    return ".".concat(hashId).concat(options !== null && options !== void 0 && options.scope ? ".".concat(options.scope) : "", "{").concat(Object.entries(cssVars).map(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
      return "".concat(key, ":").concat(value, ";");
    }).join(""), "}");
  };
  var transformToken = function transformToken2(token2, themeKey, config) {
    var cssVars = {};
    var result = {};
    Object.entries(token2).forEach(function(_ref3) {
      var _config$preserve, _config$ignore;
      var _ref4 = _slicedToArray(_ref3, 2), key = _ref4[0], value = _ref4[1];
      if (config !== null && config !== void 0 && (_config$preserve = config.preserve) !== null && _config$preserve !== void 0 && _config$preserve[key]) {
        result[key] = value;
      } else if ((typeof value === "string" || typeof value === "number") && !(config !== null && config !== void 0 && (_config$ignore = config.ignore) !== null && _config$ignore !== void 0 && _config$ignore[key])) {
        var _config$unitless;
        var cssVar = token2CSSVar(key, config === null || config === void 0 ? void 0 : config.prefix);
        cssVars[cssVar] = typeof value === "number" && !(config !== null && config !== void 0 && (_config$unitless = config.unitless) !== null && _config$unitless !== void 0 && _config$unitless[key]) ? "".concat(value, "px") : String(value);
        result[key] = "var(".concat(cssVar, ")");
      }
    });
    return [result, serializeCSSVar(cssVars, themeKey, {
      scope: config === null || config === void 0 ? void 0 : config.scope
    })];
  };

  // node_modules/@ant-design/cssinjs/es/hooks/useGlobalCache.js
  var React14 = __toESM(require_react());

  // node_modules/rc-util/es/hooks/useLayoutEffect.js
  var React11 = __toESM(require_react());
  var useInternalLayoutEffect = canUseDom() ? React11.useLayoutEffect : React11.useEffect;
  var useLayoutEffect2 = function useLayoutEffect3(callback, deps) {
    var firstMountRef = React11.useRef(true);
    useInternalLayoutEffect(function() {
      return callback(firstMountRef.current);
    }, deps);
    useInternalLayoutEffect(function() {
      firstMountRef.current = false;
      return function() {
        firstMountRef.current = true;
      };
    }, []);
  };
  var useLayoutUpdateEffect = function useLayoutUpdateEffect2(callback, deps) {
    useLayoutEffect2(function(firstMount) {
      if (!firstMount) {
        return callback();
      }
    }, deps);
  };
  var useLayoutEffect_default = useLayoutEffect2;

  // node_modules/@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js
  var React12 = __toESM(require_react());
  var fullClone = _objectSpread2({}, React12);
  var useInsertionEffect = fullClone.useInsertionEffect;
  var useInsertionEffectPolyfill = function useInsertionEffectPolyfill2(renderEffect, effect, deps) {
    React12.useMemo(renderEffect, deps);
    useLayoutEffect_default(function() {
      return effect(true);
    }, deps);
  };
  var useCompatibleInsertionEffect = useInsertionEffect ? function(renderEffect, effect, deps) {
    return useInsertionEffect(function() {
      renderEffect();
      return effect();
    }, deps);
  } : useInsertionEffectPolyfill;
  var useCompatibleInsertionEffect_default = useCompatibleInsertionEffect;

  // node_modules/@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js
  var React13 = __toESM(require_react());
  var fullClone2 = _objectSpread2({}, React13);
  var useInsertionEffect2 = fullClone2.useInsertionEffect;
  var useCleanupRegister = function useCleanupRegister2(deps) {
    var effectCleanups = [];
    var cleanupFlag = false;
    function register2(fn) {
      if (cleanupFlag) {
        if (true) {
          warning2(false, "[Ant Design CSS-in-JS] You are registering a cleanup function after unmount, which will not have any effect.");
        }
        return;
      }
      effectCleanups.push(fn);
    }
    React13.useEffect(function() {
      cleanupFlag = false;
      return function() {
        cleanupFlag = true;
        if (effectCleanups.length) {
          effectCleanups.forEach(function(fn) {
            return fn();
          });
        }
      };
    }, deps);
    return register2;
  };
  var useRun = function useRun2() {
    return function(fn) {
      fn();
    };
  };
  var useEffectCleanupRegister = typeof useInsertionEffect2 !== "undefined" ? useCleanupRegister : useRun;
  var useEffectCleanupRegister_default = useEffectCleanupRegister;

  // node_modules/@ant-design/cssinjs/es/hooks/useHMR.js
  var webpackHMR = false;
  function useDevHMR() {
    return webpackHMR;
  }
  var useHMR_default = false ? useProdHMR : useDevHMR;
  if (typeof module !== "undefined" && module && module.hot && typeof window !== "undefined") {
    win = window;
    if (typeof win.webpackHotUpdate === "function") {
      originWebpackHotUpdate = win.webpackHotUpdate;
      win.webpackHotUpdate = function() {
        webpackHMR = true;
        setTimeout(function() {
          webpackHMR = false;
        }, 0);
        return originWebpackHotUpdate.apply(void 0, arguments);
      };
    }
  }
  var win;
  var originWebpackHotUpdate;

  // node_modules/@ant-design/cssinjs/es/hooks/useGlobalCache.js
  function useGlobalCache(prefix, keyPath, cacheFn, onCacheRemove, onCacheEffect) {
    var _React$useContext = React14.useContext(StyleContext_default), globalCache = _React$useContext.cache;
    var fullPath = [prefix].concat(_toConsumableArray(keyPath));
    var fullPathStr = pathKey(fullPath);
    var register2 = useEffectCleanupRegister_default([fullPathStr]);
    var HMRUpdate = useHMR_default();
    var buildCache = function buildCache2(updater) {
      globalCache.opUpdate(fullPathStr, function(prevCache) {
        var _ref = prevCache || [void 0, void 0], _ref2 = _slicedToArray(_ref, 2), _ref2$ = _ref2[0], times = _ref2$ === void 0 ? 0 : _ref2$, cache2 = _ref2[1];
        var tmpCache = cache2;
        if (cache2 && HMRUpdate) {
          onCacheRemove === null || onCacheRemove === void 0 || onCacheRemove(tmpCache, HMRUpdate);
          tmpCache = null;
        }
        var mergedCache = tmpCache || cacheFn();
        var data = [times, mergedCache];
        return updater ? updater(data) : data;
      });
    };
    React14.useMemo(
      function() {
        buildCache();
      },
      /* eslint-disable react-hooks/exhaustive-deps */
      [fullPathStr]
      /* eslint-enable */
    );
    var cacheEntity = globalCache.opGet(fullPathStr);
    if (!cacheEntity) {
      buildCache();
      cacheEntity = globalCache.opGet(fullPathStr);
    }
    var cacheContent = cacheEntity[1];
    useCompatibleInsertionEffect_default(function() {
      onCacheEffect === null || onCacheEffect === void 0 || onCacheEffect(cacheContent);
    }, function(polyfill) {
      buildCache(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), times = _ref4[0], cache2 = _ref4[1];
        if (polyfill && times === 0) {
          onCacheEffect === null || onCacheEffect === void 0 || onCacheEffect(cacheContent);
        }
        return [times + 1, cache2];
      });
      return function() {
        globalCache.opUpdate(fullPathStr, function(prevCache) {
          var _ref5 = prevCache || [], _ref6 = _slicedToArray(_ref5, 2), _ref6$ = _ref6[0], times = _ref6$ === void 0 ? 0 : _ref6$, cache2 = _ref6[1];
          var nextCount = times - 1;
          if (nextCount === 0) {
            register2(function() {
              if (polyfill || !globalCache.opGet(fullPathStr)) {
                onCacheRemove === null || onCacheRemove === void 0 || onCacheRemove(cache2, false);
              }
            });
            return null;
          }
          return [times - 1, cache2];
        });
      };
    }, [fullPathStr]);
    return cacheContent;
  }

  // node_modules/@ant-design/cssinjs/es/hooks/useCacheToken.js
  var EMPTY_OVERRIDE = {};
  var hashPrefix = true ? "css-dev-only-do-not-override" : "css";
  var tokenKeys = /* @__PURE__ */ new Map();
  function recordCleanToken(tokenKey) {
    tokenKeys.set(tokenKey, (tokenKeys.get(tokenKey) || 0) + 1);
  }
  function removeStyleTags(key, instanceId) {
    if (typeof document !== "undefined") {
      var styles = document.querySelectorAll("style[".concat(ATTR_TOKEN, '="').concat(key, '"]'));
      styles.forEach(function(style2) {
        if (style2[CSS_IN_JS_INSTANCE] === instanceId) {
          var _style$parentNode;
          (_style$parentNode = style2.parentNode) === null || _style$parentNode === void 0 || _style$parentNode.removeChild(style2);
        }
      });
    }
  }
  var TOKEN_THRESHOLD = 0;
  function cleanTokenStyle(tokenKey, instanceId) {
    tokenKeys.set(tokenKey, (tokenKeys.get(tokenKey) || 0) - 1);
    var tokenKeyList = Array.from(tokenKeys.keys());
    var cleanableKeyList = tokenKeyList.filter(function(key) {
      var count = tokenKeys.get(key) || 0;
      return count <= 0;
    });
    if (tokenKeyList.length - cleanableKeyList.length > TOKEN_THRESHOLD) {
      cleanableKeyList.forEach(function(key) {
        removeStyleTags(key, instanceId);
        tokenKeys.delete(key);
      });
    }
  }
  var getComputedToken = function getComputedToken2(originToken, overrideToken, theme3, format3) {
    var derivativeToken = theme3.getDerivativeToken(originToken);
    var mergedDerivativeToken = _objectSpread2(_objectSpread2({}, derivativeToken), overrideToken);
    if (format3) {
      mergedDerivativeToken = format3(mergedDerivativeToken);
    }
    return mergedDerivativeToken;
  };
  var TOKEN_PREFIX = "token";
  function useCacheToken(theme3, tokens) {
    var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var _useContext = (0, import_react4.useContext)(StyleContext_default), instanceId = _useContext.cache.instanceId, container = _useContext.container;
    var _option$salt = option.salt, salt = _option$salt === void 0 ? "" : _option$salt, _option$override = option.override, override = _option$override === void 0 ? EMPTY_OVERRIDE : _option$override, formatToken2 = option.formatToken, compute = option.getComputedToken, cssVar = option.cssVar;
    var mergedToken = memoResult(function() {
      return Object.assign.apply(Object, [{}].concat(_toConsumableArray(tokens)));
    }, tokens);
    var tokenStr = flattenToken(mergedToken);
    var overrideTokenStr = flattenToken(override);
    var cssVarStr = cssVar ? flattenToken(cssVar) : "";
    var cachedToken = useGlobalCache(TOKEN_PREFIX, [salt, theme3.id, tokenStr, overrideTokenStr, cssVarStr], function() {
      var _cssVar$key;
      var mergedDerivativeToken = compute ? compute(mergedToken, override, theme3) : getComputedToken(mergedToken, override, theme3, formatToken2);
      var actualToken = _objectSpread2({}, mergedDerivativeToken);
      var cssVarsStr = "";
      if (!!cssVar) {
        var _transformToken = transformToken(mergedDerivativeToken, cssVar.key, {
          prefix: cssVar.prefix,
          ignore: cssVar.ignore,
          unitless: cssVar.unitless,
          preserve: cssVar.preserve
        });
        var _transformToken2 = _slicedToArray(_transformToken, 2);
        mergedDerivativeToken = _transformToken2[0];
        cssVarsStr = _transformToken2[1];
      }
      var tokenKey = token2key(mergedDerivativeToken, salt);
      mergedDerivativeToken._tokenKey = tokenKey;
      actualToken._tokenKey = token2key(actualToken, salt);
      var themeKey = (_cssVar$key = cssVar === null || cssVar === void 0 ? void 0 : cssVar.key) !== null && _cssVar$key !== void 0 ? _cssVar$key : tokenKey;
      mergedDerivativeToken._themeKey = themeKey;
      recordCleanToken(themeKey);
      var hashId = "".concat(hashPrefix, "-").concat(hash_browser_esm_default(tokenKey));
      mergedDerivativeToken._hashId = hashId;
      return [mergedDerivativeToken, hashId, actualToken, cssVarsStr, (cssVar === null || cssVar === void 0 ? void 0 : cssVar.key) || ""];
    }, function(cache2) {
      cleanTokenStyle(cache2[0]._themeKey, instanceId);
    }, function(_ref) {
      var _ref2 = _slicedToArray(_ref, 4), token2 = _ref2[0], cssVarsStr = _ref2[3];
      if (cssVar && cssVarsStr) {
        var style2 = updateCSS(cssVarsStr, hash_browser_esm_default("css-variables-".concat(token2._themeKey)), {
          mark: ATTR_MARK,
          prepend: "queue",
          attachTo: container,
          priority: -999
        });
        style2[CSS_IN_JS_INSTANCE] = instanceId;
        style2.setAttribute(ATTR_TOKEN, token2._themeKey);
      }
    });
    return cachedToken;
  }
  var extract = function extract2(cache2, effectStyles, options) {
    var _cache = _slicedToArray(cache2, 5), realToken = _cache[2], styleStr = _cache[3], cssVarKey = _cache[4];
    var _ref3 = options || {}, plain = _ref3.plain;
    if (!styleStr) {
      return null;
    }
    var styleId = realToken._tokenKey;
    var order = -999;
    var sharedAttrs = {
      "data-rc-order": "prependQueue",
      "data-rc-priority": "".concat(order)
    };
    var styleText = toStyleStr(styleStr, cssVarKey, styleId, sharedAttrs, plain);
    return [order, styleId, styleText];
  };

  // node_modules/@ant-design/cssinjs/es/hooks/useCSSVarRegister.js
  var import_react5 = __toESM(require_react());

  // node_modules/@ant-design/cssinjs/es/hooks/useStyleRegister.js
  var React15 = __toESM(require_react());

  // node_modules/@ant-design/cssinjs/node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/stylis/src/Enum.js
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";
  var LAYER = "@layer";

  // node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  function trim(value) {
    return value.trim();
  }
  function replace(value, pattern4, replacement) {
    return value.replace(pattern4, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index2) {
    return value.charCodeAt(index2) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array4) {
    return array4.push(value), value;
  }

  // node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type4, props, children, length2) {
    return { value, root, parent, type: type4, props, children, line, column, length: length2, return: "" };
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek2() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type4) {
    switch (type4) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type4) {
    return trim(slice(position - 1, delimiter(type4 === 91 ? type4 + 2 : type4 === 40 ? type4 + 1 : type4)));
  }
  function whitespace(type4) {
    while (character = peek2())
      if (character < 33)
        next();
      else
        break;
    return token(type4) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index2, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index2, caret() + (count < 6 && peek2() == 32 && next() == 32));
  }
  function delimiter(type4) {
    while (next())
      switch (character) {
        case type4:
          return position;
        case 34:
        case 39:
          if (type4 !== 34 && type4 !== 39)
            delimiter(character);
          break;
        case 40:
          if (type4 === 41)
            delimiter(type4);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type4, index2) {
    while (next())
      if (type4 + character === 47 + 10)
        break;
      else if (type4 + character === 42 + 42 && peek2() === 47)
        break;
    return "/*" + slice(index2, position - 1) + "*" + from(type4 === 47 ? type4 : next());
  }
  function identifier(index2) {
    while (!token(peek2()))
      next();
    return slice(index2, position);
  }

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules2, rulesets, pseudo, points, declarations) {
    var index2 = 0;
    var offset3 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type4 = "";
    var props = rules2;
    var children = rulesets;
    var reference = rule;
    var characters2 = type4;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek2()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index2++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset3:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root, parent, index2, offset3, rules2, points, type4, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset3 === 0)
                  parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules2, points, type4, rules2, props = [], length2), children), rules2, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index2 = offset3 = property = 0, variable = ampersand = 1, type4 = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset3 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek2() === 45)
                characters2 += delimit(next());
              atrule = peek2(), offset3 = length2 = strlen(type4 = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index2, offset3, rules2, points, type4, props, children, length2) {
    var post = offset3 - 1;
    var rule = offset3 === 0 ? rules2 : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index2; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset3 === 0 ? RULESET : type4, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index2, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }

  // node_modules/@ant-design/cssinjs/es/linters/utils.js
  function lintWarning(message, info) {
    var path2 = info.path, parentSelectors = info.parentSelectors;
    warning_default(false, "[Ant Design CSS-in-JS] ".concat(path2 ? "Error in ".concat(path2, ": ") : "").concat(message).concat(parentSelectors.length ? " Selector: ".concat(parentSelectors.join(" | ")) : ""));
  }

  // node_modules/@ant-design/cssinjs/es/linters/contentQuotesLinter.js
  var linter = function linter2(key, value, info) {
    if (key === "content") {
      var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
      var contentValues = ["normal", "none", "initial", "inherit", "unset"];
      if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        lintWarning("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"".concat(value, "\"'`."), info);
      }
    }
  };
  var contentQuotesLinter_default = linter;

  // node_modules/@ant-design/cssinjs/es/linters/hashedAnimationLinter.js
  var linter3 = function linter4(key, value, info) {
    if (key === "animation") {
      if (info.hashId && value !== "none") {
        lintWarning("You seem to be using hashed animation '".concat(value, "', in which case 'animationName' with Keyframe as value is recommended."), info);
      }
    }
  };
  var hashedAnimationLinter_default = linter3;

  // node_modules/@ant-design/cssinjs/es/util/cacheMapUtil.js
  var ATTR_CACHE_MAP = "data-ant-cssinjs-cache-path";
  var CSS_FILE_STYLE = "_FILE_STYLE__";
  var cachePathMap;
  var fromCSSFile = true;
  function prepare() {
    if (!cachePathMap) {
      cachePathMap = {};
      if (canUseDom()) {
        var div = document.createElement("div");
        div.className = ATTR_CACHE_MAP;
        div.style.position = "fixed";
        div.style.visibility = "hidden";
        div.style.top = "-9999px";
        document.body.appendChild(div);
        var content = getComputedStyle(div).content || "";
        content = content.replace(/^"/, "").replace(/"$/, "");
        content.split(";").forEach(function(item) {
          var _item$split = item.split(":"), _item$split2 = _slicedToArray(_item$split, 2), path2 = _item$split2[0], hash = _item$split2[1];
          cachePathMap[path2] = hash;
        });
        var inlineMapStyle = document.querySelector("style[".concat(ATTR_CACHE_MAP, "]"));
        if (inlineMapStyle) {
          var _inlineMapStyle$paren;
          fromCSSFile = false;
          (_inlineMapStyle$paren = inlineMapStyle.parentNode) === null || _inlineMapStyle$paren === void 0 || _inlineMapStyle$paren.removeChild(inlineMapStyle);
        }
        document.body.removeChild(div);
      }
    }
  }
  function existPath(path2) {
    prepare();
    return !!cachePathMap[path2];
  }
  function getStyleAndHash(path2) {
    var hash = cachePathMap[path2];
    var styleStr = null;
    if (hash && canUseDom()) {
      if (fromCSSFile) {
        styleStr = CSS_FILE_STYLE;
      } else {
        var _style = document.querySelector("style[".concat(ATTR_MARK, '="').concat(cachePathMap[path2], '"]'));
        if (_style) {
          styleStr = _style.innerHTML;
        } else {
          delete cachePathMap[path2];
        }
      }
    }
    return [styleStr, hash];
  }

  // node_modules/@ant-design/cssinjs/es/hooks/useStyleRegister.js
  var SKIP_CHECK = "_skip_check_";
  var MULTI_VALUE = "_multi_value_";
  function normalizeStyle(styleStr) {
    var serialized = serialize(compile(styleStr), stringify);
    return serialized.replace(/\{%%%\:[^;];}/g, ";");
  }
  function isCompoundCSSProperty(value) {
    return _typeof(value) === "object" && value && (SKIP_CHECK in value || MULTI_VALUE in value);
  }
  function injectSelectorHash(key, hashId, hashPriority) {
    if (!hashId) {
      return key;
    }
    var hashClassName = ".".concat(hashId);
    var hashSelector = hashPriority === "low" ? ":where(".concat(hashClassName, ")") : hashClassName;
    var keys2 = key.split(",").map(function(k) {
      var _firstPath$match;
      var fullPath = k.trim().split(/\s+/);
      var firstPath = fullPath[0] || "";
      var htmlElement = ((_firstPath$match = firstPath.match(/^\w+/)) === null || _firstPath$match === void 0 ? void 0 : _firstPath$match[0]) || "";
      firstPath = "".concat(htmlElement).concat(hashSelector).concat(firstPath.slice(htmlElement.length));
      return [firstPath].concat(_toConsumableArray(fullPath.slice(1))).join(" ");
    });
    return keys2.join(",");
  }
  var parseStyle = function parseStyle2(interpolation) {
    var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      root: true,
      parentSelectors: []
    }, root = _ref.root, injectHash = _ref.injectHash, parentSelectors = _ref.parentSelectors;
    var hashId = config.hashId, layer = config.layer, path2 = config.path, hashPriority = config.hashPriority, _config$transformers = config.transformers, transformers = _config$transformers === void 0 ? [] : _config$transformers, _config$linters = config.linters, linters = _config$linters === void 0 ? [] : _config$linters;
    var styleStr = "";
    var effectStyle = {};
    function parseKeyframes(keyframes) {
      var animationName = keyframes.getName(hashId);
      if (!effectStyle[animationName]) {
        var _parseStyle = parseStyle2(keyframes.style, config, {
          root: false,
          parentSelectors
        }), _parseStyle2 = _slicedToArray(_parseStyle, 1), _parsedStr = _parseStyle2[0];
        effectStyle[animationName] = "@keyframes ".concat(keyframes.getName(hashId)).concat(_parsedStr);
      }
    }
    function flattenList(list) {
      var fullList = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      list.forEach(function(item) {
        if (Array.isArray(item)) {
          flattenList(item, fullList);
        } else if (item) {
          fullList.push(item);
        }
      });
      return fullList;
    }
    var flattenStyleList = flattenList(Array.isArray(interpolation) ? interpolation : [interpolation]);
    flattenStyleList.forEach(function(originStyle) {
      var style2 = typeof originStyle === "string" && !root ? {} : originStyle;
      if (typeof style2 === "string") {
        styleStr += "".concat(style2, "\n");
      } else if (style2._keyframe) {
        parseKeyframes(style2);
      } else {
        var mergedStyle = transformers.reduce(function(prev2, trans) {
          var _trans$visit;
          return (trans === null || trans === void 0 || (_trans$visit = trans.visit) === null || _trans$visit === void 0 ? void 0 : _trans$visit.call(trans, prev2)) || prev2;
        }, style2);
        Object.keys(mergedStyle).forEach(function(key) {
          var value = mergedStyle[key];
          if (_typeof(value) === "object" && value && (key !== "animationName" || !value._keyframe) && !isCompoundCSSProperty(value)) {
            var subInjectHash = false;
            var mergedKey = key.trim();
            var nextRoot = false;
            if ((root || injectHash) && hashId) {
              if (mergedKey.startsWith("@")) {
                subInjectHash = true;
              } else {
                mergedKey = injectSelectorHash(key, hashId, hashPriority);
              }
            } else if (root && !hashId && (mergedKey === "&" || mergedKey === "")) {
              mergedKey = "";
              nextRoot = true;
            }
            var _parseStyle3 = parseStyle2(value, config, {
              root: nextRoot,
              injectHash: subInjectHash,
              parentSelectors: [].concat(_toConsumableArray(parentSelectors), [mergedKey])
            }), _parseStyle4 = _slicedToArray(_parseStyle3, 2), _parsedStr2 = _parseStyle4[0], childEffectStyle = _parseStyle4[1];
            effectStyle = _objectSpread2(_objectSpread2({}, effectStyle), childEffectStyle);
            styleStr += "".concat(mergedKey).concat(_parsedStr2);
          } else {
            let appendStyle = function(cssKey, cssValue) {
              if (_typeof(value) !== "object" || !(value !== null && value !== void 0 && value[SKIP_CHECK])) {
                [contentQuotesLinter_default, hashedAnimationLinter_default].concat(_toConsumableArray(linters)).forEach(function(linter5) {
                  return linter5(cssKey, cssValue, {
                    path: path2,
                    hashId,
                    parentSelectors
                  });
                });
              }
              var styleName = cssKey.replace(/[A-Z]/g, function(match2) {
                return "-".concat(match2.toLowerCase());
              });
              var formatValue2 = cssValue;
              if (!unitless_browser_esm_default[cssKey] && typeof formatValue2 === "number" && formatValue2 !== 0) {
                formatValue2 = "".concat(formatValue2, "px");
              }
              if (cssKey === "animationName" && cssValue !== null && cssValue !== void 0 && cssValue._keyframe) {
                parseKeyframes(cssValue);
                formatValue2 = cssValue.getName(hashId);
              }
              styleStr += "".concat(styleName, ":").concat(formatValue2, ";");
            };
            var _value;
            var actualValue = (_value = value === null || value === void 0 ? void 0 : value.value) !== null && _value !== void 0 ? _value : value;
            if (_typeof(value) === "object" && value !== null && value !== void 0 && value[MULTI_VALUE] && Array.isArray(actualValue)) {
              actualValue.forEach(function(item) {
                appendStyle(key, item);
              });
            } else {
              appendStyle(key, actualValue);
            }
          }
        });
      }
    });
    if (!root) {
      styleStr = "{".concat(styleStr, "}");
    } else if (layer && supportLayer()) {
      var layerCells = layer.split(",");
      var layerName = layerCells[layerCells.length - 1].trim();
      styleStr = "@layer ".concat(layerName, " {").concat(styleStr, "}");
      if (layerCells.length > 1) {
        styleStr = "@layer ".concat(layer, "{%%%:%}").concat(styleStr);
      }
    }
    return [styleStr, effectStyle];
  };
  function uniqueHash(path2, styleStr) {
    return hash_browser_esm_default("".concat(path2.join("%")).concat(styleStr));
  }
  function Empty() {
    return null;
  }
  var STYLE_PREFIX = "style";
  function useStyleRegister(info, styleFn) {
    var token2 = info.token, path2 = info.path, hashId = info.hashId, layer = info.layer, nonce = info.nonce, clientOnly = info.clientOnly, _info$order = info.order, order = _info$order === void 0 ? 0 : _info$order;
    var _React$useContext = React15.useContext(StyleContext_default), autoClear = _React$useContext.autoClear, mock = _React$useContext.mock, defaultCache = _React$useContext.defaultCache, hashPriority = _React$useContext.hashPriority, container = _React$useContext.container, ssrInline = _React$useContext.ssrInline, transformers = _React$useContext.transformers, linters = _React$useContext.linters, cache2 = _React$useContext.cache;
    var tokenKey = token2._tokenKey;
    var fullPath = [tokenKey].concat(_toConsumableArray(path2));
    var isMergedClientSide = isClientSide;
    if (mock !== void 0) {
      isMergedClientSide = mock === "client";
    }
    var _useGlobalCache = useGlobalCache(
      STYLE_PREFIX,
      fullPath,
      // Create cache if needed
      function() {
        var cachePath = fullPath.join("|");
        if (existPath(cachePath)) {
          var _getStyleAndHash = getStyleAndHash(cachePath), _getStyleAndHash2 = _slicedToArray(_getStyleAndHash, 2), inlineCacheStyleStr = _getStyleAndHash2[0], styleHash = _getStyleAndHash2[1];
          if (inlineCacheStyleStr) {
            return [inlineCacheStyleStr, tokenKey, styleHash, {}, clientOnly, order];
          }
        }
        var styleObj = styleFn();
        var _parseStyle5 = parseStyle(styleObj, {
          hashId,
          hashPriority,
          layer,
          path: path2.join("-"),
          transformers,
          linters
        }), _parseStyle6 = _slicedToArray(_parseStyle5, 2), parsedStyle = _parseStyle6[0], effectStyle = _parseStyle6[1];
        var styleStr = normalizeStyle(parsedStyle);
        var styleId = uniqueHash(fullPath, styleStr);
        return [styleStr, tokenKey, styleId, effectStyle, clientOnly, order];
      },
      // Remove cache if no need
      function(_ref2, fromHMR) {
        var _ref3 = _slicedToArray(_ref2, 3), styleId = _ref3[2];
        if ((fromHMR || autoClear) && isClientSide) {
          removeCSS(styleId, {
            mark: ATTR_MARK
          });
        }
      },
      // Effect: Inject style here
      function(_ref4) {
        var _ref5 = _slicedToArray(_ref4, 4), styleStr = _ref5[0], _ = _ref5[1], styleId = _ref5[2], effectStyle = _ref5[3];
        if (isMergedClientSide && styleStr !== CSS_FILE_STYLE) {
          var mergedCSSConfig = {
            mark: ATTR_MARK,
            prepend: "queue",
            attachTo: container,
            priority: order
          };
          var nonceStr = typeof nonce === "function" ? nonce() : nonce;
          if (nonceStr) {
            mergedCSSConfig.csp = {
              nonce: nonceStr
            };
          }
          var style2 = updateCSS(styleStr, styleId, mergedCSSConfig);
          style2[CSS_IN_JS_INSTANCE] = cache2.instanceId;
          style2.setAttribute(ATTR_TOKEN, tokenKey);
          if (true) {
            style2.setAttribute(ATTR_CACHE_PATH, fullPath.join("|"));
          }
          Object.keys(effectStyle).forEach(function(effectKey) {
            updateCSS(normalizeStyle(effectStyle[effectKey]), "_effect-".concat(effectKey), mergedCSSConfig);
          });
        }
      }
    ), _useGlobalCache2 = _slicedToArray(_useGlobalCache, 3), cachedStyleStr = _useGlobalCache2[0], cachedTokenKey = _useGlobalCache2[1], cachedStyleId = _useGlobalCache2[2];
    return function(node2) {
      var styleNode;
      if (!ssrInline || isMergedClientSide || !defaultCache) {
        styleNode = /* @__PURE__ */ React15.createElement(Empty, null);
      } else {
        var _ref6;
        styleNode = /* @__PURE__ */ React15.createElement("style", _extends({}, (_ref6 = {}, _defineProperty(_ref6, ATTR_TOKEN, cachedTokenKey), _defineProperty(_ref6, ATTR_MARK, cachedStyleId), _ref6), {
          dangerouslySetInnerHTML: {
            __html: cachedStyleStr
          }
        }));
      }
      return /* @__PURE__ */ React15.createElement(React15.Fragment, null, styleNode, node2);
    };
  }
  var extract3 = function extract4(cache2, effectStyles, options) {
    var _cache = _slicedToArray(cache2, 6), styleStr = _cache[0], tokenKey = _cache[1], styleId = _cache[2], effectStyle = _cache[3], clientOnly = _cache[4], order = _cache[5];
    var _ref7 = options || {}, plain = _ref7.plain;
    if (clientOnly) {
      return null;
    }
    var keyStyleText = styleStr;
    var sharedAttrs = {
      "data-rc-order": "prependQueue",
      "data-rc-priority": "".concat(order)
    };
    keyStyleText = toStyleStr(styleStr, tokenKey, styleId, sharedAttrs, plain);
    if (effectStyle) {
      Object.keys(effectStyle).forEach(function(effectKey) {
        if (!effectStyles[effectKey]) {
          effectStyles[effectKey] = true;
          var effectStyleStr = normalizeStyle(effectStyle[effectKey]);
          keyStyleText += toStyleStr(effectStyleStr, tokenKey, "_effect-".concat(effectKey), sharedAttrs, plain);
        }
      });
    }
    return [order, styleId, keyStyleText];
  };

  // node_modules/@ant-design/cssinjs/es/hooks/useCSSVarRegister.js
  var CSS_VAR_PREFIX = "cssVar";
  var useCSSVarRegister = function useCSSVarRegister2(config, fn) {
    var key = config.key, prefix = config.prefix, unitless2 = config.unitless, ignore2 = config.ignore, token2 = config.token, _config$scope = config.scope, scope = _config$scope === void 0 ? "" : _config$scope;
    var _useContext = (0, import_react5.useContext)(StyleContext_default), instanceId = _useContext.cache.instanceId, container = _useContext.container;
    var tokenKey = token2._tokenKey;
    var stylePath = [].concat(_toConsumableArray(config.path), [key, scope, tokenKey]);
    var cache2 = useGlobalCache(CSS_VAR_PREFIX, stylePath, function() {
      var originToken = fn();
      var _transformToken = transformToken(originToken, key, {
        prefix,
        unitless: unitless2,
        ignore: ignore2,
        scope
      }), _transformToken2 = _slicedToArray(_transformToken, 2), mergedToken = _transformToken2[0], cssVarsStr = _transformToken2[1];
      var styleId = uniqueHash(stylePath, cssVarsStr);
      return [mergedToken, cssVarsStr, styleId, key];
    }, function(_ref) {
      var _ref2 = _slicedToArray(_ref, 3), styleId = _ref2[2];
      if (isClientSide) {
        removeCSS(styleId, {
          mark: ATTR_MARK
        });
      }
    }, function(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 3), cssVarsStr = _ref4[1], styleId = _ref4[2];
      if (!cssVarsStr) {
        return;
      }
      var style2 = updateCSS(cssVarsStr, styleId, {
        mark: ATTR_MARK,
        prepend: "queue",
        attachTo: container,
        priority: -999
      });
      style2[CSS_IN_JS_INSTANCE] = instanceId;
      style2.setAttribute(ATTR_TOKEN, key);
    });
    return cache2;
  };
  var extract5 = function extract6(cache2, effectStyles, options) {
    var _cache = _slicedToArray(cache2, 4), styleStr = _cache[1], styleId = _cache[2], cssVarKey = _cache[3];
    var _ref5 = options || {}, plain = _ref5.plain;
    if (!styleStr) {
      return null;
    }
    var order = -999;
    var sharedAttrs = {
      "data-rc-order": "prependQueue",
      "data-rc-priority": "".concat(order)
    };
    var styleText = toStyleStr(styleStr, cssVarKey, styleId, sharedAttrs, plain);
    return [order, styleId, styleText];
  };
  var useCSSVarRegister_default = useCSSVarRegister;

  // node_modules/@ant-design/cssinjs/es/extractStyle.js
  var _ExtractStyleFns;
  var ExtractStyleFns = (_ExtractStyleFns = {}, _defineProperty(_ExtractStyleFns, STYLE_PREFIX, extract3), _defineProperty(_ExtractStyleFns, TOKEN_PREFIX, extract), _defineProperty(_ExtractStyleFns, CSS_VAR_PREFIX, extract5), _ExtractStyleFns);

  // node_modules/@ant-design/cssinjs/es/Keyframes.js
  var Keyframe = /* @__PURE__ */ function() {
    function Keyframe2(name, style2) {
      _classCallCheck(this, Keyframe2);
      _defineProperty(this, "name", void 0);
      _defineProperty(this, "style", void 0);
      _defineProperty(this, "_keyframe", true);
      this.name = name;
      this.style = style2;
    }
    _createClass(Keyframe2, [{
      key: "getName",
      value: function getName() {
        var hashId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
        return hashId ? "".concat(hashId, "-").concat(this.name) : this.name;
      }
    }]);
    return Keyframe2;
  }();
  var Keyframes_default = Keyframe;

  // node_modules/@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js
  function noSplit(list) {
    list.notSplit = true;
    return list;
  }
  var keyMap = {
    // Inset
    inset: ["top", "right", "bottom", "left"],
    insetBlock: ["top", "bottom"],
    insetBlockStart: ["top"],
    insetBlockEnd: ["bottom"],
    insetInline: ["left", "right"],
    insetInlineStart: ["left"],
    insetInlineEnd: ["right"],
    // Margin
    marginBlock: ["marginTop", "marginBottom"],
    marginBlockStart: ["marginTop"],
    marginBlockEnd: ["marginBottom"],
    marginInline: ["marginLeft", "marginRight"],
    marginInlineStart: ["marginLeft"],
    marginInlineEnd: ["marginRight"],
    // Padding
    paddingBlock: ["paddingTop", "paddingBottom"],
    paddingBlockStart: ["paddingTop"],
    paddingBlockEnd: ["paddingBottom"],
    paddingInline: ["paddingLeft", "paddingRight"],
    paddingInlineStart: ["paddingLeft"],
    paddingInlineEnd: ["paddingRight"],
    // Border
    borderBlock: noSplit(["borderTop", "borderBottom"]),
    borderBlockStart: noSplit(["borderTop"]),
    borderBlockEnd: noSplit(["borderBottom"]),
    borderInline: noSplit(["borderLeft", "borderRight"]),
    borderInlineStart: noSplit(["borderLeft"]),
    borderInlineEnd: noSplit(["borderRight"]),
    // Border width
    borderBlockWidth: ["borderTopWidth", "borderBottomWidth"],
    borderBlockStartWidth: ["borderTopWidth"],
    borderBlockEndWidth: ["borderBottomWidth"],
    borderInlineWidth: ["borderLeftWidth", "borderRightWidth"],
    borderInlineStartWidth: ["borderLeftWidth"],
    borderInlineEndWidth: ["borderRightWidth"],
    // Border style
    borderBlockStyle: ["borderTopStyle", "borderBottomStyle"],
    borderBlockStartStyle: ["borderTopStyle"],
    borderBlockEndStyle: ["borderBottomStyle"],
    borderInlineStyle: ["borderLeftStyle", "borderRightStyle"],
    borderInlineStartStyle: ["borderLeftStyle"],
    borderInlineEndStyle: ["borderRightStyle"],
    // Border color
    borderBlockColor: ["borderTopColor", "borderBottomColor"],
    borderBlockStartColor: ["borderTopColor"],
    borderBlockEndColor: ["borderBottomColor"],
    borderInlineColor: ["borderLeftColor", "borderRightColor"],
    borderInlineStartColor: ["borderLeftColor"],
    borderInlineEndColor: ["borderRightColor"],
    // Border radius
    borderStartStartRadius: ["borderTopLeftRadius"],
    borderStartEndRadius: ["borderTopRightRadius"],
    borderEndStartRadius: ["borderBottomLeftRadius"],
    borderEndEndRadius: ["borderBottomRightRadius"]
  };

  // node_modules/@ant-design/icons/es/components/Context.js
  var import_react6 = __toESM(require_react());
  var IconContext = /* @__PURE__ */ (0, import_react6.createContext)({});
  var Context_default = IconContext;

  // node_modules/@babel/runtime/helpers/esm/toArray.js
  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  // node_modules/rc-util/es/utils/get.js
  function get(entity, path2) {
    var current2 = entity;
    for (var i = 0; i < path2.length; i += 1) {
      if (current2 === null || current2 === void 0) {
        return void 0;
      }
      current2 = current2[path2[i]];
    }
    return current2;
  }

  // node_modules/rc-util/es/utils/set.js
  function internalSet(entity, paths, value, removeIfUndefined) {
    if (!paths.length) {
      return value;
    }
    var _paths = _toArray(paths), path2 = _paths[0], restPath = _paths.slice(1);
    var clone;
    if (!entity && typeof path2 === "number") {
      clone = [];
    } else if (Array.isArray(entity)) {
      clone = _toConsumableArray(entity);
    } else {
      clone = _objectSpread2({}, entity);
    }
    if (removeIfUndefined && value === void 0 && restPath.length === 1) {
      delete clone[path2][restPath[0]];
    } else {
      clone[path2] = internalSet(clone[path2], restPath, value, removeIfUndefined);
    }
    return clone;
  }
  function set2(entity, paths, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (paths.length && removeIfUndefined && value === void 0 && !get(entity, paths.slice(0, -1))) {
      return entity;
    }
    return internalSet(entity, paths, value, removeIfUndefined);
  }
  function isObject(obj) {
    return _typeof(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
  }
  function createEmpty(source) {
    return Array.isArray(source) ? [] : {};
  }
  var keys = typeof Reflect === "undefined" ? Object.keys : Reflect.ownKeys;
  function merge() {
    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }
    var clone = createEmpty(sources[0]);
    sources.forEach(function(src) {
      function internalMerge(path2, parentLoopSet) {
        var loopSet = new Set(parentLoopSet);
        var value = get(src, path2);
        var isArr = Array.isArray(value);
        if (isArr || isObject(value)) {
          if (!loopSet.has(value)) {
            loopSet.add(value);
            var originValue = get(clone, path2);
            if (isArr) {
              clone = set2(clone, path2, []);
            } else if (!originValue || _typeof(originValue) !== "object") {
              clone = set2(clone, path2, createEmpty(value));
            }
            keys(value).forEach(function(key) {
              internalMerge([].concat(_toConsumableArray(path2), [key]), loopSet);
            });
          }
        } else {
          clone = set2(clone, path2, value);
        }
      }
      internalMerge([]);
    });
    return clone;
  }

  // node_modules/antd/es/_util/warning.js
  var React16 = __toESM(require_react());
  function noop2() {
  }
  var deprecatedWarnList = null;
  var warning3 = noop2;
  if (true) {
    warning3 = (valid, component, message) => {
      warning_default(valid, `[antd: ${component}] ${message}`);
      if (false) {
        resetWarned();
      }
    };
  }
  var WarningContext = /* @__PURE__ */ React16.createContext({});
  var devUseWarning = true ? (component) => {
    const {
      strict
    } = React16.useContext(WarningContext);
    const typeWarning = (valid, type4, message) => {
      if (!valid) {
        if (strict === false && type4 === "deprecated") {
          const existWarning = deprecatedWarnList;
          if (!deprecatedWarnList) {
            deprecatedWarnList = {};
          }
          deprecatedWarnList[component] = deprecatedWarnList[component] || [];
          if (!deprecatedWarnList[component].includes(message || "")) {
            deprecatedWarnList[component].push(message || "");
          }
          if (!existWarning) {
            console.warn("[antd] There exists deprecated usage in your code:", deprecatedWarnList);
          }
        } else {
          true ? warning3(valid, component, message) : void 0;
        }
      }
    };
    typeWarning.deprecated = (valid, oldProp, newProp, message) => {
      typeWarning(valid, "deprecated", `\`${oldProp}\` is deprecated. Please use \`${newProp}\` instead.${message ? ` ${message}` : ""}`);
    };
    return typeWarning;
  } : () => {
    const noopWarning = () => {
    };
    noopWarning.deprecated = noop2;
    return noopWarning;
  };
  var warning_default2 = warning3;

  // node_modules/antd/es/form/validateMessagesContext.js
  var import_react7 = __toESM(require_react());
  var validateMessagesContext_default = /* @__PURE__ */ (0, import_react7.createContext)(void 0);

  // node_modules/antd/es/locale/index.js
  var React18 = __toESM(require_react());

  // node_modules/rc-pagination/es/locale/en_US.js
  var locale = {
    // Options
    items_per_page: "/ page",
    jump_to: "Go to",
    jump_to_confirm: "confirm",
    page: "Page",
    // Pagination
    prev_page: "Previous Page",
    next_page: "Next Page",
    prev_5: "Previous 5 Pages",
    next_5: "Next 5 Pages",
    prev_3: "Previous 3 Pages",
    next_3: "Next 3 Pages",
    page_size: "Page Size"
  };
  var en_US_default = locale;

  // node_modules/rc-picker/es/locale/en_US.js
  var locale2 = {
    locale: "en_US",
    today: "Today",
    now: "Now",
    backToToday: "Back to today",
    ok: "OK",
    clear: "Clear",
    month: "Month",
    year: "Year",
    timeSelect: "select time",
    dateSelect: "select date",
    weekSelect: "Choose a week",
    monthSelect: "Choose a month",
    yearSelect: "Choose a year",
    decadeSelect: "Choose a decade",
    yearFormat: "YYYY",
    dateFormat: "M/D/YYYY",
    dayFormat: "D",
    dateTimeFormat: "M/D/YYYY HH:mm:ss",
    monthBeforeYear: true,
    previousMonth: "Previous month (PageUp)",
    nextMonth: "Next month (PageDown)",
    previousYear: "Last year (Control + left)",
    nextYear: "Next year (Control + right)",
    previousDecade: "Last decade",
    nextDecade: "Next decade",
    previousCentury: "Last century",
    nextCentury: "Next century"
  };
  var en_US_default2 = locale2;

  // node_modules/antd/es/time-picker/locale/en_US.js
  var locale3 = {
    placeholder: "Select time",
    rangePlaceholder: ["Start time", "End time"]
  };
  var en_US_default3 = locale3;

  // node_modules/antd/es/date-picker/locale/en_US.js
  var locale4 = {
    lang: Object.assign({
      placeholder: "Select date",
      yearPlaceholder: "Select year",
      quarterPlaceholder: "Select quarter",
      monthPlaceholder: "Select month",
      weekPlaceholder: "Select week",
      rangePlaceholder: ["Start date", "End date"],
      rangeYearPlaceholder: ["Start year", "End year"],
      rangeQuarterPlaceholder: ["Start quarter", "End quarter"],
      rangeMonthPlaceholder: ["Start month", "End month"],
      rangeWeekPlaceholder: ["Start week", "End week"]
    }, en_US_default2),
    timePickerLocale: Object.assign({}, en_US_default3)
  };
  var en_US_default4 = locale4;

  // node_modules/antd/es/calendar/locale/en_US.js
  var en_US_default5 = en_US_default4;

  // node_modules/antd/es/locale/en_US.js
  var typeTemplate = "${label} is not a valid ${type}";
  var localeValues = {
    locale: "en",
    Pagination: en_US_default,
    DatePicker: en_US_default4,
    TimePicker: en_US_default3,
    Calendar: en_US_default5,
    global: {
      placeholder: "Please select"
    },
    Table: {
      filterTitle: "Filter menu",
      filterConfirm: "OK",
      filterReset: "Reset",
      filterEmptyText: "No filters",
      filterCheckall: "Select all items",
      filterSearchPlaceholder: "Search in filters",
      emptyText: "No data",
      selectAll: "Select current page",
      selectInvert: "Invert current page",
      selectNone: "Clear all data",
      selectionAll: "Select all data",
      sortTitle: "Sort",
      expand: "Expand row",
      collapse: "Collapse row",
      triggerDesc: "Click to sort descending",
      triggerAsc: "Click to sort ascending",
      cancelSort: "Click to cancel sorting"
    },
    Tour: {
      Next: "Next",
      Previous: "Previous",
      Finish: "Finish"
    },
    Modal: {
      okText: "OK",
      cancelText: "Cancel",
      justOkText: "OK"
    },
    Popconfirm: {
      okText: "OK",
      cancelText: "Cancel"
    },
    Transfer: {
      titles: ["", ""],
      searchPlaceholder: "Search here",
      itemUnit: "item",
      itemsUnit: "items",
      remove: "Remove",
      selectCurrent: "Select current page",
      removeCurrent: "Remove current page",
      selectAll: "Select all data",
      removeAll: "Remove all data",
      selectInvert: "Invert current page"
    },
    Upload: {
      uploading: "Uploading...",
      removeFile: "Remove file",
      uploadError: "Upload error",
      previewFile: "Preview file",
      downloadFile: "Download file"
    },
    Empty: {
      description: "No data"
    },
    Icon: {
      icon: "icon"
    },
    Text: {
      edit: "Edit",
      copy: "Copy",
      copied: "Copied",
      expand: "Expand"
    },
    Form: {
      optional: "(optional)",
      defaultValidateMessages: {
        default: "Field validation error for ${label}",
        required: "Please enter ${label}",
        enum: "${label} must be one of [${enum}]",
        whitespace: "${label} cannot be a blank character",
        date: {
          format: "${label} date format is invalid",
          parse: "${label} cannot be converted to a date",
          invalid: "${label} is an invalid date"
        },
        types: {
          string: typeTemplate,
          method: typeTemplate,
          array: typeTemplate,
          object: typeTemplate,
          number: typeTemplate,
          date: typeTemplate,
          boolean: typeTemplate,
          integer: typeTemplate,
          float: typeTemplate,
          regexp: typeTemplate,
          email: typeTemplate,
          url: typeTemplate,
          hex: typeTemplate
        },
        string: {
          len: "${label} must be ${len} characters",
          min: "${label} must be at least ${min} characters",
          max: "${label} must be up to ${max} characters",
          range: "${label} must be between ${min}-${max} characters"
        },
        number: {
          len: "${label} must be equal to ${len}",
          min: "${label} must be minimum ${min}",
          max: "${label} must be maximum ${max}",
          range: "${label} must be between ${min}-${max}"
        },
        array: {
          len: "Must be ${len} ${label}",
          min: "At least ${min} ${label}",
          max: "At most ${max} ${label}",
          range: "The amount of ${label} must be between ${min}-${max}"
        },
        pattern: {
          mismatch: "${label} does not match the pattern ${pattern}"
        }
      }
    },
    Image: {
      preview: "Preview"
    },
    QRCode: {
      expired: "QR code expired",
      refresh: "Refresh",
      scanned: "Scanned"
    },
    ColorPicker: {
      presetEmpty: "Empty"
    }
  };
  var en_US_default6 = localeValues;

  // node_modules/antd/es/modal/locale.js
  var runtimeLocale = Object.assign({}, en_US_default6.Modal);
  var localeList = [];
  var generateLocale = () => localeList.reduce((merged, locale9) => Object.assign(Object.assign({}, merged), locale9), en_US_default6.Modal);
  function changeConfirmLocale(newLocale) {
    if (newLocale) {
      const cloneLocale = Object.assign({}, newLocale);
      localeList.push(cloneLocale);
      runtimeLocale = generateLocale();
      return () => {
        localeList = localeList.filter((locale9) => locale9 !== cloneLocale);
        runtimeLocale = generateLocale();
      };
    }
    runtimeLocale = Object.assign({}, en_US_default6.Modal);
  }
  function getConfirmLocale() {
    return runtimeLocale;
  }

  // node_modules/antd/es/locale/context.js
  var import_react8 = __toESM(require_react());
  var LocaleContext = /* @__PURE__ */ (0, import_react8.createContext)(void 0);
  var context_default = LocaleContext;

  // node_modules/antd/es/locale/useLocale.js
  var React17 = __toESM(require_react());
  var useLocale = (componentName, defaultLocale) => {
    const fullLocale = React17.useContext(context_default);
    const getLocale = React17.useMemo(() => {
      var _a;
      const locale9 = defaultLocale || en_US_default6[componentName];
      const localeFromContext = (_a = fullLocale === null || fullLocale === void 0 ? void 0 : fullLocale[componentName]) !== null && _a !== void 0 ? _a : {};
      return Object.assign(Object.assign({}, typeof locale9 === "function" ? locale9() : locale9), localeFromContext || {});
    }, [componentName, defaultLocale, fullLocale]);
    const getLocaleCode = React17.useMemo(() => {
      const localeCode = fullLocale === null || fullLocale === void 0 ? void 0 : fullLocale.locale;
      if ((fullLocale === null || fullLocale === void 0 ? void 0 : fullLocale.exist) && !localeCode) {
        return en_US_default6.locale;
      }
      return localeCode;
    }, [fullLocale]);
    return [getLocale, getLocaleCode];
  };
  var useLocale_default = useLocale;

  // node_modules/antd/es/locale/index.js
  var ANT_MARK = "internalMark";
  var LocaleProvider = (props) => {
    const {
      locale: locale9 = {},
      children,
      _ANT_MARK__
    } = props;
    if (true) {
      const warning8 = devUseWarning("LocaleProvider");
      true ? warning8(_ANT_MARK__ === ANT_MARK, "deprecated", "`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale") : void 0;
    }
    React18.useEffect(() => {
      const clearLocale = changeConfirmLocale(locale9 && locale9.Modal);
      return clearLocale;
    }, [locale9]);
    const getMemoizedContextValue = React18.useMemo(() => Object.assign(Object.assign({}, locale9), {
      exist: true
    }), [locale9]);
    return /* @__PURE__ */ React18.createElement(context_default.Provider, {
      value: getMemoizedContextValue
    }, children);
  };
  if (true) {
    LocaleProvider.displayName = "LocaleProvider";
  }
  var locale_default = LocaleProvider;

  // node_modules/antd/es/theme/context.js
  var import_react9 = __toESM(require_react());

  // node_modules/@ctrl/tinycolor/dist/module/util.js
  function bound01(n2, max) {
    if (isOnePointZero(n2)) {
      n2 = "100%";
    }
    var isPercent = isPercentage(n2);
    n2 = max === 360 ? n2 : Math.min(max, Math.max(0, parseFloat(n2)));
    if (isPercent) {
      n2 = parseInt(String(n2 * max), 10) / 100;
    }
    if (Math.abs(n2 - max) < 1e-6) {
      return 1;
    }
    if (max === 360) {
      n2 = (n2 < 0 ? n2 % max + max : n2 % max) / parseFloat(String(max));
    } else {
      n2 = n2 % max / parseFloat(String(max));
    }
    return n2;
  }
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  function isOnePointZero(n2) {
    return typeof n2 === "string" && n2.indexOf(".") !== -1 && parseFloat(n2) === 1;
  }
  function isPercentage(n2) {
    return typeof n2 === "string" && n2.indexOf("%") !== -1;
  }
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }
  function convertToPercentage(n2) {
    if (n2 <= 1) {
      return "".concat(Number(n2) * 100, "%");
    }
    return n2;
  }
  function pad2(c) {
    return c.length === 1 ? "0" + c : String(c);
  }

  // node_modules/@ctrl/tinycolor/dist/module/conversion.js
  function rgbToRgb(r2, g, b) {
    return {
      r: bound01(r2, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }
  function rgbToHsl(r2, g, b) {
    r2 = bound01(r2, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r2, g, b);
    var min = Math.min(r2, g, b);
    var h = 0;
    var s = 0;
    var l2 = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = 0;
    } else {
      var d = max - min;
      s = l2 > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r2:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r2) / d + 2;
          break;
        case b:
          h = (r2 - g) / d + 4;
          break;
        default:
          break;
      }
      h /= 6;
    }
    return { h, s, l: l2 };
  }
  function hue2rgb(p, q, t2) {
    if (t2 < 0) {
      t2 += 1;
    }
    if (t2 > 1) {
      t2 -= 1;
    }
    if (t2 < 1 / 6) {
      return p + (q - p) * (6 * t2);
    }
    if (t2 < 1 / 2) {
      return q;
    }
    if (t2 < 2 / 3) {
      return p + (q - p) * (2 / 3 - t2) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l2) {
    var r2;
    var g;
    var b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l2 = bound01(l2, 100);
    if (s === 0) {
      g = l2;
      b = l2;
      r2 = l2;
    } else {
      var q = l2 < 0.5 ? l2 * (1 + s) : l2 + s - l2 * s;
      var p = 2 * l2 - q;
      r2 = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: r2 * 255, g: g * 255, b: b * 255 };
  }
  function rgbToHsv(r2, g, b) {
    r2 = bound01(r2, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r2, g, b);
    var min = Math.min(r2, g, b);
    var h = 0;
    var v = max;
    var d = max - min;
    var s = max === 0 ? 0 : d / max;
    if (max === min) {
      h = 0;
    } else {
      switch (max) {
        case r2:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r2) / d + 2;
          break;
        case b:
          h = (r2 - g) / d + 4;
          break;
        default:
          break;
      }
      h /= 6;
    }
    return { h, s, v };
  }
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t2 = v * (1 - (1 - f) * s);
    var mod = i % 6;
    var r2 = [v, q, p, p, t2, v][mod];
    var g = [t2, v, v, q, p, p][mod];
    var b = [p, p, t2, v, v, q][mod];
    return { r: r2 * 255, g: g * 255, b: b * 255 };
  }
  function rgbToHex(r2, g, b, allow3Char) {
    var hex2 = [
      pad2(Math.round(r2).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b).toString(16))
    ];
    if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
    }
    return hex2.join("");
  }
  function rgbaToHex(r2, g, b, a, allow4Char) {
    var hex2 = [
      pad2(Math.round(r2).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b).toString(16)),
      pad2(convertDecimalToHex(a))
    ];
    if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
      return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
    }
    return hex2.join("");
  }
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function numberInputToObject(color) {
    return {
      r: color >> 16,
      g: (color & 65280) >> 8,
      b: color & 255
    };
  }

  // node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
  var names = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };

  // node_modules/@ctrl/tinycolor/dist/module/format-input.js
  function inputToRGB(color) {
    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l2 = null;
    var ok = false;
    var format3 = false;
    if (typeof color === "string") {
      color = stringInputToObject(color);
    }
    if (typeof color === "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format3 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format3 = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l2 = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l2);
        ok = true;
        format3 = "hsl";
      }
      if (Object.prototype.hasOwnProperty.call(color, "a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok,
      format: color.format || format3,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a
    };
  }
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
  function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) {
      return false;
    }
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color === "transparent") {
      return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }
    var match2 = matchers.rgb.exec(color);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3] };
    }
    match2 = matchers.rgba.exec(color);
    if (match2) {
      return { r: match2[1], g: match2[2], b: match2[3], a: match2[4] };
    }
    match2 = matchers.hsl.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3] };
    }
    match2 = matchers.hsla.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], l: match2[3], a: match2[4] };
    }
    match2 = matchers.hsv.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3] };
    }
    match2 = matchers.hsva.exec(color);
    if (match2) {
      return { h: match2[1], s: match2[2], v: match2[3], a: match2[4] };
    }
    match2 = matchers.hex8.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        a: convertHexToDecimal(match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex6.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1]),
        g: parseIntFromHex(match2[2]),
        b: parseIntFromHex(match2[3]),
        format: named ? "name" : "hex"
      };
    }
    match2 = matchers.hex4.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        a: convertHexToDecimal(match2[4] + match2[4]),
        format: named ? "name" : "hex8"
      };
    }
    match2 = matchers.hex3.exec(color);
    if (match2) {
      return {
        r: parseIntFromHex(match2[1] + match2[1]),
        g: parseIntFromHex(match2[2] + match2[2]),
        b: parseIntFromHex(match2[3] + match2[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function isValidCSSUnit(color) {
    return Boolean(matchers.CSS_UNIT.exec(String(color)));
  }

  // node_modules/@ctrl/tinycolor/dist/module/index.js
  var TinyColor = (
    /** @class */
    function() {
      function TinyColor2(color, opts) {
        if (color === void 0) {
          color = "";
        }
        if (opts === void 0) {
          opts = {};
        }
        var _a;
        if (color instanceof TinyColor2) {
          return color;
        }
        if (typeof color === "number") {
          color = numberInputToObject(color);
        }
        this.originalInput = color;
        var rgb = inputToRGB(color);
        this.originalInput = color;
        this.r = rgb.r;
        this.g = rgb.g;
        this.b = rgb.b;
        this.a = rgb.a;
        this.roundA = Math.round(100 * this.a) / 100;
        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
        this.gradientType = opts.gradientType;
        if (this.r < 1) {
          this.r = Math.round(this.r);
        }
        if (this.g < 1) {
          this.g = Math.round(this.g);
        }
        if (this.b < 1) {
          this.b = Math.round(this.b);
        }
        this.isValid = rgb.ok;
      }
      TinyColor2.prototype.isDark = function() {
        return this.getBrightness() < 128;
      };
      TinyColor2.prototype.isLight = function() {
        return !this.isDark();
      };
      TinyColor2.prototype.getBrightness = function() {
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
      };
      TinyColor2.prototype.getLuminance = function() {
        var rgb = this.toRgb();
        var R;
        var G;
        var B;
        var RsRGB = rgb.r / 255;
        var GsRGB = rgb.g / 255;
        var BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) {
          R = RsRGB / 12.92;
        } else {
          R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        }
        if (GsRGB <= 0.03928) {
          G = GsRGB / 12.92;
        } else {
          G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        }
        if (BsRGB <= 0.03928) {
          B = BsRGB / 12.92;
        } else {
          B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
      };
      TinyColor2.prototype.getAlpha = function() {
        return this.a;
      };
      TinyColor2.prototype.setAlpha = function(alpha) {
        this.a = boundAlpha(alpha);
        this.roundA = Math.round(100 * this.a) / 100;
        return this;
      };
      TinyColor2.prototype.isMonochrome = function() {
        var s = this.toHsl().s;
        return s === 0;
      };
      TinyColor2.prototype.toHsv = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
      };
      TinyColor2.prototype.toHsvString = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        var h = Math.round(hsv.h * 360);
        var s = Math.round(hsv.s * 100);
        var v = Math.round(hsv.v * 100);
        return this.a === 1 ? "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)") : "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHsl = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
      };
      TinyColor2.prototype.toHslString = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        var h = Math.round(hsl.h * 360);
        var s = Math.round(hsl.s * 100);
        var l2 = Math.round(hsl.l * 100);
        return this.a === 1 ? "hsl(".concat(h, ", ").concat(s, "%, ").concat(l2, "%)") : "hsla(".concat(h, ", ").concat(s, "%, ").concat(l2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHex = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return rgbToHex(this.r, this.g, this.b, allow3Char);
      };
      TinyColor2.prototype.toHexString = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return "#" + this.toHex(allow3Char);
      };
      TinyColor2.prototype.toHex8 = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
      };
      TinyColor2.prototype.toHex8String = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return "#" + this.toHex8(allow4Char);
      };
      TinyColor2.prototype.toHexShortString = function(allowShortChar) {
        if (allowShortChar === void 0) {
          allowShortChar = false;
        }
        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
      };
      TinyColor2.prototype.toRgb = function() {
        return {
          r: Math.round(this.r),
          g: Math.round(this.g),
          b: Math.round(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toRgbString = function() {
        var r2 = Math.round(this.r);
        var g = Math.round(this.g);
        var b = Math.round(this.b);
        return this.a === 1 ? "rgb(".concat(r2, ", ").concat(g, ", ").concat(b, ")") : "rgba(".concat(r2, ", ").concat(g, ", ").concat(b, ", ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toPercentageRgb = function() {
        var fmt = function(x) {
          return "".concat(Math.round(bound01(x, 255) * 100), "%");
        };
        return {
          r: fmt(this.r),
          g: fmt(this.g),
          b: fmt(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toPercentageRgbString = function() {
        var rnd = function(x) {
          return Math.round(bound01(x, 255) * 100);
        };
        return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toName = function() {
        if (this.a === 0) {
          return "transparent";
        }
        if (this.a < 1) {
          return false;
        }
        var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
          var _b = _a[_i], key = _b[0], value = _b[1];
          if (hex2 === value) {
            return key;
          }
        }
        return false;
      };
      TinyColor2.prototype.toString = function(format3) {
        var formatSet = Boolean(format3);
        format3 = format3 !== null && format3 !== void 0 ? format3 : this.format;
        var formattedString = false;
        var hasAlpha = this.a < 1 && this.a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format3.startsWith("hex") || format3 === "name");
        if (needsAlphaFormat) {
          if (format3 === "name" && this.a === 0) {
            return this.toName();
          }
          return this.toRgbString();
        }
        if (format3 === "rgb") {
          formattedString = this.toRgbString();
        }
        if (format3 === "prgb") {
          formattedString = this.toPercentageRgbString();
        }
        if (format3 === "hex" || format3 === "hex6") {
          formattedString = this.toHexString();
        }
        if (format3 === "hex3") {
          formattedString = this.toHexString(true);
        }
        if (format3 === "hex4") {
          formattedString = this.toHex8String(true);
        }
        if (format3 === "hex8") {
          formattedString = this.toHex8String();
        }
        if (format3 === "name") {
          formattedString = this.toName();
        }
        if (format3 === "hsl") {
          formattedString = this.toHslString();
        }
        if (format3 === "hsv") {
          formattedString = this.toHsvString();
        }
        return formattedString || this.toHexString();
      };
      TinyColor2.prototype.toNumber = function() {
        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
      };
      TinyColor2.prototype.clone = function() {
        return new TinyColor2(this.toString());
      };
      TinyColor2.prototype.lighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.brighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var rgb = this.toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return new TinyColor2(rgb);
      };
      TinyColor2.prototype.darken = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.tint = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("white", amount);
      };
      TinyColor2.prototype.shade = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("black", amount);
      };
      TinyColor2.prototype.desaturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.saturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.greyscale = function() {
        return this.desaturate(100);
      };
      TinyColor2.prototype.spin = function(amount) {
        var hsl = this.toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.mix = function(color, amount) {
        if (amount === void 0) {
          amount = 50;
        }
        var rgb1 = this.toRgb();
        var rgb2 = new TinyColor2(color).toRgb();
        var p = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p + rgb1.r,
          g: (rgb2.g - rgb1.g) * p + rgb1.g,
          b: (rgb2.b - rgb1.b) * p + rgb1.b,
          a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return new TinyColor2(rgba);
      };
      TinyColor2.prototype.analogous = function(results, slices) {
        if (results === void 0) {
          results = 6;
        }
        if (slices === void 0) {
          slices = 30;
        }
        var hsl = this.toHsl();
        var part = 360 / slices;
        var ret = [this];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(new TinyColor2(hsl));
        }
        return ret;
      };
      TinyColor2.prototype.complement = function() {
        var hsl = this.toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.monochromatic = function(results) {
        if (results === void 0) {
          results = 6;
        }
        var hsv = this.toHsv();
        var h = hsv.h;
        var s = hsv.s;
        var v = hsv.v;
        var res = [];
        var modification = 1 / results;
        while (results--) {
          res.push(new TinyColor2({ h, s, v }));
          v = (v + modification) % 1;
        }
        return res;
      };
      TinyColor2.prototype.splitcomplement = function() {
        var hsl = this.toHsl();
        var h = hsl.h;
        return [
          this,
          new TinyColor2({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
          new TinyColor2({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
        ];
      };
      TinyColor2.prototype.onBackground = function(background) {
        var fg = this.toRgb();
        var bg = new TinyColor2(background).toRgb();
        var alpha = fg.a + bg.a * (1 - fg.a);
        return new TinyColor2({
          r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
          g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
          b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
          a: alpha
        });
      };
      TinyColor2.prototype.triad = function() {
        return this.polyad(3);
      };
      TinyColor2.prototype.tetrad = function() {
        return this.polyad(4);
      };
      TinyColor2.prototype.polyad = function(n2) {
        var hsl = this.toHsl();
        var h = hsl.h;
        var result = [this];
        var increment = 360 / n2;
        for (var i = 1; i < n2; i++) {
          result.push(new TinyColor2({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
        }
        return result;
      };
      TinyColor2.prototype.equals = function(color) {
        return this.toRgbString() === new TinyColor2(color).toRgbString();
      };
      return TinyColor2;
    }()
  );

  // node_modules/@ant-design/colors/es/generate.js
  var hueStep = 2;
  var saturationStep = 0.16;
  var saturationStep2 = 0.05;
  var brightnessStep1 = 0.05;
  var brightnessStep2 = 0.15;
  var lightColorCount = 5;
  var darkColorCount = 4;
  var darkColorMap = [{
    index: 7,
    opacity: 0.15
  }, {
    index: 6,
    opacity: 0.25
  }, {
    index: 5,
    opacity: 0.3
  }, {
    index: 5,
    opacity: 0.45
  }, {
    index: 5,
    opacity: 0.65
  }, {
    index: 5,
    opacity: 0.85
  }, {
    index: 4,
    opacity: 0.9
  }, {
    index: 3,
    opacity: 0.95
  }, {
    index: 2,
    opacity: 0.97
  }, {
    index: 1,
    opacity: 0.98
  }];
  function toHsv(_ref) {
    var r2 = _ref.r, g = _ref.g, b = _ref.b;
    var hsv = rgbToHsv(r2, g, b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v
    };
  }
  function toHex(_ref2) {
    var r2 = _ref2.r, g = _ref2.g, b = _ref2.b;
    return "#".concat(rgbToHex(r2, g, b, false));
  }
  function mix(rgb1, rgb2, amount) {
    var p = amount / 100;
    var rgb = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b
    };
    return rgb;
  }
  function getHue(hsv, i, light) {
    var hue;
    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
      hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
    } else {
      hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
    }
    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }
    return hue;
  }
  function getSaturation(hsv, i, light) {
    if (hsv.h === 0 && hsv.s === 0) {
      return hsv.s;
    }
    var saturation;
    if (light) {
      saturation = hsv.s - saturationStep * i;
    } else if (i === darkColorCount) {
      saturation = hsv.s + saturationStep;
    } else {
      saturation = hsv.s + saturationStep2 * i;
    }
    if (saturation > 1) {
      saturation = 1;
    }
    if (light && i === lightColorCount && saturation > 0.1) {
      saturation = 0.1;
    }
    if (saturation < 0.06) {
      saturation = 0.06;
    }
    return Number(saturation.toFixed(2));
  }
  function getValue(hsv, i, light) {
    var value;
    if (light) {
      value = hsv.v + brightnessStep1 * i;
    } else {
      value = hsv.v - brightnessStep2 * i;
    }
    if (value > 1) {
      value = 1;
    }
    return Number(value.toFixed(2));
  }
  function generate(color) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var patterns = [];
    var pColor = inputToRGB(color);
    for (var i = lightColorCount; i > 0; i -= 1) {
      var hsv = toHsv(pColor);
      var colorString = toHex(inputToRGB({
        h: getHue(hsv, i, true),
        s: getSaturation(hsv, i, true),
        v: getValue(hsv, i, true)
      }));
      patterns.push(colorString);
    }
    patterns.push(toHex(pColor));
    for (var _i = 1; _i <= darkColorCount; _i += 1) {
      var _hsv = toHsv(pColor);
      var _colorString = toHex(inputToRGB({
        h: getHue(_hsv, _i),
        s: getSaturation(_hsv, _i),
        v: getValue(_hsv, _i)
      }));
      patterns.push(_colorString);
    }
    if (opts.theme === "dark") {
      return darkColorMap.map(function(_ref3) {
        var index2 = _ref3.index, opacity = _ref3.opacity;
        var darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || "#141414"), inputToRGB(patterns[index2]), opacity * 100));
        return darkColorString;
      });
    }
    return patterns;
  }

  // node_modules/@ant-design/colors/es/index.js
  var presetPrimaryColors = {
    red: "#F5222D",
    volcano: "#FA541C",
    orange: "#FA8C16",
    gold: "#FAAD14",
    yellow: "#FADB14",
    lime: "#A0D911",
    green: "#52C41A",
    cyan: "#13C2C2",
    blue: "#1677FF",
    geekblue: "#2F54EB",
    purple: "#722ED1",
    magenta: "#EB2F96",
    grey: "#666666"
  };
  var presetPalettes = {};
  var presetDarkPalettes = {};
  Object.keys(presetPrimaryColors).forEach(function(key) {
    presetPalettes[key] = generate(presetPrimaryColors[key]);
    presetPalettes[key].primary = presetPalettes[key][5];
    presetDarkPalettes[key] = generate(presetPrimaryColors[key], {
      theme: "dark",
      backgroundColor: "#141414"
    });
    presetDarkPalettes[key].primary = presetDarkPalettes[key][5];
  });
  var red = presetPalettes.red;
  var volcano = presetPalettes.volcano;
  var gold = presetPalettes.gold;
  var orange = presetPalettes.orange;
  var yellow = presetPalettes.yellow;
  var lime = presetPalettes.lime;
  var green = presetPalettes.green;
  var cyan = presetPalettes.cyan;
  var blue = presetPalettes.blue;
  var geekblue = presetPalettes.geekblue;
  var purple = presetPalettes.purple;
  var magenta = presetPalettes.magenta;
  var grey = presetPalettes.grey;
  var gray = presetPalettes.grey;

  // node_modules/antd/es/theme/themes/shared/genControlHeight.js
  var genControlHeight = (token2) => {
    const {
      controlHeight
    } = token2;
    return {
      controlHeightSM: controlHeight * 0.75,
      controlHeightXS: controlHeight * 0.5,
      controlHeightLG: controlHeight * 1.25
    };
  };
  var genControlHeight_default = genControlHeight;

  // node_modules/antd/es/theme/themes/shared/genSizeMapToken.js
  function genSizeMapToken(token2) {
    const {
      sizeUnit,
      sizeStep
    } = token2;
    return {
      sizeXXL: sizeUnit * (sizeStep + 8),
      // 48
      sizeXL: sizeUnit * (sizeStep + 4),
      // 32
      sizeLG: sizeUnit * (sizeStep + 2),
      // 24
      sizeMD: sizeUnit * (sizeStep + 1),
      // 20
      sizeMS: sizeUnit * sizeStep,
      // 16
      size: sizeUnit * sizeStep,
      // 16
      sizeSM: sizeUnit * (sizeStep - 1),
      // 12
      sizeXS: sizeUnit * (sizeStep - 2),
      // 8
      sizeXXS: sizeUnit * (sizeStep - 3)
      // 4
    };
  }

  // node_modules/antd/es/theme/themes/seed.js
  var defaultPresetColors = {
    blue: "#1677ff",
    purple: "#722ED1",
    cyan: "#13C2C2",
    green: "#52C41A",
    magenta: "#EB2F96",
    pink: "#eb2f96",
    red: "#F5222D",
    orange: "#FA8C16",
    yellow: "#FADB14",
    volcano: "#FA541C",
    geekblue: "#2F54EB",
    gold: "#FAAD14",
    lime: "#A0D911"
  };
  var seedToken = Object.assign(Object.assign({}, defaultPresetColors), {
    // Color
    colorPrimary: "#1677ff",
    colorSuccess: "#52c41a",
    colorWarning: "#faad14",
    colorError: "#ff4d4f",
    colorInfo: "#1677ff",
    colorLink: "",
    colorTextBase: "",
    colorBgBase: "",
    // Font
    fontFamily: `-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
'Noto Color Emoji'`,
    fontFamilyCode: `'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace`,
    fontSize: 14,
    // Line
    lineWidth: 1,
    lineType: "solid",
    // Motion
    motionUnit: 0.1,
    motionBase: 0,
    motionEaseOutCirc: "cubic-bezier(0.08, 0.82, 0.17, 1)",
    motionEaseInOutCirc: "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
    motionEaseOut: "cubic-bezier(0.215, 0.61, 0.355, 1)",
    motionEaseInOut: "cubic-bezier(0.645, 0.045, 0.355, 1)",
    motionEaseOutBack: "cubic-bezier(0.12, 0.4, 0.29, 1.46)",
    motionEaseInBack: "cubic-bezier(0.71, -0.46, 0.88, 0.6)",
    motionEaseInQuint: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
    motionEaseOutQuint: "cubic-bezier(0.23, 1, 0.32, 1)",
    // Radius
    borderRadius: 6,
    // Size
    sizeUnit: 4,
    sizeStep: 4,
    sizePopupArrow: 16,
    // Control Base
    controlHeight: 32,
    // zIndex
    zIndexBase: 0,
    zIndexPopupBase: 1e3,
    // Image
    opacityImage: 1,
    // Wireframe
    wireframe: false,
    // Motion
    motion: true
  });
  var seed_default = seedToken;

  // node_modules/antd/es/theme/themes/shared/genColorMapToken.js
  function genColorMapToken(seed, _ref) {
    let {
      generateColorPalettes: generateColorPalettes2,
      generateNeutralColorPalettes: generateNeutralColorPalettes2
    } = _ref;
    const {
      colorSuccess: colorSuccessBase,
      colorWarning: colorWarningBase,
      colorError: colorErrorBase,
      colorInfo: colorInfoBase,
      colorPrimary: colorPrimaryBase,
      colorBgBase,
      colorTextBase
    } = seed;
    const primaryColors = generateColorPalettes2(colorPrimaryBase);
    const successColors = generateColorPalettes2(colorSuccessBase);
    const warningColors = generateColorPalettes2(colorWarningBase);
    const errorColors = generateColorPalettes2(colorErrorBase);
    const infoColors = generateColorPalettes2(colorInfoBase);
    const neutralColors = generateNeutralColorPalettes2(colorBgBase, colorTextBase);
    const colorLink = seed.colorLink || seed.colorInfo;
    const linkColors = generateColorPalettes2(colorLink);
    return Object.assign(Object.assign({}, neutralColors), {
      colorPrimaryBg: primaryColors[1],
      colorPrimaryBgHover: primaryColors[2],
      colorPrimaryBorder: primaryColors[3],
      colorPrimaryBorderHover: primaryColors[4],
      colorPrimaryHover: primaryColors[5],
      colorPrimary: primaryColors[6],
      colorPrimaryActive: primaryColors[7],
      colorPrimaryTextHover: primaryColors[8],
      colorPrimaryText: primaryColors[9],
      colorPrimaryTextActive: primaryColors[10],
      colorSuccessBg: successColors[1],
      colorSuccessBgHover: successColors[2],
      colorSuccessBorder: successColors[3],
      colorSuccessBorderHover: successColors[4],
      colorSuccessHover: successColors[4],
      colorSuccess: successColors[6],
      colorSuccessActive: successColors[7],
      colorSuccessTextHover: successColors[8],
      colorSuccessText: successColors[9],
      colorSuccessTextActive: successColors[10],
      colorErrorBg: errorColors[1],
      colorErrorBgHover: errorColors[2],
      colorErrorBorder: errorColors[3],
      colorErrorBorderHover: errorColors[4],
      colorErrorHover: errorColors[5],
      colorError: errorColors[6],
      colorErrorActive: errorColors[7],
      colorErrorTextHover: errorColors[8],
      colorErrorText: errorColors[9],
      colorErrorTextActive: errorColors[10],
      colorWarningBg: warningColors[1],
      colorWarningBgHover: warningColors[2],
      colorWarningBorder: warningColors[3],
      colorWarningBorderHover: warningColors[4],
      colorWarningHover: warningColors[4],
      colorWarning: warningColors[6],
      colorWarningActive: warningColors[7],
      colorWarningTextHover: warningColors[8],
      colorWarningText: warningColors[9],
      colorWarningTextActive: warningColors[10],
      colorInfoBg: infoColors[1],
      colorInfoBgHover: infoColors[2],
      colorInfoBorder: infoColors[3],
      colorInfoBorderHover: infoColors[4],
      colorInfoHover: infoColors[4],
      colorInfo: infoColors[6],
      colorInfoActive: infoColors[7],
      colorInfoTextHover: infoColors[8],
      colorInfoText: infoColors[9],
      colorInfoTextActive: infoColors[10],
      colorLinkHover: linkColors[4],
      colorLink: linkColors[6],
      colorLinkActive: linkColors[7],
      colorBgMask: new TinyColor("#000").setAlpha(0.45).toRgbString(),
      colorWhite: "#fff"
    });
  }

  // node_modules/antd/es/theme/themes/shared/genRadius.js
  var genRadius = (radiusBase) => {
    let radiusLG = radiusBase;
    let radiusSM = radiusBase;
    let radiusXS = radiusBase;
    let radiusOuter = radiusBase;
    if (radiusBase < 6 && radiusBase >= 5) {
      radiusLG = radiusBase + 1;
    } else if (radiusBase < 16 && radiusBase >= 6) {
      radiusLG = radiusBase + 2;
    } else if (radiusBase >= 16) {
      radiusLG = 16;
    }
    if (radiusBase < 7 && radiusBase >= 5) {
      radiusSM = 4;
    } else if (radiusBase < 8 && radiusBase >= 7) {
      radiusSM = 5;
    } else if (radiusBase < 14 && radiusBase >= 8) {
      radiusSM = 6;
    } else if (radiusBase < 16 && radiusBase >= 14) {
      radiusSM = 7;
    } else if (radiusBase >= 16) {
      radiusSM = 8;
    }
    if (radiusBase < 6 && radiusBase >= 2) {
      radiusXS = 1;
    } else if (radiusBase >= 6) {
      radiusXS = 2;
    }
    if (radiusBase > 4 && radiusBase < 8) {
      radiusOuter = 4;
    } else if (radiusBase >= 8) {
      radiusOuter = 6;
    }
    return {
      borderRadius: radiusBase,
      borderRadiusXS: radiusXS,
      borderRadiusSM: radiusSM,
      borderRadiusLG: radiusLG,
      borderRadiusOuter: radiusOuter
    };
  };
  var genRadius_default = genRadius;

  // node_modules/antd/es/theme/themes/shared/genCommonMapToken.js
  function genCommonMapToken(token2) {
    const {
      motionUnit,
      motionBase,
      borderRadius,
      lineWidth
    } = token2;
    return Object.assign({
      // motion
      motionDurationFast: `${(motionBase + motionUnit).toFixed(1)}s`,
      motionDurationMid: `${(motionBase + motionUnit * 2).toFixed(1)}s`,
      motionDurationSlow: `${(motionBase + motionUnit * 3).toFixed(1)}s`,
      // line
      lineWidthBold: lineWidth + 1
    }, genRadius_default(borderRadius));
  }

  // node_modules/antd/es/theme/themes/default/colorAlgorithm.js
  var getAlphaColor = (baseColor, alpha) => new TinyColor(baseColor).setAlpha(alpha).toRgbString();
  var getSolidColor = (baseColor, brightness) => {
    const instance = new TinyColor(baseColor);
    return instance.darken(brightness).toHexString();
  };

  // node_modules/antd/es/theme/themes/default/colors.js
  var generateColorPalettes = (baseColor) => {
    const colors = generate(baseColor);
    return {
      1: colors[0],
      2: colors[1],
      3: colors[2],
      4: colors[3],
      5: colors[4],
      6: colors[5],
      7: colors[6],
      8: colors[4],
      9: colors[5],
      10: colors[6]
      // 8: colors[7],
      // 9: colors[8],
      // 10: colors[9],
    };
  };
  var generateNeutralColorPalettes = (bgBaseColor, textBaseColor) => {
    const colorBgBase = bgBaseColor || "#fff";
    const colorTextBase = textBaseColor || "#000";
    return {
      colorBgBase,
      colorTextBase,
      colorText: getAlphaColor(colorTextBase, 0.88),
      colorTextSecondary: getAlphaColor(colorTextBase, 0.65),
      colorTextTertiary: getAlphaColor(colorTextBase, 0.45),
      colorTextQuaternary: getAlphaColor(colorTextBase, 0.25),
      colorFill: getAlphaColor(colorTextBase, 0.15),
      colorFillSecondary: getAlphaColor(colorTextBase, 0.06),
      colorFillTertiary: getAlphaColor(colorTextBase, 0.04),
      colorFillQuaternary: getAlphaColor(colorTextBase, 0.02),
      colorBgLayout: getSolidColor(colorBgBase, 4),
      colorBgContainer: getSolidColor(colorBgBase, 0),
      colorBgElevated: getSolidColor(colorBgBase, 0),
      colorBgSpotlight: getAlphaColor(colorTextBase, 0.85),
      colorBgBlur: "transparent",
      colorBorder: getSolidColor(colorBgBase, 15),
      colorBorderSecondary: getSolidColor(colorBgBase, 6)
    };
  };

  // node_modules/antd/es/theme/themes/shared/genFontSizes.js
  function getLineHeight(fontSize) {
    return (fontSize + 8) / fontSize;
  }
  function getFontSizes(base) {
    const fontSizes = new Array(10).fill(null).map((_, index2) => {
      const i = index2 - 1;
      const baseSize = base * Math.pow(2.71828, i / 5);
      const intSize = index2 > 1 ? Math.floor(baseSize) : Math.ceil(baseSize);
      return Math.floor(intSize / 2) * 2;
    });
    fontSizes[1] = base;
    return fontSizes.map((size) => ({
      size,
      lineHeight: getLineHeight(size)
    }));
  }

  // node_modules/antd/es/theme/themes/shared/genFontMapToken.js
  var genFontMapToken = (fontSize) => {
    const fontSizePairs = getFontSizes(fontSize);
    const fontSizes = fontSizePairs.map((pair) => pair.size);
    const lineHeights = fontSizePairs.map((pair) => pair.lineHeight);
    const fontSizeMD = fontSizes[1];
    const fontSizeSM = fontSizes[0];
    const fontSizeLG = fontSizes[2];
    const lineHeight = lineHeights[1];
    const lineHeightSM = lineHeights[0];
    const lineHeightLG = lineHeights[2];
    return {
      fontSizeSM,
      fontSize: fontSizeMD,
      fontSizeLG,
      fontSizeXL: fontSizes[3],
      fontSizeHeading1: fontSizes[6],
      fontSizeHeading2: fontSizes[5],
      fontSizeHeading3: fontSizes[4],
      fontSizeHeading4: fontSizes[3],
      fontSizeHeading5: fontSizes[2],
      lineHeight,
      lineHeightLG,
      lineHeightSM,
      fontHeight: Math.round(lineHeight * fontSizeMD),
      fontHeightLG: Math.round(lineHeightLG * fontSizeLG),
      fontHeightSM: Math.round(lineHeightSM * fontSizeSM),
      lineHeightHeading1: lineHeights[6],
      lineHeightHeading2: lineHeights[5],
      lineHeightHeading3: lineHeights[4],
      lineHeightHeading4: lineHeights[3],
      lineHeightHeading5: lineHeights[2]
    };
  };
  var genFontMapToken_default = genFontMapToken;

  // node_modules/antd/es/theme/themes/default/index.js
  function derivative(token2) {
    const colorPalettes = Object.keys(defaultPresetColors).map((colorKey) => {
      const colors = generate(token2[colorKey]);
      return new Array(10).fill(1).reduce((prev2, _, i) => {
        prev2[`${colorKey}-${i + 1}`] = colors[i];
        prev2[`${colorKey}${i + 1}`] = colors[i];
        return prev2;
      }, {});
    }).reduce((prev2, cur) => {
      prev2 = Object.assign(Object.assign({}, prev2), cur);
      return prev2;
    }, {});
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, token2), colorPalettes), genColorMapToken(token2, {
      generateColorPalettes,
      generateNeutralColorPalettes
    })), genFontMapToken_default(token2.fontSize)), genSizeMapToken(token2)), genControlHeight_default(token2)), genCommonMapToken(token2));
  }

  // node_modules/antd/es/theme/context.js
  var defaultTheme = createTheme(derivative);
  var defaultConfig = {
    token: seed_default,
    override: {
      override: seed_default
    },
    hashed: true
  };
  var DesignTokenContext = /* @__PURE__ */ import_react9.default.createContext(defaultConfig);

  // node_modules/antd/es/config-provider/context.js
  var React20 = __toESM(require_react());
  var defaultIconPrefixCls = "anticon";
  var defaultGetPrefixCls = (suffixCls, customizePrefixCls) => {
    if (customizePrefixCls) {
      return customizePrefixCls;
    }
    return suffixCls ? `ant-${suffixCls}` : "ant";
  };
  var ConfigContext = /* @__PURE__ */ React20.createContext({
    // We provide a default function for Context without provider
    getPrefixCls: defaultGetPrefixCls,
    iconPrefixCls: defaultIconPrefixCls
  });
  var {
    Consumer: ConfigConsumer
  } = ConfigContext;

  // node_modules/antd/es/config-provider/cssVariables.js
  var dynamicStyleMark = `-ant-${Date.now()}-${Math.random()}`;
  function getStyle(globalPrefixCls2, theme3) {
    const variables = {};
    const formatColor = (color, updater) => {
      let clone = color.clone();
      clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;
      return clone.toRgbString();
    };
    const fillColor = (colorVal, type4) => {
      const baseColor = new TinyColor(colorVal);
      const colorPalettes = generate(baseColor.toRgbString());
      variables[`${type4}-color`] = formatColor(baseColor);
      variables[`${type4}-color-disabled`] = colorPalettes[1];
      variables[`${type4}-color-hover`] = colorPalettes[4];
      variables[`${type4}-color-active`] = colorPalettes[6];
      variables[`${type4}-color-outline`] = baseColor.clone().setAlpha(0.2).toRgbString();
      variables[`${type4}-color-deprecated-bg`] = colorPalettes[0];
      variables[`${type4}-color-deprecated-border`] = colorPalettes[2];
    };
    if (theme3.primaryColor) {
      fillColor(theme3.primaryColor, "primary");
      const primaryColor = new TinyColor(theme3.primaryColor);
      const primaryColors = generate(primaryColor.toRgbString());
      primaryColors.forEach((color, index2) => {
        variables[`primary-${index2 + 1}`] = color;
      });
      variables["primary-color-deprecated-l-35"] = formatColor(primaryColor, (c) => c.lighten(35));
      variables["primary-color-deprecated-l-20"] = formatColor(primaryColor, (c) => c.lighten(20));
      variables["primary-color-deprecated-t-20"] = formatColor(primaryColor, (c) => c.tint(20));
      variables["primary-color-deprecated-t-50"] = formatColor(primaryColor, (c) => c.tint(50));
      variables["primary-color-deprecated-f-12"] = formatColor(primaryColor, (c) => c.setAlpha(c.getAlpha() * 0.12));
      const primaryActiveColor = new TinyColor(primaryColors[0]);
      variables["primary-color-active-deprecated-f-30"] = formatColor(primaryActiveColor, (c) => c.setAlpha(c.getAlpha() * 0.3));
      variables["primary-color-active-deprecated-d-02"] = formatColor(primaryActiveColor, (c) => c.darken(2));
    }
    if (theme3.successColor) {
      fillColor(theme3.successColor, "success");
    }
    if (theme3.warningColor) {
      fillColor(theme3.warningColor, "warning");
    }
    if (theme3.errorColor) {
      fillColor(theme3.errorColor, "error");
    }
    if (theme3.infoColor) {
      fillColor(theme3.infoColor, "info");
    }
    const cssList = Object.keys(variables).map((key) => `--${globalPrefixCls2}-${key}: ${variables[key]};`);
    return `
  :root {
    ${cssList.join("\n")}
  }
  `.trim();
  }
  function registerTheme(globalPrefixCls2, theme3) {
    const style2 = getStyle(globalPrefixCls2, theme3);
    if (canUseDom()) {
      updateCSS(style2, `${dynamicStyleMark}-dynamic-theme`);
    } else {
      true ? warning_default2(false, "ConfigProvider", "SSR do not support dynamic theme with css variables.") : void 0;
    }
  }

  // node_modules/antd/es/config-provider/DisabledContext.js
  var React21 = __toESM(require_react());
  var DisabledContext = /* @__PURE__ */ React21.createContext(false);
  var DisabledContextProvider = (_ref) => {
    let {
      children,
      disabled
    } = _ref;
    const originDisabled = React21.useContext(DisabledContext);
    return /* @__PURE__ */ React21.createElement(DisabledContext.Provider, {
      value: disabled !== null && disabled !== void 0 ? disabled : originDisabled
    }, children);
  };
  var DisabledContext_default = DisabledContext;

  // node_modules/antd/es/config-provider/hooks/useConfig.js
  var import_react10 = __toESM(require_react());

  // node_modules/antd/es/config-provider/SizeContext.js
  var React22 = __toESM(require_react());
  var SizeContext = /* @__PURE__ */ React22.createContext(void 0);
  var SizeContextProvider = (_ref) => {
    let {
      children,
      size
    } = _ref;
    const originSize = React22.useContext(SizeContext);
    return /* @__PURE__ */ React22.createElement(SizeContext.Provider, {
      value: size || originSize
    }, children);
  };
  var SizeContext_default = SizeContext;

  // node_modules/antd/es/config-provider/hooks/useConfig.js
  function useConfig() {
    const componentDisabled = (0, import_react10.useContext)(DisabledContext_default);
    const componentSize = (0, import_react10.useContext)(SizeContext_default);
    return {
      componentDisabled,
      componentSize
    };
  }
  var useConfig_default = useConfig;

  // node_modules/antd/es/theme/interface/presetColors.js
  var PresetColors = ["blue", "purple", "cyan", "green", "magenta", "pink", "red", "orange", "yellow", "volcano", "geekblue", "lime", "gold"];

  // node_modules/antd/es/theme/useToken.js
  var import_react11 = __toESM(require_react());

  // node_modules/antd/es/version/version.js
  var version_default = "5.13.3";

  // node_modules/antd/es/version/index.js
  var version_default2 = version_default;

  // node_modules/antd/es/theme/util/getAlphaColor.js
  function isStableColor(color) {
    return color >= 0 && color <= 255;
  }
  function getAlphaColor2(frontColor, backgroundColor) {
    const {
      r: fR,
      g: fG,
      b: fB,
      a: originAlpha
    } = new TinyColor(frontColor).toRgb();
    if (originAlpha < 1) {
      return frontColor;
    }
    const {
      r: bR,
      g: bG,
      b: bB
    } = new TinyColor(backgroundColor).toRgb();
    for (let fA = 0.01; fA <= 1; fA += 0.01) {
      const r2 = Math.round((fR - bR * (1 - fA)) / fA);
      const g = Math.round((fG - bG * (1 - fA)) / fA);
      const b = Math.round((fB - bB * (1 - fA)) / fA);
      if (isStableColor(r2) && isStableColor(g) && isStableColor(b)) {
        return new TinyColor({
          r: r2,
          g,
          b,
          a: Math.round(fA * 100) / 100
        }).toRgbString();
      }
    }
    return new TinyColor({
      r: fR,
      g: fG,
      b: fB,
      a: 1
    }).toRgbString();
  }
  var getAlphaColor_default = getAlphaColor2;

  // node_modules/antd/es/theme/util/alias.js
  var __rest = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function formatToken(derivativeToken) {
    const {
      override
    } = derivativeToken, restToken = __rest(derivativeToken, ["override"]);
    const overrideTokens = Object.assign({}, override);
    Object.keys(seed_default).forEach((token2) => {
      delete overrideTokens[token2];
    });
    const mergedToken = Object.assign(Object.assign({}, restToken), overrideTokens);
    const screenXS = 480;
    const screenSM = 576;
    const screenMD = 768;
    const screenLG = 992;
    const screenXL = 1200;
    const screenXXL = 1600;
    if (mergedToken.motion === false) {
      const fastDuration = "0s";
      mergedToken.motionDurationFast = fastDuration;
      mergedToken.motionDurationMid = fastDuration;
      mergedToken.motionDurationSlow = fastDuration;
    }
    const aliasToken = Object.assign(Object.assign(Object.assign({}, mergedToken), {
      // ============== Background ============== //
      colorFillContent: mergedToken.colorFillSecondary,
      colorFillContentHover: mergedToken.colorFill,
      colorFillAlter: mergedToken.colorFillQuaternary,
      colorBgContainerDisabled: mergedToken.colorFillTertiary,
      // ============== Split ============== //
      colorBorderBg: mergedToken.colorBgContainer,
      colorSplit: getAlphaColor_default(mergedToken.colorBorderSecondary, mergedToken.colorBgContainer),
      // ============== Text ============== //
      colorTextPlaceholder: mergedToken.colorTextQuaternary,
      colorTextDisabled: mergedToken.colorTextQuaternary,
      colorTextHeading: mergedToken.colorText,
      colorTextLabel: mergedToken.colorTextSecondary,
      colorTextDescription: mergedToken.colorTextTertiary,
      colorTextLightSolid: mergedToken.colorWhite,
      colorHighlight: mergedToken.colorError,
      colorBgTextHover: mergedToken.colorFillSecondary,
      colorBgTextActive: mergedToken.colorFill,
      colorIcon: mergedToken.colorTextTertiary,
      colorIconHover: mergedToken.colorText,
      colorErrorOutline: getAlphaColor_default(mergedToken.colorErrorBg, mergedToken.colorBgContainer),
      colorWarningOutline: getAlphaColor_default(mergedToken.colorWarningBg, mergedToken.colorBgContainer),
      // Font
      fontSizeIcon: mergedToken.fontSizeSM,
      // Line
      lineWidthFocus: mergedToken.lineWidth * 4,
      // Control
      lineWidth: mergedToken.lineWidth,
      controlOutlineWidth: mergedToken.lineWidth * 2,
      // Checkbox size and expand icon size
      controlInteractiveSize: mergedToken.controlHeight / 2,
      controlItemBgHover: mergedToken.colorFillTertiary,
      controlItemBgActive: mergedToken.colorPrimaryBg,
      controlItemBgActiveHover: mergedToken.colorPrimaryBgHover,
      controlItemBgActiveDisabled: mergedToken.colorFill,
      controlTmpOutline: mergedToken.colorFillQuaternary,
      controlOutline: getAlphaColor_default(mergedToken.colorPrimaryBg, mergedToken.colorBgContainer),
      lineType: mergedToken.lineType,
      borderRadius: mergedToken.borderRadius,
      borderRadiusXS: mergedToken.borderRadiusXS,
      borderRadiusSM: mergedToken.borderRadiusSM,
      borderRadiusLG: mergedToken.borderRadiusLG,
      fontWeightStrong: 600,
      opacityLoading: 0.65,
      linkDecoration: "none",
      linkHoverDecoration: "none",
      linkFocusDecoration: "none",
      controlPaddingHorizontal: 12,
      controlPaddingHorizontalSM: 8,
      paddingXXS: mergedToken.sizeXXS,
      paddingXS: mergedToken.sizeXS,
      paddingSM: mergedToken.sizeSM,
      padding: mergedToken.size,
      paddingMD: mergedToken.sizeMD,
      paddingLG: mergedToken.sizeLG,
      paddingXL: mergedToken.sizeXL,
      paddingContentHorizontalLG: mergedToken.sizeLG,
      paddingContentVerticalLG: mergedToken.sizeMS,
      paddingContentHorizontal: mergedToken.sizeMS,
      paddingContentVertical: mergedToken.sizeSM,
      paddingContentHorizontalSM: mergedToken.size,
      paddingContentVerticalSM: mergedToken.sizeXS,
      marginXXS: mergedToken.sizeXXS,
      marginXS: mergedToken.sizeXS,
      marginSM: mergedToken.sizeSM,
      margin: mergedToken.size,
      marginMD: mergedToken.sizeMD,
      marginLG: mergedToken.sizeLG,
      marginXL: mergedToken.sizeXL,
      marginXXL: mergedToken.sizeXXL,
      boxShadow: `
      0 6px 16px 0 rgba(0, 0, 0, 0.08),
      0 3px 6px -4px rgba(0, 0, 0, 0.12),
      0 9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
      boxShadowSecondary: `
      0 6px 16px 0 rgba(0, 0, 0, 0.08),
      0 3px 6px -4px rgba(0, 0, 0, 0.12),
      0 9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
      boxShadowTertiary: `
      0 1px 2px 0 rgba(0, 0, 0, 0.03),
      0 1px 6px -1px rgba(0, 0, 0, 0.02),
      0 2px 4px 0 rgba(0, 0, 0, 0.02)
    `,
      screenXS,
      screenXSMin: screenXS,
      screenXSMax: screenSM - 1,
      screenSM,
      screenSMMin: screenSM,
      screenSMMax: screenMD - 1,
      screenMD,
      screenMDMin: screenMD,
      screenMDMax: screenLG - 1,
      screenLG,
      screenLGMin: screenLG,
      screenLGMax: screenXL - 1,
      screenXL,
      screenXLMin: screenXL,
      screenXLMax: screenXXL - 1,
      screenXXL,
      screenXXLMin: screenXXL,
      boxShadowPopoverArrow: "2px 2px 5px rgba(0, 0, 0, 0.05)",
      boxShadowCard: `
      0 1px 2px -2px ${new TinyColor("rgba(0, 0, 0, 0.16)").toRgbString()},
      0 3px 6px 0 ${new TinyColor("rgba(0, 0, 0, 0.12)").toRgbString()},
      0 5px 12px 4px ${new TinyColor("rgba(0, 0, 0, 0.09)").toRgbString()}
    `,
      boxShadowDrawerRight: `
      -6px 0 16px 0 rgba(0, 0, 0, 0.08),
      -3px 0 6px -4px rgba(0, 0, 0, 0.12),
      -9px 0 28px 8px rgba(0, 0, 0, 0.05)
    `,
      boxShadowDrawerLeft: `
      6px 0 16px 0 rgba(0, 0, 0, 0.08),
      3px 0 6px -4px rgba(0, 0, 0, 0.12),
      9px 0 28px 8px rgba(0, 0, 0, 0.05)
    `,
      boxShadowDrawerUp: `
      0 6px 16px 0 rgba(0, 0, 0, 0.08),
      0 3px 6px -4px rgba(0, 0, 0, 0.12),
      0 9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
      boxShadowDrawerDown: `
      0 -6px 16px 0 rgba(0, 0, 0, 0.08),
      0 -3px 6px -4px rgba(0, 0, 0, 0.12),
      0 -9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
      boxShadowTabsOverflowLeft: "inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",
      boxShadowTabsOverflowRight: "inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",
      boxShadowTabsOverflowTop: "inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",
      boxShadowTabsOverflowBottom: "inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"
    }), overrideTokens);
    return aliasToken;
  }

  // node_modules/antd/es/theme/useToken.js
  var __rest2 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var unitless = {
    lineHeight: true,
    lineHeightSM: true,
    lineHeightLG: true,
    lineHeightHeading1: true,
    lineHeightHeading2: true,
    lineHeightHeading3: true,
    lineHeightHeading4: true,
    lineHeightHeading5: true,
    opacityLoading: true,
    fontWeightStrong: true,
    zIndexPopupBase: true,
    zIndexBase: true
  };
  var ignore = {
    size: true,
    sizeSM: true,
    sizeLG: true,
    sizeMD: true,
    sizeXS: true,
    sizeXXS: true,
    sizeMS: true,
    sizeXL: true,
    sizeXXL: true,
    sizeUnit: true,
    sizeStep: true,
    motionBase: true,
    motionUnit: true
  };
  var preserve = {
    screenXS: true,
    screenXSMin: true,
    screenXSMax: true,
    screenSM: true,
    screenSMMin: true,
    screenSMMax: true,
    screenMD: true,
    screenMDMin: true,
    screenMDMax: true,
    screenLG: true,
    screenLGMin: true,
    screenLGMax: true,
    screenXL: true,
    screenXLMin: true,
    screenXLMax: true,
    screenXXL: true,
    screenXXLMin: true
  };
  var getComputedToken3 = (originToken, overrideToken, theme3) => {
    const derivativeToken = theme3.getDerivativeToken(originToken);
    const {
      override
    } = overrideToken, components = __rest2(overrideToken, ["override"]);
    let mergedDerivativeToken = Object.assign(Object.assign({}, derivativeToken), {
      override
    });
    mergedDerivativeToken = formatToken(mergedDerivativeToken);
    if (components) {
      Object.entries(components).forEach((_ref) => {
        let [key, value] = _ref;
        const {
          theme: componentTheme
        } = value, componentTokens = __rest2(value, ["theme"]);
        let mergedComponentToken = componentTokens;
        if (componentTheme) {
          mergedComponentToken = getComputedToken3(Object.assign(Object.assign({}, mergedDerivativeToken), componentTokens), {
            override: componentTokens
          }, componentTheme);
        }
        mergedDerivativeToken[key] = mergedComponentToken;
      });
    }
    return mergedDerivativeToken;
  };
  function useToken() {
    const {
      token: rootDesignToken,
      hashed,
      theme: theme3,
      override,
      cssVar
    } = import_react11.default.useContext(DesignTokenContext);
    const salt = `${version_default2}-${hashed || ""}`;
    const mergedTheme = theme3 || defaultTheme;
    const [token2, hashId, realToken] = useCacheToken(mergedTheme, [seed_default, rootDesignToken], {
      salt,
      override,
      getComputedToken: getComputedToken3,
      // formatToken will not be consumed after 1.15.0 with getComputedToken.
      // But token will break if @ant-design/cssinjs is under 1.15.0 without it
      formatToken,
      cssVar: cssVar && {
        prefix: cssVar.prefix,
        key: cssVar.key,
        unitless,
        ignore,
        preserve
      }
    });
    return [mergedTheme, realToken, hashed ? hashId : "", token2, cssVar];
  }

  // node_modules/antd/es/theme/util/genComponentStyleHook.js
  var import_react12 = __toESM(require_react());

  // node_modules/rc-util/es/hooks/useEvent.js
  var React24 = __toESM(require_react());
  function useEvent(callback) {
    var fnRef = React24.useRef();
    fnRef.current = callback;
    var memoFn = React24.useCallback(function() {
      var _fnRef$current;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (_fnRef$current = fnRef.current) === null || _fnRef$current === void 0 ? void 0 : _fnRef$current.call.apply(_fnRef$current, [fnRef].concat(args));
    }, []);
    return memoFn;
  }

  // node_modules/rc-util/es/hooks/useState.js
  var React25 = __toESM(require_react());
  function useSafeState(defaultValue) {
    var destroyRef = React25.useRef(false);
    var _React$useState = React25.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
    React25.useEffect(function() {
      destroyRef.current = false;
      return function() {
        destroyRef.current = true;
      };
    }, []);
    function safeSetState(updater, ignoreDestroy) {
      if (ignoreDestroy && destroyRef.current) {
        return;
      }
      setValue(updater);
    }
    return [value, safeSetState];
  }

  // node_modules/rc-util/es/hooks/useMergedState.js
  function hasValue(value) {
    return value !== void 0;
  }
  function useMergedState(defaultStateValue, option) {
    var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange = _ref.onChange, postState = _ref.postState;
    var _useState = useSafeState(function() {
      if (hasValue(value)) {
        return value;
      } else if (hasValue(defaultValue)) {
        return typeof defaultValue === "function" ? defaultValue() : defaultValue;
      } else {
        return typeof defaultStateValue === "function" ? defaultStateValue() : defaultStateValue;
      }
    }), _useState2 = _slicedToArray(_useState, 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
    var mergedValue = value !== void 0 ? value : innerValue;
    var postMergedValue = postState ? postState(mergedValue) : mergedValue;
    var onChangeFn = useEvent(onChange);
    var _useState3 = useSafeState([mergedValue]), _useState4 = _slicedToArray(_useState3, 2), prevValue = _useState4[0], setPrevValue = _useState4[1];
    useLayoutUpdateEffect(function() {
      var prev2 = prevValue[0];
      if (innerValue !== prev2) {
        onChangeFn(innerValue, prev2);
      }
    }, [prevValue]);
    useLayoutUpdateEffect(function() {
      if (!hasValue(value)) {
        setInnerValue(value);
      }
    }, [value]);
    var triggerChange = useEvent(function(updater, ignoreDestroy) {
      setInnerValue(updater, ignoreDestroy);
      setPrevValue([mergedValue], ignoreDestroy);
    });
    return [postMergedValue, triggerChange];
  }

  // node_modules/antd/es/style/operationUnit.js
  var operationUnit = (token2) => ({
    // FIXME: This use link but is a operation unit. Seems should be a colorPrimary.
    // And Typography use this to generate link style which should not do this.
    color: token2.colorLink,
    textDecoration: "none",
    outline: "none",
    cursor: "pointer",
    transition: `color ${token2.motionDurationSlow}`,
    "&:focus, &:hover": {
      color: token2.colorLinkHover
    },
    "&:active": {
      color: token2.colorLinkActive
    }
  });

  // node_modules/antd/es/style/index.js
  var textEllipsis = {
    overflow: "hidden",
    whiteSpace: "nowrap",
    textOverflow: "ellipsis"
  };
  var resetComponent = function(token2) {
    let needInheritFontFamily = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return {
      boxSizing: "border-box",
      margin: 0,
      padding: 0,
      color: token2.colorText,
      fontSize: token2.fontSize,
      // font-variant: @font-variant-base;
      lineHeight: token2.lineHeight,
      listStyle: "none",
      // font-feature-settings: @font-feature-settings-base;
      fontFamily: needInheritFontFamily ? "inherit" : token2.fontFamily
    };
  };
  var resetIcon = () => ({
    display: "inline-flex",
    alignItems: "center",
    color: "inherit",
    fontStyle: "normal",
    lineHeight: 0,
    textAlign: "center",
    textTransform: "none",
    // for SVG icon, see https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4
    verticalAlign: "-0.125em",
    textRendering: "optimizeLegibility",
    "-webkit-font-smoothing": "antialiased",
    "-moz-osx-font-smoothing": "grayscale",
    "> *": {
      lineHeight: 1
    },
    svg: {
      display: "inline-block"
    }
  });
  var clearFix = () => ({
    // https://github.com/ant-design/ant-design/issues/21301#issuecomment-583955229
    "&::before": {
      display: "table",
      content: '""'
    },
    "&::after": {
      // https://github.com/ant-design/ant-design/issues/21864
      display: "table",
      clear: "both",
      content: '""'
    }
  });
  var genLinkStyle = (token2) => ({
    a: {
      color: token2.colorLink,
      textDecoration: token2.linkDecoration,
      backgroundColor: "transparent",
      // remove the gray background on active links in IE 10.
      outline: "none",
      cursor: "pointer",
      transition: `color ${token2.motionDurationSlow}`,
      "-webkit-text-decoration-skip": "objects",
      // remove gaps in links underline in iOS 8+ and Safari 8+.
      "&:hover": {
        color: token2.colorLinkHover
      },
      "&:active": {
        color: token2.colorLinkActive
      },
      [`&:active,
  &:hover`]: {
        textDecoration: token2.linkHoverDecoration,
        outline: 0
      },
      // https://github.com/ant-design/ant-design/issues/22503
      "&:focus": {
        textDecoration: token2.linkFocusDecoration,
        outline: 0
      },
      "&[disabled]": {
        color: token2.colorTextDisabled,
        cursor: "not-allowed"
      }
    }
  });
  var genCommonStyle = (token2, componentPrefixCls) => {
    const {
      fontFamily,
      fontSize
    } = token2;
    const rootPrefixSelector = `[class^="${componentPrefixCls}"], [class*=" ${componentPrefixCls}"]`;
    return {
      [rootPrefixSelector]: {
        fontFamily,
        fontSize,
        boxSizing: "border-box",
        "&::before, &::after": {
          boxSizing: "border-box"
        },
        [rootPrefixSelector]: {
          boxSizing: "border-box",
          "&::before, &::after": {
            boxSizing: "border-box"
          }
        }
      }
    };
  };
  var genFocusOutline = (token2) => ({
    outline: `${unit(token2.lineWidthFocus)} solid ${token2.colorPrimaryBorder}`,
    outlineOffset: 1,
    transition: "outline-offset 0s, outline 0s"
  });
  var genFocusStyle = (token2) => ({
    "&:focus-visible": Object.assign({}, genFocusOutline(token2))
  });

  // node_modules/antd/es/theme/util/calc/calculator.js
  var AbstractCalculator = /* @__PURE__ */ _createClass(function AbstractCalculator2() {
    _classCallCheck(this, AbstractCalculator2);
  });
  var calculator_default = AbstractCalculator;

  // node_modules/antd/es/theme/util/calc/NumCalculator.js
  function _callSuper(t2, o3, e3) {
    return o3 = _getPrototypeOf(o3), _possibleConstructorReturn(t2, _isNativeReflectConstruct() ? Reflect.construct(o3, e3 || [], _getPrototypeOf(t2).constructor) : o3.apply(t2, e3));
  }
  var NumCalculator = /* @__PURE__ */ function(_AbstractCalculator) {
    _inherits(NumCalculator2, _AbstractCalculator);
    function NumCalculator2(num) {
      var _this;
      _classCallCheck(this, NumCalculator2);
      _this = _callSuper(this, NumCalculator2);
      _this.result = 0;
      if (num instanceof NumCalculator2) {
        _this.result = num.result;
      } else if (typeof num === "number") {
        _this.result = num;
      }
      return _this;
    }
    _createClass(NumCalculator2, [{
      key: "add",
      value: function add(num) {
        if (num instanceof NumCalculator2) {
          this.result += num.result;
        } else if (typeof num === "number") {
          this.result += num;
        }
        return this;
      }
    }, {
      key: "sub",
      value: function sub(num) {
        if (num instanceof NumCalculator2) {
          this.result -= num.result;
        } else if (typeof num === "number") {
          this.result -= num;
        }
        return this;
      }
    }, {
      key: "mul",
      value: function mul(num) {
        if (num instanceof NumCalculator2) {
          this.result *= num.result;
        } else if (typeof num === "number") {
          this.result *= num;
        }
        return this;
      }
    }, {
      key: "div",
      value: function div(num) {
        if (num instanceof NumCalculator2) {
          this.result /= num.result;
        } else if (typeof num === "number") {
          this.result /= num;
        }
        return this;
      }
    }, {
      key: "equal",
      value: function equal() {
        return this.result;
      }
    }]);
    return NumCalculator2;
  }(calculator_default);

  // node_modules/antd/es/theme/util/calc/CSSCalculator.js
  function _callSuper2(t2, o3, e3) {
    return o3 = _getPrototypeOf(o3), _possibleConstructorReturn(t2, _isNativeReflectConstruct() ? Reflect.construct(o3, e3 || [], _getPrototypeOf(t2).constructor) : o3.apply(t2, e3));
  }
  var CALC_UNIT = "CALC_UNIT";
  function unit2(value) {
    if (typeof value === "number") {
      return `${value}${CALC_UNIT}`;
    }
    return value;
  }
  var CSSCalculator = /* @__PURE__ */ function(_AbstractCalculator) {
    _inherits(CSSCalculator2, _AbstractCalculator);
    function CSSCalculator2(num) {
      var _this;
      _classCallCheck(this, CSSCalculator2);
      _this = _callSuper2(this, CSSCalculator2);
      _this.result = "";
      if (num instanceof CSSCalculator2) {
        _this.result = `(${num.result})`;
      } else if (typeof num === "number") {
        _this.result = unit2(num);
      } else if (typeof num === "string") {
        _this.result = num;
      }
      return _this;
    }
    _createClass(CSSCalculator2, [{
      key: "add",
      value: function add(num) {
        if (num instanceof CSSCalculator2) {
          this.result = `${this.result} + ${num.getResult()}`;
        } else if (typeof num === "number" || typeof num === "string") {
          this.result = `${this.result} + ${unit2(num)}`;
        }
        this.lowPriority = true;
        return this;
      }
    }, {
      key: "sub",
      value: function sub(num) {
        if (num instanceof CSSCalculator2) {
          this.result = `${this.result} - ${num.getResult()}`;
        } else if (typeof num === "number" || typeof num === "string") {
          this.result = `${this.result} - ${unit2(num)}`;
        }
        this.lowPriority = true;
        return this;
      }
    }, {
      key: "mul",
      value: function mul(num) {
        if (this.lowPriority) {
          this.result = `(${this.result})`;
        }
        if (num instanceof CSSCalculator2) {
          this.result = `${this.result} * ${num.getResult(true)}`;
        } else if (typeof num === "number" || typeof num === "string") {
          this.result = `${this.result} * ${num}`;
        }
        this.lowPriority = false;
        return this;
      }
    }, {
      key: "div",
      value: function div(num) {
        if (this.lowPriority) {
          this.result = `(${this.result})`;
        }
        if (num instanceof CSSCalculator2) {
          this.result = `${this.result} / ${num.getResult(true)}`;
        } else if (typeof num === "number" || typeof num === "string") {
          this.result = `${this.result} / ${num}`;
        }
        this.lowPriority = false;
        return this;
      }
    }, {
      key: "getResult",
      value: function getResult(force) {
        return this.lowPriority || force ? `(${this.result})` : this.result;
      }
    }, {
      key: "equal",
      value: function equal(options) {
        const {
          unit: cssUnit = true
        } = options || {};
        const regexp4 = new RegExp(`${CALC_UNIT}`, "g");
        this.result = this.result.replace(regexp4, cssUnit ? "px" : "");
        if (typeof this.lowPriority !== "undefined") {
          return `calc(${this.result})`;
        }
        return this.result;
      }
    }]);
    return CSSCalculator2;
  }(calculator_default);

  // node_modules/antd/es/theme/util/calc/index.js
  var genCalc = (type4) => {
    const Calculator = type4 === "css" ? CSSCalculator : NumCalculator;
    return (num) => new Calculator(num);
  };
  var calc_default = genCalc;

  // node_modules/antd/es/theme/util/maxmin.js
  function genMaxMin(type4) {
    if (type4 === "js") {
      return {
        max: Math.max,
        min: Math.min
      };
    }
    return {
      max: function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return `max(${args.map((value) => unit(value)).join(",")})`;
      },
      min: function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return `min(${args.map((value) => unit(value)).join(",")})`;
      }
    };
  }

  // node_modules/antd/es/theme/util/statistic.js
  var enableStatistic = true;
  var recording = true;
  function merge2() {
    for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {
      objs[_key] = arguments[_key];
    }
    if (!enableStatistic) {
      return Object.assign.apply(Object, [{}].concat(objs));
    }
    recording = false;
    const ret = {};
    objs.forEach((obj) => {
      const keys2 = Object.keys(obj);
      keys2.forEach((key) => {
        Object.defineProperty(ret, key, {
          configurable: true,
          enumerable: true,
          get: () => obj[key]
        });
      });
    });
    recording = true;
    return ret;
  }
  var statistic = {};
  function noop3() {
  }
  var statisticToken = (token2) => {
    let tokenKeys2;
    let proxy = token2;
    let flush = noop3;
    if (enableStatistic && typeof Proxy !== "undefined") {
      tokenKeys2 = /* @__PURE__ */ new Set();
      proxy = new Proxy(token2, {
        get(obj, prop) {
          if (recording) {
            tokenKeys2.add(prop);
          }
          return obj[prop];
        }
      });
      flush = (componentName, componentToken) => {
        var _a;
        statistic[componentName] = {
          global: Array.from(tokenKeys2),
          component: Object.assign(Object.assign({}, (_a = statistic[componentName]) === null || _a === void 0 ? void 0 : _a.component), componentToken)
        };
      };
    }
    return {
      token: proxy,
      keys: tokenKeys2,
      flush
    };
  };
  var statistic_default = statisticToken;

  // node_modules/antd/es/theme/util/useResetIconStyle.js
  var useResetIconStyle = (iconPrefixCls, csp) => {
    const [theme3, token2] = useToken();
    return useStyleRegister({
      theme: theme3,
      token: token2,
      hashId: "",
      path: ["ant-design-icons", iconPrefixCls],
      nonce: () => csp === null || csp === void 0 ? void 0 : csp.nonce
    }, () => [{
      [`.${iconPrefixCls}`]: Object.assign(Object.assign({}, resetIcon()), {
        [`.${iconPrefixCls} .${iconPrefixCls}-icon`]: {
          display: "block"
        }
      })
    }]);
  };
  var useResetIconStyle_default = useResetIconStyle;

  // node_modules/antd/es/theme/util/genComponentStyleHook.js
  var getDefaultComponentToken = (component, token2, getDefaultToken) => {
    var _a;
    if (typeof getDefaultToken === "function") {
      return getDefaultToken(merge2(token2, (_a = token2[component]) !== null && _a !== void 0 ? _a : {}));
    }
    return getDefaultToken !== null && getDefaultToken !== void 0 ? getDefaultToken : {};
  };
  var getComponentToken = (component, token2, defaultToken, options) => {
    const customToken = Object.assign({}, token2[component]);
    if (options === null || options === void 0 ? void 0 : options.deprecatedTokens) {
      const {
        deprecatedTokens
      } = options;
      deprecatedTokens.forEach((_ref) => {
        let [oldTokenKey, newTokenKey] = _ref;
        var _a;
        if (true) {
          true ? warning_default(!(customToken === null || customToken === void 0 ? void 0 : customToken[oldTokenKey]), `Component Token \`${String(oldTokenKey)}\` of ${component} is deprecated. Please use \`${String(newTokenKey)}\` instead.`) : void 0;
        }
        if ((customToken === null || customToken === void 0 ? void 0 : customToken[oldTokenKey]) || (customToken === null || customToken === void 0 ? void 0 : customToken[newTokenKey])) {
          (_a = customToken[newTokenKey]) !== null && _a !== void 0 ? _a : customToken[newTokenKey] = customToken === null || customToken === void 0 ? void 0 : customToken[oldTokenKey];
        }
      });
    }
    const mergedToken = Object.assign(Object.assign({}, defaultToken), customToken);
    Object.keys(mergedToken).forEach((key) => {
      if (mergedToken[key] === token2[key]) {
        delete mergedToken[key];
      }
    });
    return mergedToken;
  };
  var getCompVarPrefix = (component, prefix) => `${[prefix, component.replace(/([A-Z]+)([A-Z][a-z]+)/g, "$1-$2").replace(/([a-z])([A-Z])/g, "$1-$2")].filter(Boolean).join("-")}`;
  function genComponentStyleHook(componentName, styleFn, getDefaultToken) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const cells = Array.isArray(componentName) ? componentName : [componentName, componentName];
    const [component] = cells;
    const concatComponent = cells.join("-");
    return (prefixCls) => {
      const [theme3, realToken, hashId, token2, cssVar] = useToken();
      const {
        getPrefixCls,
        iconPrefixCls,
        csp
      } = (0, import_react12.useContext)(ConfigContext);
      const rootPrefixCls = getPrefixCls();
      const type4 = cssVar ? "css" : "js";
      const calc = calc_default(type4);
      const {
        max,
        min
      } = genMaxMin(type4);
      const sharedConfig = {
        theme: theme3,
        token: token2,
        hashId,
        nonce: () => csp === null || csp === void 0 ? void 0 : csp.nonce,
        clientOnly: options.clientOnly,
        // antd is always at top of styles
        order: options.order || -999
      };
      useStyleRegister(Object.assign(Object.assign({}, sharedConfig), {
        clientOnly: false,
        path: ["Shared", rootPrefixCls]
      }), () => [{
        // Link
        "&": genLinkStyle(token2)
      }]);
      useResetIconStyle_default(iconPrefixCls, csp);
      const wrapSSR = useStyleRegister(Object.assign(Object.assign({}, sharedConfig), {
        path: [concatComponent, prefixCls, iconPrefixCls]
      }), () => {
        if (options.injectStyle === false) {
          return [];
        }
        const {
          token: proxyToken,
          flush
        } = statistic_default(token2);
        const defaultComponentToken = getDefaultComponentToken(component, realToken, getDefaultToken);
        const componentCls = `.${prefixCls}`;
        const componentToken = getComponentToken(component, realToken, defaultComponentToken, {
          deprecatedTokens: options.deprecatedTokens
        });
        if (cssVar) {
          Object.keys(defaultComponentToken).forEach((key) => {
            defaultComponentToken[key] = `var(${token2CSSVar(key, getCompVarPrefix(component, cssVar.prefix))})`;
          });
        }
        const mergedToken = merge2(proxyToken, {
          componentCls,
          prefixCls,
          iconCls: `.${iconPrefixCls}`,
          antCls: `.${rootPrefixCls}`,
          calc,
          max,
          min
        }, cssVar ? defaultComponentToken : componentToken);
        const styleInterpolation = styleFn(mergedToken, {
          hashId,
          prefixCls,
          rootPrefixCls,
          iconPrefixCls
        });
        flush(component, componentToken);
        return [options.resetStyle === false ? null : genCommonStyle(mergedToken, prefixCls), styleInterpolation];
      });
      return [wrapSSR, hashId];
    };
  }
  var genSubStyleComponent = (componentName, styleFn, getDefaultToken, options) => {
    const useStyle = genComponentStyleHook(componentName, styleFn, getDefaultToken, Object.assign({
      resetStyle: false,
      // Sub Style should default after root one
      order: -998
    }, options));
    const StyledComponent = (_ref2) => {
      let {
        prefixCls
      } = _ref2;
      useStyle(prefixCls);
      return null;
    };
    if (true) {
      StyledComponent.displayName = `SubStyle_${Array.isArray(componentName) ? componentName.join(".") : componentName}`;
    }
    return StyledComponent;
  };
  var genCSSVarRegister = (component, getDefaultToken, options) => {
    function prefixToken(key) {
      return `${component}${key.slice(0, 1).toUpperCase()}${key.slice(1)}`;
    }
    const {
      unitless: originUnitless = {},
      injectStyle = true
    } = options !== null && options !== void 0 ? options : {};
    const compUnitless = {
      [prefixToken("zIndexPopup")]: true
    };
    Object.keys(originUnitless).forEach((key) => {
      compUnitless[prefixToken(key)] = originUnitless[key];
    });
    const CSSVarRegister = (_ref3) => {
      let {
        rootCls,
        cssVar
      } = _ref3;
      const [, realToken] = useToken();
      useCSSVarRegister_default({
        path: [component],
        prefix: cssVar.prefix,
        key: cssVar === null || cssVar === void 0 ? void 0 : cssVar.key,
        unitless: Object.assign(Object.assign({}, unitless), compUnitless),
        ignore,
        token: realToken,
        scope: rootCls
      }, () => {
        const defaultToken = getDefaultComponentToken(component, realToken, getDefaultToken);
        const componentToken = getComponentToken(component, realToken, defaultToken, {
          deprecatedTokens: options === null || options === void 0 ? void 0 : options.deprecatedTokens
        });
        Object.keys(defaultToken).forEach((key) => {
          componentToken[prefixToken(key)] = componentToken[key];
          delete componentToken[key];
        });
        return componentToken;
      });
      return null;
    };
    const useCSSVar = (rootCls) => {
      const [, , , , cssVar] = useToken();
      return [(node2) => injectStyle && cssVar ? /* @__PURE__ */ import_react12.default.createElement(import_react12.default.Fragment, null, /* @__PURE__ */ import_react12.default.createElement(CSSVarRegister, {
        rootCls,
        cssVar,
        component
      }), node2) : node2, cssVar === null || cssVar === void 0 ? void 0 : cssVar.key];
    };
    return useCSSVar;
  };
  var genStyleHooks = (component, styleFn, getDefaultToken, options) => {
    const useStyle = genComponentStyleHook(component, styleFn, getDefaultToken, options);
    const useCSSVar = genCSSVarRegister(Array.isArray(component) ? component[0] : component, getDefaultToken, options);
    return function(prefixCls) {
      let rootCls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : prefixCls;
      const [, hashId] = useStyle(prefixCls);
      const [wrapCSSVar, cssVarCls] = useCSSVar(rootCls);
      return [wrapCSSVar, hashId, cssVarCls];
    };
  };

  // node_modules/antd/es/theme/util/genPresetColor.js
  function genPresetColor(token2, genCss) {
    return PresetColors.reduce((prev2, colorKey) => {
      const lightColor = token2[`${colorKey}1`];
      const lightBorderColor = token2[`${colorKey}3`];
      const darkColor = token2[`${colorKey}6`];
      const textColor = token2[`${colorKey}7`];
      return Object.assign(Object.assign({}, prev2), genCss(colorKey, {
        lightColor,
        lightBorderColor,
        darkColor,
        textColor
      }));
    }, {});
  }

  // node_modules/antd/es/config-provider/hooks/useThemeKey.js
  var React27 = __toESM(require_react());
  var fullClone3 = Object.assign({}, React27);
  var {
    useId
  } = fullClone3;
  var useEmptyId = () => "";
  var useThemeKey = typeof useId === "undefined" ? useEmptyId : useId;
  var useThemeKey_default = useThemeKey;

  // node_modules/antd/es/config-provider/hooks/useTheme.js
  function useTheme(theme3, parentTheme) {
    var _a;
    const warning8 = devUseWarning("ConfigProvider");
    const themeConfig = theme3 || {};
    const parentThemeConfig = themeConfig.inherit === false || !parentTheme ? defaultConfig : parentTheme;
    const themeKey = useThemeKey_default();
    if (true) {
      const cssVarEnabled = themeConfig.cssVar || parentThemeConfig.cssVar;
      const validKey = !!(typeof themeConfig.cssVar === "object" && ((_a = themeConfig.cssVar) === null || _a === void 0 ? void 0 : _a.key) || themeKey);
      true ? warning8(!cssVarEnabled || validKey, "breaking", "Missing key in `cssVar` config. Please upgrade to React 18 or set `cssVar.key` manually in each ConfigProvider inside `cssVar` enabled ConfigProvider.") : void 0;
    }
    return useMemo(() => {
      var _a2, _b;
      if (!theme3) {
        return parentTheme;
      }
      const mergedComponents = Object.assign({}, parentThemeConfig.components);
      Object.keys(theme3.components || {}).forEach((componentName) => {
        mergedComponents[componentName] = Object.assign(Object.assign({}, mergedComponents[componentName]), theme3.components[componentName]);
      });
      const cssVarKey = `css-var-${themeKey.replace(/:/g, "")}`;
      const mergedCssVar = ((_a2 = themeConfig.cssVar) !== null && _a2 !== void 0 ? _a2 : parentThemeConfig.cssVar) && Object.assign(Object.assign(Object.assign({
        prefix: "ant"
      }, typeof parentThemeConfig.cssVar === "object" ? parentThemeConfig.cssVar : {}), typeof themeConfig.cssVar === "object" ? themeConfig.cssVar : {}), {
        key: typeof themeConfig.cssVar === "object" && ((_b = themeConfig.cssVar) === null || _b === void 0 ? void 0 : _b.key) || cssVarKey
      });
      return Object.assign(Object.assign(Object.assign({}, parentThemeConfig), themeConfig), {
        token: Object.assign(Object.assign({}, parentThemeConfig.token), themeConfig.token),
        components: mergedComponents,
        cssVar: mergedCssVar
      });
    }, [themeConfig, parentThemeConfig], (prev2, next2) => prev2.some((prevTheme, index2) => {
      const nextTheme = next2[index2];
      return !isEqual_default(prevTheme, nextTheme, true);
    }));
  }

  // node_modules/rc-motion/es/CSSMotion.js
  var import_classnames = __toESM(require_classnames());
  var React34 = __toESM(require_react());
  var import_react16 = __toESM(require_react());

  // node_modules/rc-motion/es/context.js
  var React28 = __toESM(require_react());
  var _excluded = ["children"];
  var Context = /* @__PURE__ */ React28.createContext({});
  function MotionProvider(_ref) {
    var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded);
    return /* @__PURE__ */ React28.createElement(Context.Provider, {
      value: props
    }, children);
  }

  // node_modules/rc-motion/es/DomWrapper.js
  var React29 = __toESM(require_react());
  var DomWrapper2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(DomWrapper3, _React$Component);
    var _super = _createSuper(DomWrapper3);
    function DomWrapper3() {
      _classCallCheck(this, DomWrapper3);
      return _super.apply(this, arguments);
    }
    _createClass(DomWrapper3, [{
      key: "render",
      value: function render2() {
        return this.props.children;
      }
    }]);
    return DomWrapper3;
  }(React29.Component);
  var DomWrapper_default = DomWrapper2;

  // node_modules/rc-motion/es/hooks/useStatus.js
  var React33 = __toESM(require_react());
  var import_react15 = __toESM(require_react());

  // node_modules/rc-motion/es/interface.js
  var STATUS_NONE = "none";
  var STATUS_APPEAR = "appear";
  var STATUS_ENTER = "enter";
  var STATUS_LEAVE = "leave";
  var STEP_NONE = "none";
  var STEP_PREPARE = "prepare";
  var STEP_START = "start";
  var STEP_ACTIVE = "active";
  var STEP_ACTIVATED = "end";
  var STEP_PREPARED = "prepared";

  // node_modules/rc-motion/es/hooks/useDomMotionEvents.js
  var React30 = __toESM(require_react());
  var import_react13 = __toESM(require_react());

  // node_modules/rc-motion/es/util/motion.js
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
    prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
    prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
    prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
    return prefixes;
  }
  function getVendorPrefixes(domSupport, win) {
    var prefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    if (domSupport) {
      if (!("AnimationEvent" in win)) {
        delete prefixes.animationend.animation;
      }
      if (!("TransitionEvent" in win)) {
        delete prefixes.transitionend.transition;
      }
    }
    return prefixes;
  }
  var vendorPrefixes = getVendorPrefixes(canUseDom(), typeof window !== "undefined" ? window : {});
  var style = {};
  if (canUseDom()) {
    _document$createEleme = document.createElement("div");
    style = _document$createEleme.style;
  }
  var _document$createEleme;
  var prefixedEventNames = {};
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    }
    var prefixMap = vendorPrefixes[eventName];
    if (prefixMap) {
      var stylePropList = Object.keys(prefixMap);
      var len = stylePropList.length;
      for (var i = 0; i < len; i += 1) {
        var styleProp = stylePropList[i];
        if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
          prefixedEventNames[eventName] = prefixMap[styleProp];
          return prefixedEventNames[eventName];
        }
      }
    }
    return "";
  }
  var internalAnimationEndName = getVendorPrefixedEventName("animationend");
  var internalTransitionEndName = getVendorPrefixedEventName("transitionend");
  var supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
  var animationEndName = internalAnimationEndName || "animationend";
  var transitionEndName = internalTransitionEndName || "transitionend";
  function getTransitionName(transitionName, transitionType) {
    if (!transitionName)
      return null;
    if (_typeof(transitionName) === "object") {
      var type4 = transitionType.replace(/-\w/g, function(match2) {
        return match2[1].toUpperCase();
      });
      return transitionName[type4];
    }
    return "".concat(transitionName, "-").concat(transitionType);
  }

  // node_modules/rc-motion/es/hooks/useDomMotionEvents.js
  var useDomMotionEvents_default = function(callback) {
    var cacheElementRef = (0, import_react13.useRef)();
    var callbackRef = (0, import_react13.useRef)(callback);
    callbackRef.current = callback;
    var onInternalMotionEnd = React30.useCallback(function(event) {
      callbackRef.current(event);
    }, []);
    function removeMotionEvents(element) {
      if (element) {
        element.removeEventListener(transitionEndName, onInternalMotionEnd);
        element.removeEventListener(animationEndName, onInternalMotionEnd);
      }
    }
    function patchMotionEvents(element) {
      if (cacheElementRef.current && cacheElementRef.current !== element) {
        removeMotionEvents(cacheElementRef.current);
      }
      if (element && element !== cacheElementRef.current) {
        element.addEventListener(transitionEndName, onInternalMotionEnd);
        element.addEventListener(animationEndName, onInternalMotionEnd);
        cacheElementRef.current = element;
      }
    }
    React30.useEffect(function() {
      return function() {
        removeMotionEvents(cacheElementRef.current);
      };
    }, []);
    return [patchMotionEvents, removeMotionEvents];
  };

  // node_modules/rc-motion/es/hooks/useIsomorphicLayoutEffect.js
  var import_react14 = __toESM(require_react());
  var useIsomorphicLayoutEffect2 = canUseDom() ? import_react14.useLayoutEffect : import_react14.useEffect;
  var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect2;

  // node_modules/rc-motion/es/hooks/useStepQueue.js
  var React32 = __toESM(require_react());

  // node_modules/rc-motion/es/hooks/useNextFrame.js
  var React31 = __toESM(require_react());
  var useNextFrame_default = function() {
    var nextFrameRef = React31.useRef(null);
    function cancelNextFrame() {
      raf_default.cancel(nextFrameRef.current);
    }
    function nextFrame(callback) {
      var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
      cancelNextFrame();
      var nextFrameId = raf_default(function() {
        if (delay <= 1) {
          callback({
            isCanceled: function isCanceled() {
              return nextFrameId !== nextFrameRef.current;
            }
          });
        } else {
          nextFrame(callback, delay - 1);
        }
      });
      nextFrameRef.current = nextFrameId;
    }
    React31.useEffect(function() {
      return function() {
        cancelNextFrame();
      };
    }, []);
    return [nextFrame, cancelNextFrame];
  };

  // node_modules/rc-motion/es/hooks/useStepQueue.js
  var FULL_STEP_QUEUE = [STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED];
  var SIMPLE_STEP_QUEUE = [STEP_PREPARE, STEP_PREPARED];
  var SkipStep = false;
  var DoStep = true;
  function isActive(step) {
    return step === STEP_ACTIVE || step === STEP_ACTIVATED;
  }
  var useStepQueue_default = function(status, prepareOnly, callback) {
    var _useState = useSafeState(STEP_NONE), _useState2 = _slicedToArray(_useState, 2), step = _useState2[0], setStep = _useState2[1];
    var _useNextFrame = useNextFrame_default(), _useNextFrame2 = _slicedToArray(_useNextFrame, 2), nextFrame = _useNextFrame2[0], cancelNextFrame = _useNextFrame2[1];
    function startQueue() {
      setStep(STEP_PREPARE, true);
    }
    var STEP_QUEUE = prepareOnly ? SIMPLE_STEP_QUEUE : FULL_STEP_QUEUE;
    useIsomorphicLayoutEffect_default(function() {
      if (step !== STEP_NONE && step !== STEP_ACTIVATED) {
        var index2 = STEP_QUEUE.indexOf(step);
        var nextStep = STEP_QUEUE[index2 + 1];
        var result = callback(step);
        if (result === SkipStep) {
          setStep(nextStep, true);
        } else if (nextStep) {
          nextFrame(function(info) {
            function doNext() {
              if (info.isCanceled())
                return;
              setStep(nextStep, true);
            }
            if (result === true) {
              doNext();
            } else {
              Promise.resolve(result).then(doNext);
            }
          });
        }
      }
    }, [status, step]);
    React32.useEffect(function() {
      return function() {
        cancelNextFrame();
      };
    }, []);
    return [startQueue, step];
  };

  // node_modules/rc-motion/es/hooks/useStatus.js
  function useStatus(supportMotion, visible, getElement, _ref) {
    var _ref$motionEnter = _ref.motionEnter, motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter, _ref$motionAppear = _ref.motionAppear, motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear, _ref$motionLeave = _ref.motionLeave, motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave, motionDeadline = _ref.motionDeadline, motionLeaveImmediately = _ref.motionLeaveImmediately, onAppearPrepare = _ref.onAppearPrepare, onEnterPrepare = _ref.onEnterPrepare, onLeavePrepare = _ref.onLeavePrepare, onAppearStart = _ref.onAppearStart, onEnterStart = _ref.onEnterStart, onLeaveStart = _ref.onLeaveStart, onAppearActive = _ref.onAppearActive, onEnterActive = _ref.onEnterActive, onLeaveActive = _ref.onLeaveActive, onAppearEnd = _ref.onAppearEnd, onEnterEnd = _ref.onEnterEnd, onLeaveEnd = _ref.onLeaveEnd, onVisibleChanged = _ref.onVisibleChanged;
    var _useState = useSafeState(), _useState2 = _slicedToArray(_useState, 2), asyncVisible = _useState2[0], setAsyncVisible = _useState2[1];
    var _useState3 = useSafeState(STATUS_NONE), _useState4 = _slicedToArray(_useState3, 2), status = _useState4[0], setStatus = _useState4[1];
    var _useState5 = useSafeState(null), _useState6 = _slicedToArray(_useState5, 2), style2 = _useState6[0], setStyle = _useState6[1];
    var mountedRef = (0, import_react15.useRef)(false);
    var deadlineRef = (0, import_react15.useRef)(null);
    function getDomElement() {
      return getElement();
    }
    var activeRef = (0, import_react15.useRef)(false);
    function updateMotionEndStatus() {
      setStatus(STATUS_NONE, true);
      setStyle(null, true);
    }
    function onInternalMotionEnd(event) {
      var element = getDomElement();
      if (event && !event.deadline && event.target !== element) {
        return;
      }
      var currentActive = activeRef.current;
      var canEnd;
      if (status === STATUS_APPEAR && currentActive) {
        canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
      } else if (status === STATUS_ENTER && currentActive) {
        canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
      } else if (status === STATUS_LEAVE && currentActive) {
        canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
      }
      if (status !== STATUS_NONE && currentActive && canEnd !== false) {
        updateMotionEndStatus();
      }
    }
    var _useDomMotionEvents = useDomMotionEvents_default(onInternalMotionEnd), _useDomMotionEvents2 = _slicedToArray(_useDomMotionEvents, 1), patchMotionEvents = _useDomMotionEvents2[0];
    var getEventHandlers = function getEventHandlers2(targetStatus) {
      var _ref2, _ref3, _ref4;
      switch (targetStatus) {
        case STATUS_APPEAR:
          return _ref2 = {}, _defineProperty(_ref2, STEP_PREPARE, onAppearPrepare), _defineProperty(_ref2, STEP_START, onAppearStart), _defineProperty(_ref2, STEP_ACTIVE, onAppearActive), _ref2;
        case STATUS_ENTER:
          return _ref3 = {}, _defineProperty(_ref3, STEP_PREPARE, onEnterPrepare), _defineProperty(_ref3, STEP_START, onEnterStart), _defineProperty(_ref3, STEP_ACTIVE, onEnterActive), _ref3;
        case STATUS_LEAVE:
          return _ref4 = {}, _defineProperty(_ref4, STEP_PREPARE, onLeavePrepare), _defineProperty(_ref4, STEP_START, onLeaveStart), _defineProperty(_ref4, STEP_ACTIVE, onLeaveActive), _ref4;
        default:
          return {};
      }
    };
    var eventHandlers = React33.useMemo(function() {
      return getEventHandlers(status);
    }, [status]);
    var _useStepQueue = useStepQueue_default(status, !supportMotion, function(newStep) {
      if (newStep === STEP_PREPARE) {
        var onPrepare = eventHandlers[STEP_PREPARE];
        if (!onPrepare) {
          return SkipStep;
        }
        return onPrepare(getDomElement());
      }
      if (step in eventHandlers) {
        var _eventHandlers$step;
        setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
      }
      if (step === STEP_ACTIVE) {
        patchMotionEvents(getDomElement());
        if (motionDeadline > 0) {
          clearTimeout(deadlineRef.current);
          deadlineRef.current = setTimeout(function() {
            onInternalMotionEnd({
              deadline: true
            });
          }, motionDeadline);
        }
      }
      if (step === STEP_PREPARED) {
        updateMotionEndStatus();
      }
      return DoStep;
    }), _useStepQueue2 = _slicedToArray(_useStepQueue, 2), startStep = _useStepQueue2[0], step = _useStepQueue2[1];
    var active = isActive(step);
    activeRef.current = active;
    useIsomorphicLayoutEffect_default(function() {
      setAsyncVisible(visible);
      var isMounted = mountedRef.current;
      mountedRef.current = true;
      var nextStatus;
      if (!isMounted && visible && motionAppear) {
        nextStatus = STATUS_APPEAR;
      }
      if (isMounted && visible && motionEnter) {
        nextStatus = STATUS_ENTER;
      }
      if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {
        nextStatus = STATUS_LEAVE;
      }
      var nextEventHandlers = getEventHandlers(nextStatus);
      if (nextStatus && (supportMotion || nextEventHandlers[STEP_PREPARE])) {
        setStatus(nextStatus);
        startStep();
      } else {
        setStatus(STATUS_NONE);
      }
    }, [visible]);
    (0, import_react15.useEffect)(function() {
      if (
        // Cancel appear
        status === STATUS_APPEAR && !motionAppear || // Cancel enter
        status === STATUS_ENTER && !motionEnter || // Cancel leave
        status === STATUS_LEAVE && !motionLeave
      ) {
        setStatus(STATUS_NONE);
      }
    }, [motionAppear, motionEnter, motionLeave]);
    (0, import_react15.useEffect)(function() {
      return function() {
        mountedRef.current = false;
        clearTimeout(deadlineRef.current);
      };
    }, []);
    var firstMountChangeRef = React33.useRef(false);
    (0, import_react15.useEffect)(function() {
      if (asyncVisible) {
        firstMountChangeRef.current = true;
      }
      if (asyncVisible !== void 0 && status === STATUS_NONE) {
        if (firstMountChangeRef.current || asyncVisible) {
          onVisibleChanged === null || onVisibleChanged === void 0 ? void 0 : onVisibleChanged(asyncVisible);
        }
        firstMountChangeRef.current = true;
      }
    }, [asyncVisible, status]);
    var mergedStyle = style2;
    if (eventHandlers[STEP_PREPARE] && step === STEP_START) {
      mergedStyle = _objectSpread2({
        transition: "none"
      }, mergedStyle);
    }
    return [status, step, mergedStyle, asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible];
  }

  // node_modules/rc-motion/es/CSSMotion.js
  function genCSSMotion(config) {
    var transitionSupport = config;
    if (_typeof(config) === "object") {
      transitionSupport = config.transitionSupport;
    }
    function isSupportTransition(props, contextMotion) {
      return !!(props.motionName && transitionSupport && contextMotion !== false);
    }
    var CSSMotion = /* @__PURE__ */ React34.forwardRef(function(props, ref) {
      var _props$visible = props.visible, visible = _props$visible === void 0 ? true : _props$visible, _props$removeOnLeave = props.removeOnLeave, removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave, forceRender = props.forceRender, children = props.children, motionName = props.motionName, leavedClassName = props.leavedClassName, eventProps = props.eventProps;
      var _React$useContext = React34.useContext(Context), contextMotion = _React$useContext.motion;
      var supportMotion = isSupportTransition(props, contextMotion);
      var nodeRef = (0, import_react16.useRef)();
      var wrapperNodeRef = (0, import_react16.useRef)();
      function getDomElement() {
        try {
          return nodeRef.current instanceof HTMLElement ? nodeRef.current : findDOMNode(wrapperNodeRef.current);
        } catch (e3) {
          return null;
        }
      }
      var _useStatus = useStatus(supportMotion, visible, getDomElement, props), _useStatus2 = _slicedToArray(_useStatus, 4), status = _useStatus2[0], statusStep = _useStatus2[1], statusStyle = _useStatus2[2], mergedVisible = _useStatus2[3];
      var renderedRef = React34.useRef(mergedVisible);
      if (mergedVisible) {
        renderedRef.current = true;
      }
      var setNodeRef = React34.useCallback(function(node2) {
        nodeRef.current = node2;
        fillRef(ref, node2);
      }, [ref]);
      var motionChildren;
      var mergedProps = _objectSpread2(_objectSpread2({}, eventProps), {}, {
        visible
      });
      if (!children) {
        motionChildren = null;
      } else if (status === STATUS_NONE) {
        if (mergedVisible) {
          motionChildren = children(_objectSpread2({}, mergedProps), setNodeRef);
        } else if (!removeOnLeave && renderedRef.current && leavedClassName) {
          motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
            className: leavedClassName
          }), setNodeRef);
        } else if (forceRender || !removeOnLeave && !leavedClassName) {
          motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
            style: {
              display: "none"
            }
          }), setNodeRef);
        } else {
          motionChildren = null;
        }
      } else {
        var _classNames;
        var statusSuffix;
        if (statusStep === STEP_PREPARE) {
          statusSuffix = "prepare";
        } else if (isActive(statusStep)) {
          statusSuffix = "active";
        } else if (statusStep === STEP_START) {
          statusSuffix = "start";
        }
        var motionCls = getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix));
        motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
          className: (0, import_classnames.default)(getTransitionName(motionName, status), (_classNames = {}, _defineProperty(_classNames, motionCls, motionCls && statusSuffix), _defineProperty(_classNames, motionName, typeof motionName === "string"), _classNames)),
          style: statusStyle
        }), setNodeRef);
      }
      if (/* @__PURE__ */ React34.isValidElement(motionChildren) && supportRef(motionChildren)) {
        var _ref = motionChildren, originNodeRef = _ref.ref;
        if (!originNodeRef) {
          motionChildren = /* @__PURE__ */ React34.cloneElement(motionChildren, {
            ref: setNodeRef
          });
        }
      }
      return /* @__PURE__ */ React34.createElement(DomWrapper_default, {
        ref: wrapperNodeRef
      }, motionChildren);
    });
    CSSMotion.displayName = "CSSMotion";
    return CSSMotion;
  }
  var CSSMotion_default = genCSSMotion(supportTransition);

  // node_modules/rc-motion/es/CSSMotionList.js
  var React35 = __toESM(require_react());

  // node_modules/rc-motion/es/util/diff.js
  var STATUS_ADD = "add";
  var STATUS_KEEP = "keep";
  var STATUS_REMOVE = "remove";
  var STATUS_REMOVED = "removed";
  function wrapKeyToObject(key) {
    var keyObj;
    if (key && _typeof(key) === "object" && "key" in key) {
      keyObj = key;
    } else {
      keyObj = {
        key
      };
    }
    return _objectSpread2(_objectSpread2({}, keyObj), {}, {
      key: String(keyObj.key)
    });
  }
  function parseKeys() {
    var keys2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return keys2.map(wrapKeyToObject);
  }
  function diffKeys() {
    var prevKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var currentKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var list = [];
    var currentIndex = 0;
    var currentLen = currentKeys.length;
    var prevKeyObjects = parseKeys(prevKeys);
    var currentKeyObjects = parseKeys(currentKeys);
    prevKeyObjects.forEach(function(keyObj) {
      var hit = false;
      for (var i = currentIndex; i < currentLen; i += 1) {
        var currentKeyObj = currentKeyObjects[i];
        if (currentKeyObj.key === keyObj.key) {
          if (currentIndex < i) {
            list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function(obj) {
              return _objectSpread2(_objectSpread2({}, obj), {}, {
                status: STATUS_ADD
              });
            }));
            currentIndex = i;
          }
          list.push(_objectSpread2(_objectSpread2({}, currentKeyObj), {}, {
            status: STATUS_KEEP
          }));
          currentIndex += 1;
          hit = true;
          break;
        }
      }
      if (!hit) {
        list.push(_objectSpread2(_objectSpread2({}, keyObj), {}, {
          status: STATUS_REMOVE
        }));
      }
    });
    if (currentIndex < currentLen) {
      list = list.concat(currentKeyObjects.slice(currentIndex).map(function(obj) {
        return _objectSpread2(_objectSpread2({}, obj), {}, {
          status: STATUS_ADD
        });
      }));
    }
    var keys2 = {};
    list.forEach(function(_ref) {
      var key = _ref.key;
      keys2[key] = (keys2[key] || 0) + 1;
    });
    var duplicatedKeys = Object.keys(keys2).filter(function(key) {
      return keys2[key] > 1;
    });
    duplicatedKeys.forEach(function(matchKey) {
      list = list.filter(function(_ref2) {
        var key = _ref2.key, status = _ref2.status;
        return key !== matchKey || status !== STATUS_REMOVE;
      });
      list.forEach(function(node2) {
        if (node2.key === matchKey) {
          node2.status = STATUS_KEEP;
        }
      });
    });
    return list;
  }

  // node_modules/rc-motion/es/CSSMotionList.js
  var _excluded2 = ["component", "children", "onVisibleChanged", "onAllRemoved"];
  var _excluded22 = ["status"];
  var MOTION_PROP_NAMES = ["eventProps", "visible", "children", "motionName", "motionAppear", "motionEnter", "motionLeave", "motionLeaveImmediately", "motionDeadline", "removeOnLeave", "leavedClassName", "onAppearPrepare", "onAppearStart", "onAppearActive", "onAppearEnd", "onEnterStart", "onEnterActive", "onEnterEnd", "onLeaveStart", "onLeaveActive", "onLeaveEnd"];
  function genCSSMotionList(transitionSupport) {
    var CSSMotion = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CSSMotion_default;
    var CSSMotionList = /* @__PURE__ */ function(_React$Component) {
      _inherits(CSSMotionList2, _React$Component);
      var _super = _createSuper(CSSMotionList2);
      function CSSMotionList2() {
        var _this;
        _classCallCheck(this, CSSMotionList2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "state", {
          keyEntities: []
        });
        _defineProperty(_assertThisInitialized(_this), "removeKey", function(removeKey) {
          var keyEntities = _this.state.keyEntities;
          var nextKeyEntities = keyEntities.map(function(entity) {
            if (entity.key !== removeKey)
              return entity;
            return _objectSpread2(_objectSpread2({}, entity), {}, {
              status: STATUS_REMOVED
            });
          });
          _this.setState({
            keyEntities: nextKeyEntities
          });
          return nextKeyEntities.filter(function(_ref) {
            var status = _ref.status;
            return status !== STATUS_REMOVED;
          }).length;
        });
        return _this;
      }
      _createClass(CSSMotionList2, [{
        key: "render",
        value: function render2() {
          var _this2 = this;
          var keyEntities = this.state.keyEntities;
          var _this$props = this.props, component = _this$props.component, children = _this$props.children, _onVisibleChanged = _this$props.onVisibleChanged, onAllRemoved = _this$props.onAllRemoved, restProps = _objectWithoutProperties(_this$props, _excluded2);
          var Component11 = component || React35.Fragment;
          var motionProps = {};
          MOTION_PROP_NAMES.forEach(function(prop) {
            motionProps[prop] = restProps[prop];
            delete restProps[prop];
          });
          delete restProps.keys;
          return /* @__PURE__ */ React35.createElement(Component11, restProps, keyEntities.map(function(_ref2, index2) {
            var status = _ref2.status, eventProps = _objectWithoutProperties(_ref2, _excluded22);
            var visible = status === STATUS_ADD || status === STATUS_KEEP;
            return /* @__PURE__ */ React35.createElement(CSSMotion, _extends({}, motionProps, {
              key: eventProps.key,
              visible,
              eventProps,
              onVisibleChanged: function onVisibleChanged(changedVisible) {
                _onVisibleChanged === null || _onVisibleChanged === void 0 ? void 0 : _onVisibleChanged(changedVisible, {
                  key: eventProps.key
                });
                if (!changedVisible) {
                  var restKeysCount = _this2.removeKey(eventProps.key);
                  if (restKeysCount === 0 && onAllRemoved) {
                    onAllRemoved();
                  }
                }
              }
            }), function(props, ref) {
              return children(_objectSpread2(_objectSpread2({}, props), {}, {
                index: index2
              }), ref);
            });
          }));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref3, _ref4) {
          var keys2 = _ref3.keys;
          var keyEntities = _ref4.keyEntities;
          var parsedKeyObjects = parseKeys(keys2);
          var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
          return {
            keyEntities: mixedKeyEntities.filter(function(entity) {
              var prevEntity = keyEntities.find(function(_ref5) {
                var key = _ref5.key;
                return entity.key === key;
              });
              if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
                return false;
              }
              return true;
            })
          };
        }
      }]);
      return CSSMotionList2;
    }(React35.Component);
    _defineProperty(CSSMotionList, "defaultProps", {
      component: "div"
    });
    return CSSMotionList;
  }
  var CSSMotionList_default = genCSSMotionList(supportTransition);

  // node_modules/rc-motion/es/index.js
  var es_default2 = CSSMotion_default;

  // node_modules/antd/es/config-provider/MotionWrapper.js
  var React36 = __toESM(require_react());
  function MotionWrapper(props) {
    const {
      children
    } = props;
    const [, token2] = useToken();
    const {
      motion: motion2
    } = token2;
    const needWrapMotionProviderRef = React36.useRef(false);
    needWrapMotionProviderRef.current = needWrapMotionProviderRef.current || motion2 === false;
    if (needWrapMotionProviderRef.current) {
      return /* @__PURE__ */ React36.createElement(MotionProvider, {
        motion: motion2
      }, children);
    }
    return children;
  }

  // node_modules/antd/es/config-provider/PropWarning.js
  var React37 = __toESM(require_react());
  var PropWarning = /* @__PURE__ */ React37.memo((_ref) => {
    let {
      dropdownMatchSelectWidth
    } = _ref;
    const warning8 = devUseWarning("ConfigProvider");
    warning8.deprecated(dropdownMatchSelectWidth === void 0, "dropdownMatchSelectWidth", "popupMatchSelectWidth");
    return null;
  });
  if (true) {
    PropWarning.displayName = "PropWarning";
  }
  var PropWarning_default = true ? PropWarning : () => null;

  // node_modules/antd/es/config-provider/index.js
  var __rest3 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var existThemeConfig = false;
  var warnContext = true ? (componentName) => {
    true ? warning_default2(!existThemeConfig, componentName, `Static function can not consume context like dynamic theme. Please use 'App' component instead.`) : void 0;
  } : (
    /* istanbul ignore next */
    null
  );
  var PASSED_PROPS = ["getTargetContainer", "getPopupContainer", "renderEmpty", "input", "pagination", "form", "select", "button"];
  var defaultPrefixCls = "ant";
  var globalPrefixCls;
  var globalIconPrefixCls;
  var globalTheme;
  var globalHolderRender;
  function getGlobalPrefixCls() {
    return globalPrefixCls || defaultPrefixCls;
  }
  function getGlobalIconPrefixCls() {
    return globalIconPrefixCls || defaultIconPrefixCls;
  }
  function isLegacyTheme(theme3) {
    return Object.keys(theme3).some((key) => key.endsWith("Color"));
  }
  var setGlobalConfig = (props) => {
    const {
      prefixCls,
      iconPrefixCls,
      theme: theme3,
      holderRender
    } = props;
    if (prefixCls !== void 0) {
      globalPrefixCls = prefixCls;
    }
    if (iconPrefixCls !== void 0) {
      globalIconPrefixCls = iconPrefixCls;
    }
    if ("holderRender" in props) {
      globalHolderRender = holderRender;
    }
    if (theme3) {
      if (isLegacyTheme(theme3)) {
        true ? warning_default2(false, "ConfigProvider", "`config` of css variable theme is not work in v5. Please use new `theme` config instead.") : void 0;
        registerTheme(getGlobalPrefixCls(), theme3);
      } else {
        globalTheme = theme3;
      }
    }
  };
  var globalConfig = () => ({
    getPrefixCls: (suffixCls, customizePrefixCls) => {
      if (customizePrefixCls) {
        return customizePrefixCls;
      }
      return suffixCls ? `${getGlobalPrefixCls()}-${suffixCls}` : getGlobalPrefixCls();
    },
    getIconPrefixCls: getGlobalIconPrefixCls,
    getRootPrefixCls: () => {
      if (globalPrefixCls) {
        return globalPrefixCls;
      }
      return getGlobalPrefixCls();
    },
    getTheme: () => globalTheme,
    holderRender: globalHolderRender
  });
  var ProviderChildren = (props) => {
    const {
      children,
      csp: customCsp,
      autoInsertSpaceInButton,
      alert,
      anchor,
      form,
      locale: locale9,
      componentSize,
      direction,
      space,
      virtual,
      dropdownMatchSelectWidth,
      popupMatchSelectWidth,
      popupOverflow,
      legacyLocale,
      parentContext,
      iconPrefixCls: customIconPrefixCls,
      theme: theme3,
      componentDisabled,
      segmented,
      statistic: statistic2,
      spin,
      calendar,
      carousel,
      cascader,
      collapse,
      typography,
      checkbox,
      descriptions,
      divider,
      drawer,
      skeleton,
      steps,
      image,
      layout,
      list,
      mentions,
      modal,
      progress,
      result,
      slider,
      breadcrumb,
      menu,
      pagination,
      input,
      empty,
      badge,
      radio,
      rate,
      switch: SWITCH,
      transfer,
      avatar,
      message,
      tag,
      table,
      card,
      tabs,
      timeline,
      timePicker,
      upload,
      notification,
      tree,
      colorPicker,
      datePicker,
      rangePicker,
      flex,
      wave,
      dropdown,
      warning: warningConfig
    } = props;
    const getPrefixCls = React38.useCallback((suffixCls, customizePrefixCls) => {
      const {
        prefixCls
      } = props;
      if (customizePrefixCls) {
        return customizePrefixCls;
      }
      const mergedPrefixCls = prefixCls || parentContext.getPrefixCls("");
      return suffixCls ? `${mergedPrefixCls}-${suffixCls}` : mergedPrefixCls;
    }, [parentContext.getPrefixCls, props.prefixCls]);
    const iconPrefixCls = customIconPrefixCls || parentContext.iconPrefixCls || defaultIconPrefixCls;
    const csp = customCsp || parentContext.csp;
    useResetIconStyle_default(iconPrefixCls, csp);
    const mergedTheme = useTheme(theme3, parentContext.theme);
    if (true) {
      existThemeConfig = existThemeConfig || !!mergedTheme;
    }
    const baseConfig = {
      csp,
      autoInsertSpaceInButton,
      alert,
      anchor,
      locale: locale9 || legacyLocale,
      direction,
      space,
      virtual,
      popupMatchSelectWidth: popupMatchSelectWidth !== null && popupMatchSelectWidth !== void 0 ? popupMatchSelectWidth : dropdownMatchSelectWidth,
      popupOverflow,
      getPrefixCls,
      iconPrefixCls,
      theme: mergedTheme,
      segmented,
      statistic: statistic2,
      spin,
      calendar,
      carousel,
      cascader,
      collapse,
      typography,
      checkbox,
      descriptions,
      divider,
      drawer,
      skeleton,
      steps,
      image,
      input,
      layout,
      list,
      mentions,
      modal,
      progress,
      result,
      slider,
      breadcrumb,
      menu,
      pagination,
      empty,
      badge,
      radio,
      rate,
      switch: SWITCH,
      transfer,
      avatar,
      message,
      tag,
      table,
      card,
      tabs,
      timeline,
      timePicker,
      upload,
      notification,
      tree,
      colorPicker,
      datePicker,
      rangePicker,
      flex,
      wave,
      dropdown,
      warning: warningConfig
    };
    const config = Object.assign({}, parentContext);
    Object.keys(baseConfig).forEach((key) => {
      if (baseConfig[key] !== void 0) {
        config[key] = baseConfig[key];
      }
    });
    PASSED_PROPS.forEach((propName) => {
      const propValue = props[propName];
      if (propValue) {
        config[propName] = propValue;
      }
    });
    const memoedConfig = useMemo(() => config, config, (prevConfig, currentConfig) => {
      const prevKeys = Object.keys(prevConfig);
      const currentKeys = Object.keys(currentConfig);
      return prevKeys.length !== currentKeys.length || prevKeys.some((key) => prevConfig[key] !== currentConfig[key]);
    });
    const memoIconContextValue = React38.useMemo(() => ({
      prefixCls: iconPrefixCls,
      csp
    }), [iconPrefixCls, csp]);
    let childNode = /* @__PURE__ */ React38.createElement(React38.Fragment, null, /* @__PURE__ */ React38.createElement(PropWarning_default, {
      dropdownMatchSelectWidth
    }), children);
    const validateMessages = React38.useMemo(() => {
      var _a, _b, _c, _d;
      return merge(((_a = en_US_default6.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || {}, ((_c = (_b = memoedConfig.locale) === null || _b === void 0 ? void 0 : _b.Form) === null || _c === void 0 ? void 0 : _c.defaultValidateMessages) || {}, ((_d = memoedConfig.form) === null || _d === void 0 ? void 0 : _d.validateMessages) || {}, (form === null || form === void 0 ? void 0 : form.validateMessages) || {});
    }, [memoedConfig, form === null || form === void 0 ? void 0 : form.validateMessages]);
    if (Object.keys(validateMessages).length > 0) {
      childNode = /* @__PURE__ */ React38.createElement(validateMessagesContext_default.Provider, {
        value: validateMessages
      }, childNode);
    }
    if (locale9) {
      childNode = /* @__PURE__ */ React38.createElement(locale_default, {
        locale: locale9,
        _ANT_MARK__: ANT_MARK
      }, childNode);
    }
    if (iconPrefixCls || csp) {
      childNode = /* @__PURE__ */ React38.createElement(Context_default.Provider, {
        value: memoIconContextValue
      }, childNode);
    }
    if (componentSize) {
      childNode = /* @__PURE__ */ React38.createElement(SizeContextProvider, {
        size: componentSize
      }, childNode);
    }
    childNode = /* @__PURE__ */ React38.createElement(MotionWrapper, null, childNode);
    const memoTheme = React38.useMemo(() => {
      const _a = mergedTheme || {}, {
        algorithm,
        token: token2,
        components,
        cssVar
      } = _a, rest = __rest3(_a, ["algorithm", "token", "components", "cssVar"]);
      const themeObj = algorithm && (!Array.isArray(algorithm) || algorithm.length > 0) ? createTheme(algorithm) : defaultTheme;
      const parsedComponents = {};
      Object.entries(components || {}).forEach((_ref) => {
        let [componentName, componentToken] = _ref;
        const parsedToken = Object.assign({}, componentToken);
        if ("algorithm" in parsedToken) {
          if (parsedToken.algorithm === true) {
            parsedToken.theme = themeObj;
          } else if (Array.isArray(parsedToken.algorithm) || typeof parsedToken.algorithm === "function") {
            parsedToken.theme = createTheme(parsedToken.algorithm);
          }
          delete parsedToken.algorithm;
        }
        parsedComponents[componentName] = parsedToken;
      });
      const mergedToken = Object.assign(Object.assign({}, seed_default), token2);
      return Object.assign(Object.assign({}, rest), {
        theme: themeObj,
        token: mergedToken,
        components: parsedComponents,
        override: Object.assign({
          override: mergedToken
        }, parsedComponents),
        cssVar
      });
    }, [mergedTheme]);
    if (theme3) {
      childNode = /* @__PURE__ */ React38.createElement(DesignTokenContext.Provider, {
        value: memoTheme
      }, childNode);
    }
    if (memoedConfig.warning) {
      childNode = /* @__PURE__ */ React38.createElement(WarningContext.Provider, {
        value: memoedConfig.warning
      }, childNode);
    }
    if (componentDisabled !== void 0) {
      childNode = /* @__PURE__ */ React38.createElement(DisabledContextProvider, {
        disabled: componentDisabled
      }, childNode);
    }
    return /* @__PURE__ */ React38.createElement(ConfigContext.Provider, {
      value: memoedConfig
    }, childNode);
  };
  var ConfigProvider = (props) => {
    const context = React38.useContext(ConfigContext);
    const antLocale = React38.useContext(context_default);
    return /* @__PURE__ */ React38.createElement(ProviderChildren, Object.assign({
      parentContext: context,
      legacyLocale: antLocale
    }, props));
  };
  ConfigProvider.ConfigContext = ConfigContext;
  ConfigProvider.SizeContext = SizeContext_default;
  ConfigProvider.config = setGlobalConfig;
  ConfigProvider.useConfig = useConfig_default;
  Object.defineProperty(ConfigProvider, "SizeContext", {
    get: () => {
      true ? warning_default2(false, "ConfigProvider", "ConfigProvider.SizeContext is deprecated. Please use `ConfigProvider.useConfig().componentSize` instead.") : void 0;
      return SizeContext_default;
    }
  });
  if (true) {
    ConfigProvider.displayName = "ConfigProvider";
  }
  var config_provider_default = ConfigProvider;

  // node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js
  var React42 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckCircleFilled.js
  var CheckCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z" } }] }, "name": "check-circle", "theme": "filled" };
  var CheckCircleFilled_default = CheckCircleFilled;

  // node_modules/@ant-design/icons/es/components/AntdIcon.js
  var React41 = __toESM(require_react());
  var import_classnames2 = __toESM(require_classnames());

  // node_modules/@ant-design/icons/es/components/IconBase.js
  var React40 = __toESM(require_react());

  // node_modules/rc-util/es/Dom/shadow.js
  function getRoot(ele) {
    var _ele$getRootNode;
    return ele === null || ele === void 0 || (_ele$getRootNode = ele.getRootNode) === null || _ele$getRootNode === void 0 ? void 0 : _ele$getRootNode.call(ele);
  }
  function inShadow(ele) {
    return getRoot(ele) instanceof ShadowRoot;
  }
  function getShadowRoot(ele) {
    return inShadow(ele) ? getRoot(ele) : null;
  }

  // node_modules/@ant-design/icons/es/utils.js
  var import_react17 = __toESM(require_react());
  function camelCase(input) {
    return input.replace(/-(.)/g, function(match2, g) {
      return g.toUpperCase();
    });
  }
  function warning4(valid, message) {
    warning_default(valid, "[@ant-design/icons] ".concat(message));
  }
  function isIconDefinition(target) {
    return _typeof(target) === "object" && typeof target.name === "string" && typeof target.theme === "string" && (_typeof(target.icon) === "object" || typeof target.icon === "function");
  }
  function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key) {
      var val = attrs[key];
      switch (key) {
        case "class":
          acc.className = val;
          delete acc.class;
          break;
        default:
          delete acc[key];
          acc[camelCase(key)] = val;
      }
      return acc;
    }, {});
  }
  function generate2(node2, key, rootProps) {
    if (!rootProps) {
      return /* @__PURE__ */ import_react17.default.createElement(node2.tag, _objectSpread2({
        key
      }, normalizeAttrs(node2.attrs)), (node2.children || []).map(function(child, index2) {
        return generate2(child, "".concat(key, "-").concat(node2.tag, "-").concat(index2));
      }));
    }
    return /* @__PURE__ */ import_react17.default.createElement(node2.tag, _objectSpread2(_objectSpread2({
      key
    }, normalizeAttrs(node2.attrs)), rootProps), (node2.children || []).map(function(child, index2) {
      return generate2(child, "".concat(key, "-").concat(node2.tag, "-").concat(index2));
    }));
  }
  function getSecondaryColor(primaryColor) {
    return generate(primaryColor)[0];
  }
  function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) {
      return [];
    }
    return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
  }
  var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
  var useInsertStyles = function useInsertStyles2(eleRef) {
    var _useContext = (0, import_react17.useContext)(Context_default), csp = _useContext.csp, prefixCls = _useContext.prefixCls;
    var mergedStyleStr = iconStyles;
    if (prefixCls) {
      mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);
    }
    (0, import_react17.useEffect)(function() {
      var ele = eleRef.current;
      var shadowRoot = getShadowRoot(ele);
      updateCSS(mergedStyleStr, "@ant-design-icons", {
        prepend: true,
        csp,
        attachTo: shadowRoot
      });
    }, []);
  };

  // node_modules/@ant-design/icons/es/components/IconBase.js
  var _excluded3 = ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"];
  var twoToneColorPalette = {
    primaryColor: "#333",
    secondaryColor: "#E6E6E6",
    calculated: false
  };
  function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
  }
  function getTwoToneColors() {
    return _objectSpread2({}, twoToneColorPalette);
  }
  var IconBase = function IconBase2(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style2 = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutProperties(props, _excluded3);
    var svgRef = React40.useRef();
    var colors = twoToneColorPalette;
    if (primaryColor) {
      colors = {
        primaryColor,
        secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
      };
    }
    useInsertStyles(svgRef);
    warning4(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!isIconDefinition(icon)) {
      return null;
    }
    var target = icon;
    if (target && typeof target.icon === "function") {
      target = _objectSpread2(_objectSpread2({}, target), {}, {
        icon: target.icon(colors.primaryColor, colors.secondaryColor)
      });
    }
    return generate2(target.icon, "svg-".concat(target.name), _objectSpread2(_objectSpread2({
      className,
      onClick,
      style: style2,
      "data-icon": target.name,
      width: "1em",
      height: "1em",
      fill: "currentColor",
      "aria-hidden": "true"
    }, restProps), {}, {
      ref: svgRef
    }));
  };
  IconBase.displayName = "IconReact";
  IconBase.getTwoToneColors = getTwoToneColors;
  IconBase.setTwoToneColors = setTwoToneColors;
  var IconBase_default = IconBase;

  // node_modules/@ant-design/icons/es/components/twoTonePrimaryColor.js
  function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return IconBase_default.setTwoToneColors({
      primaryColor,
      secondaryColor
    });
  }
  function getTwoToneColor() {
    var colors = IconBase_default.getTwoToneColors();
    if (!colors.calculated) {
      return colors.primaryColor;
    }
    return [colors.primaryColor, colors.secondaryColor];
  }

  // node_modules/@ant-design/icons/es/components/AntdIcon.js
  var _excluded4 = ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"];
  setTwoToneColor(blue.primary);
  var Icon = /* @__PURE__ */ React41.forwardRef(function(props, ref) {
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutProperties(props, _excluded4);
    var _React$useContext = React41.useContext(Context_default), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? "anticon" : _React$useContext$pre, rootClassName = _React$useContext.rootClassName;
    var classString = (0, import_classnames2.default)(rootClassName, prefixCls, _defineProperty(_defineProperty({}, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), "".concat(prefixCls, "-spin"), !!spin || icon.name === "loading"), className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === void 0 && onClick) {
      iconTabIndex = -1;
    }
    var svgStyle = rotate ? {
      msTransform: "rotate(".concat(rotate, "deg)"),
      transform: "rotate(".concat(rotate, "deg)")
    } : void 0;
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /* @__PURE__ */ React41.createElement("span", _extends({
      role: "img",
      "aria-label": icon.name
    }, restProps, {
      ref,
      tabIndex: iconTabIndex,
      onClick,
      className: classString
    }), /* @__PURE__ */ React41.createElement(IconBase_default, {
      icon,
      primaryColor,
      secondaryColor,
      style: svgStyle
    }));
  });
  Icon.displayName = "AntdIcon";
  Icon.getTwoToneColor = getTwoToneColor;
  Icon.setTwoToneColor = setTwoToneColor;
  var AntdIcon_default = Icon;

  // node_modules/@ant-design/icons/es/icons/CheckCircleFilled.js
  var CheckCircleFilled2 = function CheckCircleFilled3(props, ref) {
    return /* @__PURE__ */ React42.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CheckCircleFilled_default
    }));
  };
  if (true) {
    CheckCircleFilled2.displayName = "CheckCircleFilled";
  }
  var CheckCircleFilled_default2 = /* @__PURE__ */ React42.forwardRef(CheckCircleFilled2);

  // node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js
  var React43 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseCircleFilled.js
  var CloseCircleFilled = { "icon": { "tag": "svg", "attrs": { "fill-rule": "evenodd", "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z" } }] }, "name": "close-circle", "theme": "filled" };
  var CloseCircleFilled_default = CloseCircleFilled;

  // node_modules/@ant-design/icons/es/icons/CloseCircleFilled.js
  var CloseCircleFilled2 = function CloseCircleFilled3(props, ref) {
    return /* @__PURE__ */ React43.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CloseCircleFilled_default
    }));
  };
  if (true) {
    CloseCircleFilled2.displayName = "CloseCircleFilled";
  }
  var CloseCircleFilled_default2 = /* @__PURE__ */ React43.forwardRef(CloseCircleFilled2);

  // node_modules/@ant-design/icons/es/icons/CloseOutlined.js
  var React44 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CloseOutlined.js
  var CloseOutlined = { "icon": { "tag": "svg", "attrs": { "fill-rule": "evenodd", "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M799.86 166.31c.02 0 .04.02.08.06l57.69 57.7c.04.03.05.05.06.08a.12.12 0 010 .06c0 .03-.02.05-.06.09L569.93 512l287.7 287.7c.04.04.05.06.06.09a.12.12 0 010 .07c0 .02-.02.04-.06.08l-57.7 57.69c-.03.04-.05.05-.07.06a.12.12 0 01-.07 0c-.03 0-.05-.02-.09-.06L512 569.93l-287.7 287.7c-.04.04-.06.05-.09.06a.12.12 0 01-.07 0c-.02 0-.04-.02-.08-.06l-57.69-57.7c-.04-.03-.05-.05-.06-.07a.12.12 0 010-.07c0-.03.02-.05.06-.09L454.07 512l-287.7-287.7c-.04-.04-.05-.06-.06-.09a.12.12 0 010-.07c0-.02.02-.04.06-.08l57.7-57.69c.03-.04.05-.05.07-.06a.12.12 0 01.07 0c.03 0 .05.02.09.06L512 454.07l287.7-287.7c.04-.04.06-.05.09-.06a.12.12 0 01.07 0z" } }] }, "name": "close", "theme": "outlined" };
  var CloseOutlined_default = CloseOutlined;

  // node_modules/@ant-design/icons/es/icons/CloseOutlined.js
  var CloseOutlined2 = function CloseOutlined3(props, ref) {
    return /* @__PURE__ */ React44.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CloseOutlined_default
    }));
  };
  if (true) {
    CloseOutlined2.displayName = "CloseOutlined";
  }
  var CloseOutlined_default2 = /* @__PURE__ */ React44.forwardRef(CloseOutlined2);

  // node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js
  var React45 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ExclamationCircleFilled.js
  var ExclamationCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "exclamation-circle", "theme": "filled" };
  var ExclamationCircleFilled_default = ExclamationCircleFilled;

  // node_modules/@ant-design/icons/es/icons/ExclamationCircleFilled.js
  var ExclamationCircleFilled2 = function ExclamationCircleFilled3(props, ref) {
    return /* @__PURE__ */ React45.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: ExclamationCircleFilled_default
    }));
  };
  if (true) {
    ExclamationCircleFilled2.displayName = "ExclamationCircleFilled";
  }
  var ExclamationCircleFilled_default2 = /* @__PURE__ */ React45.forwardRef(ExclamationCircleFilled2);

  // node_modules/@ant-design/icons/es/icons/InfoCircleFilled.js
  var React46 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/InfoCircleFilled.js
  var InfoCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "info-circle", "theme": "filled" };
  var InfoCircleFilled_default = InfoCircleFilled;

  // node_modules/@ant-design/icons/es/icons/InfoCircleFilled.js
  var InfoCircleFilled2 = function InfoCircleFilled3(props, ref) {
    return /* @__PURE__ */ React46.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: InfoCircleFilled_default
    }));
  };
  if (true) {
    InfoCircleFilled2.displayName = "InfoCircleFilled";
  }
  var InfoCircleFilled_default2 = /* @__PURE__ */ React46.forwardRef(InfoCircleFilled2);

  // node_modules/rc-util/es/pickAttrs.js
  var attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap";
  var eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError";
  var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
  var ariaPrefix = "aria-";
  var dataPrefix = "data-";
  function match(key, prefix) {
    return key.indexOf(prefix) === 0;
  }
  function pickAttrs(props) {
    var ariaOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var mergedConfig;
    if (ariaOnly === false) {
      mergedConfig = {
        aria: true,
        data: true,
        attr: true
      };
    } else if (ariaOnly === true) {
      mergedConfig = {
        aria: true
      };
    } else {
      mergedConfig = _objectSpread2({}, ariaOnly);
    }
    var attrs = {};
    Object.keys(props).forEach(function(key) {
      if (
        // Aria
        mergedConfig.aria && (key === "role" || match(key, ariaPrefix)) || // Data
        mergedConfig.data && match(key, dataPrefix) || // Attr
        mergedConfig.attr && propList.includes(key)
      ) {
        attrs[key] = props[key];
      }
    });
    return attrs;
  }

  // node_modules/antd/es/_util/reactNode.js
  var React47 = __toESM(require_react());
  var {
    isValidElement: isValidElement4
  } = React47;
  function isFragment3(child) {
    return child && isValidElement4(child) && child.type === React47.Fragment;
  }
  function replaceElement(element, replacement, props) {
    if (!isValidElement4(element)) {
      return replacement;
    }
    return /* @__PURE__ */ React47.cloneElement(element, typeof props === "function" ? props(element.props || {}) : props);
  }
  function cloneElement4(element, props) {
    return replaceElement(element, element, props);
  }

  // node_modules/compute-scroll-into-view/dist/index.js
  var t = (t2) => "object" == typeof t2 && null != t2 && 1 === t2.nodeType;
  var e = (t2, e3) => (!e3 || "hidden" !== t2) && ("visible" !== t2 && "clip" !== t2);
  var n = (t2, n2) => {
    if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
      const o3 = getComputedStyle(t2, null);
      return e(o3.overflowY, n2) || e(o3.overflowX, n2) || ((t3) => {
        const e3 = ((t4) => {
          if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
            return null;
          try {
            return t4.ownerDocument.defaultView.frameElement;
          } catch (t5) {
            return null;
          }
        })(t3);
        return !!e3 && (e3.clientHeight < t3.scrollHeight || e3.clientWidth < t3.scrollWidth);
      })(t2);
    }
    return false;
  };
  var o = (t2, e3, n2, o3, l2, r2, i, s) => r2 < t2 && i > e3 || r2 > t2 && i < e3 ? 0 : r2 <= t2 && s <= n2 || i >= e3 && s >= n2 ? r2 - t2 - o3 : i > e3 && s < n2 || r2 < t2 && s > n2 ? i - e3 + l2 : 0;
  var l = (t2) => {
    const e3 = t2.parentElement;
    return null == e3 ? t2.getRootNode().host || null : e3;
  };
  var r = (e3, r2) => {
    var i, s, d, h;
    if ("undefined" == typeof document)
      return [];
    const { scrollMode: c, block: f, inline: u, boundary: a, skipOverflowHiddenElements: g } = r2, p = "function" == typeof a ? a : (t2) => t2 !== a;
    if (!t(e3))
      throw new TypeError("Invalid target");
    const m = document.scrollingElement || document.documentElement, w = [];
    let W = e3;
    for (; t(W) && p(W); ) {
      if (W = l(W), W === m) {
        w.push(W);
        break;
      }
      null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);
    }
    const b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth, H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight, { scrollX: y, scrollY: M } = window, { height: v, width: E, top: x, right: C, bottom: I, left: R } = e3.getBoundingClientRect(), { top: T, right: B, bottom: F, left: V } = ((t2) => {
      const e4 = window.getComputedStyle(t2);
      return { top: parseFloat(e4.scrollMarginTop) || 0, right: parseFloat(e4.scrollMarginRight) || 0, bottom: parseFloat(e4.scrollMarginBottom) || 0, left: parseFloat(e4.scrollMarginLeft) || 0 };
    })(e3);
    let k = "start" === f || "nearest" === f ? x - T : "end" === f ? I + F : x + v / 2 - T + F, D = "center" === u ? R + E / 2 - V + B : "end" === u ? C + B : R - V;
    const L = [];
    for (let t2 = 0; t2 < w.length; t2++) {
      const e4 = w[t2], { height: n2, width: l2, top: r3, right: i2, bottom: s2, left: d2 } = e4.getBoundingClientRect();
      if ("if-needed" === c && x >= 0 && R >= 0 && I <= H && C <= b && x >= r3 && I <= s2 && R >= d2 && C <= i2)
        return L;
      const h2 = getComputedStyle(e4), a2 = parseInt(h2.borderLeftWidth, 10), g2 = parseInt(h2.borderTopWidth, 10), p2 = parseInt(h2.borderRightWidth, 10), W2 = parseInt(h2.borderBottomWidth, 10);
      let T2 = 0, B2 = 0;
      const F2 = "offsetWidth" in e4 ? e4.offsetWidth - e4.clientWidth - a2 - p2 : 0, V2 = "offsetHeight" in e4 ? e4.offsetHeight - e4.clientHeight - g2 - W2 : 0, S = "offsetWidth" in e4 ? 0 === e4.offsetWidth ? 0 : l2 / e4.offsetWidth : 0, X = "offsetHeight" in e4 ? 0 === e4.offsetHeight ? 0 : n2 / e4.offsetHeight : 0;
      if (m === e4)
        T2 = "start" === f ? k : "end" === f ? k - H : "nearest" === f ? o(M, M + H, H, g2, W2, M + k, M + k + v, v) : k - H / 2, B2 = "start" === u ? D : "center" === u ? D - b / 2 : "end" === u ? D - b : o(y, y + b, b, a2, p2, y + D, y + D + E, E), T2 = Math.max(0, T2 + M), B2 = Math.max(0, B2 + y);
      else {
        T2 = "start" === f ? k - r3 - g2 : "end" === f ? k - s2 + W2 + V2 : "nearest" === f ? o(r3, s2, n2, g2, W2 + V2, k, k + v, v) : k - (r3 + n2 / 2) + V2 / 2, B2 = "start" === u ? D - d2 - a2 : "center" === u ? D - (d2 + l2 / 2) + F2 / 2 : "end" === u ? D - i2 + p2 + F2 : o(d2, i2, l2, a2, p2 + F2, D, D + E, E);
        const { scrollLeft: t3, scrollTop: h3 } = e4;
        T2 = 0 === X ? 0 : Math.max(0, Math.min(h3 + T2 / X, e4.scrollHeight - n2 / X + V2)), B2 = 0 === S ? 0 : Math.max(0, Math.min(t3 + B2 / S, e4.scrollWidth - l2 / S + F2)), k += h3 - T2, D += t3 - B2;
      }
      L.push({ el: e4, top: T2, left: B2 });
    }
    return L;
  };

  // node_modules/scroll-into-view-if-needed/dist/index.js
  var o2 = (t2) => false === t2 ? { block: "end", inline: "nearest" } : ((t3) => t3 === Object(t3) && 0 !== Object.keys(t3).length)(t2) ? t2 : { block: "start", inline: "nearest" };
  function e2(e3, r2) {
    if (!e3.isConnected || !((t2) => {
      let o3 = t2;
      for (; o3 && o3.parentNode; ) {
        if (o3.parentNode === document)
          return true;
        o3 = o3.parentNode instanceof ShadowRoot ? o3.parentNode.host : o3.parentNode;
      }
      return false;
    })(e3))
      return;
    const n2 = ((t2) => {
      const o3 = window.getComputedStyle(t2);
      return { top: parseFloat(o3.scrollMarginTop) || 0, right: parseFloat(o3.scrollMarginRight) || 0, bottom: parseFloat(o3.scrollMarginBottom) || 0, left: parseFloat(o3.scrollMarginLeft) || 0 };
    })(e3);
    if (((t2) => "object" == typeof t2 && "function" == typeof t2.behavior)(r2))
      return r2.behavior(r(e3, r2));
    const l2 = "boolean" == typeof r2 || null == r2 ? void 0 : r2.behavior;
    for (const { el: a, top: i, left: s } of r(e3, o2(r2))) {
      const t2 = i - n2.top + n2.bottom, o3 = s - n2.left + n2.right;
      a.scroll({ top: t2, left: o3, behavior: l2 });
    }
  }

  // node_modules/antd/es/_util/getScroll.js
  function isWindow(obj) {
    return obj !== null && obj !== void 0 && obj === obj.window;
  }
  function getScroll(target, top) {
    var _a, _b;
    if (typeof window === "undefined") {
      return 0;
    }
    const method4 = top ? "scrollTop" : "scrollLeft";
    let result = 0;
    if (isWindow(target)) {
      result = target[top ? "pageYOffset" : "pageXOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method4];
    } else if (target instanceof HTMLElement) {
      result = target[method4];
    } else if (target) {
      result = target[method4];
    }
    if (target && !isWindow(target) && typeof result !== "number") {
      result = (_b = ((_a = target.ownerDocument) !== null && _a !== void 0 ? _a : target).documentElement) === null || _b === void 0 ? void 0 : _b[method4];
    }
    return result;
  }

  // node_modules/antd/es/_util/easings.js
  function easeInOutCubic(t2, b, c, d) {
    const cc = c - b;
    t2 /= d / 2;
    if (t2 < 1) {
      return cc / 2 * t2 * t2 * t2 + b;
    }
    return cc / 2 * ((t2 -= 2) * t2 * t2 + 2) + b;
  }

  // node_modules/antd/es/_util/scrollTo.js
  function scrollTo(y) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const {
      getContainer: getContainer2 = () => window,
      callback,
      duration = 450
    } = options;
    const container = getContainer2();
    const scrollTop = getScroll(container, true);
    const startTime = Date.now();
    const frameFunc = () => {
      const timestamp = Date.now();
      const time = timestamp - startTime;
      const nextScrollTop = easeInOutCubic(time > duration ? duration : time, scrollTop, y, duration);
      if (isWindow(container)) {
        container.scrollTo(window.pageXOffset, nextScrollTop);
      } else if (container instanceof Document || container.constructor.name === "HTMLDocument") {
        container.documentElement.scrollTop = nextScrollTop;
      } else {
        container.scrollTop = nextScrollTop;
      }
      if (time < duration) {
        raf_default(frameFunc);
      } else if (typeof callback === "function") {
        callback();
      }
    };
    raf_default(frameFunc);
  }

  // node_modules/antd/es/config-provider/hooks/useCSSVarCls.js
  var useCSSVarCls = (prefixCls) => {
    const [, , , , cssVar] = useToken();
    return cssVar ? `${prefixCls}-css-var` : "";
  };
  var useCSSVarCls_default = useCSSVarCls;

  // node_modules/rc-util/es/KeyCode.js
  var KeyCode = {
    /**
     * MAC_ENTER
     */
    MAC_ENTER: 3,
    /**
     * BACKSPACE
     */
    BACKSPACE: 8,
    /**
     * TAB
     */
    TAB: 9,
    /**
     * NUMLOCK on FF/Safari Mac
     */
    NUM_CENTER: 12,
    // NUMLOCK on FF/Safari Mac
    /**
     * ENTER
     */
    ENTER: 13,
    /**
     * SHIFT
     */
    SHIFT: 16,
    /**
     * CTRL
     */
    CTRL: 17,
    /**
     * ALT
     */
    ALT: 18,
    /**
     * PAUSE
     */
    PAUSE: 19,
    /**
     * CAPS_LOCK
     */
    CAPS_LOCK: 20,
    /**
     * ESC
     */
    ESC: 27,
    /**
     * SPACE
     */
    SPACE: 32,
    /**
     * PAGE_UP
     */
    PAGE_UP: 33,
    // also NUM_NORTH_EAST
    /**
     * PAGE_DOWN
     */
    PAGE_DOWN: 34,
    // also NUM_SOUTH_EAST
    /**
     * END
     */
    END: 35,
    // also NUM_SOUTH_WEST
    /**
     * HOME
     */
    HOME: 36,
    // also NUM_NORTH_WEST
    /**
     * LEFT
     */
    LEFT: 37,
    // also NUM_WEST
    /**
     * UP
     */
    UP: 38,
    // also NUM_NORTH
    /**
     * RIGHT
     */
    RIGHT: 39,
    // also NUM_EAST
    /**
     * DOWN
     */
    DOWN: 40,
    // also NUM_SOUTH
    /**
     * PRINT_SCREEN
     */
    PRINT_SCREEN: 44,
    /**
     * INSERT
     */
    INSERT: 45,
    // also NUM_INSERT
    /**
     * DELETE
     */
    DELETE: 46,
    // also NUM_DELETE
    /**
     * ZERO
     */
    ZERO: 48,
    /**
     * ONE
     */
    ONE: 49,
    /**
     * TWO
     */
    TWO: 50,
    /**
     * THREE
     */
    THREE: 51,
    /**
     * FOUR
     */
    FOUR: 52,
    /**
     * FIVE
     */
    FIVE: 53,
    /**
     * SIX
     */
    SIX: 54,
    /**
     * SEVEN
     */
    SEVEN: 55,
    /**
     * EIGHT
     */
    EIGHT: 56,
    /**
     * NINE
     */
    NINE: 57,
    /**
     * QUESTION_MARK
     */
    QUESTION_MARK: 63,
    // needs localization
    /**
     * A
     */
    A: 65,
    /**
     * B
     */
    B: 66,
    /**
     * C
     */
    C: 67,
    /**
     * D
     */
    D: 68,
    /**
     * E
     */
    E: 69,
    /**
     * F
     */
    F: 70,
    /**
     * G
     */
    G: 71,
    /**
     * H
     */
    H: 72,
    /**
     * I
     */
    I: 73,
    /**
     * J
     */
    J: 74,
    /**
     * K
     */
    K: 75,
    /**
     * L
     */
    L: 76,
    /**
     * M
     */
    M: 77,
    /**
     * N
     */
    N: 78,
    /**
     * O
     */
    O: 79,
    /**
     * P
     */
    P: 80,
    /**
     * Q
     */
    Q: 81,
    /**
     * R
     */
    R: 82,
    /**
     * S
     */
    S: 83,
    /**
     * T
     */
    T: 84,
    /**
     * U
     */
    U: 85,
    /**
     * V
     */
    V: 86,
    /**
     * W
     */
    W: 87,
    /**
     * X
     */
    X: 88,
    /**
     * Y
     */
    Y: 89,
    /**
     * Z
     */
    Z: 90,
    /**
     * META
     */
    META: 91,
    // WIN_KEY_LEFT
    /**
     * WIN_KEY_RIGHT
     */
    WIN_KEY_RIGHT: 92,
    /**
     * CONTEXT_MENU
     */
    CONTEXT_MENU: 93,
    /**
     * NUM_ZERO
     */
    NUM_ZERO: 96,
    /**
     * NUM_ONE
     */
    NUM_ONE: 97,
    /**
     * NUM_TWO
     */
    NUM_TWO: 98,
    /**
     * NUM_THREE
     */
    NUM_THREE: 99,
    /**
     * NUM_FOUR
     */
    NUM_FOUR: 100,
    /**
     * NUM_FIVE
     */
    NUM_FIVE: 101,
    /**
     * NUM_SIX
     */
    NUM_SIX: 102,
    /**
     * NUM_SEVEN
     */
    NUM_SEVEN: 103,
    /**
     * NUM_EIGHT
     */
    NUM_EIGHT: 104,
    /**
     * NUM_NINE
     */
    NUM_NINE: 105,
    /**
     * NUM_MULTIPLY
     */
    NUM_MULTIPLY: 106,
    /**
     * NUM_PLUS
     */
    NUM_PLUS: 107,
    /**
     * NUM_MINUS
     */
    NUM_MINUS: 109,
    /**
     * NUM_PERIOD
     */
    NUM_PERIOD: 110,
    /**
     * NUM_DIVISION
     */
    NUM_DIVISION: 111,
    /**
     * F1
     */
    F1: 112,
    /**
     * F2
     */
    F2: 113,
    /**
     * F3
     */
    F3: 114,
    /**
     * F4
     */
    F4: 115,
    /**
     * F5
     */
    F5: 116,
    /**
     * F6
     */
    F6: 117,
    /**
     * F7
     */
    F7: 118,
    /**
     * F8
     */
    F8: 119,
    /**
     * F9
     */
    F9: 120,
    /**
     * F10
     */
    F10: 121,
    /**
     * F11
     */
    F11: 122,
    /**
     * F12
     */
    F12: 123,
    /**
     * NUMLOCK
     */
    NUMLOCK: 144,
    /**
     * SEMICOLON
     */
    SEMICOLON: 186,
    // needs localization
    /**
     * DASH
     */
    DASH: 189,
    // needs localization
    /**
     * EQUALS
     */
    EQUALS: 187,
    // needs localization
    /**
     * COMMA
     */
    COMMA: 188,
    // needs localization
    /**
     * PERIOD
     */
    PERIOD: 190,
    // needs localization
    /**
     * SLASH
     */
    SLASH: 191,
    // needs localization
    /**
     * APOSTROPHE
     */
    APOSTROPHE: 192,
    // needs localization
    /**
     * SINGLE_QUOTE
     */
    SINGLE_QUOTE: 222,
    // needs localization
    /**
     * OPEN_SQUARE_BRACKET
     */
    OPEN_SQUARE_BRACKET: 219,
    // needs localization
    /**
     * BACKSLASH
     */
    BACKSLASH: 220,
    // needs localization
    /**
     * CLOSE_SQUARE_BRACKET
     */
    CLOSE_SQUARE_BRACKET: 221,
    // needs localization
    /**
     * WIN_KEY
     */
    WIN_KEY: 224,
    /**
     * MAC_FF_META
     */
    MAC_FF_META: 224,
    // Firefox (Gecko) fires this for the meta key instead of 91
    /**
     * WIN_IME
     */
    WIN_IME: 229,
    // ======================== Function ========================
    /**
     * whether text and modified key is entered at the same time.
     */
    isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e3) {
      var keyCode = e3.keyCode;
      if (e3.altKey && !e3.ctrlKey || e3.metaKey || // Function keys don't generate text
      keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
        return false;
      }
      switch (keyCode) {
        case KeyCode.ALT:
        case KeyCode.CAPS_LOCK:
        case KeyCode.CONTEXT_MENU:
        case KeyCode.CTRL:
        case KeyCode.DOWN:
        case KeyCode.END:
        case KeyCode.ESC:
        case KeyCode.HOME:
        case KeyCode.INSERT:
        case KeyCode.LEFT:
        case KeyCode.MAC_FF_META:
        case KeyCode.META:
        case KeyCode.NUMLOCK:
        case KeyCode.NUM_CENTER:
        case KeyCode.PAGE_DOWN:
        case KeyCode.PAGE_UP:
        case KeyCode.PAUSE:
        case KeyCode.PRINT_SCREEN:
        case KeyCode.RIGHT:
        case KeyCode.SHIFT:
        case KeyCode.UP:
        case KeyCode.WIN_KEY:
        case KeyCode.WIN_KEY_RIGHT:
          return false;
        default:
          return true;
      }
    },
    /**
     * whether character is entered.
     */
    isCharacterKey: function isCharacterKey(keyCode) {
      if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
        return true;
      }
      if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
        return true;
      }
      if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
        return true;
      }
      if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
        return true;
      }
      switch (keyCode) {
        case KeyCode.SPACE:
        case KeyCode.QUESTION_MARK:
        case KeyCode.NUM_PLUS:
        case KeyCode.NUM_MINUS:
        case KeyCode.NUM_PERIOD:
        case KeyCode.NUM_DIVISION:
        case KeyCode.SEMICOLON:
        case KeyCode.DASH:
        case KeyCode.EQUALS:
        case KeyCode.COMMA:
        case KeyCode.PERIOD:
        case KeyCode.SLASH:
        case KeyCode.APOSTROPHE:
        case KeyCode.SINGLE_QUOTE:
        case KeyCode.OPEN_SQUARE_BRACKET:
        case KeyCode.BACKSLASH:
        case KeyCode.CLOSE_SQUARE_BRACKET:
          return true;
        default:
          return false;
      }
    }
  };
  var KeyCode_default = KeyCode;

  // node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
  var React48 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/LoadingOutlined.js
  var LoadingOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" } }] }, "name": "loading", "theme": "outlined" };
  var LoadingOutlined_default = LoadingOutlined;

  // node_modules/@ant-design/icons/es/icons/LoadingOutlined.js
  var LoadingOutlined2 = function LoadingOutlined3(props, ref) {
    return /* @__PURE__ */ React48.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: LoadingOutlined_default
    }));
  };
  if (true) {
    LoadingOutlined2.displayName = "LoadingOutlined";
  }
  var LoadingOutlined_default2 = /* @__PURE__ */ React48.forwardRef(LoadingOutlined2);

  // node_modules/antd/es/_util/hooks/useZIndex.js
  var import_react19 = __toESM(require_react());

  // node_modules/antd/es/_util/zindexContext.js
  var import_react18 = __toESM(require_react());
  var zIndexContext = /* @__PURE__ */ import_react18.default.createContext(void 0);
  if (true) {
    zIndexContext.displayName = "zIndexContext";
  }
  var zindexContext_default = zIndexContext;

  // node_modules/antd/es/_util/hooks/useZIndex.js
  var CONTAINER_OFFSET = 100;
  var CONTAINER_OFFSET_MAX_COUNT = 10;
  var CONTAINER_MAX_OFFSET = CONTAINER_OFFSET * CONTAINER_OFFSET_MAX_COUNT;
  var containerBaseZIndexOffset = {
    Modal: CONTAINER_OFFSET,
    Drawer: CONTAINER_OFFSET,
    Popover: CONTAINER_OFFSET,
    Popconfirm: CONTAINER_OFFSET,
    Tooltip: CONTAINER_OFFSET,
    Tour: CONTAINER_OFFSET
  };
  var consumerBaseZIndexOffset = {
    SelectLike: 50,
    Dropdown: 50,
    DatePicker: 50,
    Menu: 50,
    ImagePreview: 1
  };
  function isContainerType(type4) {
    return type4 in containerBaseZIndexOffset;
  }
  function useZIndex(componentType, customZIndex) {
    const [, token2] = useToken();
    const parentZIndex = import_react19.default.useContext(zindexContext_default);
    const isContainer = isContainerType(componentType);
    if (customZIndex !== void 0) {
      return [customZIndex, customZIndex];
    }
    let zIndex = parentZIndex !== null && parentZIndex !== void 0 ? parentZIndex : 0;
    if (isContainer) {
      zIndex += // Use preset token zIndex by default but not stack when has parent container
      (parentZIndex ? 0 : token2.zIndexPopupBase) + // Container offset
      containerBaseZIndexOffset[componentType];
      zIndex = Math.min(zIndex, token2.zIndexPopupBase + CONTAINER_MAX_OFFSET);
    } else {
      zIndex += consumerBaseZIndexOffset[componentType];
    }
    return [parentZIndex === void 0 ? customZIndex : zIndex, zIndex];
  }

  // node_modules/antd/es/modal/useModal/index.js
  var React97 = __toESM(require_react());

  // node_modules/antd/es/_util/hooks/usePatchElement.js
  var React51 = __toESM(require_react());
  function usePatchElement() {
    const [elements, setElements] = React51.useState([]);
    const patchElement = React51.useCallback((element) => {
      setElements((originElements) => [].concat(_toConsumableArray(originElements), [element]));
      return () => {
        setElements((originElements) => originElements.filter((ele) => ele !== element));
      };
    }, []);
    return [elements, patchElement];
  }

  // node_modules/antd/es/modal/confirm.js
  var import_react38 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js
  function _regeneratorRuntime() {
    "use strict";
    _regeneratorRuntime = function _regeneratorRuntime2() {
      return e3;
    };
    var t2, e3 = {}, r2 = Object.prototype, n2 = r2.hasOwnProperty, o3 = Object.defineProperty || function(t3, e4, r3) {
      t3[e4] = r3.value;
    }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
    function define2(t3, e4, r3) {
      return Object.defineProperty(t3, e4, {
        value: r3,
        enumerable: true,
        configurable: true,
        writable: true
      }), t3[e4];
    }
    try {
      define2({}, "");
    } catch (t3) {
      define2 = function define3(t4, e4, r3) {
        return t4[e4] = r3;
      };
    }
    function wrap(t3, e4, r3, n3) {
      var i2 = e4 && e4.prototype instanceof Generator ? e4 : Generator, a2 = Object.create(i2.prototype), c2 = new Context3(n3 || []);
      return o3(a2, "_invoke", {
        value: makeInvokeMethod(t3, r3, c2)
      }), a2;
    }
    function tryCatch(t3, e4, r3) {
      try {
        return {
          type: "normal",
          arg: t3.call(e4, r3)
        };
      } catch (t4) {
        return {
          type: "throw",
          arg: t4
        };
      }
    }
    e3.wrap = wrap;
    var h = "suspendedStart", l2 = "suspendedYield", f = "executing", s = "completed", y = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var p = {};
    define2(p, a, function() {
      return this;
    });
    var d = Object.getPrototypeOf, v = d && d(d(values([])));
    v && v !== r2 && n2.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t3) {
      ["next", "throw", "return"].forEach(function(e4) {
        define2(t3, e4, function(t4) {
          return this._invoke(e4, t4);
        });
      });
    }
    function AsyncIterator(t3, e4) {
      function invoke(r4, o4, i2, a2) {
        var c2 = tryCatch(t3[r4], t3, o4);
        if ("throw" !== c2.type) {
          var u2 = c2.arg, h2 = u2.value;
          return h2 && "object" == _typeof(h2) && n2.call(h2, "__await") ? e4.resolve(h2.__await).then(function(t4) {
            invoke("next", t4, i2, a2);
          }, function(t4) {
            invoke("throw", t4, i2, a2);
          }) : e4.resolve(h2).then(function(t4) {
            u2.value = t4, i2(u2);
          }, function(t4) {
            return invoke("throw", t4, i2, a2);
          });
        }
        a2(c2.arg);
      }
      var r3;
      o3(this, "_invoke", {
        value: function value(t4, n3) {
          function callInvokeWithMethodAndArg() {
            return new e4(function(e5, r4) {
              invoke(t4, n3, e5, r4);
            });
          }
          return r3 = r3 ? r3.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e4, r3, n3) {
      var o4 = h;
      return function(i2, a2) {
        if (o4 === f)
          throw new Error("Generator is already running");
        if (o4 === s) {
          if ("throw" === i2)
            throw a2;
          return {
            value: t2,
            done: true
          };
        }
        for (n3.method = i2, n3.arg = a2; ; ) {
          var c2 = n3.delegate;
          if (c2) {
            var u2 = maybeInvokeDelegate(c2, n3);
            if (u2) {
              if (u2 === y)
                continue;
              return u2;
            }
          }
          if ("next" === n3.method)
            n3.sent = n3._sent = n3.arg;
          else if ("throw" === n3.method) {
            if (o4 === h)
              throw o4 = s, n3.arg;
            n3.dispatchException(n3.arg);
          } else
            "return" === n3.method && n3.abrupt("return", n3.arg);
          o4 = f;
          var p2 = tryCatch(e4, r3, n3);
          if ("normal" === p2.type) {
            if (o4 = n3.done ? s : l2, p2.arg === y)
              continue;
            return {
              value: p2.arg,
              done: n3.done
            };
          }
          "throw" === p2.type && (o4 = s, n3.method = "throw", n3.arg = p2.arg);
        }
      };
    }
    function maybeInvokeDelegate(e4, r3) {
      var n3 = r3.method, o4 = e4.iterator[n3];
      if (o4 === t2)
        return r3.delegate = null, "throw" === n3 && e4.iterator["return"] && (r3.method = "return", r3.arg = t2, maybeInvokeDelegate(e4, r3), "throw" === r3.method) || "return" !== n3 && (r3.method = "throw", r3.arg = new TypeError("The iterator does not provide a '" + n3 + "' method")), y;
      var i2 = tryCatch(o4, e4.iterator, r3.arg);
      if ("throw" === i2.type)
        return r3.method = "throw", r3.arg = i2.arg, r3.delegate = null, y;
      var a2 = i2.arg;
      return a2 ? a2.done ? (r3[e4.resultName] = a2.value, r3.next = e4.nextLoc, "return" !== r3.method && (r3.method = "next", r3.arg = t2), r3.delegate = null, y) : a2 : (r3.method = "throw", r3.arg = new TypeError("iterator result is not an object"), r3.delegate = null, y);
    }
    function pushTryEntry(t3) {
      var e4 = {
        tryLoc: t3[0]
      };
      1 in t3 && (e4.catchLoc = t3[1]), 2 in t3 && (e4.finallyLoc = t3[2], e4.afterLoc = t3[3]), this.tryEntries.push(e4);
    }
    function resetTryEntry(t3) {
      var e4 = t3.completion || {};
      e4.type = "normal", delete e4.arg, t3.completion = e4;
    }
    function Context3(t3) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t3.forEach(pushTryEntry, this), this.reset(true);
    }
    function values(e4) {
      if (e4 || "" === e4) {
        var r3 = e4[a];
        if (r3)
          return r3.call(e4);
        if ("function" == typeof e4.next)
          return e4;
        if (!isNaN(e4.length)) {
          var o4 = -1, i2 = function next2() {
            for (; ++o4 < e4.length; )
              if (n2.call(e4, o4))
                return next2.value = e4[o4], next2.done = false, next2;
            return next2.value = t2, next2.done = true, next2;
          };
          return i2.next = i2;
        }
      }
      throw new TypeError(_typeof(e4) + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o3(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: true
    }), o3(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: true
    }), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, u, "GeneratorFunction"), e3.isGeneratorFunction = function(t3) {
      var e4 = "function" == typeof t3 && t3.constructor;
      return !!e4 && (e4 === GeneratorFunction || "GeneratorFunction" === (e4.displayName || e4.name));
    }, e3.mark = function(t3) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define2(t3, u, "GeneratorFunction")), t3.prototype = Object.create(g), t3;
    }, e3.awrap = function(t3) {
      return {
        __await: t3
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, c, function() {
      return this;
    }), e3.AsyncIterator = AsyncIterator, e3.async = function(t3, r3, n3, o4, i2) {
      void 0 === i2 && (i2 = Promise);
      var a2 = new AsyncIterator(wrap(t3, r3, n3, o4), i2);
      return e3.isGeneratorFunction(r3) ? a2 : a2.next().then(function(t4) {
        return t4.done ? t4.value : a2.next();
      });
    }, defineIteratorMethods(g), define2(g, u, "Generator"), define2(g, a, function() {
      return this;
    }), define2(g, "toString", function() {
      return "[object Generator]";
    }), e3.keys = function(t3) {
      var e4 = Object(t3), r3 = [];
      for (var n3 in e4)
        r3.push(n3);
      return r3.reverse(), function next2() {
        for (; r3.length; ) {
          var t4 = r3.pop();
          if (t4 in e4)
            return next2.value = t4, next2.done = false, next2;
        }
        return next2.done = true, next2;
      };
    }, e3.values = values, Context3.prototype = {
      constructor: Context3,
      reset: function reset(e4) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t2, this.done = false, this.delegate = null, this.method = "next", this.arg = t2, this.tryEntries.forEach(resetTryEntry), !e4)
          for (var r3 in this)
            "t" === r3.charAt(0) && n2.call(this, r3) && !isNaN(+r3.slice(1)) && (this[r3] = t2);
      },
      stop: function stop() {
        this.done = true;
        var t3 = this.tryEntries[0].completion;
        if ("throw" === t3.type)
          throw t3.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(e4) {
        if (this.done)
          throw e4;
        var r3 = this;
        function handle(n3, o5) {
          return a2.type = "throw", a2.arg = e4, r3.next = n3, o5 && (r3.method = "next", r3.arg = t2), !!o5;
        }
        for (var o4 = this.tryEntries.length - 1; o4 >= 0; --o4) {
          var i2 = this.tryEntries[o4], a2 = i2.completion;
          if ("root" === i2.tryLoc)
            return handle("end");
          if (i2.tryLoc <= this.prev) {
            var c2 = n2.call(i2, "catchLoc"), u2 = n2.call(i2, "finallyLoc");
            if (c2 && u2) {
              if (this.prev < i2.catchLoc)
                return handle(i2.catchLoc, true);
              if (this.prev < i2.finallyLoc)
                return handle(i2.finallyLoc);
            } else if (c2) {
              if (this.prev < i2.catchLoc)
                return handle(i2.catchLoc, true);
            } else {
              if (!u2)
                throw new Error("try statement without catch or finally");
              if (this.prev < i2.finallyLoc)
                return handle(i2.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(t3, e4) {
        for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
          var o4 = this.tryEntries[r3];
          if (o4.tryLoc <= this.prev && n2.call(o4, "finallyLoc") && this.prev < o4.finallyLoc) {
            var i2 = o4;
            break;
          }
        }
        i2 && ("break" === t3 || "continue" === t3) && i2.tryLoc <= e4 && e4 <= i2.finallyLoc && (i2 = null);
        var a2 = i2 ? i2.completion : {};
        return a2.type = t3, a2.arg = e4, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
      },
      complete: function complete(t3, e4) {
        if ("throw" === t3.type)
          throw t3.arg;
        return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e4 && (this.next = e4), y;
      },
      finish: function finish(t3) {
        for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
          var r3 = this.tryEntries[e4];
          if (r3.finallyLoc === t3)
            return this.complete(r3.completion, r3.afterLoc), resetTryEntry(r3), y;
        }
      },
      "catch": function _catch(t3) {
        for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
          var r3 = this.tryEntries[e4];
          if (r3.tryLoc === t3) {
            var n3 = r3.completion;
            if ("throw" === n3.type) {
              var o4 = n3.arg;
              resetTryEntry(r3);
            }
            return o4;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(e4, r3, n3) {
        return this.delegate = {
          iterator: values(e4),
          resultName: r3,
          nextLoc: n3
        }, "next" === this.method && (this.arg = t2), y;
      }
    }, e3;
  }

  // node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }

  // node_modules/rc-util/es/React/render.js
  var ReactDOM2 = __toESM(require_react_dom());
  var fullClone4 = _objectSpread2({}, ReactDOM2);
  var version = fullClone4.version;
  var reactRender = fullClone4.render;
  var unmountComponentAtNode = fullClone4.unmountComponentAtNode;
  var createRoot;
  try {
    mainVersion = Number((version || "").split(".")[0]);
    if (mainVersion >= 18) {
      createRoot = fullClone4.createRoot;
    }
  } catch (e3) {
  }
  var mainVersion;
  function toggleWarning(skip) {
    var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = fullClone4.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && _typeof(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === "object") {
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
    }
  }
  var MARK = "__rc_react_root__";
  function modernRender(node2, container) {
    toggleWarning(true);
    var root = container[MARK] || createRoot(container);
    toggleWarning(false);
    root.render(node2);
    container[MARK] = root;
  }
  function legacyRender(node2, container) {
    reactRender(node2, container);
  }
  function render(node2, container) {
    if (createRoot) {
      modernRender(node2, container);
      return;
    }
    legacyRender(node2, container);
  }
  function modernUnmount(_x) {
    return _modernUnmount.apply(this, arguments);
  }
  function _modernUnmount() {
    _modernUnmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(container) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.resolve().then(function() {
                var _container$MARK;
                (_container$MARK = container[MARK]) === null || _container$MARK === void 0 || _container$MARK.unmount();
                delete container[MARK];
              }));
            case 1:
            case "end":
              return _context.stop();
          }
      }, _callee);
    }));
    return _modernUnmount.apply(this, arguments);
  }
  function legacyUnmount(container) {
    unmountComponentAtNode(container);
  }
  function unmount(_x2) {
    return _unmount.apply(this, arguments);
  }
  function _unmount() {
    _unmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(container) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(createRoot !== void 0)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", modernUnmount(container));
            case 2:
              legacyUnmount(container);
            case 3:
            case "end":
              return _context2.stop();
          }
      }, _callee2);
    }));
    return _unmount.apply(this, arguments);
  }

  // node_modules/antd/es/modal/ConfirmDialog.js
  var React94 = __toESM(require_react());
  var import_classnames15 = __toESM(require_classnames());

  // node_modules/antd/es/_util/motion.js
  var getCollapsedHeight = () => ({
    height: 0,
    opacity: 0
  });
  var getRealHeight = (node2) => {
    const {
      scrollHeight
    } = node2;
    return {
      height: scrollHeight,
      opacity: 1
    };
  };
  var getCurrentHeight = (node2) => ({
    height: node2 ? node2.offsetHeight : 0
  });
  var skipOpacityTransition = (_, event) => (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === "height";
  var initCollapseMotion = function() {
    let rootCls = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "ant";
    return {
      motionName: `${rootCls}-motion-collapse`,
      onAppearStart: getCollapsedHeight,
      onEnterStart: getCollapsedHeight,
      onAppearActive: getRealHeight,
      onEnterActive: getRealHeight,
      onLeaveStart: getCurrentHeight,
      onLeaveActive: getCollapsedHeight,
      onAppearEnd: skipOpacityTransition,
      onEnterEnd: skipOpacityTransition,
      onLeaveEnd: skipOpacityTransition,
      motionDeadline: 500
    };
  };
  var getTransitionName2 = (rootPrefixCls, motion2, transitionName) => {
    if (transitionName !== void 0) {
      return transitionName;
    }
    return `${rootPrefixCls}-${motion2}`;
  };
  var motion_default = initCollapseMotion;

  // node_modules/antd/es/modal/components/ConfirmCancelBtn.js
  var import_react27 = __toESM(require_react());

  // node_modules/antd/es/_util/ActionButton.js
  var React62 = __toESM(require_react());

  // node_modules/antd/es/button/button.js
  var import_react25 = __toESM(require_react());
  var import_classnames9 = __toESM(require_classnames());

  // node_modules/antd/es/_util/wave/index.js
  var import_classnames4 = __toESM(require_classnames());

  // node_modules/rc-util/es/Dom/isVisible.js
  var isVisible_default = function(element) {
    if (!element) {
      return false;
    }
    if (element instanceof Element) {
      if (element.offsetParent) {
        return true;
      }
      if (element.getBBox) {
        var _getBBox = element.getBBox(), width = _getBBox.width, height = _getBBox.height;
        if (width || height) {
          return true;
        }
      }
      if (element.getBoundingClientRect) {
        var _element$getBoundingC = element.getBoundingClientRect(), _width = _element$getBoundingC.width, _height = _element$getBoundingC.height;
        if (_width || _height) {
          return true;
        }
      }
    }
    return false;
  };

  // node_modules/antd/es/_util/wave/index.js
  var import_react20 = __toESM(require_react());

  // node_modules/antd/es/_util/wave/style.js
  var genWaveStyle = (token2) => {
    const {
      componentCls,
      colorPrimary
    } = token2;
    return {
      [componentCls]: {
        position: "absolute",
        background: "transparent",
        pointerEvents: "none",
        boxSizing: "border-box",
        color: `var(--wave-color, ${colorPrimary})`,
        boxShadow: `0 0 0 0 currentcolor`,
        opacity: 0.2,
        // =================== Motion ===================
        "&.wave-motion-appear": {
          transition: [`box-shadow 0.4s ${token2.motionEaseOutCirc}`, `opacity 2s ${token2.motionEaseOutCirc}`].join(","),
          "&-active": {
            boxShadow: `0 0 0 6px currentcolor`,
            opacity: 0
          },
          "&.wave-quick": {
            transition: [`box-shadow 0.3s ${token2.motionEaseInOut}`, `opacity 0.35s ${token2.motionEaseInOut}`].join(",")
          }
        }
      }
    };
  };
  var style_default = genComponentStyleHook("Wave", (token2) => [genWaveStyle(token2)]);

  // node_modules/antd/es/_util/wave/useWave.js
  var React53 = __toESM(require_react());

  // node_modules/antd/es/_util/wave/WaveEffect.js
  var import_classnames3 = __toESM(require_classnames());
  var React52 = __toESM(require_react());

  // node_modules/antd/es/_util/wave/util.js
  function isNotGrey(color) {
    const match2 = (color || "").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);
    if (match2 && match2[1] && match2[2] && match2[3]) {
      return !(match2[1] === match2[2] && match2[2] === match2[3]);
    }
    return true;
  }
  function isValidWaveColor(color) {
    return color && color !== "#fff" && color !== "#ffffff" && color !== "rgb(255, 255, 255)" && color !== "rgba(255, 255, 255, 1)" && isNotGrey(color) && !/rgba\((?:\d*, ){3}0\)/.test(color) && // any transparent rgba color
    color !== "transparent";
  }
  function getTargetWaveColor(node2) {
    const {
      borderTopColor,
      borderColor,
      backgroundColor
    } = getComputedStyle(node2);
    if (isValidWaveColor(borderTopColor)) {
      return borderTopColor;
    }
    if (isValidWaveColor(borderColor)) {
      return borderColor;
    }
    if (isValidWaveColor(backgroundColor)) {
      return backgroundColor;
    }
    return null;
  }

  // node_modules/antd/es/_util/wave/interface.js
  var TARGET_CLS = "ant-wave-target";

  // node_modules/antd/es/_util/wave/WaveEffect.js
  function validateNum(value) {
    return Number.isNaN(value) ? 0 : value;
  }
  var WaveEffect = (props) => {
    const {
      className,
      target,
      component
    } = props;
    const divRef = React52.useRef(null);
    const [color, setWaveColor] = React52.useState(null);
    const [borderRadius, setBorderRadius] = React52.useState([]);
    const [left, setLeft] = React52.useState(0);
    const [top, setTop] = React52.useState(0);
    const [width, setWidth] = React52.useState(0);
    const [height, setHeight] = React52.useState(0);
    const [enabled, setEnabled] = React52.useState(false);
    const waveStyle = {
      left,
      top,
      width,
      height,
      borderRadius: borderRadius.map((radius) => `${radius}px`).join(" ")
    };
    if (color) {
      waveStyle["--wave-color"] = color;
    }
    function syncPos() {
      const nodeStyle = getComputedStyle(target);
      setWaveColor(getTargetWaveColor(target));
      const isStatic = nodeStyle.position === "static";
      const {
        borderLeftWidth,
        borderTopWidth
      } = nodeStyle;
      setLeft(isStatic ? target.offsetLeft : validateNum(-parseFloat(borderLeftWidth)));
      setTop(isStatic ? target.offsetTop : validateNum(-parseFloat(borderTopWidth)));
      setWidth(target.offsetWidth);
      setHeight(target.offsetHeight);
      const {
        borderTopLeftRadius,
        borderTopRightRadius,
        borderBottomLeftRadius,
        borderBottomRightRadius
      } = nodeStyle;
      setBorderRadius([borderTopLeftRadius, borderTopRightRadius, borderBottomRightRadius, borderBottomLeftRadius].map((radius) => validateNum(parseFloat(radius))));
    }
    React52.useEffect(() => {
      if (target) {
        const id = raf_default(() => {
          syncPos();
          setEnabled(true);
        });
        let resizeObserver2;
        if (typeof ResizeObserver !== "undefined") {
          resizeObserver2 = new ResizeObserver(syncPos);
          resizeObserver2.observe(target);
        }
        return () => {
          raf_default.cancel(id);
          resizeObserver2 === null || resizeObserver2 === void 0 ? void 0 : resizeObserver2.disconnect();
        };
      }
    }, []);
    if (!enabled) {
      return null;
    }
    const isSmallComponent = (component === "Checkbox" || component === "Radio") && (target === null || target === void 0 ? void 0 : target.classList.contains(TARGET_CLS));
    return /* @__PURE__ */ React52.createElement(es_default2, {
      visible: true,
      motionAppear: true,
      motionName: "wave-motion",
      motionDeadline: 5e3,
      onAppearEnd: (_, event) => {
        var _a;
        if (event.deadline || event.propertyName === "opacity") {
          const holder = (_a = divRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;
          unmount(holder).then(() => {
            holder === null || holder === void 0 ? void 0 : holder.remove();
          });
        }
        return false;
      }
    }, (_ref) => {
      let {
        className: motionClassName
      } = _ref;
      return /* @__PURE__ */ React52.createElement("div", {
        ref: divRef,
        className: (0, import_classnames3.default)(className, {
          "wave-quick": isSmallComponent
        }, motionClassName),
        style: waveStyle
      });
    });
  };
  var showWaveEffect = (target, info) => {
    var _a;
    const {
      component
    } = info;
    if (component === "Checkbox" && !((_a = target.querySelector("input")) === null || _a === void 0 ? void 0 : _a.checked)) {
      return;
    }
    const holder = document.createElement("div");
    holder.style.position = "absolute";
    holder.style.left = "0px";
    holder.style.top = "0px";
    target === null || target === void 0 ? void 0 : target.insertBefore(holder, target === null || target === void 0 ? void 0 : target.firstChild);
    render(/* @__PURE__ */ React52.createElement(WaveEffect, Object.assign({}, info, {
      target
    })), holder);
  };
  var WaveEffect_default = showWaveEffect;

  // node_modules/antd/es/_util/wave/useWave.js
  function useWave(nodeRef, className, component) {
    const {
      wave
    } = React53.useContext(ConfigContext);
    const [, token2, hashId] = useToken();
    const showWave = useEvent((event) => {
      const node2 = nodeRef.current;
      if ((wave === null || wave === void 0 ? void 0 : wave.disabled) || !node2) {
        return;
      }
      const targetNode = node2.querySelector(`.${TARGET_CLS}`) || node2;
      const {
        showEffect
      } = wave || {};
      (showEffect || WaveEffect_default)(targetNode, {
        className,
        token: token2,
        component,
        event,
        hashId
      });
    });
    const rafId = React53.useRef();
    const showDebounceWave = (event) => {
      raf_default.cancel(rafId.current);
      rafId.current = raf_default(() => {
        showWave(event);
      });
    };
    return showDebounceWave;
  }

  // node_modules/antd/es/_util/wave/index.js
  var Wave = (props) => {
    const {
      children,
      disabled,
      component
    } = props;
    const {
      getPrefixCls
    } = (0, import_react20.useContext)(ConfigContext);
    const containerRef = (0, import_react20.useRef)(null);
    const prefixCls = getPrefixCls("wave");
    const [, hashId] = style_default(prefixCls);
    const showWave = useWave(containerRef, (0, import_classnames4.default)(prefixCls, hashId), component);
    import_react20.default.useEffect(() => {
      const node2 = containerRef.current;
      if (!node2 || node2.nodeType !== 1 || disabled) {
        return;
      }
      const onClick = (e3) => {
        if (!isVisible_default(e3.target) || // No need wave
        !node2.getAttribute || node2.getAttribute("disabled") || node2.disabled || node2.className.includes("disabled") || node2.className.includes("-leave")) {
          return;
        }
        showWave(e3);
      };
      node2.addEventListener("click", onClick, true);
      return () => {
        node2.removeEventListener("click", onClick, true);
      };
    }, [disabled]);
    if (!/* @__PURE__ */ import_react20.default.isValidElement(children)) {
      return children !== null && children !== void 0 ? children : null;
    }
    const ref = supportRef(children) ? composeRef(children.ref, containerRef) : containerRef;
    return cloneElement4(children, {
      ref
    });
  };
  if (true) {
    Wave.displayName = "Wave";
  }
  var wave_default = Wave;

  // node_modules/antd/es/config-provider/hooks/useSize.js
  var import_react21 = __toESM(require_react());
  var useSize = (customSize) => {
    const size = import_react21.default.useContext(SizeContext_default);
    const mergedSize = import_react21.default.useMemo(() => {
      if (!customSize) {
        return size;
      }
      if (typeof customSize === "string") {
        return customSize !== null && customSize !== void 0 ? customSize : size;
      }
      if (customSize instanceof Function) {
        return customSize(size);
      }
      return size;
    }, [customSize, size]);
    return mergedSize;
  };
  var useSize_default = useSize;

  // node_modules/antd/es/space/Compact.js
  var import_classnames5 = __toESM(require_classnames());
  var React56 = __toESM(require_react());

  // node_modules/antd/es/space/style/compact.js
  var genSpaceCompactStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [componentCls]: {
        "&-block": {
          display: "flex",
          width: "100%"
        },
        "&-vertical": {
          flexDirection: "column"
        }
      }
    };
  };
  var compact_default = genSpaceCompactStyle;

  // node_modules/antd/es/space/style/index.js
  var genSpaceStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [componentCls]: {
        display: "inline-flex",
        "&-rtl": {
          direction: "rtl"
        },
        "&-vertical": {
          flexDirection: "column"
        },
        "&-align": {
          flexDirection: "column",
          "&-center": {
            alignItems: "center"
          },
          "&-start": {
            alignItems: "flex-start"
          },
          "&-end": {
            alignItems: "flex-end"
          },
          "&-baseline": {
            alignItems: "baseline"
          }
        },
        [`${componentCls}-item:empty`]: {
          display: "none"
        }
      }
    };
  };
  var genSpaceGapStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [componentCls]: {
        "&-gap-row-small": {
          rowGap: token2.spaceGapSmallSize
        },
        "&-gap-row-middle": {
          rowGap: token2.spaceGapMiddleSize
        },
        "&-gap-row-large": {
          rowGap: token2.spaceGapLargeSize
        },
        "&-gap-col-small": {
          columnGap: token2.spaceGapSmallSize
        },
        "&-gap-col-middle": {
          columnGap: token2.spaceGapMiddleSize
        },
        "&-gap-col-large": {
          columnGap: token2.spaceGapLargeSize
        }
      }
    };
  };
  var style_default2 = genStyleHooks("Space", (token2) => {
    const spaceToken = merge2(token2, {
      spaceGapSmallSize: token2.paddingXS,
      spaceGapMiddleSize: token2.padding,
      spaceGapLargeSize: token2.paddingLG
    });
    return [genSpaceStyle(spaceToken), genSpaceGapStyle(spaceToken), compact_default(spaceToken)];
  }, () => ({}), {
    // Space component don't apply extra font style
    // https://github.com/ant-design/ant-design/issues/40315
    resetStyle: false
  });

  // node_modules/antd/es/space/Compact.js
  var __rest4 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var SpaceCompactItemContext = /* @__PURE__ */ React56.createContext(null);
  var useCompactItemContext = (prefixCls, direction) => {
    const compactItemContext = React56.useContext(SpaceCompactItemContext);
    const compactItemClassnames = React56.useMemo(() => {
      if (!compactItemContext) {
        return "";
      }
      const {
        compactDirection,
        isFirstItem,
        isLastItem
      } = compactItemContext;
      const separator = compactDirection === "vertical" ? "-vertical-" : "-";
      return (0, import_classnames5.default)(`${prefixCls}-compact${separator}item`, {
        [`${prefixCls}-compact${separator}first-item`]: isFirstItem,
        [`${prefixCls}-compact${separator}last-item`]: isLastItem,
        [`${prefixCls}-compact${separator}item-rtl`]: direction === "rtl"
      });
    }, [prefixCls, direction, compactItemContext]);
    return {
      compactSize: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactSize,
      compactDirection: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactDirection,
      compactItemClassnames
    };
  };
  var NoCompactStyle = (_ref) => {
    let {
      children
    } = _ref;
    return /* @__PURE__ */ React56.createElement(SpaceCompactItemContext.Provider, {
      value: null
    }, children);
  };
  var CompactItem = (_a) => {
    var {
      children
    } = _a, otherProps = __rest4(_a, ["children"]);
    return /* @__PURE__ */ React56.createElement(SpaceCompactItemContext.Provider, {
      value: otherProps
    }, children);
  };
  var Compact = (props) => {
    const {
      getPrefixCls,
      direction: directionConfig
    } = React56.useContext(ConfigContext);
    const {
      size,
      direction,
      block,
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      children
    } = props, restProps = __rest4(props, ["size", "direction", "block", "prefixCls", "className", "rootClassName", "children"]);
    const mergedSize = useSize_default((ctx) => size !== null && size !== void 0 ? size : ctx);
    const prefixCls = getPrefixCls("space-compact", customizePrefixCls);
    const [wrapCSSVar, hashId] = style_default2(prefixCls);
    const clx = (0, import_classnames5.default)(prefixCls, hashId, {
      [`${prefixCls}-rtl`]: directionConfig === "rtl",
      [`${prefixCls}-block`]: block,
      [`${prefixCls}-vertical`]: direction === "vertical"
    }, className, rootClassName);
    const compactItemContext = React56.useContext(SpaceCompactItemContext);
    const childNodes = toArray(children);
    const nodes = React56.useMemo(() => childNodes.map((child, i) => {
      const key = child && child.key || `${prefixCls}-item-${i}`;
      return /* @__PURE__ */ React56.createElement(CompactItem, {
        key,
        compactSize: mergedSize,
        compactDirection: direction,
        isFirstItem: i === 0 && (!compactItemContext || (compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.isFirstItem)),
        isLastItem: i === childNodes.length - 1 && (!compactItemContext || (compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.isLastItem))
      }, child);
    }), [size, childNodes, compactItemContext]);
    if (childNodes.length === 0) {
      return null;
    }
    return wrapCSSVar(/* @__PURE__ */ React56.createElement("div", Object.assign({
      className: clx
    }, restProps), nodes));
  };
  var Compact_default = Compact;

  // node_modules/antd/es/button/button-group.js
  var React57 = __toESM(require_react());
  var import_classnames6 = __toESM(require_classnames());
  var __rest5 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var GroupSizeContext = /* @__PURE__ */ React57.createContext(void 0);
  var ButtonGroup = (props) => {
    const {
      getPrefixCls,
      direction
    } = React57.useContext(ConfigContext);
    const {
      prefixCls: customizePrefixCls,
      size,
      className
    } = props, others = __rest5(props, ["prefixCls", "size", "className"]);
    const prefixCls = getPrefixCls("btn-group", customizePrefixCls);
    const [, , hashId] = useToken();
    let sizeCls = "";
    switch (size) {
      case "large":
        sizeCls = "lg";
        break;
      case "small":
        sizeCls = "sm";
        break;
      case "middle":
      default:
    }
    if (true) {
      const warning8 = devUseWarning("Button.Group");
      true ? warning8(!size || ["large", "small", "middle"].includes(size), "usage", "Invalid prop `size`.") : void 0;
    }
    const classes = (0, import_classnames6.default)(prefixCls, {
      [`${prefixCls}-${sizeCls}`]: sizeCls,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, className, hashId);
    return /* @__PURE__ */ React57.createElement(GroupSizeContext.Provider, {
      value: size
    }, /* @__PURE__ */ React57.createElement("div", Object.assign({}, others, {
      className: classes
    })));
  };
  var button_group_default = ButtonGroup;

  // node_modules/antd/es/button/buttonHelpers.js
  var import_react22 = __toESM(require_react());
  var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
  var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
  function convertLegacyProps(type4) {
    if (type4 === "danger") {
      return {
        danger: true
      };
    }
    return {
      type: type4
    };
  }
  function isString(str) {
    return typeof str === "string";
  }
  function isUnBorderedButtonType(type4) {
    return type4 === "text" || type4 === "link";
  }
  function splitCNCharsBySpace(child, needInserted) {
    if (child === null || child === void 0) {
      return;
    }
    const SPACE = needInserted ? " " : "";
    if (typeof child !== "string" && typeof child !== "number" && isString(child.type) && isTwoCNChar(child.props.children)) {
      return cloneElement4(child, {
        children: child.props.children.split("").join(SPACE)
      });
    }
    if (isString(child)) {
      return isTwoCNChar(child) ? /* @__PURE__ */ import_react22.default.createElement("span", null, child.split("").join(SPACE)) : /* @__PURE__ */ import_react22.default.createElement("span", null, child);
    }
    if (isFragment3(child)) {
      return /* @__PURE__ */ import_react22.default.createElement("span", null, child);
    }
    return child;
  }
  function spaceChildren(children, needInserted) {
    let isPrevChildPure = false;
    const childList = [];
    import_react22.default.Children.forEach(children, (child) => {
      const type4 = typeof child;
      const isCurrentChildPure = type4 === "string" || type4 === "number";
      if (isPrevChildPure && isCurrentChildPure) {
        const lastIndex = childList.length - 1;
        const lastChild = childList[lastIndex];
        childList[lastIndex] = `${lastChild}${child}`;
      } else {
        childList.push(child);
      }
      isPrevChildPure = isCurrentChildPure;
    });
    return import_react22.default.Children.map(childList, (child) => splitCNCharsBySpace(child, needInserted));
  }

  // node_modules/antd/es/button/IconWrapper.js
  var import_react23 = __toESM(require_react());
  var import_classnames7 = __toESM(require_classnames());
  var IconWrapper = /* @__PURE__ */ (0, import_react23.forwardRef)((props, ref) => {
    const {
      className,
      style: style2,
      children,
      prefixCls
    } = props;
    const iconWrapperCls = (0, import_classnames7.default)(`${prefixCls}-icon`, className);
    return /* @__PURE__ */ import_react23.default.createElement("span", {
      ref,
      className: iconWrapperCls,
      style: style2
    }, children);
  });
  var IconWrapper_default = IconWrapper;

  // node_modules/antd/es/button/LoadingIcon.js
  var import_classnames8 = __toESM(require_classnames());
  var import_react24 = __toESM(require_react());
  var InnerLoadingIcon = /* @__PURE__ */ (0, import_react24.forwardRef)((_ref, ref) => {
    let {
      prefixCls,
      className,
      style: style2,
      iconClassName
    } = _ref;
    const mergedIconCls = (0, import_classnames8.default)(`${prefixCls}-loading-icon`, className);
    return /* @__PURE__ */ import_react24.default.createElement(IconWrapper_default, {
      prefixCls,
      className: mergedIconCls,
      style: style2,
      ref
    }, /* @__PURE__ */ import_react24.default.createElement(LoadingOutlined_default2, {
      className: iconClassName
    }));
  });
  var getCollapsedWidth = () => ({
    width: 0,
    opacity: 0,
    transform: "scale(0)"
  });
  var getRealWidth = (node2) => ({
    width: node2.scrollWidth,
    opacity: 1,
    transform: "scale(1)"
  });
  var LoadingIcon = (props) => {
    const {
      prefixCls,
      loading,
      existIcon,
      className,
      style: style2
    } = props;
    const visible = !!loading;
    if (existIcon) {
      return /* @__PURE__ */ import_react24.default.createElement(InnerLoadingIcon, {
        prefixCls,
        className,
        style: style2
      });
    }
    return /* @__PURE__ */ import_react24.default.createElement(es_default2, {
      visible,
      // We do not really use this motionName
      motionName: `${prefixCls}-loading-icon-motion`,
      motionLeave: visible,
      removeOnLeave: true,
      onAppearStart: getCollapsedWidth,
      onAppearActive: getRealWidth,
      onEnterStart: getCollapsedWidth,
      onEnterActive: getRealWidth,
      onLeaveStart: getRealWidth,
      onLeaveActive: getCollapsedWidth
    }, (_ref2, ref) => {
      let {
        className: motionCls,
        style: motionStyle
      } = _ref2;
      return /* @__PURE__ */ import_react24.default.createElement(InnerLoadingIcon, {
        prefixCls,
        className,
        style: Object.assign(Object.assign({}, style2), motionStyle),
        ref,
        iconClassName: motionCls
      });
    });
  };
  var LoadingIcon_default = LoadingIcon;

  // node_modules/antd/es/button/style/group.js
  var genButtonBorderStyle = (buttonTypeCls, borderColor) => ({
    // Border
    [`> span, > ${buttonTypeCls}`]: {
      "&:not(:last-child)": {
        [`&, & > ${buttonTypeCls}`]: {
          "&:not(:disabled)": {
            borderInlineEndColor: borderColor
          }
        }
      },
      "&:not(:first-child)": {
        [`&, & > ${buttonTypeCls}`]: {
          "&:not(:disabled)": {
            borderInlineStartColor: borderColor
          }
        }
      }
    }
  });
  var genGroupStyle = (token2) => {
    const {
      componentCls,
      fontSize,
      lineWidth,
      groupBorderColor,
      colorErrorHover
    } = token2;
    return {
      [`${componentCls}-group`]: [
        {
          position: "relative",
          display: "inline-flex",
          // Border
          [`> span, > ${componentCls}`]: {
            "&:not(:last-child)": {
              [`&, & > ${componentCls}`]: {
                borderStartEndRadius: 0,
                borderEndEndRadius: 0
              }
            },
            "&:not(:first-child)": {
              marginInlineStart: token2.calc(lineWidth).mul(-1).equal(),
              [`&, & > ${componentCls}`]: {
                borderStartStartRadius: 0,
                borderEndStartRadius: 0
              }
            }
          },
          [componentCls]: {
            position: "relative",
            zIndex: 1,
            [`&:hover,
          &:focus,
          &:active`]: {
              zIndex: 2
            },
            "&[disabled]": {
              zIndex: 0
            }
          },
          [`${componentCls}-icon-only`]: {
            fontSize
          }
        },
        // Border Color
        genButtonBorderStyle(`${componentCls}-primary`, groupBorderColor),
        genButtonBorderStyle(`${componentCls}-danger`, colorErrorHover)
      ]
    };
  };
  var group_default = genGroupStyle;

  // node_modules/antd/es/button/style/token.js
  var prepareToken = (token2) => {
    const {
      paddingInline,
      onlyIconSize,
      paddingBlock
    } = token2;
    const buttonToken = merge2(token2, {
      buttonPaddingHorizontal: paddingInline,
      buttonPaddingVertical: paddingBlock,
      buttonIconOnlyFontSize: onlyIconSize
    });
    return buttonToken;
  };
  var prepareComponentToken = (token2) => {
    var _a, _b, _c, _d, _e, _f;
    const contentFontSize = (_a = token2.contentFontSize) !== null && _a !== void 0 ? _a : token2.fontSize;
    const contentFontSizeSM = (_b = token2.contentFontSizeSM) !== null && _b !== void 0 ? _b : token2.fontSize;
    const contentFontSizeLG = (_c = token2.contentFontSizeLG) !== null && _c !== void 0 ? _c : token2.fontSizeLG;
    const contentLineHeight = (_d = token2.contentLineHeight) !== null && _d !== void 0 ? _d : getLineHeight(contentFontSize);
    const contentLineHeightSM = (_e = token2.contentLineHeightSM) !== null && _e !== void 0 ? _e : getLineHeight(contentFontSizeSM);
    const contentLineHeightLG = (_f = token2.contentLineHeightLG) !== null && _f !== void 0 ? _f : getLineHeight(contentFontSizeLG);
    return {
      fontWeight: 400,
      defaultShadow: `0 ${token2.controlOutlineWidth}px 0 ${token2.controlTmpOutline}`,
      primaryShadow: `0 ${token2.controlOutlineWidth}px 0 ${token2.controlOutline}`,
      dangerShadow: `0 ${token2.controlOutlineWidth}px 0 ${token2.colorErrorOutline}`,
      primaryColor: token2.colorTextLightSolid,
      dangerColor: token2.colorTextLightSolid,
      borderColorDisabled: token2.colorBorder,
      defaultGhostColor: token2.colorBgContainer,
      ghostBg: "transparent",
      defaultGhostBorderColor: token2.colorBgContainer,
      paddingInline: token2.paddingContentHorizontal - token2.lineWidth,
      paddingInlineLG: token2.paddingContentHorizontal - token2.lineWidth,
      paddingInlineSM: 8 - token2.lineWidth,
      onlyIconSize: token2.fontSizeLG,
      onlyIconSizeSM: token2.fontSizeLG - 2,
      onlyIconSizeLG: token2.fontSizeLG + 2,
      groupBorderColor: token2.colorPrimaryHover,
      linkHoverBg: "transparent",
      textHoverBg: token2.colorBgTextHover,
      defaultColor: token2.colorText,
      defaultBg: token2.colorBgContainer,
      defaultBorderColor: token2.colorBorder,
      defaultBorderColorDisabled: token2.colorBorder,
      contentFontSize,
      contentFontSizeSM,
      contentFontSizeLG,
      contentLineHeight,
      contentLineHeightSM,
      contentLineHeightLG,
      paddingBlock: Math.max((token2.controlHeight - contentFontSize * contentLineHeight) / 2 - token2.lineWidth, 0),
      paddingBlockSM: Math.max((token2.controlHeightSM - contentFontSizeSM * contentLineHeightSM) / 2 - token2.lineWidth, 0),
      paddingBlockLG: Math.max((token2.controlHeightLG - contentFontSizeLG * contentLineHeightLG) / 2 - token2.lineWidth, 0)
    };
  };

  // node_modules/antd/es/button/style/index.js
  var genSharedButtonStyle = (token2) => {
    const {
      componentCls,
      iconCls,
      fontWeight
    } = token2;
    return {
      [componentCls]: {
        outline: "none",
        position: "relative",
        display: "inline-block",
        fontWeight,
        whiteSpace: "nowrap",
        textAlign: "center",
        backgroundImage: "none",
        background: "transparent",
        border: `${unit(token2.lineWidth)} ${token2.lineType} transparent`,
        cursor: "pointer",
        transition: `all ${token2.motionDurationMid} ${token2.motionEaseInOut}`,
        userSelect: "none",
        touchAction: "manipulation",
        color: token2.colorText,
        "&:disabled > *": {
          pointerEvents: "none"
        },
        "> span": {
          display: "inline-block"
        },
        [`${componentCls}-icon`]: {
          lineHeight: 0
        },
        // Leave a space between icon and text.
        [`> ${iconCls} + span, > span + ${iconCls}`]: {
          marginInlineStart: token2.marginXS
        },
        [`&:not(${componentCls}-icon-only) > ${componentCls}-icon`]: {
          [`&${componentCls}-loading-icon, &:not(:last-child)`]: {
            marginInlineEnd: token2.marginXS
          }
        },
        "> a": {
          color: "currentColor"
        },
        "&:not(:disabled)": Object.assign({}, genFocusStyle(token2)),
        [`&${componentCls}-two-chinese-chars::first-letter`]: {
          letterSpacing: "0.34em"
        },
        [`&${componentCls}-two-chinese-chars > *:not(${iconCls})`]: {
          marginInlineEnd: "-0.34em",
          letterSpacing: "0.34em"
        },
        // make `btn-icon-only` not too narrow
        [`&-icon-only${componentCls}-compact-item`]: {
          flex: "none"
        }
      }
    };
  };
  var genHoverActiveButtonStyle = (btnCls, hoverStyle, activeStyle) => ({
    [`&:not(:disabled):not(${btnCls}-disabled)`]: {
      "&:hover": hoverStyle,
      "&:active": activeStyle
    }
  });
  var genCircleButtonStyle = (token2) => ({
    minWidth: token2.controlHeight,
    paddingInlineStart: 0,
    paddingInlineEnd: 0,
    borderRadius: "50%"
  });
  var genRoundButtonStyle = (token2) => ({
    borderRadius: token2.controlHeight,
    paddingInlineStart: token2.calc(token2.controlHeight).div(2).equal(),
    paddingInlineEnd: token2.calc(token2.controlHeight).div(2).equal()
  });
  var genDisabledStyle = (token2) => ({
    cursor: "not-allowed",
    borderColor: token2.borderColorDisabled,
    color: token2.colorTextDisabled,
    background: token2.colorBgContainerDisabled,
    boxShadow: "none"
  });
  var genGhostButtonStyle = (btnCls, background, textColor, borderColor, textColorDisabled, borderColorDisabled, hoverStyle, activeStyle) => ({
    [`&${btnCls}-background-ghost`]: Object.assign(Object.assign({
      color: textColor || void 0,
      background,
      borderColor: borderColor || void 0,
      boxShadow: "none"
    }, genHoverActiveButtonStyle(btnCls, Object.assign({
      background
    }, hoverStyle), Object.assign({
      background
    }, activeStyle))), {
      "&:disabled": {
        cursor: "not-allowed",
        color: textColorDisabled || void 0,
        borderColor: borderColorDisabled || void 0
      }
    })
  });
  var genSolidDisabledButtonStyle = (token2) => ({
    [`&:disabled, &${token2.componentCls}-disabled`]: Object.assign({}, genDisabledStyle(token2))
  });
  var genSolidButtonStyle = (token2) => Object.assign({}, genSolidDisabledButtonStyle(token2));
  var genPureDisabledButtonStyle = (token2) => ({
    [`&:disabled, &${token2.componentCls}-disabled`]: {
      cursor: "not-allowed",
      color: token2.colorTextDisabled
    }
  });
  var genDefaultButtonStyle = (token2) => Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, genSolidButtonStyle(token2)), {
    background: token2.defaultBg,
    borderColor: token2.defaultBorderColor,
    color: token2.defaultColor,
    boxShadow: token2.defaultShadow
  }), genHoverActiveButtonStyle(token2.componentCls, {
    color: token2.colorPrimaryHover,
    borderColor: token2.colorPrimaryHover
  }, {
    color: token2.colorPrimaryActive,
    borderColor: token2.colorPrimaryActive
  })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.defaultGhostColor, token2.defaultGhostBorderColor, token2.colorTextDisabled, token2.colorBorder)), {
    [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign(Object.assign({
      color: token2.colorError,
      borderColor: token2.colorError
    }, genHoverActiveButtonStyle(token2.componentCls, {
      color: token2.colorErrorHover,
      borderColor: token2.colorErrorBorderHover
    }, {
      color: token2.colorErrorActive,
      borderColor: token2.colorErrorActive
    })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.colorError, token2.colorError, token2.colorTextDisabled, token2.colorBorder)), genSolidDisabledButtonStyle(token2))
  });
  var genPrimaryButtonStyle = (token2) => Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, genSolidButtonStyle(token2)), {
    color: token2.primaryColor,
    background: token2.colorPrimary,
    boxShadow: token2.primaryShadow
  }), genHoverActiveButtonStyle(token2.componentCls, {
    color: token2.colorTextLightSolid,
    background: token2.colorPrimaryHover
  }, {
    color: token2.colorTextLightSolid,
    background: token2.colorPrimaryActive
  })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.colorPrimary, token2.colorPrimary, token2.colorTextDisabled, token2.colorBorder, {
    color: token2.colorPrimaryHover,
    borderColor: token2.colorPrimaryHover
  }, {
    color: token2.colorPrimaryActive,
    borderColor: token2.colorPrimaryActive
  })), {
    [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign(Object.assign({
      background: token2.colorError,
      boxShadow: token2.dangerShadow,
      color: token2.dangerColor
    }, genHoverActiveButtonStyle(token2.componentCls, {
      background: token2.colorErrorHover
    }, {
      background: token2.colorErrorActive
    })), genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.colorError, token2.colorError, token2.colorTextDisabled, token2.colorBorder, {
      color: token2.colorErrorHover,
      borderColor: token2.colorErrorHover
    }, {
      color: token2.colorErrorActive,
      borderColor: token2.colorErrorActive
    })), genSolidDisabledButtonStyle(token2))
  });
  var genDashedButtonStyle = (token2) => Object.assign(Object.assign({}, genDefaultButtonStyle(token2)), {
    borderStyle: "dashed"
  });
  var genLinkButtonStyle = (token2) => Object.assign(Object.assign(Object.assign({
    color: token2.colorLink
  }, genHoverActiveButtonStyle(token2.componentCls, {
    color: token2.colorLinkHover,
    background: token2.linkHoverBg
  }, {
    color: token2.colorLinkActive
  })), genPureDisabledButtonStyle(token2)), {
    [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign({
      color: token2.colorError
    }, genHoverActiveButtonStyle(token2.componentCls, {
      color: token2.colorErrorHover
    }, {
      color: token2.colorErrorActive
    })), genPureDisabledButtonStyle(token2))
  });
  var genTextButtonStyle = (token2) => Object.assign(Object.assign(Object.assign({}, genHoverActiveButtonStyle(token2.componentCls, {
    color: token2.colorText,
    background: token2.textHoverBg
  }, {
    color: token2.colorText,
    background: token2.colorBgTextActive
  })), genPureDisabledButtonStyle(token2)), {
    [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign({
      color: token2.colorError
    }, genPureDisabledButtonStyle(token2)), genHoverActiveButtonStyle(token2.componentCls, {
      color: token2.colorErrorHover,
      background: token2.colorErrorBg
    }, {
      color: token2.colorErrorHover,
      background: token2.colorErrorBg
    }))
  });
  var genTypeButtonStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-default`]: genDefaultButtonStyle(token2),
      [`${componentCls}-primary`]: genPrimaryButtonStyle(token2),
      [`${componentCls}-dashed`]: genDashedButtonStyle(token2),
      [`${componentCls}-link`]: genLinkButtonStyle(token2),
      [`${componentCls}-text`]: genTextButtonStyle(token2),
      [`${componentCls}-ghost`]: genGhostButtonStyle(token2.componentCls, token2.ghostBg, token2.colorBgContainer, token2.colorBgContainer, token2.colorTextDisabled, token2.colorBorder)
    };
  };
  var genButtonStyle = function(token2) {
    let prefixCls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const {
      componentCls,
      controlHeight,
      fontSize,
      lineHeight,
      borderRadius,
      buttonPaddingHorizontal,
      iconCls,
      buttonPaddingVertical
    } = token2;
    const iconOnlyCls = `${componentCls}-icon-only`;
    return [
      {
        [`${prefixCls}`]: {
          fontSize,
          lineHeight,
          height: controlHeight,
          padding: `${unit(buttonPaddingVertical)} ${unit(buttonPaddingHorizontal)}`,
          borderRadius,
          [`&${iconOnlyCls}`]: {
            width: controlHeight,
            paddingInlineStart: 0,
            paddingInlineEnd: 0,
            [`&${componentCls}-round`]: {
              width: "auto"
            },
            [iconCls]: {
              fontSize: token2.buttonIconOnlyFontSize
            }
          },
          // Loading
          [`&${componentCls}-loading`]: {
            opacity: token2.opacityLoading,
            cursor: "default"
          },
          [`${componentCls}-loading-icon`]: {
            transition: `width ${token2.motionDurationSlow} ${token2.motionEaseInOut}, opacity ${token2.motionDurationSlow} ${token2.motionEaseInOut}`
          }
        }
      },
      // Shape - patch prefixCls again to override solid border radius style
      {
        [`${componentCls}${componentCls}-circle${prefixCls}`]: genCircleButtonStyle(token2)
      },
      {
        [`${componentCls}${componentCls}-round${prefixCls}`]: genRoundButtonStyle(token2)
      }
    ];
  };
  var genSizeBaseButtonStyle = (token2) => {
    const baseToken = merge2(token2, {
      fontSize: token2.contentFontSize,
      lineHeight: token2.contentLineHeight
    });
    return genButtonStyle(baseToken, token2.componentCls);
  };
  var genSizeSmallButtonStyle = (token2) => {
    const smallToken = merge2(token2, {
      controlHeight: token2.controlHeightSM,
      fontSize: token2.contentFontSizeSM,
      lineHeight: token2.contentLineHeightSM,
      padding: token2.paddingXS,
      buttonPaddingHorizontal: token2.paddingInlineSM,
      buttonPaddingVertical: token2.paddingBlockSM,
      borderRadius: token2.borderRadiusSM,
      buttonIconOnlyFontSize: token2.onlyIconSizeSM
    });
    return genButtonStyle(smallToken, `${token2.componentCls}-sm`);
  };
  var genSizeLargeButtonStyle = (token2) => {
    const largeToken = merge2(token2, {
      controlHeight: token2.controlHeightLG,
      fontSize: token2.contentFontSizeLG,
      lineHeight: token2.contentLineHeightLG,
      buttonPaddingHorizontal: token2.paddingInlineLG,
      buttonPaddingVertical: token2.paddingBlockLG,
      borderRadius: token2.borderRadiusLG,
      buttonIconOnlyFontSize: token2.onlyIconSizeLG
    });
    return genButtonStyle(largeToken, `${token2.componentCls}-lg`);
  };
  var genBlockButtonStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [componentCls]: {
        [`&${componentCls}-block`]: {
          width: "100%"
        }
      }
    };
  };
  var style_default3 = genStyleHooks("Button", (token2) => {
    const buttonToken = prepareToken(token2);
    return [
      // Shared
      genSharedButtonStyle(buttonToken),
      // Size
      genSizeBaseButtonStyle(buttonToken),
      genSizeSmallButtonStyle(buttonToken),
      genSizeLargeButtonStyle(buttonToken),
      // Block
      genBlockButtonStyle(buttonToken),
      // Group (type, ghost, danger, loading)
      genTypeButtonStyle(buttonToken),
      // Button Group
      group_default(buttonToken)
    ];
  }, prepareComponentToken, {
    unitless: {
      fontWeight: true,
      contentLineHeight: true,
      contentLineHeightSM: true,
      contentLineHeightLG: true
    }
  });

  // node_modules/antd/es/style/compact-item.js
  function compactItemBorder(token2, parentCls, options) {
    const {
      focusElCls,
      focus,
      borderElCls
    } = options;
    const childCombinator = borderElCls ? "> *" : "";
    const hoverEffects = ["hover", focus ? "focus" : null, "active"].filter(Boolean).map((n2) => `&:${n2} ${childCombinator}`).join(",");
    return {
      [`&-item:not(${parentCls}-last-item)`]: {
        marginInlineEnd: token2.calc(token2.lineWidth).mul(-1).equal()
      },
      "&-item": Object.assign(Object.assign({
        [hoverEffects]: {
          zIndex: 2
        }
      }, focusElCls ? {
        [`&${focusElCls}`]: {
          zIndex: 2
        }
      } : {}), {
        [`&[disabled] ${childCombinator}`]: {
          zIndex: 0
        }
      })
    };
  }
  function compactItemBorderRadius(prefixCls, parentCls, options) {
    const {
      borderElCls
    } = options;
    const childCombinator = borderElCls ? `> ${borderElCls}` : "";
    return {
      [`&-item:not(${parentCls}-first-item):not(${parentCls}-last-item) ${childCombinator}`]: {
        borderRadius: 0
      },
      [`&-item:not(${parentCls}-last-item)${parentCls}-first-item`]: {
        [`& ${childCombinator}, &${prefixCls}-sm ${childCombinator}, &${prefixCls}-lg ${childCombinator}`]: {
          borderStartEndRadius: 0,
          borderEndEndRadius: 0
        }
      },
      [`&-item:not(${parentCls}-first-item)${parentCls}-last-item`]: {
        [`& ${childCombinator}, &${prefixCls}-sm ${childCombinator}, &${prefixCls}-lg ${childCombinator}`]: {
          borderStartStartRadius: 0,
          borderEndStartRadius: 0
        }
      }
    };
  }
  function genCompactItemStyle(token2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      focus: true
    };
    const {
      componentCls
    } = token2;
    const compactCls = `${componentCls}-compact`;
    return {
      [compactCls]: Object.assign(Object.assign({}, compactItemBorder(token2, compactCls, options)), compactItemBorderRadius(componentCls, compactCls, options))
    };
  }

  // node_modules/antd/es/style/compact-item-vertical.js
  function compactItemVerticalBorder(token2, parentCls) {
    return {
      // border collapse
      [`&-item:not(${parentCls}-last-item)`]: {
        marginBottom: token2.calc(token2.lineWidth).mul(-1).equal()
      },
      "&-item": {
        "&:hover,&:focus,&:active": {
          zIndex: 2
        },
        "&[disabled]": {
          zIndex: 0
        }
      }
    };
  }
  function compactItemBorderVerticalRadius(prefixCls, parentCls) {
    return {
      [`&-item:not(${parentCls}-first-item):not(${parentCls}-last-item)`]: {
        borderRadius: 0
      },
      [`&-item${parentCls}-first-item:not(${parentCls}-last-item)`]: {
        [`&, &${prefixCls}-sm, &${prefixCls}-lg`]: {
          borderEndEndRadius: 0,
          borderEndStartRadius: 0
        }
      },
      [`&-item${parentCls}-last-item:not(${parentCls}-first-item)`]: {
        [`&, &${prefixCls}-sm, &${prefixCls}-lg`]: {
          borderStartStartRadius: 0,
          borderStartEndRadius: 0
        }
      }
    };
  }
  function genCompactItemVerticalStyle(token2) {
    const compactCls = `${token2.componentCls}-compact-vertical`;
    return {
      [compactCls]: Object.assign(Object.assign({}, compactItemVerticalBorder(token2, compactCls)), compactItemBorderVerticalRadius(token2.componentCls, compactCls))
    };
  }

  // node_modules/antd/es/button/style/compactCmp.js
  var genButtonCompactStyle = (token2) => {
    const {
      componentCls,
      calc
    } = token2;
    return {
      [componentCls]: {
        // Special styles for Primary Button
        [`&-compact-item${componentCls}-primary`]: {
          [`&:not([disabled]) + ${componentCls}-compact-item${componentCls}-primary:not([disabled])`]: {
            position: "relative",
            "&:before": {
              position: "absolute",
              top: calc(token2.lineWidth).mul(-1).equal(),
              insetInlineStart: calc(token2.lineWidth).mul(-1).equal(),
              display: "inline-block",
              width: token2.lineWidth,
              height: `calc(100% + ${unit(token2.lineWidth)} * 2)`,
              backgroundColor: token2.colorPrimaryHover,
              content: '""'
            }
          }
        },
        // Special styles for Primary Button
        "&-compact-vertical-item": {
          [`&${componentCls}-primary`]: {
            [`&:not([disabled]) + ${componentCls}-compact-vertical-item${componentCls}-primary:not([disabled])`]: {
              position: "relative",
              "&:before": {
                position: "absolute",
                top: calc(token2.lineWidth).mul(-1).equal(),
                insetInlineStart: calc(token2.lineWidth).mul(-1).equal(),
                display: "inline-block",
                width: `calc(100% + ${unit(token2.lineWidth)} * 2)`,
                height: token2.lineWidth,
                backgroundColor: token2.colorPrimaryHover,
                content: '""'
              }
            }
          }
        }
      }
    };
  };
  var compactCmp_default = genSubStyleComponent(["Button", "compact"], (token2) => {
    const buttonToken = prepareToken(token2);
    return [
      // Space Compact
      genCompactItemStyle(buttonToken),
      genCompactItemVerticalStyle(buttonToken),
      genButtonCompactStyle(buttonToken)
    ];
  }, prepareComponentToken);

  // node_modules/antd/es/button/button.js
  var __rest6 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function getLoadingConfig(loading) {
    if (typeof loading === "object" && loading) {
      let delay = loading === null || loading === void 0 ? void 0 : loading.delay;
      delay = !Number.isNaN(delay) && typeof delay === "number" ? delay : 0;
      return {
        loading: delay <= 0,
        delay
      };
    }
    return {
      loading: !!loading,
      delay: 0
    };
  }
  var InternalButton = (props, ref) => {
    var _a, _b;
    const {
      loading = false,
      prefixCls: customizePrefixCls,
      type: type4 = "default",
      danger,
      shape = "default",
      size: customizeSize,
      styles,
      disabled: customDisabled,
      className,
      rootClassName,
      children,
      icon,
      ghost = false,
      block = false,
      // React does not recognize the `htmlType` prop on a DOM element. Here we pick it out of `rest`.
      htmlType = "button",
      classNames: customClassNames,
      style: customStyle = {}
    } = props, rest = __rest6(props, ["loading", "prefixCls", "type", "danger", "shape", "size", "styles", "disabled", "className", "rootClassName", "children", "icon", "ghost", "block", "htmlType", "classNames", "style"]);
    const {
      getPrefixCls,
      autoInsertSpaceInButton,
      direction,
      button
    } = (0, import_react25.useContext)(ConfigContext);
    const prefixCls = getPrefixCls("btn", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default3(prefixCls);
    const disabled = (0, import_react25.useContext)(DisabledContext_default);
    const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    const groupSize = (0, import_react25.useContext)(GroupSizeContext);
    const loadingOrDelay = (0, import_react25.useMemo)(() => getLoadingConfig(loading), [loading]);
    const [innerLoading, setLoading] = (0, import_react25.useState)(loadingOrDelay.loading);
    const [hasTwoCNChar, setHasTwoCNChar] = (0, import_react25.useState)(false);
    const internalRef = /* @__PURE__ */ (0, import_react25.createRef)();
    const buttonRef = composeRef(ref, internalRef);
    const needInserted = import_react25.Children.count(children) === 1 && !icon && !isUnBorderedButtonType(type4);
    (0, import_react25.useEffect)(() => {
      let delayTimer = null;
      if (loadingOrDelay.delay > 0) {
        delayTimer = setTimeout(() => {
          delayTimer = null;
          setLoading(true);
        }, loadingOrDelay.delay);
      } else {
        setLoading(loadingOrDelay.loading);
      }
      function cleanupTimer() {
        if (delayTimer) {
          clearTimeout(delayTimer);
          delayTimer = null;
        }
      }
      return cleanupTimer;
    }, [loadingOrDelay]);
    (0, import_react25.useEffect)(() => {
      if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) {
        return;
      }
      const buttonText = buttonRef.current.textContent;
      if (needInserted && isTwoCNChar(buttonText)) {
        if (!hasTwoCNChar) {
          setHasTwoCNChar(true);
        }
      } else if (hasTwoCNChar) {
        setHasTwoCNChar(false);
      }
    }, [buttonRef]);
    const handleClick = (e3) => {
      const {
        onClick
      } = props;
      if (innerLoading || mergedDisabled) {
        e3.preventDefault();
        return;
      }
      onClick === null || onClick === void 0 ? void 0 : onClick(e3);
    };
    if (true) {
      const warning8 = devUseWarning("Button");
      true ? warning8(!(typeof icon === "string" && icon.length > 2), "breaking", `\`icon\` is using ReactNode instead of string naming in v4. Please check \`${icon}\` at https://ant.design/components/icon`) : void 0;
      true ? warning8(!(ghost && isUnBorderedButtonType(type4)), "usage", "`link` or `text` button can't be a `ghost` button.") : void 0;
    }
    const autoInsertSpace = autoInsertSpaceInButton !== false;
    const {
      compactSize,
      compactItemClassnames
    } = useCompactItemContext(prefixCls, direction);
    const sizeClassNameMap = {
      large: "lg",
      small: "sm",
      middle: void 0
    };
    const sizeFullName = useSize_default((ctxSize) => {
      var _a2, _b2;
      return (_b2 = (_a2 = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a2 !== void 0 ? _a2 : groupSize) !== null && _b2 !== void 0 ? _b2 : ctxSize;
    });
    const sizeCls = sizeFullName ? sizeClassNameMap[sizeFullName] || "" : "";
    const iconType = innerLoading ? "loading" : icon;
    const linkButtonRestProps = omit(rest, ["navigate"]);
    const classes = (0, import_classnames9.default)(prefixCls, hashId, cssVarCls, {
      [`${prefixCls}-${shape}`]: shape !== "default" && shape,
      [`${prefixCls}-${type4}`]: type4,
      [`${prefixCls}-${sizeCls}`]: sizeCls,
      [`${prefixCls}-icon-only`]: !children && children !== 0 && !!iconType,
      [`${prefixCls}-background-ghost`]: ghost && !isUnBorderedButtonType(type4),
      [`${prefixCls}-loading`]: innerLoading,
      [`${prefixCls}-two-chinese-chars`]: hasTwoCNChar && autoInsertSpace && !innerLoading,
      [`${prefixCls}-block`]: block,
      [`${prefixCls}-dangerous`]: !!danger,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, compactItemClassnames, className, rootClassName, button === null || button === void 0 ? void 0 : button.className);
    const fullStyle = Object.assign(Object.assign({}, button === null || button === void 0 ? void 0 : button.style), customStyle);
    const iconClasses = (0, import_classnames9.default)(customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.icon, (_a = button === null || button === void 0 ? void 0 : button.classNames) === null || _a === void 0 ? void 0 : _a.icon);
    const iconStyle = Object.assign(Object.assign({}, (styles === null || styles === void 0 ? void 0 : styles.icon) || {}), ((_b = button === null || button === void 0 ? void 0 : button.styles) === null || _b === void 0 ? void 0 : _b.icon) || {});
    const iconNode = icon && !innerLoading ? /* @__PURE__ */ import_react25.default.createElement(IconWrapper_default, {
      prefixCls,
      className: iconClasses,
      style: iconStyle
    }, icon) : /* @__PURE__ */ import_react25.default.createElement(LoadingIcon_default, {
      existIcon: !!icon,
      prefixCls,
      loading: !!innerLoading
    });
    const kids = children || children === 0 ? spaceChildren(children, needInserted && autoInsertSpace) : null;
    if (linkButtonRestProps.href !== void 0) {
      return wrapCSSVar(/* @__PURE__ */ import_react25.default.createElement("a", Object.assign({}, linkButtonRestProps, {
        className: (0, import_classnames9.default)(classes, {
          [`${prefixCls}-disabled`]: mergedDisabled
        }),
        href: mergedDisabled ? void 0 : linkButtonRestProps.href,
        style: fullStyle,
        onClick: handleClick,
        ref: buttonRef,
        tabIndex: mergedDisabled ? -1 : 0
      }), iconNode, kids));
    }
    let buttonNode = /* @__PURE__ */ import_react25.default.createElement("button", Object.assign({}, rest, {
      type: htmlType,
      className: classes,
      style: fullStyle,
      onClick: handleClick,
      disabled: mergedDisabled,
      ref: buttonRef
    }), iconNode, kids, !!compactItemClassnames && /* @__PURE__ */ import_react25.default.createElement(compactCmp_default, {
      key: "compact",
      prefixCls
    }));
    if (!isUnBorderedButtonType(type4)) {
      buttonNode = /* @__PURE__ */ import_react25.default.createElement(wave_default, {
        component: "Button",
        disabled: !!innerLoading
      }, buttonNode);
    }
    return wrapCSSVar(buttonNode);
  };
  var Button2 = /* @__PURE__ */ (0, import_react25.forwardRef)(InternalButton);
  if (true) {
    Button2.displayName = "Button";
  }
  Button2.Group = button_group_default;
  Button2.__ANT_BUTTON = true;
  var button_default = Button2;

  // node_modules/antd/es/button/index.js
  var button_default2 = button_default;

  // node_modules/antd/es/_util/ActionButton.js
  function isThenable2(thing) {
    return !!(thing && thing.then);
  }
  var ActionButton = (props) => {
    const {
      type: type4,
      children,
      prefixCls,
      buttonProps,
      close,
      autoFocus,
      emitEvent,
      isSilent,
      quitOnNullishReturnValue,
      actionFn
    } = props;
    const clickedRef = React62.useRef(false);
    const buttonRef = React62.useRef(null);
    const [loading, setLoading] = useSafeState(false);
    const onInternalClose = function() {
      close === null || close === void 0 ? void 0 : close.apply(void 0, arguments);
    };
    React62.useEffect(() => {
      let timeoutId = null;
      if (autoFocus) {
        timeoutId = setTimeout(() => {
          var _a;
          (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        });
      }
      return () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      };
    }, []);
    const handlePromiseOnOk = (returnValueOfOnOk) => {
      if (!isThenable2(returnValueOfOnOk)) {
        return;
      }
      setLoading(true);
      returnValueOfOnOk.then(function() {
        setLoading(false, true);
        onInternalClose.apply(void 0, arguments);
        clickedRef.current = false;
      }, (e3) => {
        setLoading(false, true);
        clickedRef.current = false;
        if (isSilent === null || isSilent === void 0 ? void 0 : isSilent()) {
          return;
        }
        return Promise.reject(e3);
      });
    };
    const onClick = (e3) => {
      if (clickedRef.current) {
        return;
      }
      clickedRef.current = true;
      if (!actionFn) {
        onInternalClose();
        return;
      }
      let returnValueOfOnOk;
      if (emitEvent) {
        returnValueOfOnOk = actionFn(e3);
        if (quitOnNullishReturnValue && !isThenable2(returnValueOfOnOk)) {
          clickedRef.current = false;
          onInternalClose(e3);
          return;
        }
      } else if (actionFn.length) {
        returnValueOfOnOk = actionFn(close);
        clickedRef.current = false;
      } else {
        returnValueOfOnOk = actionFn();
        if (!returnValueOfOnOk) {
          onInternalClose();
          return;
        }
      }
      handlePromiseOnOk(returnValueOfOnOk);
    };
    return /* @__PURE__ */ React62.createElement(button_default2, Object.assign({}, convertLegacyProps(type4), {
      onClick,
      loading,
      prefixCls
    }, buttonProps, {
      ref: buttonRef
    }), children);
  };
  var ActionButton_default = ActionButton;

  // node_modules/antd/es/modal/context.js
  var import_react26 = __toESM(require_react());
  var ModalContext = /* @__PURE__ */ import_react26.default.createContext({});
  var {
    Provider: ModalContextProvider
  } = ModalContext;

  // node_modules/antd/es/modal/components/ConfirmCancelBtn.js
  var ConfirmCancelBtn = () => {
    const {
      autoFocusButton,
      cancelButtonProps,
      cancelTextLocale,
      isSilent,
      mergedOkCancel,
      rootPrefixCls,
      close,
      onCancel,
      onConfirm
    } = (0, import_react27.useContext)(ModalContext);
    return mergedOkCancel ? /* @__PURE__ */ import_react27.default.createElement(ActionButton_default, {
      isSilent,
      actionFn: onCancel,
      close: function() {
        close === null || close === void 0 ? void 0 : close.apply(void 0, arguments);
        onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(false);
      },
      autoFocus: autoFocusButton === "cancel",
      buttonProps: cancelButtonProps,
      prefixCls: `${rootPrefixCls}-btn`
    }, cancelTextLocale) : null;
  };
  var ConfirmCancelBtn_default = ConfirmCancelBtn;

  // node_modules/antd/es/modal/components/ConfirmOkBtn.js
  var import_react28 = __toESM(require_react());
  var ConfirmOkBtn = () => {
    const {
      autoFocusButton,
      close,
      isSilent,
      okButtonProps,
      rootPrefixCls,
      okTextLocale,
      okType,
      onConfirm,
      onOk
    } = (0, import_react28.useContext)(ModalContext);
    return /* @__PURE__ */ import_react28.default.createElement(ActionButton_default, {
      isSilent,
      type: okType || "primary",
      actionFn: onOk,
      close: function() {
        close === null || close === void 0 ? void 0 : close.apply(void 0, arguments);
        onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(true);
      },
      autoFocus: autoFocusButton === "ok",
      buttonProps: okButtonProps,
      prefixCls: `${rootPrefixCls}-btn`
    }, okTextLocale);
  };
  var ConfirmOkBtn_default = ConfirmOkBtn;

  // node_modules/antd/es/modal/Modal.js
  var React93 = __toESM(require_react());
  var import_classnames14 = __toESM(require_classnames());

  // node_modules/@rc-component/portal/es/Portal.js
  var React69 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/@rc-component/portal/es/Context.js
  var React66 = __toESM(require_react());
  var OrderContext = /* @__PURE__ */ React66.createContext(null);
  var Context_default2 = OrderContext;

  // node_modules/@rc-component/portal/es/useDom.js
  var React67 = __toESM(require_react());
  var EMPTY_LIST = [];
  function useDom(render2, debug) {
    var _React$useState = React67.useState(function() {
      if (!canUseDom()) {
        return null;
      }
      var defaultEle = document.createElement("div");
      if (debug) {
        defaultEle.setAttribute("data-debug", debug);
      }
      return defaultEle;
    }), _React$useState2 = _slicedToArray(_React$useState, 1), ele = _React$useState2[0];
    var appendedRef = React67.useRef(false);
    var queueCreate = React67.useContext(Context_default2);
    var _React$useState3 = React67.useState(EMPTY_LIST), _React$useState4 = _slicedToArray(_React$useState3, 2), queue = _React$useState4[0], setQueue = _React$useState4[1];
    var mergedQueueCreate = queueCreate || (appendedRef.current ? void 0 : function(appendFn) {
      setQueue(function(origin) {
        var newQueue = [appendFn].concat(_toConsumableArray(origin));
        return newQueue;
      });
    });
    function append2() {
      if (!ele.parentElement) {
        document.body.appendChild(ele);
      }
      appendedRef.current = true;
    }
    function cleanup2() {
      var _ele$parentElement;
      (_ele$parentElement = ele.parentElement) === null || _ele$parentElement === void 0 ? void 0 : _ele$parentElement.removeChild(ele);
      appendedRef.current = false;
    }
    useLayoutEffect_default(function() {
      if (render2) {
        if (queueCreate) {
          queueCreate(append2);
        } else {
          append2();
        }
      } else {
        cleanup2();
      }
      return cleanup2;
    }, [render2]);
    useLayoutEffect_default(function() {
      if (queue.length) {
        queue.forEach(function(appendFn) {
          return appendFn();
        });
        setQueue(EMPTY_LIST);
      }
    }, [queue]);
    return [ele, mergedQueueCreate];
  }

  // node_modules/@rc-component/portal/es/useScrollLocker.js
  var React68 = __toESM(require_react());

  // node_modules/rc-util/es/getScrollBarSize.js
  var cached;
  function getScrollBarSize(fresh) {
    if (typeof document === "undefined") {
      return 0;
    }
    if (fresh || cached === void 0) {
      var inner = document.createElement("div");
      inner.style.width = "100%";
      inner.style.height = "200px";
      var outer = document.createElement("div");
      var outerStyle = outer.style;
      outerStyle.position = "absolute";
      outerStyle.top = "0";
      outerStyle.left = "0";
      outerStyle.pointerEvents = "none";
      outerStyle.visibility = "hidden";
      outerStyle.width = "200px";
      outerStyle.height = "150px";
      outerStyle.overflow = "hidden";
      outer.appendChild(inner);
      document.body.appendChild(outer);
      var widthContained = inner.offsetWidth;
      outer.style.overflow = "scroll";
      var widthScroll = inner.offsetWidth;
      if (widthContained === widthScroll) {
        widthScroll = outer.clientWidth;
      }
      document.body.removeChild(outer);
      cached = widthContained - widthScroll;
    }
    return cached;
  }
  function ensureSize(str) {
    var match2 = str.match(/^(.*)px$/);
    var value = Number(match2 === null || match2 === void 0 ? void 0 : match2[1]);
    return Number.isNaN(value) ? getScrollBarSize() : value;
  }
  function getTargetScrollBarSize(target) {
    if (typeof document === "undefined" || !target || !(target instanceof Element)) {
      return {
        width: 0,
        height: 0
      };
    }
    var _getComputedStyle = getComputedStyle(target, "::-webkit-scrollbar"), width = _getComputedStyle.width, height = _getComputedStyle.height;
    return {
      width: ensureSize(width),
      height: ensureSize(height)
    };
  }

  // node_modules/@rc-component/portal/es/util.js
  function isBodyOverflowing() {
    return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
  }

  // node_modules/@rc-component/portal/es/useScrollLocker.js
  var UNIQUE_ID = "rc-util-locker-".concat(Date.now());
  var uuid3 = 0;
  function useScrollLocker(lock) {
    var mergedLock = !!lock;
    var _React$useState = React68.useState(function() {
      uuid3 += 1;
      return "".concat(UNIQUE_ID, "_").concat(uuid3);
    }), _React$useState2 = _slicedToArray(_React$useState, 1), id = _React$useState2[0];
    useLayoutEffect_default(function() {
      if (mergedLock) {
        var scrollbarSize = getTargetScrollBarSize(document.body).width;
        var isOverflow = isBodyOverflowing();
        updateCSS("\nhtml body {\n  overflow-y: hidden;\n  ".concat(isOverflow ? "width: calc(100% - ".concat(scrollbarSize, "px);") : "", "\n}"), id);
      } else {
        removeCSS(id);
      }
      return function() {
        removeCSS(id);
      };
    }, [mergedLock, id]);
  }

  // node_modules/@rc-component/portal/es/mock.js
  var inline = false;
  function inlineMock(nextInline) {
    if (typeof nextInline === "boolean") {
      inline = nextInline;
    }
    return inline;
  }

  // node_modules/@rc-component/portal/es/Portal.js
  var getPortalContainer = function getPortalContainer2(getContainer2) {
    if (getContainer2 === false) {
      return false;
    }
    if (!canUseDom() || !getContainer2) {
      return null;
    }
    if (typeof getContainer2 === "string") {
      return document.querySelector(getContainer2);
    }
    if (typeof getContainer2 === "function") {
      return getContainer2();
    }
    return getContainer2;
  };
  var Portal = /* @__PURE__ */ React69.forwardRef(function(props, ref) {
    var open = props.open, autoLock = props.autoLock, getContainer2 = props.getContainer, debug = props.debug, _props$autoDestroy = props.autoDestroy, autoDestroy = _props$autoDestroy === void 0 ? true : _props$autoDestroy, children = props.children;
    var _React$useState = React69.useState(open), _React$useState2 = _slicedToArray(_React$useState, 2), shouldRender = _React$useState2[0], setShouldRender = _React$useState2[1];
    var mergedRender = shouldRender || open;
    if (true) {
      warning_default(canUseDom() || !open, "Portal only work in client side. Please call 'useEffect' to show Portal instead default render in SSR.");
    }
    React69.useEffect(function() {
      if (autoDestroy || open) {
        setShouldRender(open);
      }
    }, [open, autoDestroy]);
    var _React$useState3 = React69.useState(function() {
      return getPortalContainer(getContainer2);
    }), _React$useState4 = _slicedToArray(_React$useState3, 2), innerContainer = _React$useState4[0], setInnerContainer = _React$useState4[1];
    React69.useEffect(function() {
      var customizeContainer = getPortalContainer(getContainer2);
      setInnerContainer(customizeContainer !== null && customizeContainer !== void 0 ? customizeContainer : null);
    });
    var _useDom = useDom(mergedRender && !innerContainer, debug), _useDom2 = _slicedToArray(_useDom, 2), defaultContainer2 = _useDom2[0], queueCreate = _useDom2[1];
    var mergedContainer = innerContainer !== null && innerContainer !== void 0 ? innerContainer : defaultContainer2;
    useScrollLocker(autoLock && open && canUseDom() && (mergedContainer === defaultContainer2 || mergedContainer === document.body));
    var childRef = null;
    if (children && supportRef(children) && ref) {
      var _ref = children;
      childRef = _ref.ref;
    }
    var mergedRef = useComposeRef(childRef, ref);
    if (!mergedRender || !canUseDom() || innerContainer === void 0) {
      return null;
    }
    var renderInline = mergedContainer === false || inlineMock();
    var reffedChildren = children;
    if (ref) {
      reffedChildren = /* @__PURE__ */ React69.cloneElement(children, {
        ref: mergedRef
      });
    }
    return /* @__PURE__ */ React69.createElement(Context_default2.Provider, {
      value: queueCreate
    }, renderInline ? reffedChildren : /* @__PURE__ */ (0, import_react_dom2.createPortal)(reffedChildren, mergedContainer));
  });
  if (true) {
    Portal.displayName = "Portal";
  }
  var Portal_default = Portal;

  // node_modules/@rc-component/portal/es/index.js
  var es_default3 = Portal_default;

  // node_modules/rc-dialog/es/DialogWrap.js
  var React77 = __toESM(require_react());

  // node_modules/rc-dialog/es/context.js
  var React70 = __toESM(require_react());
  var RefContext = /* @__PURE__ */ React70.createContext({});

  // node_modules/rc-dialog/es/Dialog/index.js
  var import_classnames13 = __toESM(require_classnames());

  // node_modules/rc-util/es/hooks/useId.js
  var React71 = __toESM(require_react());
  function getUseId() {
    var fullClone5 = _objectSpread2({}, React71);
    return fullClone5.useId;
  }
  var uuid4 = 0;
  var useOriginId = getUseId();
  var useId_default = useOriginId ? (
    // Use React `useId`
    function useId2(id) {
      var reactId = useOriginId();
      if (id) {
        return id;
      }
      if (false) {
        return "test-id";
      }
      return reactId;
    }
  ) : (
    // Use compatible of `useId`
    function useCompatId(id) {
      var _React$useState = React71.useState("ssr-id"), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
      React71.useEffect(function() {
        var nextId = uuid4;
        uuid4 += 1;
        setInnerId("rc_unique_".concat(nextId));
      }, []);
      if (id) {
        return id;
      }
      if (false) {
        return "test-id";
      }
      return innerId;
    }
  );

  // node_modules/rc-dialog/es/Dialog/index.js
  var React76 = __toESM(require_react());
  var import_react31 = __toESM(require_react());

  // node_modules/rc-dialog/es/util.js
  function getMotionName(prefixCls, transitionName, animationName) {
    var motionName = transitionName;
    if (!motionName && animationName) {
      motionName = "".concat(prefixCls, "-").concat(animationName);
    }
    return motionName;
  }
  function getScroll2(w, top) {
    var ret = w["page".concat(top ? "Y" : "X", "Offset")];
    var method4 = "scroll".concat(top ? "Top" : "Left");
    if (typeof ret !== "number") {
      var d = w.document;
      ret = d.documentElement[method4];
      if (typeof ret !== "number") {
        ret = d.body[method4];
      }
    }
    return ret;
  }
  function offset(el) {
    var rect = el.getBoundingClientRect();
    var pos = {
      left: rect.left,
      top: rect.top
    };
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScroll2(w);
    pos.top += getScroll2(w, true);
    return pos;
  }

  // node_modules/rc-dialog/es/Dialog/Content/index.js
  var React74 = __toESM(require_react());
  var import_react30 = __toESM(require_react());
  var import_classnames11 = __toESM(require_classnames());

  // node_modules/rc-dialog/es/Dialog/Content/Panel.js
  var import_classnames10 = __toESM(require_classnames());
  var import_react29 = __toESM(require_react());

  // node_modules/rc-dialog/es/Dialog/Content/MemoChildren.js
  var React72 = __toESM(require_react());
  var MemoChildren_default = /* @__PURE__ */ React72.memo(function(_ref) {
    var children = _ref.children;
    return children;
  }, function(_, _ref2) {
    var shouldUpdate = _ref2.shouldUpdate;
    return !shouldUpdate;
  });

  // node_modules/rc-dialog/es/Dialog/Content/Panel.js
  var sentinelStyle = {
    width: 0,
    height: 0,
    overflow: "hidden",
    outline: "none"
  };
  var Panel = /* @__PURE__ */ import_react29.default.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, style2 = props.style, title = props.title, ariaId = props.ariaId, footer = props.footer, closable = props.closable, closeIcon = props.closeIcon, onClose = props.onClose, children = props.children, bodyStyle = props.bodyStyle, bodyProps = props.bodyProps, modalRender = props.modalRender, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, holderRef = props.holderRef, visible = props.visible, forceRender = props.forceRender, width = props.width, height = props.height, modalClassNames = props.classNames, modalStyles = props.styles;
    var _React$useContext = import_react29.default.useContext(RefContext), panelRef = _React$useContext.panel;
    var mergedRef = useComposeRef(holderRef, panelRef);
    var sentinelStartRef = (0, import_react29.useRef)();
    var sentinelEndRef = (0, import_react29.useRef)();
    import_react29.default.useImperativeHandle(ref, function() {
      return {
        focus: function focus() {
          var _sentinelStartRef$cur;
          (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 || _sentinelStartRef$cur.focus();
        },
        changeActive: function changeActive(next2) {
          var _document = document, activeElement = _document.activeElement;
          if (next2 && activeElement === sentinelEndRef.current) {
            sentinelStartRef.current.focus();
          } else if (!next2 && activeElement === sentinelStartRef.current) {
            sentinelEndRef.current.focus();
          }
        }
      };
    });
    var contentStyle = {};
    if (width !== void 0) {
      contentStyle.width = width;
    }
    if (height !== void 0) {
      contentStyle.height = height;
    }
    var footerNode;
    if (footer) {
      footerNode = /* @__PURE__ */ import_react29.default.createElement("div", {
        className: (0, import_classnames10.default)("".concat(prefixCls, "-footer"), modalClassNames === null || modalClassNames === void 0 ? void 0 : modalClassNames.footer),
        style: _objectSpread2({}, modalStyles === null || modalStyles === void 0 ? void 0 : modalStyles.footer)
      }, footer);
    }
    var headerNode;
    if (title) {
      headerNode = /* @__PURE__ */ import_react29.default.createElement("div", {
        className: (0, import_classnames10.default)("".concat(prefixCls, "-header"), modalClassNames === null || modalClassNames === void 0 ? void 0 : modalClassNames.header),
        style: _objectSpread2({}, modalStyles === null || modalStyles === void 0 ? void 0 : modalStyles.header)
      }, /* @__PURE__ */ import_react29.default.createElement("div", {
        className: "".concat(prefixCls, "-title"),
        id: ariaId
      }, title));
    }
    var closer;
    if (closable) {
      closer = /* @__PURE__ */ import_react29.default.createElement("button", {
        type: "button",
        onClick: onClose,
        "aria-label": "Close",
        className: "".concat(prefixCls, "-close")
      }, closeIcon || /* @__PURE__ */ import_react29.default.createElement("span", {
        className: "".concat(prefixCls, "-close-x")
      }));
    }
    var content = /* @__PURE__ */ import_react29.default.createElement("div", {
      className: (0, import_classnames10.default)("".concat(prefixCls, "-content"), modalClassNames === null || modalClassNames === void 0 ? void 0 : modalClassNames.content),
      style: modalStyles === null || modalStyles === void 0 ? void 0 : modalStyles.content
    }, closer, headerNode, /* @__PURE__ */ import_react29.default.createElement("div", _extends({
      className: (0, import_classnames10.default)("".concat(prefixCls, "-body"), modalClassNames === null || modalClassNames === void 0 ? void 0 : modalClassNames.body),
      style: _objectSpread2(_objectSpread2({}, bodyStyle), modalStyles === null || modalStyles === void 0 ? void 0 : modalStyles.body)
    }, bodyProps), children), footerNode);
    return /* @__PURE__ */ import_react29.default.createElement("div", {
      key: "dialog-element",
      role: "dialog",
      "aria-labelledby": title ? ariaId : null,
      "aria-modal": "true",
      ref: mergedRef,
      style: _objectSpread2(_objectSpread2({}, style2), contentStyle),
      className: (0, import_classnames10.default)(prefixCls, className),
      onMouseDown,
      onMouseUp
    }, /* @__PURE__ */ import_react29.default.createElement("div", {
      tabIndex: 0,
      ref: sentinelStartRef,
      style: sentinelStyle,
      "aria-hidden": "true"
    }), /* @__PURE__ */ import_react29.default.createElement(MemoChildren_default, {
      shouldUpdate: visible || forceRender
    }, modalRender ? modalRender(content) : content), /* @__PURE__ */ import_react29.default.createElement("div", {
      tabIndex: 0,
      ref: sentinelEndRef,
      style: sentinelStyle,
      "aria-hidden": "true"
    }));
  });
  if (true) {
    Panel.displayName = "Panel";
  }
  var Panel_default = Panel;

  // node_modules/rc-dialog/es/Dialog/Content/index.js
  var Content = /* @__PURE__ */ React74.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, title = props.title, style2 = props.style, className = props.className, visible = props.visible, forceRender = props.forceRender, destroyOnClose = props.destroyOnClose, motionName = props.motionName, ariaId = props.ariaId, onVisibleChanged = props.onVisibleChanged, mousePosition2 = props.mousePosition;
    var dialogRef = (0, import_react30.useRef)();
    var _React$useState = React74.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), transformOrigin = _React$useState2[0], setTransformOrigin = _React$useState2[1];
    var contentStyle = {};
    if (transformOrigin) {
      contentStyle.transformOrigin = transformOrigin;
    }
    function onPrepare() {
      var elementOffset = offset(dialogRef.current);
      setTransformOrigin(mousePosition2 ? "".concat(mousePosition2.x - elementOffset.left, "px ").concat(mousePosition2.y - elementOffset.top, "px") : "");
    }
    return /* @__PURE__ */ React74.createElement(es_default2, {
      visible,
      onVisibleChanged,
      onAppearPrepare: onPrepare,
      onEnterPrepare: onPrepare,
      forceRender,
      motionName,
      removeOnLeave: destroyOnClose,
      ref: dialogRef
    }, function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      return /* @__PURE__ */ React74.createElement(Panel_default, _extends({}, props, {
        ref,
        title,
        ariaId,
        prefixCls,
        holderRef: motionRef,
        style: _objectSpread2(_objectSpread2(_objectSpread2({}, motionStyle), style2), contentStyle),
        className: (0, import_classnames11.default)(className, motionClassName)
      }));
    });
  });
  Content.displayName = "Content";
  var Content_default = Content;

  // node_modules/rc-dialog/es/Dialog/Mask.js
  var React75 = __toESM(require_react());
  var import_classnames12 = __toESM(require_classnames());
  function Mask(props) {
    var prefixCls = props.prefixCls, style2 = props.style, visible = props.visible, maskProps = props.maskProps, motionName = props.motionName, className = props.className;
    return /* @__PURE__ */ React75.createElement(es_default2, {
      key: "mask",
      visible,
      motionName,
      leavedClassName: "".concat(prefixCls, "-mask-hidden")
    }, function(_ref, ref) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      return /* @__PURE__ */ React75.createElement("div", _extends({
        ref,
        style: _objectSpread2(_objectSpread2({}, motionStyle), style2),
        className: (0, import_classnames12.default)("".concat(prefixCls, "-mask"), motionClassName, className)
      }, maskProps));
    });
  }

  // node_modules/rc-dialog/es/Dialog/index.js
  function Dialog(props) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dialog" : _props$prefixCls, zIndex = props.zIndex, _props$visible = props.visible, visible = _props$visible === void 0 ? false : _props$visible, _props$keyboard = props.keyboard, keyboard = _props$keyboard === void 0 ? true : _props$keyboard, _props$focusTriggerAf = props.focusTriggerAfterClose, focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf, wrapStyle = props.wrapStyle, wrapClassName = props.wrapClassName, wrapProps = props.wrapProps, onClose = props.onClose, afterOpenChange = props.afterOpenChange, afterClose = props.afterClose, transitionName = props.transitionName, animation = props.animation, _props$closable = props.closable, closable = _props$closable === void 0 ? true : _props$closable, _props$mask = props.mask, mask = _props$mask === void 0 ? true : _props$mask, maskTransitionName = props.maskTransitionName, maskAnimation = props.maskAnimation, _props$maskClosable = props.maskClosable, maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable, maskStyle = props.maskStyle, maskProps = props.maskProps, rootClassName = props.rootClassName, modalClassNames = props.classNames, modalStyles = props.styles;
    if (true) {
      ["wrapStyle", "bodyStyle", "maskStyle"].forEach(function(prop) {
        warning2(!(prop in props), "".concat(prop, " is deprecated, please use styles instead."));
      });
      if ("wrapClassName" in props) {
        warning2(false, "wrapClassName is deprecated, please use classNames instead.");
      }
    }
    var lastOutSideActiveElementRef = (0, import_react31.useRef)();
    var wrapperRef = (0, import_react31.useRef)();
    var contentRef = (0, import_react31.useRef)();
    var _React$useState = React76.useState(visible), _React$useState2 = _slicedToArray(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1];
    var ariaId = useId_default();
    function saveLastOutSideActiveElementRef() {
      if (!contains(wrapperRef.current, document.activeElement)) {
        lastOutSideActiveElementRef.current = document.activeElement;
      }
    }
    function focusDialogContent() {
      if (!contains(wrapperRef.current, document.activeElement)) {
        var _contentRef$current;
        (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();
      }
    }
    function onDialogVisibleChanged(newVisible) {
      if (newVisible) {
        focusDialogContent();
      } else {
        setAnimatedVisible(false);
        if (mask && lastOutSideActiveElementRef.current && focusTriggerAfterClose) {
          try {
            lastOutSideActiveElementRef.current.focus({
              preventScroll: true
            });
          } catch (e3) {
          }
          lastOutSideActiveElementRef.current = null;
        }
        if (animatedVisible) {
          afterClose === null || afterClose === void 0 || afterClose();
        }
      }
      afterOpenChange === null || afterOpenChange === void 0 || afterOpenChange(newVisible);
    }
    function onInternalClose(e3) {
      onClose === null || onClose === void 0 || onClose(e3);
    }
    var contentClickRef = (0, import_react31.useRef)(false);
    var contentTimeoutRef = (0, import_react31.useRef)();
    var onContentMouseDown = function onContentMouseDown2() {
      clearTimeout(contentTimeoutRef.current);
      contentClickRef.current = true;
    };
    var onContentMouseUp = function onContentMouseUp2() {
      contentTimeoutRef.current = setTimeout(function() {
        contentClickRef.current = false;
      });
    };
    var onWrapperClick = null;
    if (maskClosable) {
      onWrapperClick = function onWrapperClick2(e3) {
        if (contentClickRef.current) {
          contentClickRef.current = false;
        } else if (wrapperRef.current === e3.target) {
          onInternalClose(e3);
        }
      };
    }
    function onWrapperKeyDown(e3) {
      if (keyboard && e3.keyCode === KeyCode_default.ESC) {
        e3.stopPropagation();
        onInternalClose(e3);
        return;
      }
      if (visible) {
        if (e3.keyCode === KeyCode_default.TAB) {
          contentRef.current.changeActive(!e3.shiftKey);
        }
      }
    }
    (0, import_react31.useEffect)(function() {
      if (visible) {
        setAnimatedVisible(true);
        saveLastOutSideActiveElementRef();
      }
    }, [visible]);
    (0, import_react31.useEffect)(function() {
      return function() {
        clearTimeout(contentTimeoutRef.current);
      };
    }, []);
    return /* @__PURE__ */ React76.createElement("div", _extends({
      className: (0, import_classnames13.default)("".concat(prefixCls, "-root"), rootClassName)
    }, pickAttrs(props, {
      data: true
    })), /* @__PURE__ */ React76.createElement(Mask, {
      prefixCls,
      visible: mask && visible,
      motionName: getMotionName(prefixCls, maskTransitionName, maskAnimation),
      style: _objectSpread2(_objectSpread2({
        zIndex
      }, maskStyle), modalStyles === null || modalStyles === void 0 ? void 0 : modalStyles.mask),
      maskProps,
      className: modalClassNames === null || modalClassNames === void 0 ? void 0 : modalClassNames.mask
    }), /* @__PURE__ */ React76.createElement("div", _extends({
      tabIndex: -1,
      onKeyDown: onWrapperKeyDown,
      className: (0, import_classnames13.default)("".concat(prefixCls, "-wrap"), wrapClassName, modalClassNames === null || modalClassNames === void 0 ? void 0 : modalClassNames.wrapper),
      ref: wrapperRef,
      onClick: onWrapperClick,
      style: _objectSpread2(_objectSpread2(_objectSpread2({
        zIndex
      }, wrapStyle), modalStyles === null || modalStyles === void 0 ? void 0 : modalStyles.wrapper), {}, {
        display: !animatedVisible ? "none" : null
      })
    }, wrapProps), /* @__PURE__ */ React76.createElement(Content_default, _extends({}, props, {
      onMouseDown: onContentMouseDown,
      onMouseUp: onContentMouseUp,
      ref: contentRef,
      closable,
      ariaId,
      prefixCls,
      visible: visible && animatedVisible,
      onClose: onInternalClose,
      onVisibleChanged: onDialogVisibleChanged,
      motionName: getMotionName(prefixCls, transitionName, animation)
    }))));
  }

  // node_modules/rc-dialog/es/DialogWrap.js
  var DialogWrap = function DialogWrap2(props) {
    var visible = props.visible, getContainer2 = props.getContainer, forceRender = props.forceRender, _props$destroyOnClose = props.destroyOnClose, destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose, _afterClose = props.afterClose, panelRef = props.panelRef;
    var _React$useState = React77.useState(visible), _React$useState2 = _slicedToArray(_React$useState, 2), animatedVisible = _React$useState2[0], setAnimatedVisible = _React$useState2[1];
    var refContext = React77.useMemo(function() {
      return {
        panel: panelRef
      };
    }, [panelRef]);
    React77.useEffect(function() {
      if (visible) {
        setAnimatedVisible(true);
      }
    }, [visible]);
    if (!forceRender && destroyOnClose && !animatedVisible) {
      return null;
    }
    return /* @__PURE__ */ React77.createElement(RefContext.Provider, {
      value: refContext
    }, /* @__PURE__ */ React77.createElement(es_default3, {
      open: visible || forceRender || animatedVisible,
      autoDestroy: false,
      getContainer: getContainer2,
      autoLock: visible || animatedVisible
    }, /* @__PURE__ */ React77.createElement(Dialog, _extends({}, props, {
      destroyOnClose,
      afterClose: function afterClose() {
        _afterClose === null || _afterClose === void 0 || _afterClose();
        setAnimatedVisible(false);
      }
    }))));
  };
  DialogWrap.displayName = "Dialog";
  var DialogWrap_default = DialogWrap;

  // node_modules/rc-dialog/es/index.js
  var es_default4 = DialogWrap_default;

  // node_modules/antd/es/_util/hooks/useClosable.js
  var import_react32 = __toESM(require_react());
  function useInnerClosable(closable, closeIcon, defaultClosable) {
    if (typeof closable === "boolean") {
      return closable;
    }
    if (closeIcon === void 0) {
      return !!defaultClosable;
    }
    return closeIcon !== false && closeIcon !== null;
  }
  function useClosable(closable, closeIcon, customCloseIconRender) {
    let defaultCloseIcon = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : /* @__PURE__ */ import_react32.default.createElement(CloseOutlined_default2, null);
    let defaultClosable = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    const mergedClosable = useInnerClosable(closable, closeIcon, defaultClosable);
    if (!mergedClosable) {
      return [false, null];
    }
    const mergedCloseIcon = typeof closeIcon === "boolean" || closeIcon === void 0 || closeIcon === null ? defaultCloseIcon : closeIcon;
    return [true, customCloseIconRender ? customCloseIconRender(mergedCloseIcon) : mergedCloseIcon];
  }
  var useClosable_default = useClosable;

  // node_modules/rc-util/es/Dom/styleChecker.js
  var isStyleNameSupport = function isStyleNameSupport2(styleName) {
    if (canUseDom() && window.document.documentElement) {
      var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
      var documentElement = window.document.documentElement;
      return styleNameList.some(function(name) {
        return name in documentElement.style;
      });
    }
    return false;
  };
  var isStyleValueSupport = function isStyleValueSupport2(styleName, value) {
    if (!isStyleNameSupport(styleName)) {
      return false;
    }
    var ele = document.createElement("div");
    var origin = ele.style[styleName];
    ele.style[styleName] = value;
    return ele.style[styleName] !== origin;
  };
  function isStyleSupport(styleName, styleValue) {
    if (!Array.isArray(styleName) && styleValue !== void 0) {
      return isStyleValueSupport(styleName, styleValue);
    }
    return isStyleNameSupport(styleName);
  }

  // node_modules/antd/es/_util/styleChecker.js
  var canUseDocElement = () => canUseDom() && window.document.documentElement;

  // node_modules/antd/es/form/context.js
  var React88 = __toESM(require_react());
  var import_react34 = __toESM(require_react());

  // node_modules/rc-field-form/es/index.js
  var React87 = __toESM(require_react());

  // node_modules/rc-field-form/es/Field.js
  var React82 = __toESM(require_react());

  // node_modules/rc-field-form/es/FieldContext.js
  var React79 = __toESM(require_react());
  var HOOK_MARK = "RC_FORM_INTERNAL_HOOKS";
  var warningFunc = function warningFunc2() {
    warning_default(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
  };
  var Context2 = /* @__PURE__ */ React79.createContext({
    getFieldValue: warningFunc,
    getFieldsValue: warningFunc,
    getFieldError: warningFunc,
    getFieldWarning: warningFunc,
    getFieldsError: warningFunc,
    isFieldsTouched: warningFunc,
    isFieldTouched: warningFunc,
    isFieldValidating: warningFunc,
    isFieldsValidating: warningFunc,
    resetFields: warningFunc,
    setFields: warningFunc,
    setFieldValue: warningFunc,
    setFieldsValue: warningFunc,
    validateFields: warningFunc,
    submit: warningFunc,
    getInternalHooks: function getInternalHooks() {
      warningFunc();
      return {
        dispatch: warningFunc,
        initEntityValue: warningFunc,
        registerField: warningFunc,
        useSubscribe: warningFunc,
        setInitialValues: warningFunc,
        destroyForm: warningFunc,
        setCallbacks: warningFunc,
        registerWatch: warningFunc,
        getFields: warningFunc,
        setValidateMessages: warningFunc,
        setPreserve: warningFunc,
        getInitialValue: warningFunc
      };
    }
  });
  var FieldContext_default = Context2;

  // node_modules/rc-field-form/es/ListContext.js
  var React80 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React80.createContext(null);
  var ListContext_default = ListContext;

  // node_modules/rc-field-form/es/utils/typeUtil.js
  function toArray2(value) {
    if (value === void 0 || value === null) {
      return [];
    }
    return Array.isArray(value) ? value : [value];
  }
  function isFormInstance(form) {
    return form && !!form._init;
  }

  // node_modules/async-validator/dist-web/index.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf2(subClass, superClass);
  }
  function _getPrototypeOf2(o3) {
    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf2(o3);
  }
  function _setPrototypeOf2(o3, p) {
    _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o4, p2) {
      o4.__proto__ = p2;
      return o4;
    };
    return _setPrototypeOf2(o3, p);
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct2()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct2(Parent2, args2, Class2) {
        var a = [null];
        a.push.apply(a, args2);
        var Constructor = Function.bind.apply(Parent2, a);
        var instance = new Constructor();
        if (Class2)
          _setPrototypeOf2(instance, Class2.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
    _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
      if (Class2 === null || !_isNativeFunction(Class2))
        return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2))
          return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return _construct(Class2, arguments, _getPrototypeOf2(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf2(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
  }
  var formatRegExp = /%[sdj%]/g;
  var warning5 = function warning6() {
  };
  if (typeof process !== "undefined" && process.env && true && typeof window !== "undefined" && typeof document !== "undefined") {
    warning5 = function warning8(type4, errors2) {
      if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
        if (errors2.every(function(e3) {
          return typeof e3 === "string";
        })) {
          console.warn(type4, errors2);
        }
      }
    };
  }
  function convertFieldsError(errors2) {
    if (!errors2 || !errors2.length)
      return null;
    var fields = {};
    errors2.forEach(function(error) {
      var field = error.field;
      fields[field] = fields[field] || [];
      fields[field].push(error);
    });
    return fields;
  }
  function format(template) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var i = 0;
    var len = args.length;
    if (typeof template === "function") {
      return template.apply(null, args);
    }
    if (typeof template === "string") {
      var str = template.replace(formatRegExp, function(x) {
        if (x === "%%") {
          return "%";
        }
        if (i >= len) {
          return x;
        }
        switch (x) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
            break;
          default:
            return x;
        }
      });
      return str;
    }
    return template;
  }
  function isNativeStringType(type4) {
    return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
  }
  function isEmptyValue(value, type4) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (type4 === "array" && Array.isArray(value) && !value.length) {
      return true;
    }
    if (isNativeStringType(type4) && typeof value === "string" && !value) {
      return true;
    }
    return false;
  }
  function asyncParallelArray(arr, func, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;
    function count(errors2) {
      results.push.apply(results, errors2 || []);
      total++;
      if (total === arrLength) {
        callback(results);
      }
    }
    arr.forEach(function(a) {
      func(a, count);
    });
  }
  function asyncSerialArray(arr, func, callback) {
    var index2 = 0;
    var arrLength = arr.length;
    function next2(errors2) {
      if (errors2 && errors2.length) {
        callback(errors2);
        return;
      }
      var original = index2;
      index2 = index2 + 1;
      if (original < arrLength) {
        func(arr[original], next2);
      } else {
        callback([]);
      }
    }
    next2([]);
  }
  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function(k) {
      ret.push.apply(ret, objArr[k] || []);
    });
    return ret;
  }
  var AsyncValidationError = /* @__PURE__ */ function(_Error) {
    _inheritsLoose(AsyncValidationError2, _Error);
    function AsyncValidationError2(errors2, fields) {
      var _this;
      _this = _Error.call(this, "Async Validation Error") || this;
      _this.errors = errors2;
      _this.fields = fields;
      return _this;
    }
    return AsyncValidationError2;
  }(/* @__PURE__ */ _wrapNativeSuper(Error));
  function asyncMap(objArr, option, func, callback, source) {
    if (option.first) {
      var _pending = new Promise(function(resolve, reject) {
        var next2 = function next3(errors2) {
          callback(errors2);
          return errors2.length ? reject(new AsyncValidationError(errors2, convertFieldsError(errors2))) : resolve(source);
        };
        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func, next2);
      });
      _pending["catch"](function(e3) {
        return e3;
      });
      return _pending;
    }
    var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function(resolve, reject) {
      var next2 = function next3(errors2) {
        results.push.apply(results, errors2);
        total++;
        if (total === objArrLength) {
          callback(results);
          return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
        }
      };
      if (!objArrKeys.length) {
        callback(results);
        resolve(source);
      }
      objArrKeys.forEach(function(key) {
        var arr = objArr[key];
        if (firstFields.indexOf(key) !== -1) {
          asyncSerialArray(arr, func, next2);
        } else {
          asyncParallelArray(arr, func, next2);
        }
      });
    });
    pending["catch"](function(e3) {
      return e3;
    });
    return pending;
  }
  function isErrorObj(obj) {
    return !!(obj && obj.message !== void 0);
  }
  function getValue2(value, path2) {
    var v = value;
    for (var i = 0; i < path2.length; i++) {
      if (v == void 0) {
        return v;
      }
      v = v[path2[i]];
    }
    return v;
  }
  function complementError(rule, source) {
    return function(oe) {
      var fieldValue;
      if (rule.fullFields) {
        fieldValue = getValue2(source, rule.fullFields);
      } else {
        fieldValue = source[oe.field || rule.fullField];
      }
      if (isErrorObj(oe)) {
        oe.field = oe.field || rule.fullField;
        oe.fieldValue = fieldValue;
        return oe;
      }
      return {
        message: typeof oe === "function" ? oe() : oe,
        fieldValue,
        field: oe.field || rule.fullField
      };
    };
  }
  function deepMerge(target, source) {
    if (source) {
      for (var s in source) {
        if (source.hasOwnProperty(s)) {
          var value = source[s];
          if (typeof value === "object" && typeof target[s] === "object") {
            target[s] = _extends2({}, target[s], value);
          } else {
            target[s] = value;
          }
        }
      }
    }
    return target;
  }
  var required$1 = function required(rule, value, source, errors2, options, type4) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
      errors2.push(format(options.messages.required, rule.fullField));
    }
  };
  var whitespace2 = function whitespace3(rule, value, source, errors2, options) {
    if (/^\s+$/.test(value) || value === "") {
      errors2.push(format(options.messages.whitespace, rule.fullField));
    }
  };
  var urlReg;
  var getUrlRegex = function() {
    if (urlReg) {
      return urlReg;
    }
    var word = "[a-fA-F\\d:]";
    var b = function b2(options) {
      return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
    };
    var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
    var v6seg = "[a-fA-F\\d]{1,4}";
    var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
    var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
    var v4exact = new RegExp("^" + v4 + "$");
    var v6exact = new RegExp("^" + v6 + "$");
    var ip = function ip2(options) {
      return options && options.exact ? v46Exact : new RegExp("(?:" + b(options) + v4 + b(options) + ")|(?:" + b(options) + v6 + b(options) + ")", "g");
    };
    ip.v4 = function(options) {
      return options && options.exact ? v4exact : new RegExp("" + b(options) + v4 + b(options), "g");
    };
    ip.v6 = function(options) {
      return options && options.exact ? v6exact : new RegExp("" + b(options) + v6 + b(options), "g");
    };
    var protocol = "(?:(?:[a-z]+:)?//)";
    var auth = "(?:\\S+(?::\\S*)?@)?";
    var ipv4 = ip.v4().source;
    var ipv6 = ip.v6().source;
    var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
    var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
    var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
    var port = "(?::\\d{2,5})?";
    var path2 = '(?:[/?#][^\\s"]*)?';
    var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host + domain + tld + ")" + port + path2;
    urlReg = new RegExp("(?:^" + regex + "$)", "i");
    return urlReg;
  };
  var pattern$2 = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
    // url: new RegExp(
    //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
    //   'i',
    // ),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array(value) {
      return Array.isArray(value);
    },
    regexp: function regexp(value) {
      if (value instanceof RegExp) {
        return true;
      }
      try {
        return !!new RegExp(value);
      } catch (e3) {
        return false;
      }
    },
    date: function date(value) {
      return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
    },
    number: function number(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof value === "number";
    },
    object: function object(value) {
      return typeof value === "object" && !types.array(value);
    },
    method: function method(value) {
      return typeof value === "function";
    },
    email: function email(value) {
      return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
    },
    url: function url(value) {
      return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
    },
    hex: function hex(value) {
      return typeof value === "string" && !!value.match(pattern$2.hex);
    }
  };
  var type$1 = function type(rule, value, source, errors2, options) {
    if (rule.required && value === void 0) {
      required$1(rule, value, source, errors2, options);
      return;
    }
    var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    var ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors2.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } else if (ruleType && typeof value !== rule.type) {
      errors2.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  };
  var range = function range2(rule, value, source, errors2, options) {
    var len = typeof rule.len === "number";
    var min = typeof rule.min === "number";
    var max = typeof rule.max === "number";
    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key = null;
    var num = typeof value === "number";
    var str = typeof value === "string";
    var arr = Array.isArray(value);
    if (num) {
      key = "number";
    } else if (str) {
      key = "string";
    } else if (arr) {
      key = "array";
    }
    if (!key) {
      return false;
    }
    if (arr) {
      val = value.length;
    }
    if (str) {
      val = value.replace(spRegexp, "_").length;
    }
    if (len) {
      if (val !== rule.len) {
        errors2.push(format(options.messages[key].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors2.push(format(options.messages[key].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors2.push(format(options.messages[key].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors2.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  };
  var ENUM$1 = "enum";
  var enumerable$1 = function enumerable(rule, value, source, errors2, options) {
    rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
    if (rule[ENUM$1].indexOf(value) === -1) {
      errors2.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
    }
  };
  var pattern$1 = function pattern(rule, value, source, errors2, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex = 0;
        if (!rule.pattern.test(value)) {
          errors2.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === "string") {
        var _pattern = new RegExp(rule.pattern);
        if (!_pattern.test(value)) {
          errors2.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  };
  var rules = {
    required: required$1,
    whitespace: whitespace2,
    type: type$1,
    range,
    "enum": enumerable$1,
    pattern: pattern$1
  };
  var string = function string2(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options, "string");
      if (!isEmptyValue(value, "string")) {
        rules.type(rule, value, source, errors2, options);
        rules.range(rule, value, source, errors2, options);
        rules.pattern(rule, value, source, errors2, options);
        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors2, options);
        }
      }
    }
    callback(errors2);
  };
  var method2 = function method3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var number2 = function number3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (value === "") {
        value = void 0;
      }
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors2, options);
        rules.range(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var _boolean = function _boolean2(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var regexp2 = function regexp3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var integer2 = function integer3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors2, options);
        rules.range(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var floatFn = function floatFn2(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors2, options);
        rules.range(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var array2 = function array3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if ((value === void 0 || value === null) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options, "array");
      if (value !== void 0 && value !== null) {
        rules.type(rule, value, source, errors2, options);
        rules.range(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var object2 = function object3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var ENUM = "enum";
  var enumerable2 = function enumerable3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (value !== void 0) {
        rules[ENUM](rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var pattern2 = function pattern3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (!isEmptyValue(value, "string")) {
        rules.pattern(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var date2 = function date3(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "date") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
      if (!isEmptyValue(value, "date")) {
        var dateObject;
        if (value instanceof Date) {
          dateObject = value;
        } else {
          dateObject = new Date(value);
        }
        rules.type(rule, dateObject, source, errors2, options);
        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors2, options);
        }
      }
    }
    callback(errors2);
  };
  var required2 = function required3(rule, value, callback, source, options) {
    var errors2 = [];
    var type4 = Array.isArray(value) ? "array" : typeof value;
    rules.required(rule, value, source, errors2, options, type4);
    callback(errors2);
  };
  var type2 = function type3(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options, ruleType);
      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors2, options);
      }
    }
    callback(errors2);
  };
  var any = function any2(rule, value, callback, source, options) {
    var errors2 = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors2, options);
    }
    callback(errors2);
  };
  var validators = {
    string,
    method: method2,
    number: number2,
    "boolean": _boolean,
    regexp: regexp2,
    integer: integer2,
    "float": floatFn,
    array: array2,
    object: object2,
    "enum": enumerable2,
    pattern: pattern2,
    date: date2,
    url: type2,
    hex: type2,
    email: type2,
    required: required2,
    any
  };
  function newMessages() {
    return {
      "default": "Validation error on field %s",
      required: "%s is required",
      "enum": "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        format: "%s date %s is invalid for format %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (function)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        "boolean": "%s is not a %s",
        integer: "%s is not an %s",
        "float": "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s in length",
        min: "%s cannot be less than %s in length",
        max: "%s cannot be greater than %s in length",
        range: "%s must be between %s and %s in length"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: function clone() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();
  var Schema = /* @__PURE__ */ function() {
    function Schema2(descriptor) {
      this.rules = null;
      this._messages = messages;
      this.define(descriptor);
    }
    var _proto = Schema2.prototype;
    _proto.define = function define2(rules2) {
      var _this = this;
      if (!rules2) {
        throw new Error("Cannot configure a schema with no rules");
      }
      if (typeof rules2 !== "object" || Array.isArray(rules2)) {
        throw new Error("Rules must be an object");
      }
      this.rules = {};
      Object.keys(rules2).forEach(function(name) {
        var item = rules2[name];
        _this.rules[name] = Array.isArray(item) ? item : [item];
      });
    };
    _proto.messages = function messages2(_messages) {
      if (_messages) {
        this._messages = deepMerge(newMessages(), _messages);
      }
      return this._messages;
    };
    _proto.validate = function validate(source_, o3, oc) {
      var _this2 = this;
      if (o3 === void 0) {
        o3 = {};
      }
      if (oc === void 0) {
        oc = function oc2() {
        };
      }
      var source = source_;
      var options = o3;
      var callback = oc;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback(null, source);
        }
        return Promise.resolve(source);
      }
      function complete(results) {
        var errors2 = [];
        var fields = {};
        function add(e3) {
          if (Array.isArray(e3)) {
            var _errors;
            errors2 = (_errors = errors2).concat.apply(_errors, e3);
          } else {
            errors2.push(e3);
          }
        }
        for (var i = 0; i < results.length; i++) {
          add(results[i]);
        }
        if (!errors2.length) {
          callback(null, source);
        } else {
          fields = convertFieldsError(errors2);
          callback(errors2, fields);
        }
      }
      if (options.messages) {
        var messages$1 = this.messages();
        if (messages$1 === messages) {
          messages$1 = newMessages();
        }
        deepMerge(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }
      var series = {};
      var keys2 = options.keys || Object.keys(this.rules);
      keys2.forEach(function(z) {
        var arr = _this2.rules[z];
        var value = source[z];
        arr.forEach(function(r2) {
          var rule = r2;
          if (typeof rule.transform === "function") {
            if (source === source_) {
              source = _extends2({}, source);
            }
            value = source[z] = rule.transform(value);
          }
          if (typeof rule === "function") {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends2({}, rule);
          }
          rule.validator = _this2.getValidationMethod(rule);
          if (!rule.validator) {
            return;
          }
          rule.field = z;
          rule.fullField = rule.fullField || z;
          rule.type = _this2.getType(rule);
          series[z] = series[z] || [];
          series[z].push({
            rule,
            value,
            source,
            field: z
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function(data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;
        function addFullField(key, schema) {
          return _extends2({}, schema, {
            fullField: rule.fullField + "." + key,
            fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
          });
        }
        function cb(e3) {
          if (e3 === void 0) {
            e3 = [];
          }
          var errorList = Array.isArray(e3) ? e3 : [e3];
          if (!options.suppressWarning && errorList.length) {
            Schema2.warning("async-validator:", errorList);
          }
          if (errorList.length && rule.message !== void 0) {
            errorList = [].concat(rule.message);
          }
          var filledErrors = errorList.map(complementError(rule, source));
          if (options.first && filledErrors.length) {
            errorFields[rule.field] = 1;
            return doIt(filledErrors);
          }
          if (!deep) {
            doIt(filledErrors);
          } else {
            if (rule.required && !data.value) {
              if (rule.message !== void 0) {
                filledErrors = [].concat(rule.message).map(complementError(rule, source));
              } else if (options.error) {
                filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
              }
              return doIt(filledErrors);
            }
            var fieldsSchema = {};
            if (rule.defaultField) {
              Object.keys(data.value).map(function(key) {
                fieldsSchema[key] = rule.defaultField;
              });
            }
            fieldsSchema = _extends2({}, fieldsSchema, data.rule.fields);
            var paredFieldsSchema = {};
            Object.keys(fieldsSchema).forEach(function(field) {
              var fieldSchema = fieldsSchema[field];
              var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
              paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
            });
            var schema = new Schema2(paredFieldsSchema);
            schema.messages(options.messages);
            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }
            schema.validate(data.value, data.rule.options || options, function(errs) {
              var finalErrors = [];
              if (filledErrors && filledErrors.length) {
                finalErrors.push.apply(finalErrors, filledErrors);
              }
              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }
        var res;
        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          try {
            res = rule.validator(rule, data.value, cb, data.source, options);
          } catch (error) {
            console.error == null ? void 0 : console.error(error);
            if (!options.suppressValidatorError) {
              setTimeout(function() {
                throw error;
              }, 0);
            }
            cb(error.message);
          }
          if (res === true) {
            cb();
          } else if (res === false) {
            cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }
        if (res && res.then) {
          res.then(function() {
            return cb();
          }, function(e3) {
            return cb(e3);
          });
        }
      }, function(results) {
        complete(results);
      }, source);
    };
    _proto.getType = function getType2(rule) {
      if (rule.type === void 0 && rule.pattern instanceof RegExp) {
        rule.type = "pattern";
      }
      if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format("Unknown rule type %s", rule.type));
      }
      return rule.type || "string";
    };
    _proto.getValidationMethod = function getValidationMethod(rule) {
      if (typeof rule.validator === "function") {
        return rule.validator;
      }
      var keys2 = Object.keys(rule);
      var messageIndex = keys2.indexOf("message");
      if (messageIndex !== -1) {
        keys2.splice(messageIndex, 1);
      }
      if (keys2.length === 1 && keys2[0] === "required") {
        return validators.required;
      }
      return validators[this.getType(rule)] || void 0;
    };
    return Schema2;
  }();
  Schema.register = function register(type4, validator) {
    if (typeof validator !== "function") {
      throw new Error("Cannot register a validator by type, validator is not a function");
    }
    validators[type4] = validator;
  };
  Schema.warning = warning5;
  Schema.messages = messages;
  Schema.validators = validators;

  // node_modules/rc-field-form/es/utils/validateUtil.js
  var React81 = __toESM(require_react());

  // node_modules/rc-field-form/es/utils/messages.js
  var typeTemplate2 = "'${name}' is not a valid ${type}";
  var defaultValidateMessages = {
    default: "Validation error on field '${name}'",
    required: "'${name}' is required",
    enum: "'${name}' must be one of [${enum}]",
    whitespace: "'${name}' cannot be empty",
    date: {
      format: "'${name}' is invalid for format date",
      parse: "'${name}' could not be parsed as date",
      invalid: "'${name}' is invalid date"
    },
    types: {
      string: typeTemplate2,
      method: typeTemplate2,
      array: typeTemplate2,
      object: typeTemplate2,
      number: typeTemplate2,
      date: typeTemplate2,
      boolean: typeTemplate2,
      integer: typeTemplate2,
      float: typeTemplate2,
      regexp: typeTemplate2,
      email: typeTemplate2,
      url: typeTemplate2,
      hex: typeTemplate2
    },
    string: {
      len: "'${name}' must be exactly ${len} characters",
      min: "'${name}' must be at least ${min} characters",
      max: "'${name}' cannot be longer than ${max} characters",
      range: "'${name}' must be between ${min} and ${max} characters"
    },
    number: {
      len: "'${name}' must equal ${len}",
      min: "'${name}' cannot be less than ${min}",
      max: "'${name}' cannot be greater than ${max}",
      range: "'${name}' must be between ${min} and ${max}"
    },
    array: {
      len: "'${name}' must be exactly ${len} in length",
      min: "'${name}' cannot be less than ${min} in length",
      max: "'${name}' cannot be greater than ${max} in length",
      range: "'${name}' must be between ${min} and ${max} in length"
    },
    pattern: {
      mismatch: "'${name}' does not match pattern ${pattern}"
    }
  };

  // node_modules/rc-field-form/es/utils/validateUtil.js
  var AsyncValidator = Schema;
  function replaceMessage(template, kv) {
    return template.replace(/\$\{\w+\}/g, function(str) {
      var key = str.slice(2, -1);
      return kv[key];
    });
  }
  var CODE_LOGIC_ERROR = "CODE_LOGIC_ERROR";
  function validateRule(_x, _x2, _x3, _x4, _x5) {
    return _validateRule.apply(this, arguments);
  }
  function _validateRule() {
    _validateRule = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(name, value, rule, options, messageVariables) {
      var cloneRule, originValidator, subRuleField, validator, messages2, result, subResults, kv, fillVariableResult;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1)
          switch (_context2.prev = _context2.next) {
            case 0:
              cloneRule = _objectSpread2({}, rule);
              delete cloneRule.ruleIndex;
              AsyncValidator.warning = function() {
                return void 0;
              };
              if (cloneRule.validator) {
                originValidator = cloneRule.validator;
                cloneRule.validator = function() {
                  try {
                    return originValidator.apply(void 0, arguments);
                  } catch (error) {
                    console.error(error);
                    return Promise.reject(CODE_LOGIC_ERROR);
                  }
                };
              }
              subRuleField = null;
              if (cloneRule && cloneRule.type === "array" && cloneRule.defaultField) {
                subRuleField = cloneRule.defaultField;
                delete cloneRule.defaultField;
              }
              validator = new AsyncValidator(_defineProperty({}, name, [cloneRule]));
              messages2 = merge(defaultValidateMessages, options.validateMessages);
              validator.messages(messages2);
              result = [];
              _context2.prev = 10;
              _context2.next = 13;
              return Promise.resolve(validator.validate(_defineProperty({}, name, value), _objectSpread2({}, options)));
            case 13:
              _context2.next = 18;
              break;
            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2["catch"](10);
              if (_context2.t0.errors) {
                result = _context2.t0.errors.map(function(_ref4, index2) {
                  var message = _ref4.message;
                  var mergedMessage = message === CODE_LOGIC_ERROR ? messages2.default : message;
                  return /* @__PURE__ */ React81.isValidElement(mergedMessage) ? (
                    // Wrap ReactNode with `key`
                    /* @__PURE__ */ React81.cloneElement(mergedMessage, {
                      key: "error_".concat(index2)
                    })
                  ) : mergedMessage;
                });
              }
            case 18:
              if (!(!result.length && subRuleField)) {
                _context2.next = 23;
                break;
              }
              _context2.next = 21;
              return Promise.all(value.map(function(subValue, i) {
                return validateRule("".concat(name, ".").concat(i), subValue, subRuleField, options, messageVariables);
              }));
            case 21:
              subResults = _context2.sent;
              return _context2.abrupt("return", subResults.reduce(function(prev2, errors2) {
                return [].concat(_toConsumableArray(prev2), _toConsumableArray(errors2));
              }, []));
            case 23:
              kv = _objectSpread2(_objectSpread2({}, rule), {}, {
                name,
                enum: (rule.enum || []).join(", ")
              }, messageVariables);
              fillVariableResult = result.map(function(error) {
                if (typeof error === "string") {
                  return replaceMessage(error, kv);
                }
                return error;
              });
              return _context2.abrupt("return", fillVariableResult);
            case 26:
            case "end":
              return _context2.stop();
          }
      }, _callee2, null, [[10, 15]]);
    }));
    return _validateRule.apply(this, arguments);
  }
  function validateRules(namePath, value, rules2, options, validateFirst, messageVariables) {
    var name = namePath.join(".");
    var filledRules = rules2.map(function(currentRule, ruleIndex) {
      var originValidatorFunc = currentRule.validator;
      var cloneRule = _objectSpread2(_objectSpread2({}, currentRule), {}, {
        ruleIndex
      });
      if (originValidatorFunc) {
        cloneRule.validator = function(rule, val, callback) {
          var hasPromise = false;
          var wrappedCallback = function wrappedCallback2() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            Promise.resolve().then(function() {
              warning_default(!hasPromise, "Your validator function has already return a promise. `callback` will be ignored.");
              if (!hasPromise) {
                callback.apply(void 0, args);
              }
            });
          };
          var promise = originValidatorFunc(rule, val, wrappedCallback);
          hasPromise = promise && typeof promise.then === "function" && typeof promise.catch === "function";
          warning_default(hasPromise, "`callback` is deprecated. Please return a promise instead.");
          if (hasPromise) {
            promise.then(function() {
              callback();
            }).catch(function(err) {
              callback(err || " ");
            });
          }
        };
      }
      return cloneRule;
    }).sort(function(_ref, _ref2) {
      var w1 = _ref.warningOnly, i1 = _ref.ruleIndex;
      var w2 = _ref2.warningOnly, i2 = _ref2.ruleIndex;
      if (!!w1 === !!w2) {
        return i1 - i2;
      }
      if (w1) {
        return 1;
      }
      return -1;
    });
    var summaryPromise;
    if (validateFirst === true) {
      summaryPromise = new Promise(/* @__PURE__ */ function() {
        var _ref3 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(resolve, reject) {
          var i, rule, errors2;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  i = 0;
                case 1:
                  if (!(i < filledRules.length)) {
                    _context.next = 12;
                    break;
                  }
                  rule = filledRules[i];
                  _context.next = 5;
                  return validateRule(name, value, rule, options, messageVariables);
                case 5:
                  errors2 = _context.sent;
                  if (!errors2.length) {
                    _context.next = 9;
                    break;
                  }
                  reject([{
                    errors: errors2,
                    rule
                  }]);
                  return _context.abrupt("return");
                case 9:
                  i += 1;
                  _context.next = 1;
                  break;
                case 12:
                  resolve([]);
                case 13:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function(_x6, _x7) {
          return _ref3.apply(this, arguments);
        };
      }());
    } else {
      var rulePromises = filledRules.map(function(rule) {
        return validateRule(name, value, rule, options, messageVariables).then(function(errors2) {
          return {
            errors: errors2,
            rule
          };
        });
      });
      summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors2) {
        return Promise.reject(errors2);
      });
    }
    summaryPromise.catch(function(e3) {
      return e3;
    });
    return summaryPromise;
  }
  function finishOnAllFailed(_x8) {
    return _finishOnAllFailed.apply(this, arguments);
  }
  function _finishOnAllFailed() {
    _finishOnAllFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3(rulePromises) {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1)
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
                var _ref5;
                var errors2 = (_ref5 = []).concat.apply(_ref5, _toConsumableArray(errorsList));
                return errors2;
              }));
            case 1:
            case "end":
              return _context3.stop();
          }
      }, _callee3);
    }));
    return _finishOnAllFailed.apply(this, arguments);
  }
  function finishOnFirstFailed(_x9) {
    return _finishOnFirstFailed.apply(this, arguments);
  }
  function _finishOnFirstFailed() {
    _finishOnFirstFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee4(rulePromises) {
      var count;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1)
          switch (_context4.prev = _context4.next) {
            case 0:
              count = 0;
              return _context4.abrupt("return", new Promise(function(resolve) {
                rulePromises.forEach(function(promise) {
                  promise.then(function(ruleError) {
                    if (ruleError.errors.length) {
                      resolve([ruleError]);
                    }
                    count += 1;
                    if (count === rulePromises.length) {
                      resolve([]);
                    }
                  });
                });
              }));
            case 2:
            case "end":
              return _context4.stop();
          }
      }, _callee4);
    }));
    return _finishOnFirstFailed.apply(this, arguments);
  }

  // node_modules/rc-field-form/es/utils/valueUtil.js
  function getNamePath(path2) {
    return toArray2(path2);
  }
  function cloneByNamePathList(store2, namePathList) {
    var newStore = {};
    namePathList.forEach(function(namePath) {
      var value = get(store2, namePath);
      newStore = set2(newStore, namePath, value);
    });
    return newStore;
  }
  function containsNamePath(namePathList, namePath) {
    var partialMatch = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    return namePathList && namePathList.some(function(path2) {
      return matchNamePath(namePath, path2, partialMatch);
    });
  }
  function matchNamePath(namePath, subNamePath) {
    var partialMatch = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    if (!namePath || !subNamePath) {
      return false;
    }
    if (!partialMatch && namePath.length !== subNamePath.length) {
      return false;
    }
    return subNamePath.every(function(nameUnit, i) {
      return namePath[i] === nameUnit;
    });
  }
  function isSimilar(source, target) {
    if (source === target) {
      return true;
    }
    if (!source && target || source && !target) {
      return false;
    }
    if (!source || !target || _typeof(source) !== "object" || _typeof(target) !== "object") {
      return false;
    }
    var sourceKeys = Object.keys(source);
    var targetKeys = Object.keys(target);
    var keys2 = new Set([].concat(sourceKeys, targetKeys));
    return _toConsumableArray(keys2).every(function(key) {
      var sourceValue = source[key];
      var targetValue = target[key];
      if (typeof sourceValue === "function" && typeof targetValue === "function") {
        return true;
      }
      return sourceValue === targetValue;
    });
  }
  function defaultGetValueFromEvent(valuePropName) {
    var event = arguments.length <= 1 ? void 0 : arguments[1];
    if (event && event.target && _typeof(event.target) === "object" && valuePropName in event.target) {
      return event.target[valuePropName];
    }
    return event;
  }
  function move(array4, moveIndex, toIndex) {
    var length2 = array4.length;
    if (moveIndex < 0 || moveIndex >= length2 || toIndex < 0 || toIndex >= length2) {
      return array4;
    }
    var item = array4[moveIndex];
    var diff = moveIndex - toIndex;
    if (diff > 0) {
      return [].concat(_toConsumableArray(array4.slice(0, toIndex)), [item], _toConsumableArray(array4.slice(toIndex, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, length2)));
    }
    if (diff < 0) {
      return [].concat(_toConsumableArray(array4.slice(0, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array4.slice(toIndex + 1, length2)));
    }
    return array4;
  }

  // node_modules/rc-field-form/es/Field.js
  var _excluded5 = ["name"];
  var EMPTY_ERRORS = [];
  function requireUpdate(shouldUpdate, prev2, next2, prevValue, nextValue, info) {
    if (typeof shouldUpdate === "function") {
      return shouldUpdate(prev2, next2, "source" in info ? {
        source: info.source
      } : {});
    }
    return prevValue !== nextValue;
  }
  var Field = /* @__PURE__ */ function(_React$Component) {
    _inherits(Field2, _React$Component);
    var _super = _createSuper(Field2);
    function Field2(props) {
      var _this;
      _classCallCheck(this, Field2);
      _this = _super.call(this, props);
      _defineProperty(_assertThisInitialized(_this), "state", {
        resetCount: 0
      });
      _defineProperty(_assertThisInitialized(_this), "cancelRegisterFunc", null);
      _defineProperty(_assertThisInitialized(_this), "mounted", false);
      _defineProperty(_assertThisInitialized(_this), "touched", false);
      _defineProperty(_assertThisInitialized(_this), "dirty", false);
      _defineProperty(_assertThisInitialized(_this), "validatePromise", void 0);
      _defineProperty(_assertThisInitialized(_this), "prevValidating", void 0);
      _defineProperty(_assertThisInitialized(_this), "errors", EMPTY_ERRORS);
      _defineProperty(_assertThisInitialized(_this), "warnings", EMPTY_ERRORS);
      _defineProperty(_assertThisInitialized(_this), "cancelRegister", function() {
        var _this$props = _this.props, preserve2 = _this$props.preserve, isListField = _this$props.isListField, name = _this$props.name;
        if (_this.cancelRegisterFunc) {
          _this.cancelRegisterFunc(isListField, preserve2, getNamePath(name));
        }
        _this.cancelRegisterFunc = null;
      });
      _defineProperty(_assertThisInitialized(_this), "getNamePath", function() {
        var _this$props2 = _this.props, name = _this$props2.name, fieldContext = _this$props2.fieldContext;
        var _fieldContext$prefixN = fieldContext.prefixName, prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;
        return name !== void 0 ? [].concat(_toConsumableArray(prefixName), _toConsumableArray(name)) : [];
      });
      _defineProperty(_assertThisInitialized(_this), "getRules", function() {
        var _this$props3 = _this.props, _this$props3$rules = _this$props3.rules, rules2 = _this$props3$rules === void 0 ? [] : _this$props3$rules, fieldContext = _this$props3.fieldContext;
        return rules2.map(function(rule) {
          if (typeof rule === "function") {
            return rule(fieldContext);
          }
          return rule;
        });
      });
      _defineProperty(_assertThisInitialized(_this), "refresh", function() {
        if (!_this.mounted)
          return;
        _this.setState(function(_ref) {
          var resetCount = _ref.resetCount;
          return {
            resetCount: resetCount + 1
          };
        });
      });
      _defineProperty(_assertThisInitialized(_this), "metaCache", null);
      _defineProperty(_assertThisInitialized(_this), "triggerMetaEvent", function(destroy) {
        var onMetaChange = _this.props.onMetaChange;
        if (onMetaChange) {
          var _meta = _objectSpread2(_objectSpread2({}, _this.getMeta()), {}, {
            destroy
          });
          if (!isEqual_default(_this.metaCache, _meta)) {
            onMetaChange(_meta);
          }
          _this.metaCache = _meta;
        } else {
          _this.metaCache = null;
        }
      });
      _defineProperty(_assertThisInitialized(_this), "onStoreChange", function(prevStore, namePathList, info) {
        var _this$props4 = _this.props, shouldUpdate = _this$props4.shouldUpdate, _this$props4$dependen = _this$props4.dependencies, dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen, onReset = _this$props4.onReset;
        var store2 = info.store;
        var namePath = _this.getNamePath();
        var prevValue = _this.getValue(prevStore);
        var curValue = _this.getValue(store2);
        var namePathMatch = namePathList && containsNamePath(namePathList, namePath);
        if (info.type === "valueUpdate" && info.source === "external" && prevValue !== curValue) {
          _this.touched = true;
          _this.dirty = true;
          _this.validatePromise = null;
          _this.errors = EMPTY_ERRORS;
          _this.warnings = EMPTY_ERRORS;
          _this.triggerMetaEvent();
        }
        switch (info.type) {
          case "reset":
            if (!namePathList || namePathMatch) {
              _this.touched = false;
              _this.dirty = false;
              _this.validatePromise = void 0;
              _this.errors = EMPTY_ERRORS;
              _this.warnings = EMPTY_ERRORS;
              _this.triggerMetaEvent();
              onReset === null || onReset === void 0 || onReset();
              _this.refresh();
              return;
            }
            break;
          case "remove": {
            if (shouldUpdate) {
              _this.reRender();
              return;
            }
            break;
          }
          case "setField": {
            var data = info.data;
            if (namePathMatch) {
              if ("touched" in data) {
                _this.touched = data.touched;
              }
              if ("validating" in data && !("originRCField" in data)) {
                _this.validatePromise = data.validating ? Promise.resolve([]) : null;
              }
              if ("errors" in data) {
                _this.errors = data.errors || EMPTY_ERRORS;
              }
              if ("warnings" in data) {
                _this.warnings = data.warnings || EMPTY_ERRORS;
              }
              _this.dirty = true;
              _this.triggerMetaEvent();
              _this.reRender();
              return;
            } else if ("value" in data && containsNamePath(namePathList, namePath, true)) {
              _this.reRender();
              return;
            }
            if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store2, prevValue, curValue, info)) {
              _this.reRender();
              return;
            }
            break;
          }
          case "dependenciesUpdate": {
            var dependencyList = dependencies.map(getNamePath);
            if (dependencyList.some(function(dependency) {
              return containsNamePath(info.relatedFields, dependency);
            })) {
              _this.reRender();
              return;
            }
            break;
          }
          default:
            if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store2, prevValue, curValue, info)) {
              _this.reRender();
              return;
            }
            break;
        }
        if (shouldUpdate === true) {
          _this.reRender();
        }
      });
      _defineProperty(_assertThisInitialized(_this), "validateRules", function(options) {
        var namePath = _this.getNamePath();
        var currentValue = _this.getValue();
        var _ref2 = options || {}, triggerName = _ref2.triggerName, _ref2$validateOnly = _ref2.validateOnly, validateOnly = _ref2$validateOnly === void 0 ? false : _ref2$validateOnly;
        var rootPromise = Promise.resolve().then(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
          var _this$props5, _this$props5$validate, validateFirst, messageVariables, validateDebounce, filteredRules, promise;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  if (_this.mounted) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return", []);
                case 2:
                  _this$props5 = _this.props, _this$props5$validate = _this$props5.validateFirst, validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate, messageVariables = _this$props5.messageVariables, validateDebounce = _this$props5.validateDebounce;
                  filteredRules = _this.getRules();
                  if (triggerName) {
                    filteredRules = filteredRules.filter(function(rule) {
                      return rule;
                    }).filter(function(rule) {
                      var validateTrigger = rule.validateTrigger;
                      if (!validateTrigger) {
                        return true;
                      }
                      var triggerList = toArray2(validateTrigger);
                      return triggerList.includes(triggerName);
                    });
                  }
                  if (!(validateDebounce && triggerName)) {
                    _context.next = 10;
                    break;
                  }
                  _context.next = 8;
                  return new Promise(function(resolve) {
                    setTimeout(resolve, validateDebounce);
                  });
                case 8:
                  if (!(_this.validatePromise !== rootPromise)) {
                    _context.next = 10;
                    break;
                  }
                  return _context.abrupt("return", []);
                case 10:
                  promise = validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);
                  promise.catch(function(e3) {
                    return e3;
                  }).then(function() {
                    var ruleErrors = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : EMPTY_ERRORS;
                    if (_this.validatePromise === rootPromise) {
                      var _ruleErrors$forEach;
                      _this.validatePromise = null;
                      var nextErrors = [];
                      var nextWarnings = [];
                      (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 || _ruleErrors$forEach.call(ruleErrors, function(_ref4) {
                        var warningOnly = _ref4.rule.warningOnly, _ref4$errors = _ref4.errors, errors2 = _ref4$errors === void 0 ? EMPTY_ERRORS : _ref4$errors;
                        if (warningOnly) {
                          nextWarnings.push.apply(nextWarnings, _toConsumableArray(errors2));
                        } else {
                          nextErrors.push.apply(nextErrors, _toConsumableArray(errors2));
                        }
                      });
                      _this.errors = nextErrors;
                      _this.warnings = nextWarnings;
                      _this.triggerMetaEvent();
                      _this.reRender();
                    }
                  });
                  return _context.abrupt("return", promise);
                case 13:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        })));
        if (validateOnly) {
          return rootPromise;
        }
        _this.validatePromise = rootPromise;
        _this.dirty = true;
        _this.errors = EMPTY_ERRORS;
        _this.warnings = EMPTY_ERRORS;
        _this.triggerMetaEvent();
        _this.reRender();
        return rootPromise;
      });
      _defineProperty(_assertThisInitialized(_this), "isFieldValidating", function() {
        return !!_this.validatePromise;
      });
      _defineProperty(_assertThisInitialized(_this), "isFieldTouched", function() {
        return _this.touched;
      });
      _defineProperty(_assertThisInitialized(_this), "isFieldDirty", function() {
        if (_this.dirty || _this.props.initialValue !== void 0) {
          return true;
        }
        var fieldContext = _this.props.fieldContext;
        var _fieldContext$getInte = fieldContext.getInternalHooks(HOOK_MARK), getInitialValue = _fieldContext$getInte.getInitialValue;
        if (getInitialValue(_this.getNamePath()) !== void 0) {
          return true;
        }
        return false;
      });
      _defineProperty(_assertThisInitialized(_this), "getErrors", function() {
        return _this.errors;
      });
      _defineProperty(_assertThisInitialized(_this), "getWarnings", function() {
        return _this.warnings;
      });
      _defineProperty(_assertThisInitialized(_this), "isListField", function() {
        return _this.props.isListField;
      });
      _defineProperty(_assertThisInitialized(_this), "isList", function() {
        return _this.props.isList;
      });
      _defineProperty(_assertThisInitialized(_this), "isPreserve", function() {
        return _this.props.preserve;
      });
      _defineProperty(_assertThisInitialized(_this), "getMeta", function() {
        _this.prevValidating = _this.isFieldValidating();
        var meta = {
          touched: _this.isFieldTouched(),
          validating: _this.prevValidating,
          errors: _this.errors,
          warnings: _this.warnings,
          name: _this.getNamePath(),
          validated: _this.validatePromise === null
        };
        return meta;
      });
      _defineProperty(_assertThisInitialized(_this), "getOnlyChild", function(children) {
        if (typeof children === "function") {
          var _meta2 = _this.getMeta();
          return _objectSpread2(_objectSpread2({}, _this.getOnlyChild(children(_this.getControlled(), _meta2, _this.props.fieldContext))), {}, {
            isFunction: true
          });
        }
        var childList = toArray(children);
        if (childList.length !== 1 || !/* @__PURE__ */ React82.isValidElement(childList[0])) {
          return {
            child: childList,
            isFunction: false
          };
        }
        return {
          child: childList[0],
          isFunction: false
        };
      });
      _defineProperty(_assertThisInitialized(_this), "getValue", function(store2) {
        var getFieldsValue = _this.props.fieldContext.getFieldsValue;
        var namePath = _this.getNamePath();
        return get(store2 || getFieldsValue(true), namePath);
      });
      _defineProperty(_assertThisInitialized(_this), "getControlled", function() {
        var childProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var _this$props6 = _this.props, trigger = _this$props6.trigger, validateTrigger = _this$props6.validateTrigger, getValueFromEvent = _this$props6.getValueFromEvent, normalize2 = _this$props6.normalize, valuePropName = _this$props6.valuePropName, getValueProps = _this$props6.getValueProps, fieldContext = _this$props6.fieldContext;
        var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : fieldContext.validateTrigger;
        var namePath = _this.getNamePath();
        var getInternalHooks3 = fieldContext.getInternalHooks, getFieldsValue = fieldContext.getFieldsValue;
        var _getInternalHooks = getInternalHooks3(HOOK_MARK), dispatch2 = _getInternalHooks.dispatch;
        var value = _this.getValue();
        var mergedGetValueProps = getValueProps || function(val) {
          return _defineProperty({}, valuePropName, val);
        };
        var originTriggerFunc = childProps[trigger];
        var control = _objectSpread2(_objectSpread2({}, childProps), mergedGetValueProps(value));
        control[trigger] = function() {
          _this.touched = true;
          _this.dirty = true;
          _this.triggerMetaEvent();
          var newValue;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (getValueFromEvent) {
            newValue = getValueFromEvent.apply(void 0, args);
          } else {
            newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));
          }
          if (normalize2) {
            newValue = normalize2(newValue, value, getFieldsValue(true));
          }
          dispatch2({
            type: "updateValue",
            namePath,
            value: newValue
          });
          if (originTriggerFunc) {
            originTriggerFunc.apply(void 0, args);
          }
        };
        var validateTriggerList = toArray2(mergedValidateTrigger || []);
        validateTriggerList.forEach(function(triggerName) {
          var originTrigger = control[triggerName];
          control[triggerName] = function() {
            if (originTrigger) {
              originTrigger.apply(void 0, arguments);
            }
            var rules2 = _this.props.rules;
            if (rules2 && rules2.length) {
              dispatch2({
                type: "validateField",
                namePath,
                triggerName
              });
            }
          };
        });
        return control;
      });
      if (props.fieldContext) {
        var getInternalHooks2 = props.fieldContext.getInternalHooks;
        var _getInternalHooks2 = getInternalHooks2(HOOK_MARK), initEntityValue = _getInternalHooks2.initEntityValue;
        initEntityValue(_assertThisInitialized(_this));
      }
      return _this;
    }
    _createClass(Field2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props7 = this.props, shouldUpdate = _this$props7.shouldUpdate, fieldContext = _this$props7.fieldContext;
        this.mounted = true;
        if (fieldContext) {
          var getInternalHooks2 = fieldContext.getInternalHooks;
          var _getInternalHooks3 = getInternalHooks2(HOOK_MARK), registerField = _getInternalHooks3.registerField;
          this.cancelRegisterFunc = registerField(this);
        }
        if (shouldUpdate === true) {
          this.reRender();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.cancelRegister();
        this.triggerMetaEvent(true);
        this.mounted = false;
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (!this.mounted)
          return;
        this.forceUpdate();
      }
    }, {
      key: "render",
      value: function render2() {
        var resetCount = this.state.resetCount;
        var children = this.props.children;
        var _this$getOnlyChild = this.getOnlyChild(children), child = _this$getOnlyChild.child, isFunction = _this$getOnlyChild.isFunction;
        var returnChildNode;
        if (isFunction) {
          returnChildNode = child;
        } else if (/* @__PURE__ */ React82.isValidElement(child)) {
          returnChildNode = /* @__PURE__ */ React82.cloneElement(child, this.getControlled(child.props));
        } else {
          warning_default(!child, "`children` of Field is not validate ReactElement.");
          returnChildNode = child;
        }
        return /* @__PURE__ */ React82.createElement(React82.Fragment, {
          key: resetCount
        }, returnChildNode);
      }
    }]);
    return Field2;
  }(React82.Component);
  _defineProperty(Field, "contextType", FieldContext_default);
  _defineProperty(Field, "defaultProps", {
    trigger: "onChange",
    valuePropName: "value"
  });
  function WrapperField(_ref6) {
    var name = _ref6.name, restProps = _objectWithoutProperties(_ref6, _excluded5);
    var fieldContext = React82.useContext(FieldContext_default);
    var listContext = React82.useContext(ListContext_default);
    var namePath = name !== void 0 ? getNamePath(name) : void 0;
    var key = "keep";
    if (!restProps.isListField) {
      key = "_".concat((namePath || []).join("_"));
    }
    if (restProps.preserve === false && restProps.isListField && namePath.length <= 1) {
      warning_default(false, "`preserve` should not apply on Form.List fields.");
    }
    return /* @__PURE__ */ React82.createElement(Field, _extends({
      key,
      name: namePath,
      isListField: !!listContext
    }, restProps, {
      fieldContext
    }));
  }
  var Field_default = WrapperField;

  // node_modules/rc-field-form/es/List.js
  var React83 = __toESM(require_react());
  function List(_ref) {
    var name = _ref.name, initialValue = _ref.initialValue, children = _ref.children, rules2 = _ref.rules, validateTrigger = _ref.validateTrigger, isListField = _ref.isListField;
    var context = React83.useContext(FieldContext_default);
    var wrapperListContext = React83.useContext(ListContext_default);
    var keyRef = React83.useRef({
      keys: [],
      id: 0
    });
    var keyManager = keyRef.current;
    var prefixName = React83.useMemo(function() {
      var parentPrefixName = getNamePath(context.prefixName) || [];
      return [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name)));
    }, [context.prefixName, name]);
    var fieldContext = React83.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, context), {}, {
        prefixName
      });
    }, [context, prefixName]);
    var listContext = React83.useMemo(function() {
      return {
        getKey: function getKey3(namePath) {
          var len = prefixName.length;
          var pathName = namePath[len];
          return [keyManager.keys[pathName], namePath.slice(len + 1)];
        }
      };
    }, [prefixName]);
    if (typeof children !== "function") {
      warning_default(false, "Form.List only accepts function as children.");
      return null;
    }
    var shouldUpdate = function shouldUpdate2(prevValue, nextValue, _ref2) {
      var source = _ref2.source;
      if (source === "internal") {
        return false;
      }
      return prevValue !== nextValue;
    };
    return /* @__PURE__ */ React83.createElement(ListContext_default.Provider, {
      value: listContext
    }, /* @__PURE__ */ React83.createElement(FieldContext_default.Provider, {
      value: fieldContext
    }, /* @__PURE__ */ React83.createElement(Field_default, {
      name: [],
      shouldUpdate,
      rules: rules2,
      validateTrigger,
      initialValue,
      isList: true,
      isListField: isListField !== null && isListField !== void 0 ? isListField : !!wrapperListContext
    }, function(_ref3, meta) {
      var _ref3$value = _ref3.value, value = _ref3$value === void 0 ? [] : _ref3$value, onChange = _ref3.onChange;
      var getFieldValue = context.getFieldValue;
      var getNewValue = function getNewValue2() {
        var values = getFieldValue(prefixName || []);
        return values || [];
      };
      var operations = {
        add: function add(defaultValue, index2) {
          var newValue = getNewValue();
          if (index2 >= 0 && index2 <= newValue.length) {
            keyManager.keys = [].concat(_toConsumableArray(keyManager.keys.slice(0, index2)), [keyManager.id], _toConsumableArray(keyManager.keys.slice(index2)));
            onChange([].concat(_toConsumableArray(newValue.slice(0, index2)), [defaultValue], _toConsumableArray(newValue.slice(index2))));
          } else {
            if (index2 < 0 || index2 > newValue.length) {
              warning_default(false, "The second parameter of the add function should be a valid positive number.");
            }
            keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);
            onChange([].concat(_toConsumableArray(newValue), [defaultValue]));
          }
          keyManager.id += 1;
        },
        remove: function remove(index2) {
          var newValue = getNewValue();
          var indexSet = new Set(Array.isArray(index2) ? index2 : [index2]);
          if (indexSet.size <= 0) {
            return;
          }
          keyManager.keys = keyManager.keys.filter(function(_, keysIndex) {
            return !indexSet.has(keysIndex);
          });
          onChange(newValue.filter(function(_, valueIndex) {
            return !indexSet.has(valueIndex);
          }));
        },
        move: function move2(from2, to) {
          if (from2 === to) {
            return;
          }
          var newValue = getNewValue();
          if (from2 < 0 || from2 >= newValue.length || to < 0 || to >= newValue.length) {
            return;
          }
          keyManager.keys = move(keyManager.keys, from2, to);
          onChange(move(newValue, from2, to));
        }
      };
      var listValue = value || [];
      if (!Array.isArray(listValue)) {
        listValue = [];
        if (true) {
          warning_default(false, "Current value of '".concat(prefixName.join(" > "), "' is not an array type."));
        }
      }
      return children(listValue.map(function(__, index2) {
        var key = keyManager.keys[index2];
        if (key === void 0) {
          keyManager.keys[index2] = keyManager.id;
          key = keyManager.keys[index2];
          keyManager.id += 1;
        }
        return {
          name: index2,
          key,
          isListField: true
        };
      }), operations, meta);
    })));
  }
  var List_default = List;

  // node_modules/rc-field-form/es/useForm.js
  var React84 = __toESM(require_react());

  // node_modules/rc-field-form/es/utils/asyncUtil.js
  function allPromiseFinish(promiseList) {
    var hasError2 = false;
    var count = promiseList.length;
    var results = [];
    if (!promiseList.length) {
      return Promise.resolve([]);
    }
    return new Promise(function(resolve, reject) {
      promiseList.forEach(function(promise, index2) {
        promise.catch(function(e3) {
          hasError2 = true;
          return e3;
        }).then(function(result) {
          count -= 1;
          results[index2] = result;
          if (count > 0) {
            return;
          }
          if (hasError2) {
            reject(results);
          }
          resolve(results);
        });
      });
    });
  }

  // node_modules/rc-field-form/es/utils/NameMap.js
  var SPLIT2 = "__@field_split__";
  function normalize(namePath) {
    return namePath.map(function(cell) {
      return "".concat(_typeof(cell), ":").concat(cell);
    }).join(SPLIT2);
  }
  var NameMap = /* @__PURE__ */ function() {
    function NameMap2() {
      _classCallCheck(this, NameMap2);
      _defineProperty(this, "kvs", /* @__PURE__ */ new Map());
    }
    _createClass(NameMap2, [{
      key: "set",
      value: function set3(key, value) {
        this.kvs.set(normalize(key), value);
      }
    }, {
      key: "get",
      value: function get2(key) {
        return this.kvs.get(normalize(key));
      }
    }, {
      key: "update",
      value: function update(key, updater) {
        var origin = this.get(key);
        var next2 = updater(origin);
        if (!next2) {
          this.delete(key);
        } else {
          this.set(key, next2);
        }
      }
    }, {
      key: "delete",
      value: function _delete(key) {
        this.kvs.delete(normalize(key));
      }
      // Since we only use this in test, let simply realize this
    }, {
      key: "map",
      value: function map(callback) {
        return _toConsumableArray(this.kvs.entries()).map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
          var cells = key.split(SPLIT2);
          return callback({
            key: cells.map(function(cell) {
              var _cell$match = cell.match(/^([^:]*):(.*)$/), _cell$match2 = _slicedToArray(_cell$match, 3), type4 = _cell$match2[1], unit3 = _cell$match2[2];
              return type4 === "number" ? Number(unit3) : unit3;
            }),
            value
          });
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var json2 = {};
        this.map(function(_ref3) {
          var key = _ref3.key, value = _ref3.value;
          json2[key.join(".")] = value;
          return null;
        });
        return json2;
      }
    }]);
    return NameMap2;
  }();
  var NameMap_default = NameMap;

  // node_modules/rc-field-form/es/useForm.js
  var _excluded6 = ["name"];
  var FormStore = /* @__PURE__ */ _createClass(function FormStore2(forceRootUpdate) {
    var _this = this;
    _classCallCheck(this, FormStore2);
    _defineProperty(this, "formHooked", false);
    _defineProperty(this, "forceRootUpdate", void 0);
    _defineProperty(this, "subscribable", true);
    _defineProperty(this, "store", {});
    _defineProperty(this, "fieldEntities", []);
    _defineProperty(this, "initialValues", {});
    _defineProperty(this, "callbacks", {});
    _defineProperty(this, "validateMessages", null);
    _defineProperty(this, "preserve", null);
    _defineProperty(this, "lastValidatePromise", null);
    _defineProperty(this, "getForm", function() {
      return {
        getFieldValue: _this.getFieldValue,
        getFieldsValue: _this.getFieldsValue,
        getFieldError: _this.getFieldError,
        getFieldWarning: _this.getFieldWarning,
        getFieldsError: _this.getFieldsError,
        isFieldsTouched: _this.isFieldsTouched,
        isFieldTouched: _this.isFieldTouched,
        isFieldValidating: _this.isFieldValidating,
        isFieldsValidating: _this.isFieldsValidating,
        resetFields: _this.resetFields,
        setFields: _this.setFields,
        setFieldValue: _this.setFieldValue,
        setFieldsValue: _this.setFieldsValue,
        validateFields: _this.validateFields,
        submit: _this.submit,
        _init: true,
        getInternalHooks: _this.getInternalHooks
      };
    });
    _defineProperty(this, "getInternalHooks", function(key) {
      if (key === HOOK_MARK) {
        _this.formHooked = true;
        return {
          dispatch: _this.dispatch,
          initEntityValue: _this.initEntityValue,
          registerField: _this.registerField,
          useSubscribe: _this.useSubscribe,
          setInitialValues: _this.setInitialValues,
          destroyForm: _this.destroyForm,
          setCallbacks: _this.setCallbacks,
          setValidateMessages: _this.setValidateMessages,
          getFields: _this.getFields,
          setPreserve: _this.setPreserve,
          getInitialValue: _this.getInitialValue,
          registerWatch: _this.registerWatch
        };
      }
      warning_default(false, "`getInternalHooks` is internal usage. Should not call directly.");
      return null;
    });
    _defineProperty(this, "useSubscribe", function(subscribable) {
      _this.subscribable = subscribable;
    });
    _defineProperty(this, "prevWithoutPreserves", null);
    _defineProperty(this, "setInitialValues", function(initialValues, init) {
      _this.initialValues = initialValues || {};
      if (init) {
        var _this$prevWithoutPres;
        var nextStore = merge(initialValues, _this.store);
        (_this$prevWithoutPres = _this.prevWithoutPreserves) === null || _this$prevWithoutPres === void 0 || _this$prevWithoutPres.map(function(_ref) {
          var namePath = _ref.key;
          nextStore = set2(nextStore, namePath, get(initialValues, namePath));
        });
        _this.prevWithoutPreserves = null;
        _this.updateStore(nextStore);
      }
    });
    _defineProperty(this, "destroyForm", function() {
      var prevWithoutPreserves = new NameMap_default();
      _this.getFieldEntities(true).forEach(function(entity) {
        if (!_this.isMergedPreserve(entity.isPreserve())) {
          prevWithoutPreserves.set(entity.getNamePath(), true);
        }
      });
      _this.prevWithoutPreserves = prevWithoutPreserves;
    });
    _defineProperty(this, "getInitialValue", function(namePath) {
      var initValue = get(_this.initialValues, namePath);
      return namePath.length ? merge(initValue) : initValue;
    });
    _defineProperty(this, "setCallbacks", function(callbacks) {
      _this.callbacks = callbacks;
    });
    _defineProperty(this, "setValidateMessages", function(validateMessages) {
      _this.validateMessages = validateMessages;
    });
    _defineProperty(this, "setPreserve", function(preserve2) {
      _this.preserve = preserve2;
    });
    _defineProperty(this, "watchList", []);
    _defineProperty(this, "registerWatch", function(callback) {
      _this.watchList.push(callback);
      return function() {
        _this.watchList = _this.watchList.filter(function(fn) {
          return fn !== callback;
        });
      };
    });
    _defineProperty(this, "notifyWatch", function() {
      var namePath = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (_this.watchList.length) {
        var values = _this.getFieldsValue();
        var allValues = _this.getFieldsValue(true);
        _this.watchList.forEach(function(callback) {
          callback(values, allValues, namePath);
        });
      }
    });
    _defineProperty(this, "timeoutId", null);
    _defineProperty(this, "warningUnhooked", function() {
      if (!_this.timeoutId && typeof window !== "undefined") {
        _this.timeoutId = setTimeout(function() {
          _this.timeoutId = null;
          if (!_this.formHooked) {
            warning_default(false, "Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?");
          }
        });
      }
    });
    _defineProperty(this, "updateStore", function(nextStore) {
      _this.store = nextStore;
    });
    _defineProperty(this, "getFieldEntities", function() {
      var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (!pure) {
        return _this.fieldEntities;
      }
      return _this.fieldEntities.filter(function(field) {
        return field.getNamePath().length;
      });
    });
    _defineProperty(this, "getFieldsMap", function() {
      var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var cache2 = new NameMap_default();
      _this.getFieldEntities(pure).forEach(function(field) {
        var namePath = field.getNamePath();
        cache2.set(namePath, field);
      });
      return cache2;
    });
    _defineProperty(this, "getFieldEntitiesForNamePathList", function(nameList) {
      if (!nameList) {
        return _this.getFieldEntities(true);
      }
      var cache2 = _this.getFieldsMap(true);
      return nameList.map(function(name) {
        var namePath = getNamePath(name);
        return cache2.get(namePath) || {
          INVALIDATE_NAME_PATH: getNamePath(name)
        };
      });
    });
    _defineProperty(this, "getFieldsValue", function(nameList, filterFunc) {
      _this.warningUnhooked();
      var mergedNameList;
      var mergedFilterFunc;
      var mergedStrict;
      if (nameList === true || Array.isArray(nameList)) {
        mergedNameList = nameList;
        mergedFilterFunc = filterFunc;
      } else if (nameList && _typeof(nameList) === "object") {
        mergedStrict = nameList.strict;
        mergedFilterFunc = nameList.filter;
      }
      if (mergedNameList === true && !mergedFilterFunc) {
        return _this.store;
      }
      var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(mergedNameList) ? mergedNameList : null);
      var filteredNameList = [];
      fieldEntities.forEach(function(entity) {
        var _isListField, _ref3;
        var namePath = "INVALIDATE_NAME_PATH" in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath();
        if (mergedStrict) {
          var _isList, _ref2;
          if ((_isList = (_ref2 = entity).isList) !== null && _isList !== void 0 && _isList.call(_ref2)) {
            return;
          }
        } else if (!mergedNameList && (_isListField = (_ref3 = entity).isListField) !== null && _isListField !== void 0 && _isListField.call(_ref3)) {
          return;
        }
        if (!mergedFilterFunc) {
          filteredNameList.push(namePath);
        } else {
          var meta = "getMeta" in entity ? entity.getMeta() : null;
          if (mergedFilterFunc(meta)) {
            filteredNameList.push(namePath);
          }
        }
      });
      return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));
    });
    _defineProperty(this, "getFieldValue", function(name) {
      _this.warningUnhooked();
      var namePath = getNamePath(name);
      return get(_this.store, namePath);
    });
    _defineProperty(this, "getFieldsError", function(nameList) {
      _this.warningUnhooked();
      var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);
      return fieldEntities.map(function(entity, index2) {
        if (entity && !("INVALIDATE_NAME_PATH" in entity)) {
          return {
            name: entity.getNamePath(),
            errors: entity.getErrors(),
            warnings: entity.getWarnings()
          };
        }
        return {
          name: getNamePath(nameList[index2]),
          errors: [],
          warnings: []
        };
      });
    });
    _defineProperty(this, "getFieldError", function(name) {
      _this.warningUnhooked();
      var namePath = getNamePath(name);
      var fieldError = _this.getFieldsError([namePath])[0];
      return fieldError.errors;
    });
    _defineProperty(this, "getFieldWarning", function(name) {
      _this.warningUnhooked();
      var namePath = getNamePath(name);
      var fieldError = _this.getFieldsError([namePath])[0];
      return fieldError.warnings;
    });
    _defineProperty(this, "isFieldsTouched", function() {
      _this.warningUnhooked();
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var arg0 = args[0], arg1 = args[1];
      var namePathList;
      var isAllFieldsTouched = false;
      if (args.length === 0) {
        namePathList = null;
      } else if (args.length === 1) {
        if (Array.isArray(arg0)) {
          namePathList = arg0.map(getNamePath);
          isAllFieldsTouched = false;
        } else {
          namePathList = null;
          isAllFieldsTouched = arg0;
        }
      } else {
        namePathList = arg0.map(getNamePath);
        isAllFieldsTouched = arg1;
      }
      var fieldEntities = _this.getFieldEntities(true);
      var isFieldTouched = function isFieldTouched2(field) {
        return field.isFieldTouched();
      };
      if (!namePathList) {
        return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);
      }
      var map = new NameMap_default();
      namePathList.forEach(function(shortNamePath) {
        map.set(shortNamePath, []);
      });
      fieldEntities.forEach(function(field) {
        var fieldNamePath = field.getNamePath();
        namePathList.forEach(function(shortNamePath) {
          if (shortNamePath.every(function(nameUnit, i) {
            return fieldNamePath[i] === nameUnit;
          })) {
            map.update(shortNamePath, function(list) {
              return [].concat(_toConsumableArray(list), [field]);
            });
          }
        });
      });
      var isNamePathListTouched = function isNamePathListTouched2(entities) {
        return entities.some(isFieldTouched);
      };
      var namePathListEntities = map.map(function(_ref4) {
        var value = _ref4.value;
        return value;
      });
      return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);
    });
    _defineProperty(this, "isFieldTouched", function(name) {
      _this.warningUnhooked();
      return _this.isFieldsTouched([name]);
    });
    _defineProperty(this, "isFieldsValidating", function(nameList) {
      _this.warningUnhooked();
      var fieldEntities = _this.getFieldEntities();
      if (!nameList) {
        return fieldEntities.some(function(testField) {
          return testField.isFieldValidating();
        });
      }
      var namePathList = nameList.map(getNamePath);
      return fieldEntities.some(function(testField) {
        var fieldNamePath = testField.getNamePath();
        return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
      });
    });
    _defineProperty(this, "isFieldValidating", function(name) {
      _this.warningUnhooked();
      return _this.isFieldsValidating([name]);
    });
    _defineProperty(this, "resetWithFieldInitialValue", function() {
      var info = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var cache2 = new NameMap_default();
      var fieldEntities = _this.getFieldEntities(true);
      fieldEntities.forEach(function(field) {
        var initialValue = field.props.initialValue;
        var namePath = field.getNamePath();
        if (initialValue !== void 0) {
          var records = cache2.get(namePath) || /* @__PURE__ */ new Set();
          records.add({
            entity: field,
            value: initialValue
          });
          cache2.set(namePath, records);
        }
      });
      var resetWithFields = function resetWithFields2(entities) {
        entities.forEach(function(field) {
          var initialValue = field.props.initialValue;
          if (initialValue !== void 0) {
            var namePath = field.getNamePath();
            var formInitialValue = _this.getInitialValue(namePath);
            if (formInitialValue !== void 0) {
              warning_default(false, "Form already set 'initialValues' with path '".concat(namePath.join("."), "'. Field can not overwrite it."));
            } else {
              var records = cache2.get(namePath);
              if (records && records.size > 1) {
                warning_default(false, "Multiple Field with path '".concat(namePath.join("."), "' set 'initialValue'. Can not decide which one to pick."));
              } else if (records) {
                var originValue = _this.getFieldValue(namePath);
                var isListField = field.isListField();
                if (!isListField && (!info.skipExist || originValue === void 0)) {
                  _this.updateStore(set2(_this.store, namePath, _toConsumableArray(records)[0].value));
                }
              }
            }
          }
        });
      };
      var requiredFieldEntities;
      if (info.entities) {
        requiredFieldEntities = info.entities;
      } else if (info.namePathList) {
        requiredFieldEntities = [];
        info.namePathList.forEach(function(namePath) {
          var records = cache2.get(namePath);
          if (records) {
            var _requiredFieldEntitie;
            (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArray(_toConsumableArray(records).map(function(r2) {
              return r2.entity;
            })));
          }
        });
      } else {
        requiredFieldEntities = fieldEntities;
      }
      resetWithFields(requiredFieldEntities);
    });
    _defineProperty(this, "resetFields", function(nameList) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      if (!nameList) {
        _this.updateStore(merge(_this.initialValues));
        _this.resetWithFieldInitialValue();
        _this.notifyObservers(prevStore, null, {
          type: "reset"
        });
        _this.notifyWatch();
        return;
      }
      var namePathList = nameList.map(getNamePath);
      namePathList.forEach(function(namePath) {
        var initialValue = _this.getInitialValue(namePath);
        _this.updateStore(set2(_this.store, namePath, initialValue));
      });
      _this.resetWithFieldInitialValue({
        namePathList
      });
      _this.notifyObservers(prevStore, namePathList, {
        type: "reset"
      });
      _this.notifyWatch(namePathList);
    });
    _defineProperty(this, "setFields", function(fields) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      var namePathList = [];
      fields.forEach(function(fieldData) {
        var name = fieldData.name, data = _objectWithoutProperties(fieldData, _excluded6);
        var namePath = getNamePath(name);
        namePathList.push(namePath);
        if ("value" in data) {
          _this.updateStore(set2(_this.store, namePath, data.value));
        }
        _this.notifyObservers(prevStore, [namePath], {
          type: "setField",
          data: fieldData
        });
      });
      _this.notifyWatch(namePathList);
    });
    _defineProperty(this, "getFields", function() {
      var entities = _this.getFieldEntities(true);
      var fields = entities.map(function(field) {
        var namePath = field.getNamePath();
        var meta = field.getMeta();
        var fieldData = _objectSpread2(_objectSpread2({}, meta), {}, {
          name: namePath,
          value: _this.getFieldValue(namePath)
        });
        Object.defineProperty(fieldData, "originRCField", {
          value: true
        });
        return fieldData;
      });
      return fields;
    });
    _defineProperty(this, "initEntityValue", function(entity) {
      var initialValue = entity.props.initialValue;
      if (initialValue !== void 0) {
        var namePath = entity.getNamePath();
        var prevValue = get(_this.store, namePath);
        if (prevValue === void 0) {
          _this.updateStore(set2(_this.store, namePath, initialValue));
        }
      }
    });
    _defineProperty(this, "isMergedPreserve", function(fieldPreserve) {
      var mergedPreserve = fieldPreserve !== void 0 ? fieldPreserve : _this.preserve;
      return mergedPreserve !== null && mergedPreserve !== void 0 ? mergedPreserve : true;
    });
    _defineProperty(this, "registerField", function(entity) {
      _this.fieldEntities.push(entity);
      var namePath = entity.getNamePath();
      _this.notifyWatch([namePath]);
      if (entity.props.initialValue !== void 0) {
        var prevStore = _this.store;
        _this.resetWithFieldInitialValue({
          entities: [entity],
          skipExist: true
        });
        _this.notifyObservers(prevStore, [entity.getNamePath()], {
          type: "valueUpdate",
          source: "internal"
        });
      }
      return function(isListField, preserve2) {
        var subNamePath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        _this.fieldEntities = _this.fieldEntities.filter(function(item) {
          return item !== entity;
        });
        if (!_this.isMergedPreserve(preserve2) && (!isListField || subNamePath.length > 1)) {
          var defaultValue = isListField ? void 0 : _this.getInitialValue(namePath);
          if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function(field) {
            return (
              // Only reset when no namePath exist
              !matchNamePath(field.getNamePath(), namePath)
            );
          })) {
            var _prevStore = _this.store;
            _this.updateStore(set2(_prevStore, namePath, defaultValue, true));
            _this.notifyObservers(_prevStore, [namePath], {
              type: "remove"
            });
            _this.triggerDependenciesUpdate(_prevStore, namePath);
          }
        }
        _this.notifyWatch([namePath]);
      };
    });
    _defineProperty(this, "dispatch", function(action) {
      switch (action.type) {
        case "updateValue": {
          var namePath = action.namePath, value = action.value;
          _this.updateValue(namePath, value);
          break;
        }
        case "validateField": {
          var _namePath = action.namePath, triggerName = action.triggerName;
          _this.validateFields([_namePath], {
            triggerName
          });
          break;
        }
        default:
      }
    });
    _defineProperty(this, "notifyObservers", function(prevStore, namePathList, info) {
      if (_this.subscribable) {
        var mergedInfo = _objectSpread2(_objectSpread2({}, info), {}, {
          store: _this.getFieldsValue(true)
        });
        _this.getFieldEntities().forEach(function(_ref5) {
          var onStoreChange = _ref5.onStoreChange;
          onStoreChange(prevStore, namePathList, mergedInfo);
        });
      } else {
        _this.forceRootUpdate();
      }
    });
    _defineProperty(this, "triggerDependenciesUpdate", function(prevStore, namePath) {
      var childrenFields = _this.getDependencyChildrenFields(namePath);
      if (childrenFields.length) {
        _this.validateFields(childrenFields);
      }
      _this.notifyObservers(prevStore, childrenFields, {
        type: "dependenciesUpdate",
        relatedFields: [namePath].concat(_toConsumableArray(childrenFields))
      });
      return childrenFields;
    });
    _defineProperty(this, "updateValue", function(name, value) {
      var namePath = getNamePath(name);
      var prevStore = _this.store;
      _this.updateStore(set2(_this.store, namePath, value));
      _this.notifyObservers(prevStore, [namePath], {
        type: "valueUpdate",
        source: "internal"
      });
      _this.notifyWatch([namePath]);
      var childrenFields = _this.triggerDependenciesUpdate(prevStore, namePath);
      var onValuesChange = _this.callbacks.onValuesChange;
      if (onValuesChange) {
        var changedValues = cloneByNamePathList(_this.store, [namePath]);
        onValuesChange(changedValues, _this.getFieldsValue());
      }
      _this.triggerOnFieldsChange([namePath].concat(_toConsumableArray(childrenFields)));
    });
    _defineProperty(this, "setFieldsValue", function(store2) {
      _this.warningUnhooked();
      var prevStore = _this.store;
      if (store2) {
        var nextStore = merge(_this.store, store2);
        _this.updateStore(nextStore);
      }
      _this.notifyObservers(prevStore, null, {
        type: "valueUpdate",
        source: "external"
      });
      _this.notifyWatch();
    });
    _defineProperty(this, "setFieldValue", function(name, value) {
      _this.setFields([{
        name,
        value
      }]);
    });
    _defineProperty(this, "getDependencyChildrenFields", function(rootNamePath) {
      var children = /* @__PURE__ */ new Set();
      var childrenFields = [];
      var dependencies2fields = new NameMap_default();
      _this.getFieldEntities().forEach(function(field) {
        var dependencies = field.props.dependencies;
        (dependencies || []).forEach(function(dependency) {
          var dependencyNamePath = getNamePath(dependency);
          dependencies2fields.update(dependencyNamePath, function() {
            var fields = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : /* @__PURE__ */ new Set();
            fields.add(field);
            return fields;
          });
        });
      });
      var fillChildren = function fillChildren2(namePath) {
        var fields = dependencies2fields.get(namePath) || /* @__PURE__ */ new Set();
        fields.forEach(function(field) {
          if (!children.has(field)) {
            children.add(field);
            var fieldNamePath = field.getNamePath();
            if (field.isFieldDirty() && fieldNamePath.length) {
              childrenFields.push(fieldNamePath);
              fillChildren2(fieldNamePath);
            }
          }
        });
      };
      fillChildren(rootNamePath);
      return childrenFields;
    });
    _defineProperty(this, "triggerOnFieldsChange", function(namePathList, filedErrors) {
      var onFieldsChange = _this.callbacks.onFieldsChange;
      if (onFieldsChange) {
        var fields = _this.getFields();
        if (filedErrors) {
          var cache2 = new NameMap_default();
          filedErrors.forEach(function(_ref6) {
            var name = _ref6.name, errors2 = _ref6.errors;
            cache2.set(name, errors2);
          });
          fields.forEach(function(field) {
            field.errors = cache2.get(field.name) || field.errors;
          });
        }
        var changedFields = fields.filter(function(_ref7) {
          var fieldName = _ref7.name;
          return containsNamePath(namePathList, fieldName);
        });
        if (changedFields.length) {
          onFieldsChange(changedFields, fields);
        }
      }
    });
    _defineProperty(this, "validateFields", function(arg1, arg2) {
      _this.warningUnhooked();
      var nameList;
      var options;
      if (Array.isArray(arg1) || typeof arg1 === "string" || typeof arg2 === "string") {
        nameList = arg1;
        options = arg2;
      } else {
        options = arg1;
      }
      var provideNameList = !!nameList;
      var namePathList = provideNameList ? nameList.map(getNamePath) : [];
      var promiseList = [];
      var TMP_SPLIT = String(Date.now());
      var validateNamePathList = /* @__PURE__ */ new Set();
      var _ref8 = options || {}, recursive = _ref8.recursive, dirty = _ref8.dirty;
      _this.getFieldEntities(true).forEach(function(field) {
        if (!provideNameList) {
          namePathList.push(field.getNamePath());
        }
        if (!field.props.rules || !field.props.rules.length) {
          return;
        }
        if (dirty && !field.isFieldDirty()) {
          return;
        }
        var fieldNamePath = field.getNamePath();
        validateNamePathList.add(fieldNamePath.join(TMP_SPLIT));
        if (!provideNameList || containsNamePath(namePathList, fieldNamePath, recursive)) {
          var promise = field.validateRules(_objectSpread2({
            validateMessages: _objectSpread2(_objectSpread2({}, defaultValidateMessages), _this.validateMessages)
          }, options));
          promiseList.push(promise.then(function() {
            return {
              name: fieldNamePath,
              errors: [],
              warnings: []
            };
          }).catch(function(ruleErrors) {
            var _ruleErrors$forEach;
            var mergedErrors = [];
            var mergedWarnings = [];
            (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 || _ruleErrors$forEach.call(ruleErrors, function(_ref9) {
              var warningOnly = _ref9.rule.warningOnly, errors2 = _ref9.errors;
              if (warningOnly) {
                mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors2));
              } else {
                mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors2));
              }
            });
            if (mergedErrors.length) {
              return Promise.reject({
                name: fieldNamePath,
                errors: mergedErrors,
                warnings: mergedWarnings
              });
            }
            return {
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            };
          }));
        }
      });
      var summaryPromise = allPromiseFinish(promiseList);
      _this.lastValidatePromise = summaryPromise;
      summaryPromise.catch(function(results) {
        return results;
      }).then(function(results) {
        var resultNamePathList = results.map(function(_ref10) {
          var name = _ref10.name;
          return name;
        });
        _this.notifyObservers(_this.store, resultNamePathList, {
          type: "validateFinish"
        });
        _this.triggerOnFieldsChange(resultNamePathList, results);
      });
      var returnPromise = summaryPromise.then(function() {
        if (_this.lastValidatePromise === summaryPromise) {
          return Promise.resolve(_this.getFieldsValue(namePathList));
        }
        return Promise.reject([]);
      }).catch(function(results) {
        var errorList = results.filter(function(result) {
          return result && result.errors.length;
        });
        return Promise.reject({
          values: _this.getFieldsValue(namePathList),
          errorFields: errorList,
          outOfDate: _this.lastValidatePromise !== summaryPromise
        });
      });
      returnPromise.catch(function(e3) {
        return e3;
      });
      var triggerNamePathList = namePathList.filter(function(namePath) {
        return validateNamePathList.has(namePath.join(TMP_SPLIT));
      });
      _this.triggerOnFieldsChange(triggerNamePathList);
      return returnPromise;
    });
    _defineProperty(this, "submit", function() {
      _this.warningUnhooked();
      _this.validateFields().then(function(values) {
        var onFinish = _this.callbacks.onFinish;
        if (onFinish) {
          try {
            onFinish(values);
          } catch (err) {
            console.error(err);
          }
        }
      }).catch(function(e3) {
        var onFinishFailed = _this.callbacks.onFinishFailed;
        if (onFinishFailed) {
          onFinishFailed(e3);
        }
      });
    });
    this.forceRootUpdate = forceRootUpdate;
  });
  function useForm(form) {
    var formRef = React84.useRef();
    var _React$useState = React84.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), forceUpdate = _React$useState2[1];
    if (!formRef.current) {
      if (form) {
        formRef.current = form;
      } else {
        var forceReRender = function forceReRender2() {
          forceUpdate({});
        };
        var formStore = new FormStore(forceReRender);
        formRef.current = formStore.getForm();
      }
    }
    return [formRef.current];
  }
  var useForm_default = useForm;

  // node_modules/rc-field-form/es/Form.js
  var React86 = __toESM(require_react());

  // node_modules/rc-field-form/es/FormContext.js
  var React85 = __toESM(require_react());
  var FormContext = /* @__PURE__ */ React85.createContext({
    triggerFormChange: function triggerFormChange() {
    },
    triggerFormFinish: function triggerFormFinish() {
    },
    registerForm: function registerForm() {
    },
    unregisterForm: function unregisterForm() {
    }
  });
  var FormProvider = function FormProvider2(_ref) {
    var validateMessages = _ref.validateMessages, onFormChange = _ref.onFormChange, onFormFinish = _ref.onFormFinish, children = _ref.children;
    var formContext = React85.useContext(FormContext);
    var formsRef = React85.useRef({});
    return /* @__PURE__ */ React85.createElement(FormContext.Provider, {
      value: _objectSpread2(_objectSpread2({}, formContext), {}, {
        validateMessages: _objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages),
        // =========================================================
        // =                  Global Form Control                  =
        // =========================================================
        triggerFormChange: function triggerFormChange2(name, changedFields) {
          if (onFormChange) {
            onFormChange(name, {
              changedFields,
              forms: formsRef.current
            });
          }
          formContext.triggerFormChange(name, changedFields);
        },
        triggerFormFinish: function triggerFormFinish2(name, values) {
          if (onFormFinish) {
            onFormFinish(name, {
              values,
              forms: formsRef.current
            });
          }
          formContext.triggerFormFinish(name, values);
        },
        registerForm: function registerForm2(name, form) {
          if (name) {
            formsRef.current = _objectSpread2(_objectSpread2({}, formsRef.current), {}, _defineProperty({}, name, form));
          }
          formContext.registerForm(name, form);
        },
        unregisterForm: function unregisterForm2(name) {
          var newForms = _objectSpread2({}, formsRef.current);
          delete newForms[name];
          formsRef.current = newForms;
          formContext.unregisterForm(name);
        }
      })
    }, children);
  };
  var FormContext_default = FormContext;

  // node_modules/rc-field-form/es/Form.js
  var _excluded7 = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];
  var Form = function Form2(_ref, ref) {
    var name = _ref.name, initialValues = _ref.initialValues, fields = _ref.fields, form = _ref.form, preserve2 = _ref.preserve, children = _ref.children, _ref$component = _ref.component, Component11 = _ref$component === void 0 ? "form" : _ref$component, validateMessages = _ref.validateMessages, _ref$validateTrigger = _ref.validateTrigger, validateTrigger = _ref$validateTrigger === void 0 ? "onChange" : _ref$validateTrigger, onValuesChange = _ref.onValuesChange, _onFieldsChange = _ref.onFieldsChange, _onFinish = _ref.onFinish, onFinishFailed = _ref.onFinishFailed, restProps = _objectWithoutProperties(_ref, _excluded7);
    var formContext = React86.useContext(FormContext_default);
    var _useForm = useForm_default(form), _useForm2 = _slicedToArray(_useForm, 1), formInstance = _useForm2[0];
    var _getInternalHooks = formInstance.getInternalHooks(HOOK_MARK), useSubscribe = _getInternalHooks.useSubscribe, setInitialValues = _getInternalHooks.setInitialValues, setCallbacks = _getInternalHooks.setCallbacks, setValidateMessages = _getInternalHooks.setValidateMessages, setPreserve = _getInternalHooks.setPreserve, destroyForm = _getInternalHooks.destroyForm;
    React86.useImperativeHandle(ref, function() {
      return formInstance;
    });
    React86.useEffect(function() {
      formContext.registerForm(name, formInstance);
      return function() {
        formContext.unregisterForm(name);
      };
    }, [formContext, formInstance, name]);
    setValidateMessages(_objectSpread2(_objectSpread2({}, formContext.validateMessages), validateMessages));
    setCallbacks({
      onValuesChange,
      onFieldsChange: function onFieldsChange(changedFields) {
        formContext.triggerFormChange(name, changedFields);
        if (_onFieldsChange) {
          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }
          _onFieldsChange.apply(void 0, [changedFields].concat(rest));
        }
      },
      onFinish: function onFinish(values) {
        formContext.triggerFormFinish(name, values);
        if (_onFinish) {
          _onFinish(values);
        }
      },
      onFinishFailed
    });
    setPreserve(preserve2);
    var mountRef = React86.useRef(null);
    setInitialValues(initialValues, !mountRef.current);
    if (!mountRef.current) {
      mountRef.current = true;
    }
    React86.useEffect(
      function() {
        return destroyForm;
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    var childrenNode;
    var childrenRenderProps = typeof children === "function";
    if (childrenRenderProps) {
      var _values = formInstance.getFieldsValue(true);
      childrenNode = children(_values, formInstance);
    } else {
      childrenNode = children;
    }
    useSubscribe(!childrenRenderProps);
    var prevFieldsRef = React86.useRef();
    React86.useEffect(function() {
      if (!isSimilar(prevFieldsRef.current || [], fields || [])) {
        formInstance.setFields(fields || []);
      }
      prevFieldsRef.current = fields;
    }, [fields, formInstance]);
    var formContextValue = React86.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, formInstance), {}, {
        validateTrigger
      });
    }, [formInstance, validateTrigger]);
    var wrapperNode = /* @__PURE__ */ React86.createElement(ListContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React86.createElement(FieldContext_default.Provider, {
      value: formContextValue
    }, childrenNode));
    if (Component11 === false) {
      return wrapperNode;
    }
    return /* @__PURE__ */ React86.createElement(Component11, _extends({}, restProps, {
      onSubmit: function onSubmit(event) {
        event.preventDefault();
        event.stopPropagation();
        formInstance.submit();
      },
      onReset: function onReset(event) {
        var _restProps$onReset;
        event.preventDefault();
        formInstance.resetFields();
        (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 || _restProps$onReset.call(restProps, event);
      }
    }), wrapperNode);
  };
  var Form_default = Form;

  // node_modules/rc-field-form/es/useWatch.js
  var import_react33 = __toESM(require_react());
  function stringify2(value) {
    try {
      return JSON.stringify(value);
    } catch (err) {
      return Math.random();
    }
  }
  var useWatchWarning = true ? function(namePath) {
    var fullyStr = namePath.join("__RC_FIELD_FORM_SPLIT__");
    var nameStrRef = (0, import_react33.useRef)(fullyStr);
    warning_default(nameStrRef.current === fullyStr, "`useWatch` is not support dynamic `namePath`. Please provide static instead.");
  } : function() {
  };
  function useWatch() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var dependencies = args[0], _args$ = args[1], _form = _args$ === void 0 ? {} : _args$;
    var options = isFormInstance(_form) ? {
      form: _form
    } : _form;
    var form = options.form;
    var _useState = (0, import_react33.useState)(), _useState2 = _slicedToArray(_useState, 2), value = _useState2[0], setValue = _useState2[1];
    var valueStr = (0, import_react33.useMemo)(function() {
      return stringify2(value);
    }, [value]);
    var valueStrRef = (0, import_react33.useRef)(valueStr);
    valueStrRef.current = valueStr;
    var fieldContext = (0, import_react33.useContext)(FieldContext_default);
    var formInstance = form || fieldContext;
    var isValidForm = formInstance && formInstance._init;
    if (true) {
      warning_default(args.length === 2 ? form ? isValidForm : true : isValidForm, "useWatch requires a form instance since it can not auto detect from context.");
    }
    var namePath = getNamePath(dependencies);
    var namePathRef = (0, import_react33.useRef)(namePath);
    namePathRef.current = namePath;
    useWatchWarning(namePath);
    (0, import_react33.useEffect)(
      function() {
        if (!isValidForm) {
          return;
        }
        var getFieldsValue = formInstance.getFieldsValue, getInternalHooks2 = formInstance.getInternalHooks;
        var _getInternalHooks = getInternalHooks2(HOOK_MARK), registerWatch = _getInternalHooks.registerWatch;
        var getWatchValue = function getWatchValue2(values, allValues) {
          var watchValue = options.preserve ? allValues : values;
          return typeof dependencies === "function" ? dependencies(watchValue) : get(watchValue, namePathRef.current);
        };
        var cancelRegister = registerWatch(function(values, allValues) {
          var newValue = getWatchValue(values, allValues);
          var nextValueStr = stringify2(newValue);
          if (valueStrRef.current !== nextValueStr) {
            valueStrRef.current = nextValueStr;
            setValue(newValue);
          }
        });
        var initialValue = getWatchValue(getFieldsValue(), getFieldsValue(true));
        if (value !== initialValue) {
          setValue(initialValue);
        }
        return cancelRegister;
      },
      // We do not need re-register since namePath content is the same
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [isValidForm]
    );
    return value;
  }
  var useWatch_default = useWatch;

  // node_modules/rc-field-form/es/index.js
  var InternalForm = /* @__PURE__ */ React87.forwardRef(Form_default);
  var RefForm = InternalForm;
  RefForm.FormProvider = FormProvider;
  RefForm.Field = Field_default;
  RefForm.List = List_default;
  RefForm.useForm = useForm_default;
  RefForm.useWatch = useWatch_default;
  var es_default5 = RefForm;

  // node_modules/antd/es/form/context.js
  var FormContext2 = /* @__PURE__ */ React88.createContext({
    labelAlign: "right",
    vertical: false,
    itemRef: () => {
    }
  });
  var NoStyleItemContext = /* @__PURE__ */ React88.createContext(null);
  var FormProvider3 = (props) => {
    const providerProps = omit(props, ["prefixCls"]);
    return /* @__PURE__ */ React88.createElement(FormProvider, Object.assign({}, providerProps));
  };
  var FormItemPrefixContext = /* @__PURE__ */ React88.createContext({
    prefixCls: ""
  });
  var FormItemInputContext = /* @__PURE__ */ React88.createContext({});
  if (true) {
    FormItemInputContext.displayName = "FormItemInputContext";
  }
  var NoFormStyle = (_ref) => {
    let {
      children,
      status,
      override
    } = _ref;
    const formItemInputContext = (0, import_react34.useContext)(FormItemInputContext);
    const newFormItemInputContext = (0, import_react34.useMemo)(() => {
      const newContext = Object.assign({}, formItemInputContext);
      if (override) {
        delete newContext.isFormItemInput;
      }
      if (status) {
        delete newContext.status;
        delete newContext.hasFeedback;
        delete newContext.feedbackIcon;
      }
      return newContext;
    }, [status, override, formItemInputContext]);
    return /* @__PURE__ */ React88.createElement(FormItemInputContext.Provider, {
      value: newFormItemInputContext
    }, children);
  };
  var VariantContext = /* @__PURE__ */ (0, import_react34.createContext)(void 0);

  // node_modules/antd/es/watermark/context.js
  var React89 = __toESM(require_react());
  function voidFunc() {
  }
  var WatermarkContext = /* @__PURE__ */ React89.createContext({
    add: voidFunc,
    remove: voidFunc
  });
  function usePanelRef(panelSelector) {
    const watermark = React89.useContext(WatermarkContext);
    const panelEleRef = React89.useRef();
    const panelRef = useEvent((ele) => {
      if (ele) {
        const innerContentEle = panelSelector ? ele.querySelector(panelSelector) : ele;
        watermark.add(innerContentEle);
        panelEleRef.current = innerContentEle;
      } else {
        watermark.remove(panelEleRef.current);
      }
    });
    return panelRef;
  }

  // node_modules/antd/es/modal/shared.js
  var import_react37 = __toESM(require_react());

  // node_modules/antd/es/modal/components/NormalCancelBtn.js
  var import_react35 = __toESM(require_react());
  var NormalCancelBtn = () => {
    const {
      cancelButtonProps,
      cancelTextLocale,
      onCancel
    } = (0, import_react35.useContext)(ModalContext);
    return /* @__PURE__ */ import_react35.default.createElement(button_default2, Object.assign({
      onClick: onCancel
    }, cancelButtonProps), cancelTextLocale);
  };
  var NormalCancelBtn_default = NormalCancelBtn;

  // node_modules/antd/es/modal/components/NormalOkBtn.js
  var import_react36 = __toESM(require_react());
  var NormalOkBtn = () => {
    const {
      confirmLoading,
      okButtonProps,
      okType,
      okTextLocale,
      onOk
    } = (0, import_react36.useContext)(ModalContext);
    return /* @__PURE__ */ import_react36.default.createElement(button_default2, Object.assign({}, convertLegacyProps(okType), {
      loading: confirmLoading,
      onClick: onOk
    }, okButtonProps), okTextLocale);
  };
  var NormalOkBtn_default = NormalOkBtn;

  // node_modules/antd/es/modal/shared.js
  function renderCloseIcon(prefixCls, closeIcon) {
    return /* @__PURE__ */ import_react37.default.createElement("span", {
      className: `${prefixCls}-close-x`
    }, closeIcon || /* @__PURE__ */ import_react37.default.createElement(CloseOutlined_default2, {
      className: `${prefixCls}-close-icon`
    }));
  }
  var Footer = (props) => {
    const {
      okText,
      okType = "primary",
      cancelText,
      confirmLoading,
      onOk,
      onCancel,
      okButtonProps,
      cancelButtonProps,
      footer
    } = props;
    const [locale9] = useLocale_default("Modal", getConfirmLocale());
    const okTextLocale = okText || (locale9 === null || locale9 === void 0 ? void 0 : locale9.okText);
    const cancelTextLocale = cancelText || (locale9 === null || locale9 === void 0 ? void 0 : locale9.cancelText);
    const btnCtxValue = {
      confirmLoading,
      okButtonProps,
      cancelButtonProps,
      okTextLocale,
      cancelTextLocale,
      okType,
      onOk,
      onCancel
    };
    const btnCtxValueMemo = import_react37.default.useMemo(() => btnCtxValue, _toConsumableArray(Object.values(btnCtxValue)));
    let footerNode;
    if (typeof footer === "function" || typeof footer === "undefined") {
      footerNode = /* @__PURE__ */ import_react37.default.createElement(import_react37.default.Fragment, null, /* @__PURE__ */ import_react37.default.createElement(NormalCancelBtn_default, null), /* @__PURE__ */ import_react37.default.createElement(NormalOkBtn_default, null));
      if (typeof footer === "function") {
        footerNode = footer(footerNode, {
          OkBtn: NormalOkBtn_default,
          CancelBtn: NormalCancelBtn_default
        });
      }
      footerNode = /* @__PURE__ */ import_react37.default.createElement(ModalContextProvider, {
        value: btnCtxValueMemo
      }, footerNode);
    } else {
      footerNode = footer;
    }
    return /* @__PURE__ */ import_react37.default.createElement(DisabledContextProvider, {
      disabled: false
    }, footerNode);
  };

  // node_modules/antd/es/style/motion/motion.js
  var initMotionCommon = (duration) => ({
    animationDuration: duration,
    animationFillMode: "both"
  });
  var initMotionCommonLeave = (duration) => ({
    animationDuration: duration,
    animationFillMode: "both"
  });
  var initMotion = function(motionCls, inKeyframes, outKeyframes, duration) {
    let sameLevel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    const sameLevelPrefix = sameLevel ? "&" : "";
    return {
      [`
      ${sameLevelPrefix}${motionCls}-enter,
      ${sameLevelPrefix}${motionCls}-appear
    `]: Object.assign(Object.assign({}, initMotionCommon(duration)), {
        animationPlayState: "paused"
      }),
      [`${sameLevelPrefix}${motionCls}-leave`]: Object.assign(Object.assign({}, initMotionCommonLeave(duration)), {
        animationPlayState: "paused"
      }),
      [`
      ${sameLevelPrefix}${motionCls}-enter${motionCls}-enter-active,
      ${sameLevelPrefix}${motionCls}-appear${motionCls}-appear-active
    `]: {
        animationName: inKeyframes,
        animationPlayState: "running"
      },
      [`${sameLevelPrefix}${motionCls}-leave${motionCls}-leave-active`]: {
        animationName: outKeyframes,
        animationPlayState: "running",
        pointerEvents: "none"
      }
    };
  };

  // node_modules/antd/es/style/motion/fade.js
  var fadeIn = new Keyframes_default("antFadeIn", {
    "0%": {
      opacity: 0
    },
    "100%": {
      opacity: 1
    }
  });
  var fadeOut = new Keyframes_default("antFadeOut", {
    "0%": {
      opacity: 1
    },
    "100%": {
      opacity: 0
    }
  });
  var initFadeMotion = function(token2) {
    let sameLevel = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const {
      antCls
    } = token2;
    const motionCls = `${antCls}-fade`;
    const sameLevelPrefix = sameLevel ? "&" : "";
    return [initMotion(motionCls, fadeIn, fadeOut, token2.motionDurationMid, sameLevel), {
      [`
        ${sameLevelPrefix}${motionCls}-enter,
        ${sameLevelPrefix}${motionCls}-appear
      `]: {
        opacity: 0,
        animationTimingFunction: "linear"
      },
      [`${sameLevelPrefix}${motionCls}-leave`]: {
        animationTimingFunction: "linear"
      }
    }];
  };

  // node_modules/antd/es/style/motion/move.js
  var moveDownIn = new Keyframes_default("antMoveDownIn", {
    "0%": {
      transform: "translate3d(0, 100%, 0)",
      transformOrigin: "0 0",
      opacity: 0
    },
    "100%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    }
  });
  var moveDownOut = new Keyframes_default("antMoveDownOut", {
    "0%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    },
    "100%": {
      transform: "translate3d(0, 100%, 0)",
      transformOrigin: "0 0",
      opacity: 0
    }
  });
  var moveLeftIn = new Keyframes_default("antMoveLeftIn", {
    "0%": {
      transform: "translate3d(-100%, 0, 0)",
      transformOrigin: "0 0",
      opacity: 0
    },
    "100%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    }
  });
  var moveLeftOut = new Keyframes_default("antMoveLeftOut", {
    "0%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    },
    "100%": {
      transform: "translate3d(-100%, 0, 0)",
      transformOrigin: "0 0",
      opacity: 0
    }
  });
  var moveRightIn = new Keyframes_default("antMoveRightIn", {
    "0%": {
      transform: "translate3d(100%, 0, 0)",
      transformOrigin: "0 0",
      opacity: 0
    },
    "100%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    }
  });
  var moveRightOut = new Keyframes_default("antMoveRightOut", {
    "0%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    },
    "100%": {
      transform: "translate3d(100%, 0, 0)",
      transformOrigin: "0 0",
      opacity: 0
    }
  });
  var moveUpIn = new Keyframes_default("antMoveUpIn", {
    "0%": {
      transform: "translate3d(0, -100%, 0)",
      transformOrigin: "0 0",
      opacity: 0
    },
    "100%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    }
  });
  var moveUpOut = new Keyframes_default("antMoveUpOut", {
    "0%": {
      transform: "translate3d(0, 0, 0)",
      transformOrigin: "0 0",
      opacity: 1
    },
    "100%": {
      transform: "translate3d(0, -100%, 0)",
      transformOrigin: "0 0",
      opacity: 0
    }
  });
  var moveMotion = {
    "move-up": {
      inKeyframes: moveUpIn,
      outKeyframes: moveUpOut
    },
    "move-down": {
      inKeyframes: moveDownIn,
      outKeyframes: moveDownOut
    },
    "move-left": {
      inKeyframes: moveLeftIn,
      outKeyframes: moveLeftOut
    },
    "move-right": {
      inKeyframes: moveRightIn,
      outKeyframes: moveRightOut
    }
  };
  var initMoveMotion = (token2, motionName) => {
    const {
      antCls
    } = token2;
    const motionCls = `${antCls}-${motionName}`;
    const {
      inKeyframes,
      outKeyframes
    } = moveMotion[motionName];
    return [initMotion(motionCls, inKeyframes, outKeyframes, token2.motionDurationMid), {
      [`
        ${motionCls}-enter,
        ${motionCls}-appear
      `]: {
        opacity: 0,
        animationTimingFunction: token2.motionEaseOutCirc
      },
      [`${motionCls}-leave`]: {
        animationTimingFunction: token2.motionEaseInOutCirc
      }
    }];
  };

  // node_modules/antd/es/style/motion/slide.js
  var slideUpIn = new Keyframes_default("antSlideUpIn", {
    "0%": {
      transform: "scaleY(0.8)",
      transformOrigin: "0% 0%",
      opacity: 0
    },
    "100%": {
      transform: "scaleY(1)",
      transformOrigin: "0% 0%",
      opacity: 1
    }
  });
  var slideUpOut = new Keyframes_default("antSlideUpOut", {
    "0%": {
      transform: "scaleY(1)",
      transformOrigin: "0% 0%",
      opacity: 1
    },
    "100%": {
      transform: "scaleY(0.8)",
      transformOrigin: "0% 0%",
      opacity: 0
    }
  });
  var slideDownIn = new Keyframes_default("antSlideDownIn", {
    "0%": {
      transform: "scaleY(0.8)",
      transformOrigin: "100% 100%",
      opacity: 0
    },
    "100%": {
      transform: "scaleY(1)",
      transformOrigin: "100% 100%",
      opacity: 1
    }
  });
  var slideDownOut = new Keyframes_default("antSlideDownOut", {
    "0%": {
      transform: "scaleY(1)",
      transformOrigin: "100% 100%",
      opacity: 1
    },
    "100%": {
      transform: "scaleY(0.8)",
      transformOrigin: "100% 100%",
      opacity: 0
    }
  });
  var slideLeftIn = new Keyframes_default("antSlideLeftIn", {
    "0%": {
      transform: "scaleX(0.8)",
      transformOrigin: "0% 0%",
      opacity: 0
    },
    "100%": {
      transform: "scaleX(1)",
      transformOrigin: "0% 0%",
      opacity: 1
    }
  });
  var slideLeftOut = new Keyframes_default("antSlideLeftOut", {
    "0%": {
      transform: "scaleX(1)",
      transformOrigin: "0% 0%",
      opacity: 1
    },
    "100%": {
      transform: "scaleX(0.8)",
      transformOrigin: "0% 0%",
      opacity: 0
    }
  });
  var slideRightIn = new Keyframes_default("antSlideRightIn", {
    "0%": {
      transform: "scaleX(0.8)",
      transformOrigin: "100% 0%",
      opacity: 0
    },
    "100%": {
      transform: "scaleX(1)",
      transformOrigin: "100% 0%",
      opacity: 1
    }
  });
  var slideRightOut = new Keyframes_default("antSlideRightOut", {
    "0%": {
      transform: "scaleX(1)",
      transformOrigin: "100% 0%",
      opacity: 1
    },
    "100%": {
      transform: "scaleX(0.8)",
      transformOrigin: "100% 0%",
      opacity: 0
    }
  });
  var slideMotion = {
    "slide-up": {
      inKeyframes: slideUpIn,
      outKeyframes: slideUpOut
    },
    "slide-down": {
      inKeyframes: slideDownIn,
      outKeyframes: slideDownOut
    },
    "slide-left": {
      inKeyframes: slideLeftIn,
      outKeyframes: slideLeftOut
    },
    "slide-right": {
      inKeyframes: slideRightIn,
      outKeyframes: slideRightOut
    }
  };
  var initSlideMotion = (token2, motionName) => {
    const {
      antCls
    } = token2;
    const motionCls = `${antCls}-${motionName}`;
    const {
      inKeyframes,
      outKeyframes
    } = slideMotion[motionName];
    return [initMotion(motionCls, inKeyframes, outKeyframes, token2.motionDurationMid), {
      [`
      ${motionCls}-enter,
      ${motionCls}-appear
    `]: {
        transform: "scale(0)",
        transformOrigin: "0% 0%",
        opacity: 0,
        animationTimingFunction: token2.motionEaseOutQuint,
        [`&-prepare`]: {
          transform: "scale(1)"
        }
      },
      [`${motionCls}-leave`]: {
        animationTimingFunction: token2.motionEaseInQuint
      }
    }];
  };

  // node_modules/antd/es/style/motion/zoom.js
  var zoomIn = new Keyframes_default("antZoomIn", {
    "0%": {
      transform: "scale(0.2)",
      opacity: 0
    },
    "100%": {
      transform: "scale(1)",
      opacity: 1
    }
  });
  var zoomOut = new Keyframes_default("antZoomOut", {
    "0%": {
      transform: "scale(1)"
    },
    "100%": {
      transform: "scale(0.2)",
      opacity: 0
    }
  });
  var zoomBigIn = new Keyframes_default("antZoomBigIn", {
    "0%": {
      transform: "scale(0.8)",
      opacity: 0
    },
    "100%": {
      transform: "scale(1)",
      opacity: 1
    }
  });
  var zoomBigOut = new Keyframes_default("antZoomBigOut", {
    "0%": {
      transform: "scale(1)"
    },
    "100%": {
      transform: "scale(0.8)",
      opacity: 0
    }
  });
  var zoomUpIn = new Keyframes_default("antZoomUpIn", {
    "0%": {
      transform: "scale(0.8)",
      transformOrigin: "50% 0%",
      opacity: 0
    },
    "100%": {
      transform: "scale(1)",
      transformOrigin: "50% 0%"
    }
  });
  var zoomUpOut = new Keyframes_default("antZoomUpOut", {
    "0%": {
      transform: "scale(1)",
      transformOrigin: "50% 0%"
    },
    "100%": {
      transform: "scale(0.8)",
      transformOrigin: "50% 0%",
      opacity: 0
    }
  });
  var zoomLeftIn = new Keyframes_default("antZoomLeftIn", {
    "0%": {
      transform: "scale(0.8)",
      transformOrigin: "0% 50%",
      opacity: 0
    },
    "100%": {
      transform: "scale(1)",
      transformOrigin: "0% 50%"
    }
  });
  var zoomLeftOut = new Keyframes_default("antZoomLeftOut", {
    "0%": {
      transform: "scale(1)",
      transformOrigin: "0% 50%"
    },
    "100%": {
      transform: "scale(0.8)",
      transformOrigin: "0% 50%",
      opacity: 0
    }
  });
  var zoomRightIn = new Keyframes_default("antZoomRightIn", {
    "0%": {
      transform: "scale(0.8)",
      transformOrigin: "100% 50%",
      opacity: 0
    },
    "100%": {
      transform: "scale(1)",
      transformOrigin: "100% 50%"
    }
  });
  var zoomRightOut = new Keyframes_default("antZoomRightOut", {
    "0%": {
      transform: "scale(1)",
      transformOrigin: "100% 50%"
    },
    "100%": {
      transform: "scale(0.8)",
      transformOrigin: "100% 50%",
      opacity: 0
    }
  });
  var zoomDownIn = new Keyframes_default("antZoomDownIn", {
    "0%": {
      transform: "scale(0.8)",
      transformOrigin: "50% 100%",
      opacity: 0
    },
    "100%": {
      transform: "scale(1)",
      transformOrigin: "50% 100%"
    }
  });
  var zoomDownOut = new Keyframes_default("antZoomDownOut", {
    "0%": {
      transform: "scale(1)",
      transformOrigin: "50% 100%"
    },
    "100%": {
      transform: "scale(0.8)",
      transformOrigin: "50% 100%",
      opacity: 0
    }
  });
  var zoomMotion = {
    zoom: {
      inKeyframes: zoomIn,
      outKeyframes: zoomOut
    },
    "zoom-big": {
      inKeyframes: zoomBigIn,
      outKeyframes: zoomBigOut
    },
    "zoom-big-fast": {
      inKeyframes: zoomBigIn,
      outKeyframes: zoomBigOut
    },
    "zoom-left": {
      inKeyframes: zoomLeftIn,
      outKeyframes: zoomLeftOut
    },
    "zoom-right": {
      inKeyframes: zoomRightIn,
      outKeyframes: zoomRightOut
    },
    "zoom-up": {
      inKeyframes: zoomUpIn,
      outKeyframes: zoomUpOut
    },
    "zoom-down": {
      inKeyframes: zoomDownIn,
      outKeyframes: zoomDownOut
    }
  };
  var initZoomMotion = (token2, motionName) => {
    const {
      antCls
    } = token2;
    const motionCls = `${antCls}-${motionName}`;
    const {
      inKeyframes,
      outKeyframes
    } = zoomMotion[motionName];
    return [initMotion(motionCls, inKeyframes, outKeyframes, motionName === "zoom-big-fast" ? token2.motionDurationFast : token2.motionDurationMid), {
      [`
        ${motionCls}-enter,
        ${motionCls}-appear
      `]: {
        transform: "scale(0)",
        opacity: 0,
        animationTimingFunction: token2.motionEaseOutCirc,
        "&-prepare": {
          transform: "none"
        }
      },
      [`${motionCls}-leave`]: {
        animationTimingFunction: token2.motionEaseInOutCirc
      }
    }];
  };

  // node_modules/antd/es/style/motion/collapse.js
  var genCollapseMotion = (token2) => ({
    [token2.componentCls]: {
      // For common/openAnimation
      [`${token2.antCls}-motion-collapse-legacy`]: {
        overflow: "hidden",
        "&-active": {
          transition: `height ${token2.motionDurationMid} ${token2.motionEaseInOut},
        opacity ${token2.motionDurationMid} ${token2.motionEaseInOut} !important`
        }
      },
      [`${token2.antCls}-motion-collapse`]: {
        overflow: "hidden",
        transition: `height ${token2.motionDurationMid} ${token2.motionEaseInOut},
        opacity ${token2.motionDurationMid} ${token2.motionEaseInOut} !important`
      }
    }
  });
  var collapse_default = genCollapseMotion;

  // node_modules/antd/es/modal/style/index.js
  function box(position2) {
    return {
      position: position2,
      inset: 0
    };
  }
  var genModalMaskStyle = (token2) => {
    const {
      componentCls,
      antCls
    } = token2;
    return [{
      [`${componentCls}-root`]: {
        [`${componentCls}${antCls}-zoom-enter, ${componentCls}${antCls}-zoom-appear`]: {
          // reset scale avoid mousePosition bug
          transform: "none",
          opacity: 0,
          animationDuration: token2.motionDurationSlow,
          // https://github.com/ant-design/ant-design/issues/11777
          userSelect: "none"
        },
        // https://github.com/ant-design/ant-design/issues/37329
        // https://github.com/ant-design/ant-design/issues/40272
        [`${componentCls}${antCls}-zoom-leave ${componentCls}-content`]: {
          pointerEvents: "none"
        },
        [`${componentCls}-mask`]: Object.assign(Object.assign({}, box("fixed")), {
          zIndex: token2.zIndexPopupBase,
          height: "100%",
          backgroundColor: token2.colorBgMask,
          pointerEvents: "none",
          [`${componentCls}-hidden`]: {
            display: "none"
          }
        }),
        [`${componentCls}-wrap`]: Object.assign(Object.assign({}, box("fixed")), {
          zIndex: token2.zIndexPopupBase,
          overflow: "auto",
          outline: 0,
          WebkitOverflowScrolling: "touch",
          // Note: Firefox not support `:has` yet
          [`&:has(${componentCls}${antCls}-zoom-enter), &:has(${componentCls}${antCls}-zoom-appear)`]: {
            pointerEvents: "none"
          }
        })
      }
    }, {
      [`${componentCls}-root`]: initFadeMotion(token2)
    }];
  };
  var genModalStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return [
      // ======================== Root =========================
      {
        [`${componentCls}-root`]: {
          [`${componentCls}-wrap-rtl`]: {
            direction: "rtl"
          },
          [`${componentCls}-centered`]: {
            textAlign: "center",
            "&::before": {
              display: "inline-block",
              width: 0,
              height: "100%",
              verticalAlign: "middle",
              content: '""'
            },
            [componentCls]: {
              top: 0,
              display: "inline-block",
              paddingBottom: 0,
              textAlign: "start",
              verticalAlign: "middle"
            }
          },
          [`@media (max-width: ${token2.screenSMMax}px)`]: {
            [componentCls]: {
              maxWidth: "calc(100vw - 16px)",
              margin: `${unit(token2.marginXS)} auto`
            },
            [`${componentCls}-centered`]: {
              [componentCls]: {
                flex: 1
              }
            }
          }
        }
      },
      // ======================== Modal ========================
      {
        [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
          pointerEvents: "none",
          position: "relative",
          top: 100,
          width: "auto",
          maxWidth: `calc(100vw - ${unit(token2.calc(token2.margin).mul(2).equal())})`,
          margin: "0 auto",
          paddingBottom: token2.paddingLG,
          [`${componentCls}-title`]: {
            margin: 0,
            color: token2.titleColor,
            fontWeight: token2.fontWeightStrong,
            fontSize: token2.titleFontSize,
            lineHeight: token2.titleLineHeight,
            wordWrap: "break-word"
          },
          [`${componentCls}-content`]: {
            position: "relative",
            backgroundColor: token2.contentBg,
            backgroundClip: "padding-box",
            border: 0,
            borderRadius: token2.borderRadiusLG,
            boxShadow: token2.boxShadow,
            pointerEvents: "auto",
            padding: token2.contentPadding
          },
          [`${componentCls}-close`]: Object.assign({
            position: "absolute",
            top: token2.calc(token2.modalHeaderHeight).sub(token2.modalCloseBtnSize).div(2).equal(),
            insetInlineEnd: token2.calc(token2.modalHeaderHeight).sub(token2.modalCloseBtnSize).div(2).equal(),
            zIndex: token2.calc(token2.zIndexPopupBase).add(10).equal(),
            padding: 0,
            color: token2.modalCloseIconColor,
            fontWeight: token2.fontWeightStrong,
            lineHeight: 1,
            textDecoration: "none",
            background: "transparent",
            borderRadius: token2.borderRadiusSM,
            width: token2.modalCloseBtnSize,
            height: token2.modalCloseBtnSize,
            border: 0,
            outline: 0,
            cursor: "pointer",
            transition: `color ${token2.motionDurationMid}, background-color ${token2.motionDurationMid}`,
            "&-x": {
              display: "flex",
              fontSize: token2.fontSizeLG,
              fontStyle: "normal",
              lineHeight: `${unit(token2.modalCloseBtnSize)}`,
              justifyContent: "center",
              textTransform: "none",
              textRendering: "auto"
            },
            "&:hover": {
              color: token2.modalIconHoverColor,
              backgroundColor: token2.closeBtnHoverBg,
              textDecoration: "none"
            },
            "&:active": {
              backgroundColor: token2.closeBtnActiveBg
            }
          }, genFocusStyle(token2)),
          [`${componentCls}-header`]: {
            color: token2.colorText,
            background: token2.headerBg,
            borderRadius: `${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)} 0 0`,
            marginBottom: token2.headerMarginBottom,
            padding: token2.headerPadding,
            borderBottom: token2.headerBorderBottom
          },
          [`${componentCls}-body`]: {
            fontSize: token2.fontSize,
            lineHeight: token2.lineHeight,
            wordWrap: "break-word",
            padding: token2.bodyPadding
          },
          [`${componentCls}-footer`]: {
            textAlign: "end",
            background: token2.footerBg,
            marginTop: token2.footerMarginTop,
            padding: token2.footerPadding,
            borderTop: token2.footerBorderTop,
            borderRadius: token2.footerBorderRadius,
            [`> ${token2.antCls}-btn + ${token2.antCls}-btn`]: {
              marginInlineStart: token2.marginXS
            }
          },
          [`${componentCls}-open`]: {
            overflow: "hidden"
          }
        })
      },
      // ======================== Pure =========================
      {
        [`${componentCls}-pure-panel`]: {
          top: "auto",
          padding: 0,
          display: "flex",
          flexDirection: "column",
          [`${componentCls}-content,
          ${componentCls}-body,
          ${componentCls}-confirm-body-wrapper`]: {
            display: "flex",
            flexDirection: "column",
            flex: "auto"
          },
          [`${componentCls}-confirm-body`]: {
            marginBottom: "auto"
          }
        }
      }
    ];
  };
  var genRTLStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-root`]: {
        [`${componentCls}-wrap-rtl`]: {
          direction: "rtl",
          [`${componentCls}-confirm-body`]: {
            direction: "rtl"
          }
        }
      }
    };
  };
  var prepareToken2 = (token2) => {
    const headerPaddingVertical = token2.padding;
    const headerFontSize = token2.fontSizeHeading5;
    const headerLineHeight = token2.lineHeightHeading5;
    const modalToken = merge2(token2, {
      modalHeaderHeight: token2.calc(token2.calc(headerLineHeight).mul(headerFontSize).equal()).add(token2.calc(headerPaddingVertical).mul(2).equal()).equal(),
      modalFooterBorderColorSplit: token2.colorSplit,
      modalFooterBorderStyle: token2.lineType,
      modalFooterBorderWidth: token2.lineWidth,
      modalIconHoverColor: token2.colorIconHover,
      modalCloseIconColor: token2.colorIcon,
      modalCloseBtnSize: token2.fontHeight,
      modalConfirmIconSize: token2.fontHeight,
      modalTitleHeight: token2.calc(token2.titleFontSize).mul(token2.titleLineHeight).equal()
    });
    return modalToken;
  };
  var prepareComponentToken2 = (token2) => ({
    footerBg: "transparent",
    headerBg: token2.colorBgElevated,
    titleLineHeight: token2.lineHeightHeading5,
    titleFontSize: token2.fontSizeHeading5,
    contentBg: token2.colorBgElevated,
    titleColor: token2.colorTextHeading,
    // internal
    closeBtnHoverBg: token2.wireframe ? "transparent" : token2.colorFillContent,
    closeBtnActiveBg: token2.wireframe ? "transparent" : token2.colorFillContentHover,
    contentPadding: token2.wireframe ? 0 : `${unit(token2.paddingMD)} ${unit(token2.paddingContentHorizontalLG)}`,
    headerPadding: token2.wireframe ? `${unit(token2.padding)} ${unit(token2.paddingLG)}` : 0,
    headerBorderBottom: token2.wireframe ? `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorSplit}` : "none",
    headerMarginBottom: token2.wireframe ? 0 : token2.marginXS,
    bodyPadding: token2.wireframe ? token2.paddingLG : 0,
    footerPadding: token2.wireframe ? `${unit(token2.paddingXS)} ${unit(token2.padding)}` : 0,
    footerBorderTop: token2.wireframe ? `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorSplit}` : "none",
    footerBorderRadius: token2.wireframe ? `0 0 ${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)}` : 0,
    footerMarginTop: token2.wireframe ? 0 : token2.marginSM,
    confirmBodyPadding: token2.wireframe ? `${unit(token2.padding * 2)} ${unit(token2.padding * 2)} ${unit(token2.paddingLG)}` : 0,
    confirmIconMarginInlineEnd: token2.wireframe ? token2.margin : token2.marginSM,
    confirmBtnsMarginTop: token2.wireframe ? token2.marginLG : token2.marginSM
  });
  var style_default4 = genStyleHooks("Modal", (token2) => {
    const modalToken = prepareToken2(token2);
    return [genModalStyle(modalToken), genRTLStyle(modalToken), genModalMaskStyle(modalToken), initZoomMotion(modalToken, "zoom")];
  }, prepareComponentToken2, {
    unitless: {
      titleLineHeight: true
    }
  });

  // node_modules/antd/es/modal/Modal.js
  var __rest7 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var mousePosition;
  var getClickPosition = (e3) => {
    mousePosition = {
      x: e3.pageX,
      y: e3.pageY
    };
    setTimeout(() => {
      mousePosition = null;
    }, 100);
  };
  if (canUseDocElement()) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }
  var Modal = (props) => {
    var _a;
    const {
      getPopupContainer: getContextPopupContainer,
      getPrefixCls,
      direction,
      modal
    } = React93.useContext(ConfigContext);
    const handleCancel = (e3) => {
      const {
        onCancel
      } = props;
      onCancel === null || onCancel === void 0 ? void 0 : onCancel(e3);
    };
    const handleOk = (e3) => {
      const {
        onOk
      } = props;
      onOk === null || onOk === void 0 ? void 0 : onOk(e3);
    };
    if (true) {
      const warning8 = devUseWarning("Modal");
      [["visible", "open"], ["bodyStyle", "styles.body"], ["maskStyle", "styles.mask"]].forEach((_ref) => {
        let [deprecatedName, newName] = _ref;
        warning8.deprecated(!(deprecatedName in props), deprecatedName, newName);
      });
    }
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      open,
      wrapClassName,
      centered,
      getContainer: getContainer2,
      closeIcon,
      closable,
      focusTriggerAfterClose = true,
      style: style2,
      // Deprecated
      visible,
      width = 520,
      footer,
      classNames: modalClassNames,
      styles: modalStyles
    } = props, restProps = __rest7(props, ["prefixCls", "className", "rootClassName", "open", "wrapClassName", "centered", "getContainer", "closeIcon", "closable", "focusTriggerAfterClose", "style", "visible", "width", "footer", "classNames", "styles"]);
    const prefixCls = getPrefixCls("modal", customizePrefixCls);
    const rootPrefixCls = getPrefixCls();
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default4(prefixCls, rootCls);
    const wrapClassNameExtended = (0, import_classnames14.default)(wrapClassName, {
      [`${prefixCls}-centered`]: !!centered,
      [`${prefixCls}-wrap-rtl`]: direction === "rtl"
    });
    const dialogFooter = footer !== null && /* @__PURE__ */ React93.createElement(Footer, Object.assign({}, props, {
      onOk: handleOk,
      onCancel: handleCancel
    }));
    const [mergedClosable, mergedCloseIcon] = useClosable_default(closable, closeIcon, (icon) => renderCloseIcon(prefixCls, icon), /* @__PURE__ */ React93.createElement(CloseOutlined_default2, {
      className: `${prefixCls}-close-icon`
    }), true);
    const panelRef = usePanelRef(`.${prefixCls}-content`);
    const [zIndex, contextZIndex] = useZIndex("Modal", restProps.zIndex);
    return wrapCSSVar(/* @__PURE__ */ React93.createElement(NoCompactStyle, null, /* @__PURE__ */ React93.createElement(NoFormStyle, {
      status: true,
      override: true
    }, /* @__PURE__ */ React93.createElement(zindexContext_default.Provider, {
      value: contextZIndex
    }, /* @__PURE__ */ React93.createElement(es_default4, Object.assign({
      width
    }, restProps, {
      zIndex,
      getContainer: getContainer2 === void 0 ? getContextPopupContainer : getContainer2,
      prefixCls,
      rootClassName: (0, import_classnames14.default)(hashId, rootClassName, cssVarCls, rootCls),
      footer: dialogFooter,
      visible: open !== null && open !== void 0 ? open : visible,
      mousePosition: (_a = restProps.mousePosition) !== null && _a !== void 0 ? _a : mousePosition,
      onClose: handleCancel,
      closable: mergedClosable,
      closeIcon: mergedCloseIcon,
      focusTriggerAfterClose,
      transitionName: getTransitionName2(rootPrefixCls, "zoom", props.transitionName),
      maskTransitionName: getTransitionName2(rootPrefixCls, "fade", props.maskTransitionName),
      className: (0, import_classnames14.default)(hashId, className, modal === null || modal === void 0 ? void 0 : modal.className),
      style: Object.assign(Object.assign({}, modal === null || modal === void 0 ? void 0 : modal.style), style2),
      classNames: Object.assign(Object.assign(Object.assign({}, modal === null || modal === void 0 ? void 0 : modal.classNames), modalClassNames), {
        wrapper: (0, import_classnames14.default)(wrapClassNameExtended, modalClassNames === null || modalClassNames === void 0 ? void 0 : modalClassNames.wrapper)
      }),
      styles: Object.assign(Object.assign({}, modal === null || modal === void 0 ? void 0 : modal.styles), modalStyles),
      panelRef
    }))))));
  };
  var Modal_default = Modal;

  // node_modules/antd/es/modal/style/confirm.js
  var genModalConfirmStyle = (token2) => {
    const {
      componentCls,
      titleFontSize,
      titleLineHeight,
      modalConfirmIconSize,
      fontSize,
      lineHeight,
      modalTitleHeight,
      fontHeight,
      confirmBodyPadding
    } = token2;
    const confirmComponentCls = `${componentCls}-confirm`;
    return {
      [confirmComponentCls]: {
        "&-rtl": {
          direction: "rtl"
        },
        [`${token2.antCls}-modal-header`]: {
          display: "none"
        },
        [`${confirmComponentCls}-body-wrapper`]: Object.assign({}, clearFix()),
        [`&${componentCls} ${componentCls}-body`]: {
          padding: confirmBodyPadding
        },
        // ====================== Body ======================
        [`${confirmComponentCls}-body`]: {
          display: "flex",
          flexWrap: "nowrap",
          alignItems: "start",
          [`> ${token2.iconCls}`]: {
            flex: "none",
            fontSize: modalConfirmIconSize,
            marginInlineEnd: token2.confirmIconMarginInlineEnd,
            marginTop: token2.calc(token2.calc(fontHeight).sub(modalConfirmIconSize).equal()).div(2).equal()
          },
          [`&-has-title > ${token2.iconCls}`]: {
            marginTop: token2.calc(token2.calc(modalTitleHeight).sub(modalConfirmIconSize).equal()).div(2).equal()
          }
        },
        [`${confirmComponentCls}-paragraph`]: {
          display: "flex",
          flexDirection: "column",
          flex: "auto",
          rowGap: token2.marginXS,
          maxWidth: `calc(100% - ${unit(token2.calc(token2.modalConfirmIconSize).add(token2.marginSM).equal())})`
        },
        [`${confirmComponentCls}-title`]: {
          color: token2.colorTextHeading,
          fontWeight: token2.fontWeightStrong,
          fontSize: titleFontSize,
          lineHeight: titleLineHeight
        },
        [`${confirmComponentCls}-content`]: {
          color: token2.colorText,
          fontSize,
          lineHeight
        },
        // ===================== Footer =====================
        [`${confirmComponentCls}-btns`]: {
          textAlign: "end",
          marginTop: token2.confirmBtnsMarginTop,
          [`${token2.antCls}-btn + ${token2.antCls}-btn`]: {
            marginBottom: 0,
            marginInlineStart: token2.marginXS
          }
        }
      },
      [`${confirmComponentCls}-error ${confirmComponentCls}-body > ${token2.iconCls}`]: {
        color: token2.colorError
      },
      [`${confirmComponentCls}-warning ${confirmComponentCls}-body > ${token2.iconCls},
        ${confirmComponentCls}-confirm ${confirmComponentCls}-body > ${token2.iconCls}`]: {
        color: token2.colorWarning
      },
      [`${confirmComponentCls}-info ${confirmComponentCls}-body > ${token2.iconCls}`]: {
        color: token2.colorInfo
      },
      [`${confirmComponentCls}-success ${confirmComponentCls}-body > ${token2.iconCls}`]: {
        color: token2.colorSuccess
      }
    };
  };
  var confirm_default = genSubStyleComponent(["Modal", "confirm"], (token2) => {
    const modalToken = prepareToken2(token2);
    return [genModalConfirmStyle(modalToken)];
  }, prepareComponentToken2, {
    // confirm is weak than modal since no conflict here
    order: -1e3
  });

  // node_modules/antd/es/modal/ConfirmDialog.js
  var __rest8 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function ConfirmContent(props) {
    const {
      prefixCls,
      icon,
      okText,
      cancelText,
      confirmPrefixCls,
      type: type4,
      okCancel,
      footer,
      // Legacy for static function usage
      locale: staticLocale
    } = props, resetProps = __rest8(props, ["prefixCls", "icon", "okText", "cancelText", "confirmPrefixCls", "type", "okCancel", "footer", "locale"]);
    if (true) {
      const warning8 = devUseWarning("Modal");
      true ? warning8(!(typeof icon === "string" && icon.length > 2), "breaking", `\`icon\` is using ReactNode instead of string naming in v4. Please check \`${icon}\` at https://ant.design/components/icon`) : void 0;
    }
    let mergedIcon = icon;
    if (!icon && icon !== null) {
      switch (type4) {
        case "info":
          mergedIcon = /* @__PURE__ */ React94.createElement(InfoCircleFilled_default2, null);
          break;
        case "success":
          mergedIcon = /* @__PURE__ */ React94.createElement(CheckCircleFilled_default2, null);
          break;
        case "error":
          mergedIcon = /* @__PURE__ */ React94.createElement(CloseCircleFilled_default2, null);
          break;
        default:
          mergedIcon = /* @__PURE__ */ React94.createElement(ExclamationCircleFilled_default2, null);
      }
    }
    const mergedOkCancel = okCancel !== null && okCancel !== void 0 ? okCancel : type4 === "confirm";
    const autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || "ok";
    const [locale9] = useLocale_default("Modal");
    const mergedLocale = staticLocale || locale9;
    const okTextLocale = okText || (mergedOkCancel ? mergedLocale === null || mergedLocale === void 0 ? void 0 : mergedLocale.okText : mergedLocale === null || mergedLocale === void 0 ? void 0 : mergedLocale.justOkText);
    const cancelTextLocale = cancelText || (mergedLocale === null || mergedLocale === void 0 ? void 0 : mergedLocale.cancelText);
    const btnCtxValue = Object.assign({
      autoFocusButton,
      cancelTextLocale,
      okTextLocale,
      mergedOkCancel
    }, resetProps);
    const btnCtxValueMemo = React94.useMemo(() => btnCtxValue, _toConsumableArray(Object.values(btnCtxValue)));
    const footerOriginNode = /* @__PURE__ */ React94.createElement(React94.Fragment, null, /* @__PURE__ */ React94.createElement(ConfirmCancelBtn_default, null), /* @__PURE__ */ React94.createElement(ConfirmOkBtn_default, null));
    const hasTitle = props.title !== void 0 && props.title !== null;
    const bodyCls = `${confirmPrefixCls}-body`;
    return /* @__PURE__ */ React94.createElement("div", {
      className: `${confirmPrefixCls}-body-wrapper`
    }, /* @__PURE__ */ React94.createElement("div", {
      className: (0, import_classnames15.default)(bodyCls, {
        [`${bodyCls}-has-title`]: hasTitle
      })
    }, mergedIcon, /* @__PURE__ */ React94.createElement("div", {
      className: `${confirmPrefixCls}-paragraph`
    }, hasTitle && /* @__PURE__ */ React94.createElement("span", {
      className: `${confirmPrefixCls}-title`
    }, props.title), /* @__PURE__ */ React94.createElement("div", {
      className: `${confirmPrefixCls}-content`
    }, props.content))), footer === void 0 || typeof footer === "function" ? /* @__PURE__ */ React94.createElement(ModalContextProvider, {
      value: btnCtxValueMemo
    }, /* @__PURE__ */ React94.createElement("div", {
      className: `${confirmPrefixCls}-btns`
    }, typeof footer === "function" ? footer(footerOriginNode, {
      OkBtn: ConfirmOkBtn_default,
      CancelBtn: ConfirmCancelBtn_default
    }) : footerOriginNode)) : footer, /* @__PURE__ */ React94.createElement(confirm_default, {
      prefixCls
    }));
  }
  var ConfirmDialog = (props) => {
    const {
      close,
      zIndex,
      afterClose,
      open,
      keyboard,
      centered,
      getContainer: getContainer2,
      maskStyle,
      direction,
      prefixCls,
      wrapClassName,
      rootPrefixCls,
      bodyStyle,
      closable = false,
      closeIcon,
      modalRender,
      focusTriggerAfterClose,
      onConfirm,
      styles
    } = props;
    if (true) {
      const warning8 = devUseWarning("Modal");
      [["visible", "open"], ["bodyStyle", "styles.body"], ["maskStyle", "styles.mask"]].forEach((_ref) => {
        let [deprecatedName, newName] = _ref;
        warning8.deprecated(!(deprecatedName in props), deprecatedName, newName);
      });
    }
    const confirmPrefixCls = `${prefixCls}-confirm`;
    const width = props.width || 416;
    const style2 = props.style || {};
    const mask = props.mask === void 0 ? true : props.mask;
    const maskClosable = props.maskClosable === void 0 ? false : props.maskClosable;
    const classString = (0, import_classnames15.default)(confirmPrefixCls, `${confirmPrefixCls}-${props.type}`, {
      [`${confirmPrefixCls}-rtl`]: direction === "rtl"
    }, props.className);
    const [, token2] = useToken();
    const mergedZIndex = React94.useMemo(() => {
      if (zIndex !== void 0) {
        return zIndex;
      }
      return token2.zIndexPopupBase + CONTAINER_MAX_OFFSET;
    }, [zIndex, token2]);
    return /* @__PURE__ */ React94.createElement(Modal_default, {
      prefixCls,
      className: classString,
      wrapClassName: (0, import_classnames15.default)({
        [`${confirmPrefixCls}-centered`]: !!props.centered
      }, wrapClassName),
      onCancel: () => {
        close === null || close === void 0 ? void 0 : close({
          triggerCancel: true
        });
        onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(false);
      },
      open,
      title: "",
      footer: null,
      transitionName: getTransitionName2(rootPrefixCls || "", "zoom", props.transitionName),
      maskTransitionName: getTransitionName2(rootPrefixCls || "", "fade", props.maskTransitionName),
      mask,
      maskClosable,
      style: style2,
      styles: Object.assign({
        body: bodyStyle,
        mask: maskStyle
      }, styles),
      width,
      zIndex: mergedZIndex,
      afterClose,
      keyboard,
      centered,
      getContainer: getContainer2,
      closable,
      closeIcon,
      modalRender,
      focusTriggerAfterClose
    }, /* @__PURE__ */ React94.createElement(ConfirmContent, Object.assign({}, props, {
      confirmPrefixCls
    })));
  };
  var ConfirmDialogWrapper = (props) => {
    const {
      rootPrefixCls,
      iconPrefixCls,
      direction,
      theme: theme3
    } = props;
    return /* @__PURE__ */ React94.createElement(config_provider_default, {
      prefixCls: rootPrefixCls,
      iconPrefixCls,
      direction,
      theme: theme3
    }, /* @__PURE__ */ React94.createElement(ConfirmDialog, Object.assign({}, props)));
  };
  if (true) {
    ConfirmDialog.displayName = "ConfirmDialog";
    ConfirmDialogWrapper.displayName = "ConfirmDialogWrapper";
  }
  var ConfirmDialog_default = ConfirmDialogWrapper;

  // node_modules/antd/es/modal/destroyFns.js
  var destroyFns = [];
  var destroyFns_default = destroyFns;

  // node_modules/antd/es/modal/confirm.js
  var defaultRootPrefixCls = "";
  function getRootPrefixCls() {
    return defaultRootPrefixCls;
  }
  var ConfirmDialogWrapper2 = (props) => {
    var _a, _b;
    const {
      prefixCls: customizePrefixCls,
      getContainer: getContainer2,
      direction
    } = props;
    const runtimeLocale2 = getConfirmLocale();
    const config = (0, import_react38.useContext)(ConfigContext);
    const rootPrefixCls = getRootPrefixCls() || config.getPrefixCls();
    const prefixCls = customizePrefixCls || `${rootPrefixCls}-modal`;
    let mergedGetContainer = getContainer2;
    if (mergedGetContainer === false) {
      mergedGetContainer = void 0;
      if (true) {
        true ? warning_default2(false, "Modal", "Static method not support `getContainer` to be `false` since it do not have context env.") : void 0;
      }
    }
    return /* @__PURE__ */ import_react38.default.createElement(ConfirmDialog_default, Object.assign({}, props, {
      rootPrefixCls,
      prefixCls,
      iconPrefixCls: config.iconPrefixCls,
      theme: config.theme,
      direction: direction !== null && direction !== void 0 ? direction : config.direction,
      locale: (_b = (_a = config.locale) === null || _a === void 0 ? void 0 : _a.Modal) !== null && _b !== void 0 ? _b : runtimeLocale2,
      getContainer: mergedGetContainer
    }));
  };
  function confirm2(config) {
    const global2 = globalConfig();
    if (!global2.holderRender) {
      warnContext("Modal");
    }
    const container = document.createDocumentFragment();
    let currentConfig = Object.assign(Object.assign({}, config), {
      close,
      open: true
    });
    let timeoutId;
    function destroy() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      const triggerCancel = args.some((param) => param && param.triggerCancel);
      if (config.onCancel && triggerCancel) {
        config.onCancel.apply(config, [() => {
        }].concat(_toConsumableArray(args.slice(1))));
      }
      for (let i = 0; i < destroyFns_default.length; i++) {
        const fn = destroyFns_default[i];
        if (fn === close) {
          destroyFns_default.splice(i, 1);
          break;
        }
      }
      unmount(container);
    }
    function render2(props) {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        const rootPrefixCls = global2.getPrefixCls(void 0, getRootPrefixCls());
        const iconPrefixCls = global2.getIconPrefixCls();
        const theme3 = global2.getTheme();
        const dom = /* @__PURE__ */ import_react38.default.createElement(ConfirmDialogWrapper2, Object.assign({}, props));
        render(/* @__PURE__ */ import_react38.default.createElement(config_provider_default, {
          prefixCls: rootPrefixCls,
          iconPrefixCls,
          theme: theme3
        }, global2.holderRender ? global2.holderRender(dom) : dom), container);
      });
    }
    function close() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      currentConfig = Object.assign(Object.assign({}, currentConfig), {
        open: false,
        afterClose: () => {
          if (typeof config.afterClose === "function") {
            config.afterClose();
          }
          destroy.apply(this, args);
        }
      });
      if (currentConfig.visible) {
        delete currentConfig.visible;
      }
      render2(currentConfig);
    }
    function update(configUpdate) {
      if (typeof configUpdate === "function") {
        currentConfig = configUpdate(currentConfig);
      } else {
        currentConfig = Object.assign(Object.assign({}, currentConfig), configUpdate);
      }
      render2(currentConfig);
    }
    render2(currentConfig);
    destroyFns_default.push(close);
    return {
      destroy: close,
      update
    };
  }
  function withWarn(props) {
    return Object.assign(Object.assign({}, props), {
      type: "warning"
    });
  }
  function withInfo(props) {
    return Object.assign(Object.assign({}, props), {
      type: "info"
    });
  }
  function withSuccess(props) {
    return Object.assign(Object.assign({}, props), {
      type: "success"
    });
  }
  function withError(props) {
    return Object.assign(Object.assign({}, props), {
      type: "error"
    });
  }
  function withConfirm(props) {
    return Object.assign(Object.assign({}, props), {
      type: "confirm"
    });
  }
  function modalGlobalConfig(_ref) {
    let {
      rootPrefixCls
    } = _ref;
    true ? warning_default2(false, "Modal", "Modal.config is deprecated. Please use ConfigProvider.config instead.") : void 0;
    defaultRootPrefixCls = rootPrefixCls;
  }

  // node_modules/antd/es/modal/useModal/HookModal.js
  var React96 = __toESM(require_react());
  var __rest9 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var HookModal = (_a, ref) => {
    var _b;
    var {
      afterClose: hookAfterClose,
      config
    } = _a, restProps = __rest9(_a, ["afterClose", "config"]);
    const [open, setOpen] = React96.useState(true);
    const [innerConfig, setInnerConfig] = React96.useState(config);
    const {
      direction,
      getPrefixCls
    } = React96.useContext(ConfigContext);
    const prefixCls = getPrefixCls("modal");
    const rootPrefixCls = getPrefixCls();
    const afterClose = () => {
      var _a2;
      hookAfterClose();
      (_a2 = innerConfig.afterClose) === null || _a2 === void 0 ? void 0 : _a2.call(innerConfig);
    };
    const close = function() {
      setOpen(false);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      const triggerCancel = args.some((param) => param && param.triggerCancel);
      if (innerConfig.onCancel && triggerCancel) {
        innerConfig.onCancel.apply(innerConfig, [() => {
        }].concat(_toConsumableArray(args.slice(1))));
      }
    };
    React96.useImperativeHandle(ref, () => ({
      destroy: close,
      update: (newConfig) => {
        setInnerConfig((originConfig) => Object.assign(Object.assign({}, originConfig), newConfig));
      }
    }));
    const mergedOkCancel = (_b = innerConfig.okCancel) !== null && _b !== void 0 ? _b : innerConfig.type === "confirm";
    const [contextLocale] = useLocale_default("Modal", en_US_default6.Modal);
    return /* @__PURE__ */ React96.createElement(ConfirmDialog_default, Object.assign({
      prefixCls,
      rootPrefixCls
    }, innerConfig, {
      close,
      open,
      afterClose,
      okText: innerConfig.okText || (mergedOkCancel ? contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.okText : contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.justOkText),
      direction: innerConfig.direction || direction,
      cancelText: innerConfig.cancelText || (contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.cancelText)
    }, restProps));
  };
  var HookModal_default = /* @__PURE__ */ React96.forwardRef(HookModal);

  // node_modules/antd/es/modal/useModal/index.js
  var uuid5 = 0;
  var ElementsHolder = /* @__PURE__ */ React97.memo(/* @__PURE__ */ React97.forwardRef((_props, ref) => {
    const [elements, patchElement] = usePatchElement();
    React97.useImperativeHandle(ref, () => ({
      patchElement
    }), []);
    return /* @__PURE__ */ React97.createElement(React97.Fragment, null, elements);
  }));
  function useModal() {
    const holderRef = React97.useRef(null);
    const [actionQueue, setActionQueue] = React97.useState([]);
    React97.useEffect(() => {
      if (actionQueue.length) {
        const cloneQueue = _toConsumableArray(actionQueue);
        cloneQueue.forEach((action) => {
          action();
        });
        setActionQueue([]);
      }
    }, [actionQueue]);
    const getConfirmFunc = React97.useCallback((withFunc) => function hookConfirm(config) {
      var _a;
      uuid5 += 1;
      const modalRef = /* @__PURE__ */ React97.createRef();
      let resolvePromise;
      const promise = new Promise((resolve) => {
        resolvePromise = resolve;
      });
      let silent = false;
      let closeFunc;
      const modal = /* @__PURE__ */ React97.createElement(HookModal_default, {
        key: `modal-${uuid5}`,
        config: withFunc(config),
        ref: modalRef,
        afterClose: () => {
          closeFunc === null || closeFunc === void 0 ? void 0 : closeFunc();
        },
        isSilent: () => silent,
        onConfirm: (confirmed) => {
          resolvePromise(confirmed);
        }
      });
      closeFunc = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.patchElement(modal);
      if (closeFunc) {
        destroyFns_default.push(closeFunc);
      }
      const instance = {
        destroy: () => {
          function destroyAction() {
            var _a2;
            (_a2 = modalRef.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
          }
          if (modalRef.current) {
            destroyAction();
          } else {
            setActionQueue((prev2) => [].concat(_toConsumableArray(prev2), [destroyAction]));
          }
        },
        update: (newConfig) => {
          function updateAction() {
            var _a2;
            (_a2 = modalRef.current) === null || _a2 === void 0 ? void 0 : _a2.update(newConfig);
          }
          if (modalRef.current) {
            updateAction();
          } else {
            setActionQueue((prev2) => [].concat(_toConsumableArray(prev2), [updateAction]));
          }
        },
        then: (resolve) => {
          silent = true;
          return promise.then(resolve);
        }
      };
      return instance;
    }, []);
    const fns = React97.useMemo(() => ({
      info: getConfirmFunc(withInfo),
      success: getConfirmFunc(withSuccess),
      error: getConfirmFunc(withError),
      warning: getConfirmFunc(withWarn),
      confirm: getConfirmFunc(withConfirm)
    }), []);
    return [fns, /* @__PURE__ */ React97.createElement(ElementsHolder, {
      key: "modal-holder",
      ref: holderRef
    })];
  }
  var useModal_default = useModal;

  // node_modules/antd/es/_util/PurePanel.js
  var React98 = __toESM(require_react());
  function withPureRenderTheme(Component11) {
    return (props) => /* @__PURE__ */ React98.createElement(config_provider_default, {
      theme: {
        token: {
          motion: false,
          zIndexPopupBase: 0
        }
      }
    }, /* @__PURE__ */ React98.createElement(Component11, Object.assign({}, props)));
  }
  var genPurePanel = (Component11, defaultPrefixCls2, getDropdownCls, postProps) => {
    const PurePanel6 = (props) => {
      const {
        prefixCls: customizePrefixCls,
        style: style2
      } = props;
      const holderRef = React98.useRef(null);
      const [popupHeight, setPopupHeight] = React98.useState(0);
      const [popupWidth, setPopupWidth] = React98.useState(0);
      const [open, setOpen] = useMergedState(false, {
        value: props.open
      });
      const {
        getPrefixCls
      } = React98.useContext(ConfigContext);
      const prefixCls = getPrefixCls(defaultPrefixCls2 || "select", customizePrefixCls);
      React98.useEffect(() => {
        setOpen(true);
        if (typeof ResizeObserver !== "undefined") {
          const resizeObserver2 = new ResizeObserver((entries) => {
            const element = entries[0].target;
            setPopupHeight(element.offsetHeight + 8);
            setPopupWidth(element.offsetWidth);
          });
          const interval = setInterval(() => {
            var _a;
            const dropdownCls = getDropdownCls ? `.${getDropdownCls(prefixCls)}` : `.${prefixCls}-dropdown`;
            const popup = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(dropdownCls);
            if (popup) {
              clearInterval(interval);
              resizeObserver2.observe(popup);
            }
          }, 10);
          return () => {
            clearInterval(interval);
            resizeObserver2.disconnect();
          };
        }
      }, []);
      let mergedProps = Object.assign(Object.assign({}, props), {
        style: Object.assign(Object.assign({}, style2), {
          margin: 0
        }),
        open,
        visible: open,
        getPopupContainer: () => holderRef.current
      });
      if (postProps) {
        mergedProps = postProps(mergedProps);
      }
      const mergedStyle = {
        paddingBottom: popupHeight,
        position: "relative",
        minWidth: popupWidth
      };
      return /* @__PURE__ */ React98.createElement("div", {
        ref: holderRef,
        style: mergedStyle
      }, /* @__PURE__ */ React98.createElement(Component11, Object.assign({}, mergedProps)));
    };
    return withPureRenderTheme(PurePanel6);
  };
  var PurePanel_default = genPurePanel;

  // node_modules/antd/es/select/index.js
  var React154 = __toESM(require_react());
  var import_classnames34 = __toESM(require_classnames());

  // node_modules/rc-select/es/Select.js
  var React145 = __toESM(require_react());

  // node_modules/rc-select/es/BaseSelect.js
  var import_classnames27 = __toESM(require_classnames());

  // node_modules/rc-util/es/isMobile.js
  var isMobile_default = function() {
    if (typeof navigator === "undefined" || typeof window === "undefined") {
      return false;
    }
    var agent = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4));
  };

  // node_modules/rc-select/es/BaseSelect.js
  var React127 = __toESM(require_react());

  // node_modules/rc-select/es/TransBtn.js
  var React99 = __toESM(require_react());
  var import_classnames16 = __toESM(require_classnames());
  var TransBtn = function TransBtn2(props) {
    var className = props.className, customizeIcon = props.customizeIcon, customizeIconProps = props.customizeIconProps, children = props.children, _onMouseDown = props.onMouseDown, onClick = props.onClick;
    var icon = typeof customizeIcon === "function" ? customizeIcon(customizeIconProps) : customizeIcon;
    return /* @__PURE__ */ React99.createElement("span", {
      className,
      onMouseDown: function onMouseDown(event) {
        event.preventDefault();
        _onMouseDown === null || _onMouseDown === void 0 || _onMouseDown(event);
      },
      style: {
        userSelect: "none",
        WebkitUserSelect: "none"
      },
      unselectable: "on",
      onClick,
      "aria-hidden": true
    }, icon !== void 0 ? icon : /* @__PURE__ */ React99.createElement("span", {
      className: (0, import_classnames16.default)(className.split(/\s+/).map(function(cls) {
        return "".concat(cls, "-icon");
      }))
    }, children));
  };
  var TransBtn_default = TransBtn;

  // node_modules/rc-select/es/hooks/useAllowClear.js
  var import_react39 = __toESM(require_react());
  var useAllowClear = function useAllowClear2(prefixCls, onClearMouseDown, displayValues, allowClear, clearIcon) {
    var disabled = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
    var mergedSearchValue = arguments.length > 6 ? arguments[6] : void 0;
    var mode = arguments.length > 7 ? arguments[7] : void 0;
    var mergedClearIcon = import_react39.default.useMemo(function() {
      if (_typeof(allowClear) === "object") {
        return allowClear.clearIcon;
      }
      if (clearIcon) {
        return clearIcon;
      }
    }, [allowClear, clearIcon]);
    var mergedAllowClear = import_react39.default.useMemo(function() {
      if (!disabled && !!allowClear && (displayValues.length || mergedSearchValue) && !(mode === "combobox" && mergedSearchValue === "")) {
        return true;
      }
      return false;
    }, [allowClear, disabled, displayValues.length, mergedSearchValue, mode]);
    return {
      allowClear: mergedAllowClear,
      clearIcon: /* @__PURE__ */ import_react39.default.createElement(TransBtn_default, {
        className: "".concat(prefixCls, "-clear"),
        onMouseDown: onClearMouseDown,
        customizeIcon: mergedClearIcon
      }, "\xD7")
    };
  };

  // node_modules/rc-select/es/hooks/useBaseProps.js
  var React101 = __toESM(require_react());
  var BaseSelectContext = /* @__PURE__ */ React101.createContext(null);
  function useBaseProps() {
    return React101.useContext(BaseSelectContext);
  }

  // node_modules/rc-select/es/hooks/useDelayReset.js
  var React102 = __toESM(require_react());
  function useDelayReset() {
    var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
    var _React$useState = React102.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), bool = _React$useState2[0], setBool = _React$useState2[1];
    var delayRef = React102.useRef(null);
    var cancelLatest = function cancelLatest2() {
      window.clearTimeout(delayRef.current);
    };
    React102.useEffect(function() {
      return cancelLatest;
    }, []);
    var delaySetBool = function delaySetBool2(value, callback) {
      cancelLatest();
      delayRef.current = window.setTimeout(function() {
        setBool(value);
        if (callback) {
          callback();
        }
      }, timeout);
    };
    return [bool, delaySetBool, cancelLatest];
  }

  // node_modules/rc-select/es/hooks/useLock.js
  var React103 = __toESM(require_react());
  function useLock() {
    var duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 250;
    var lockRef = React103.useRef(null);
    var timeoutRef = React103.useRef(null);
    React103.useEffect(function() {
      return function() {
        window.clearTimeout(timeoutRef.current);
      };
    }, []);
    function doLock(locked) {
      if (locked || lockRef.current === null) {
        lockRef.current = locked;
      }
      window.clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(function() {
        lockRef.current = null;
      }, duration);
    }
    return [function() {
      return lockRef.current;
    }, doLock];
  }

  // node_modules/rc-select/es/hooks/useSelectTriggerControl.js
  var React104 = __toESM(require_react());
  function useSelectTriggerControl(elements, open, triggerOpen, customizedTrigger) {
    var propsRef = React104.useRef(null);
    propsRef.current = {
      open,
      triggerOpen,
      customizedTrigger
    };
    React104.useEffect(function() {
      function onGlobalMouseDown(event) {
        var _propsRef$current;
        if ((_propsRef$current = propsRef.current) !== null && _propsRef$current !== void 0 && _propsRef$current.customizedTrigger) {
          return;
        }
        var target = event.target;
        if (target.shadowRoot && event.composed) {
          target = event.composedPath()[0] || target;
        }
        if (propsRef.current.open && elements().filter(function(element) {
          return element;
        }).every(function(element) {
          return !element.contains(target) && element !== target;
        })) {
          propsRef.current.triggerOpen(false);
        }
      }
      window.addEventListener("mousedown", onGlobalMouseDown);
      return function() {
        return window.removeEventListener("mousedown", onGlobalMouseDown);
      };
    }, []);
  }

  // node_modules/rc-select/es/Selector/index.js
  var React114 = __toESM(require_react());
  var import_react43 = __toESM(require_react());

  // node_modules/rc-select/es/Selector/MultipleSelector.js
  var React112 = __toESM(require_react());
  var import_react42 = __toESM(require_react());
  var import_classnames21 = __toESM(require_classnames());

  // node_modules/rc-overflow/es/Overflow.js
  var React109 = __toESM(require_react());
  var import_react41 = __toESM(require_react());
  var import_classnames19 = __toESM(require_classnames());

  // node_modules/rc-overflow/es/Item.js
  var React105 = __toESM(require_react());
  var import_classnames17 = __toESM(require_classnames());
  var _excluded8 = ["prefixCls", "invalidate", "item", "renderItem", "responsive", "responsiveDisabled", "registerSize", "itemKey", "className", "style", "children", "display", "order", "component"];
  var UNDEFINED = void 0;
  function InternalItem(props, ref) {
    var prefixCls = props.prefixCls, invalidate = props.invalidate, item = props.item, renderItem = props.renderItem, responsive = props.responsive, responsiveDisabled = props.responsiveDisabled, registerSize = props.registerSize, itemKey3 = props.itemKey, className = props.className, style2 = props.style, children = props.children, display = props.display, order = props.order, _props$component = props.component, Component11 = _props$component === void 0 ? "div" : _props$component, restProps = _objectWithoutProperties(props, _excluded8);
    var mergedHidden = responsive && !display;
    function internalRegisterSize(width) {
      registerSize(itemKey3, width);
    }
    React105.useEffect(function() {
      return function() {
        internalRegisterSize(null);
      };
    }, []);
    var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
    var overflowStyle;
    if (!invalidate) {
      overflowStyle = {
        opacity: mergedHidden ? 0 : 1,
        height: mergedHidden ? 0 : UNDEFINED,
        overflowY: mergedHidden ? "hidden" : UNDEFINED,
        order: responsive ? order : UNDEFINED,
        pointerEvents: mergedHidden ? "none" : UNDEFINED,
        position: mergedHidden ? "absolute" : UNDEFINED
      };
    }
    var overflowProps = {};
    if (mergedHidden) {
      overflowProps["aria-hidden"] = true;
    }
    var itemNode = /* @__PURE__ */ React105.createElement(Component11, _extends({
      className: (0, import_classnames17.default)(!invalidate && prefixCls, className),
      style: _objectSpread2(_objectSpread2({}, overflowStyle), style2)
    }, overflowProps, restProps, {
      ref
    }), childNode);
    if (responsive) {
      itemNode = /* @__PURE__ */ React105.createElement(es_default, {
        onResize: function onResize2(_ref) {
          var offsetWidth = _ref.offsetWidth;
          internalRegisterSize(offsetWidth);
        },
        disabled: responsiveDisabled
      }, itemNode);
    }
    return itemNode;
  }
  var Item = /* @__PURE__ */ React105.forwardRef(InternalItem);
  Item.displayName = "Item";
  var Item_default = Item;

  // node_modules/rc-overflow/es/hooks/useEffectState.js
  var React106 = __toESM(require_react());
  var import_react_dom3 = __toESM(require_react_dom());

  // node_modules/rc-overflow/es/hooks/channelUpdate.js
  function channelUpdate(callback) {
    if (typeof MessageChannel === "undefined") {
      raf_default(callback);
    } else {
      var channel = new MessageChannel();
      channel.port1.onmessage = function() {
        return callback();
      };
      channel.port2.postMessage(void 0);
    }
  }

  // node_modules/rc-overflow/es/hooks/useEffectState.js
  function useBatcher() {
    var updateFuncRef = React106.useRef(null);
    var notifyEffectUpdate = function notifyEffectUpdate2(callback) {
      if (!updateFuncRef.current) {
        updateFuncRef.current = [];
        channelUpdate(function() {
          (0, import_react_dom3.unstable_batchedUpdates)(function() {
            updateFuncRef.current.forEach(function(fn) {
              fn();
            });
            updateFuncRef.current = null;
          });
        });
      }
      updateFuncRef.current.push(callback);
    };
    return notifyEffectUpdate;
  }
  function useEffectState(notifyEffectUpdate, defaultValue) {
    var _React$useState = React106.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), stateValue = _React$useState2[0], setStateValue = _React$useState2[1];
    var setEffectVal = useEvent(function(nextValue) {
      notifyEffectUpdate(function() {
        setStateValue(nextValue);
      });
    });
    return [stateValue, setEffectVal];
  }

  // node_modules/rc-overflow/es/RawItem.js
  var React108 = __toESM(require_react());
  var import_classnames18 = __toESM(require_classnames());

  // node_modules/rc-overflow/es/context.js
  var import_react40 = __toESM(require_react());
  var OverflowContext = /* @__PURE__ */ import_react40.default.createContext(null);

  // node_modules/rc-overflow/es/RawItem.js
  var _excluded9 = ["component"];
  var _excluded23 = ["className"];
  var _excluded32 = ["className"];
  var InternalRawItem = function InternalRawItem2(props, ref) {
    var context = React108.useContext(OverflowContext);
    if (!context) {
      var _props$component = props.component, Component11 = _props$component === void 0 ? "div" : _props$component, _restProps = _objectWithoutProperties(props, _excluded9);
      return /* @__PURE__ */ React108.createElement(Component11, _extends({}, _restProps, {
        ref
      }));
    }
    var contextClassName = context.className, restContext = _objectWithoutProperties(context, _excluded23);
    var className = props.className, restProps = _objectWithoutProperties(props, _excluded32);
    return /* @__PURE__ */ React108.createElement(OverflowContext.Provider, {
      value: null
    }, /* @__PURE__ */ React108.createElement(Item_default, _extends({
      ref,
      className: (0, import_classnames18.default)(contextClassName, className)
    }, restContext, restProps)));
  };
  var RawItem = /* @__PURE__ */ React108.forwardRef(InternalRawItem);
  RawItem.displayName = "RawItem";
  var RawItem_default = RawItem;

  // node_modules/rc-overflow/es/Overflow.js
  var _excluded10 = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
  var RESPONSIVE = "responsive";
  var INVALIDATE = "invalidate";
  function defaultRenderRest(omittedItems) {
    return "+ ".concat(omittedItems.length, " ...");
  }
  function Overflow(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-overflow" : _props$prefixCls, _props$data = props.data, data = _props$data === void 0 ? [] : _props$data, renderItem = props.renderItem, renderRawItem = props.renderRawItem, itemKey3 = props.itemKey, _props$itemWidth = props.itemWidth, itemWidth = _props$itemWidth === void 0 ? 10 : _props$itemWidth, ssr = props.ssr, style2 = props.style, className = props.className, maxCount = props.maxCount, renderRest = props.renderRest, renderRawRest = props.renderRawRest, suffix = props.suffix, _props$component = props.component, Component11 = _props$component === void 0 ? "div" : _props$component, itemComponent = props.itemComponent, onVisibleChange = props.onVisibleChange, restProps = _objectWithoutProperties(props, _excluded10);
    var fullySSR = ssr === "full";
    var notifyEffectUpdate = useBatcher();
    var _useEffectState = useEffectState(notifyEffectUpdate, null), _useEffectState2 = _slicedToArray(_useEffectState, 2), containerWidth = _useEffectState2[0], setContainerWidth = _useEffectState2[1];
    var mergedContainerWidth = containerWidth || 0;
    var _useEffectState3 = useEffectState(notifyEffectUpdate, /* @__PURE__ */ new Map()), _useEffectState4 = _slicedToArray(_useEffectState3, 2), itemWidths = _useEffectState4[0], setItemWidths = _useEffectState4[1];
    var _useEffectState5 = useEffectState(notifyEffectUpdate, 0), _useEffectState6 = _slicedToArray(_useEffectState5, 2), prevRestWidth = _useEffectState6[0], setPrevRestWidth = _useEffectState6[1];
    var _useEffectState7 = useEffectState(notifyEffectUpdate, 0), _useEffectState8 = _slicedToArray(_useEffectState7, 2), restWidth = _useEffectState8[0], setRestWidth = _useEffectState8[1];
    var _useEffectState9 = useEffectState(notifyEffectUpdate, 0), _useEffectState10 = _slicedToArray(_useEffectState9, 2), suffixWidth = _useEffectState10[0], setSuffixWidth = _useEffectState10[1];
    var _useState = (0, import_react41.useState)(null), _useState2 = _slicedToArray(_useState, 2), suffixFixedStart = _useState2[0], setSuffixFixedStart = _useState2[1];
    var _useState3 = (0, import_react41.useState)(null), _useState4 = _slicedToArray(_useState3, 2), displayCount = _useState4[0], setDisplayCount = _useState4[1];
    var mergedDisplayCount = React109.useMemo(function() {
      if (displayCount === null && fullySSR) {
        return Number.MAX_SAFE_INTEGER;
      }
      return displayCount || 0;
    }, [displayCount, containerWidth]);
    var _useState5 = (0, import_react41.useState)(false), _useState6 = _slicedToArray(_useState5, 2), restReady = _useState6[0], setRestReady = _useState6[1];
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var mergedRestWidth = Math.max(prevRestWidth, restWidth);
    var isResponsive = maxCount === RESPONSIVE;
    var shouldResponsive = data.length && isResponsive;
    var invalidate = maxCount === INVALIDATE;
    var showRest = shouldResponsive || typeof maxCount === "number" && data.length > maxCount;
    var mergedData = (0, import_react41.useMemo)(function() {
      var items = data;
      if (shouldResponsive) {
        if (containerWidth === null && fullySSR) {
          items = data;
        } else {
          items = data.slice(0, Math.min(data.length, mergedContainerWidth / itemWidth));
        }
      } else if (typeof maxCount === "number") {
        items = data.slice(0, maxCount);
      }
      return items;
    }, [data, itemWidth, containerWidth, maxCount, shouldResponsive]);
    var omittedItems = (0, import_react41.useMemo)(function() {
      if (shouldResponsive) {
        return data.slice(mergedDisplayCount + 1);
      }
      return data.slice(mergedData.length);
    }, [data, mergedData, shouldResponsive, mergedDisplayCount]);
    var getKey3 = (0, import_react41.useCallback)(function(item, index2) {
      var _ref;
      if (typeof itemKey3 === "function") {
        return itemKey3(item);
      }
      return (_ref = itemKey3 && (item === null || item === void 0 ? void 0 : item[itemKey3])) !== null && _ref !== void 0 ? _ref : index2;
    }, [itemKey3]);
    var mergedRenderItem = (0, import_react41.useCallback)(renderItem || function(item) {
      return item;
    }, [renderItem]);
    function updateDisplayCount(count, suffixFixedStartVal, notReady) {
      if (displayCount === count && (suffixFixedStartVal === void 0 || suffixFixedStartVal === suffixFixedStart)) {
        return;
      }
      setDisplayCount(count);
      if (!notReady) {
        setRestReady(count < data.length - 1);
        onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(count);
      }
      if (suffixFixedStartVal !== void 0) {
        setSuffixFixedStart(suffixFixedStartVal);
      }
    }
    function onOverflowResize(_, element) {
      setContainerWidth(element.clientWidth);
    }
    function registerSize(key, width) {
      setItemWidths(function(origin) {
        var clone = new Map(origin);
        if (width === null) {
          clone.delete(key);
        } else {
          clone.set(key, width);
        }
        return clone;
      });
    }
    function registerOverflowSize(_, width) {
      setRestWidth(width);
      setPrevRestWidth(restWidth);
    }
    function registerSuffixSize(_, width) {
      setSuffixWidth(width);
    }
    function getItemWidth(index2) {
      return itemWidths.get(getKey3(mergedData[index2], index2));
    }
    useLayoutEffect_default(function() {
      if (mergedContainerWidth && typeof mergedRestWidth === "number" && mergedData) {
        var totalWidth = suffixWidth;
        var len = mergedData.length;
        var lastIndex = len - 1;
        if (!len) {
          updateDisplayCount(0, null);
          return;
        }
        for (var i = 0; i < len; i += 1) {
          var currentItemWidth = getItemWidth(i);
          if (fullySSR) {
            currentItemWidth = currentItemWidth || 0;
          }
          if (currentItemWidth === void 0) {
            updateDisplayCount(i - 1, void 0, true);
            break;
          }
          totalWidth += currentItemWidth;
          if (
            // Only one means `totalWidth` is the final width
            lastIndex === 0 && totalWidth <= mergedContainerWidth || // Last two width will be the final width
            i === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth
          ) {
            updateDisplayCount(lastIndex, null);
            break;
          } else if (totalWidth + mergedRestWidth > mergedContainerWidth) {
            updateDisplayCount(i - 1, totalWidth - currentItemWidth - suffixWidth + restWidth);
            break;
          }
        }
        if (suffix && getItemWidth(0) + suffixWidth > mergedContainerWidth) {
          setSuffixFixedStart(null);
        }
      }
    }, [mergedContainerWidth, itemWidths, restWidth, suffixWidth, getKey3, mergedData]);
    var displayRest = restReady && !!omittedItems.length;
    var suffixStyle = {};
    if (suffixFixedStart !== null && shouldResponsive) {
      suffixStyle = {
        position: "absolute",
        left: suffixFixedStart,
        top: 0
      };
    }
    var itemSharedProps = {
      prefixCls: itemPrefixCls,
      responsive: shouldResponsive,
      component: itemComponent,
      invalidate
    };
    var internalRenderItemNode = renderRawItem ? function(item, index2) {
      var key = getKey3(item, index2);
      return /* @__PURE__ */ React109.createElement(OverflowContext.Provider, {
        key,
        value: _objectSpread2(_objectSpread2({}, itemSharedProps), {}, {
          order: index2,
          item,
          itemKey: key,
          registerSize,
          display: index2 <= mergedDisplayCount
        })
      }, renderRawItem(item, index2));
    } : function(item, index2) {
      var key = getKey3(item, index2);
      return /* @__PURE__ */ React109.createElement(Item_default, _extends({}, itemSharedProps, {
        order: index2,
        key,
        item,
        renderItem: mergedRenderItem,
        itemKey: key,
        registerSize,
        display: index2 <= mergedDisplayCount
      }));
    };
    var restNode;
    var restContextProps = {
      order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
      className: "".concat(itemPrefixCls, "-rest"),
      registerSize: registerOverflowSize,
      display: displayRest
    };
    if (!renderRawRest) {
      var mergedRenderRest = renderRest || defaultRenderRest;
      restNode = /* @__PURE__ */ React109.createElement(Item_default, _extends({}, itemSharedProps, restContextProps), typeof mergedRenderRest === "function" ? mergedRenderRest(omittedItems) : mergedRenderRest);
    } else if (renderRawRest) {
      restNode = /* @__PURE__ */ React109.createElement(OverflowContext.Provider, {
        value: _objectSpread2(_objectSpread2({}, itemSharedProps), restContextProps)
      }, renderRawRest(omittedItems));
    }
    var overflowNode = /* @__PURE__ */ React109.createElement(Component11, _extends({
      className: (0, import_classnames19.default)(!invalidate && prefixCls, className),
      style: style2,
      ref
    }, restProps), mergedData.map(internalRenderItemNode), showRest ? restNode : null, suffix && /* @__PURE__ */ React109.createElement(Item_default, _extends({}, itemSharedProps, {
      responsive: isResponsive,
      responsiveDisabled: !shouldResponsive,
      order: mergedDisplayCount,
      className: "".concat(itemPrefixCls, "-suffix"),
      registerSize: registerSuffixSize,
      display: true,
      style: suffixStyle
    }), suffix));
    if (isResponsive) {
      overflowNode = /* @__PURE__ */ React109.createElement(es_default, {
        onResize: onOverflowResize,
        disabled: !shouldResponsive
      }, overflowNode);
    }
    return overflowNode;
  }
  var ForwardOverflow = /* @__PURE__ */ React109.forwardRef(Overflow);
  ForwardOverflow.displayName = "Overflow";
  ForwardOverflow.Item = RawItem_default;
  ForwardOverflow.RESPONSIVE = RESPONSIVE;
  ForwardOverflow.INVALIDATE = INVALIDATE;
  var Overflow_default = ForwardOverflow;

  // node_modules/rc-overflow/es/index.js
  var es_default6 = Overflow_default;

  // node_modules/rc-select/es/Selector/Input.js
  var React110 = __toESM(require_react());
  var import_classnames20 = __toESM(require_classnames());
  var Input = function Input2(props, ref) {
    var _inputNode2;
    var prefixCls = props.prefixCls, id = props.id, inputElement = props.inputElement, disabled = props.disabled, tabIndex = props.tabIndex, autoFocus = props.autoFocus, autoComplete = props.autoComplete, editable = props.editable, activeDescendantId = props.activeDescendantId, value = props.value, maxLength = props.maxLength, _onKeyDown = props.onKeyDown, _onMouseDown = props.onMouseDown, _onChange = props.onChange, onPaste = props.onPaste, _onCompositionStart = props.onCompositionStart, _onCompositionEnd = props.onCompositionEnd, open = props.open, attrs = props.attrs;
    var inputNode = inputElement || /* @__PURE__ */ React110.createElement("input", null);
    var _inputNode = inputNode, originRef = _inputNode.ref, originProps = _inputNode.props;
    var onOriginKeyDown = originProps.onKeyDown, onOriginChange = originProps.onChange, onOriginMouseDown = originProps.onMouseDown, onOriginCompositionStart = originProps.onCompositionStart, onOriginCompositionEnd = originProps.onCompositionEnd, style2 = originProps.style;
    warning2(!("maxLength" in inputNode.props), "Passing 'maxLength' to input element directly may not work because input in BaseSelect is controlled.");
    inputNode = /* @__PURE__ */ React110.cloneElement(inputNode, _objectSpread2(_objectSpread2(_objectSpread2({
      type: "search"
    }, originProps), {}, {
      // Override over origin props
      id,
      ref: composeRef(ref, originRef),
      disabled,
      tabIndex,
      autoComplete: autoComplete || "off",
      autoFocus,
      className: (0, import_classnames20.default)("".concat(prefixCls, "-selection-search-input"), (_inputNode2 = inputNode) === null || _inputNode2 === void 0 || (_inputNode2 = _inputNode2.props) === null || _inputNode2 === void 0 ? void 0 : _inputNode2.className),
      role: "combobox",
      "aria-expanded": open || false,
      "aria-haspopup": "listbox",
      "aria-owns": "".concat(id, "_list"),
      "aria-autocomplete": "list",
      "aria-controls": "".concat(id, "_list"),
      "aria-activedescendant": open ? activeDescendantId : void 0
    }, attrs), {}, {
      value: editable ? value : "",
      maxLength,
      readOnly: !editable,
      unselectable: !editable ? "on" : null,
      style: _objectSpread2(_objectSpread2({}, style2), {}, {
        opacity: editable ? null : 0
      }),
      onKeyDown: function onKeyDown2(event) {
        _onKeyDown(event);
        if (onOriginKeyDown) {
          onOriginKeyDown(event);
        }
      },
      onMouseDown: function onMouseDown(event) {
        _onMouseDown(event);
        if (onOriginMouseDown) {
          onOriginMouseDown(event);
        }
      },
      onChange: function onChange(event) {
        _onChange(event);
        if (onOriginChange) {
          onOriginChange(event);
        }
      },
      onCompositionStart: function onCompositionStart(event) {
        _onCompositionStart(event);
        if (onOriginCompositionStart) {
          onOriginCompositionStart(event);
        }
      },
      onCompositionEnd: function onCompositionEnd(event) {
        _onCompositionEnd(event);
        if (onOriginCompositionEnd) {
          onOriginCompositionEnd(event);
        }
      },
      onPaste
    }));
    return inputNode;
  };
  var RefInput = /* @__PURE__ */ React110.forwardRef(Input);
  if (true) {
    RefInput.displayName = "Input";
  }
  var Input_default = RefInput;

  // node_modules/rc-select/es/hooks/useLayoutEffect.js
  var React111 = __toESM(require_react());

  // node_modules/rc-select/es/utils/commonUtil.js
  function toArray3(value) {
    if (Array.isArray(value)) {
      return value;
    }
    return value !== void 0 ? [value] : [];
  }
  var isClient = typeof window !== "undefined" && window.document && window.document.documentElement;
  var isBrowserClient = isClient;
  function hasValue2(value) {
    return value !== void 0 && value !== null;
  }
  function isComboNoValue(value) {
    return !value && value !== 0;
  }
  function isTitleType(title) {
    return ["string", "number"].includes(_typeof(title));
  }
  function getTitle(item) {
    var title = void 0;
    if (item) {
      if (isTitleType(item.title)) {
        title = item.title.toString();
      } else if (isTitleType(item.label)) {
        title = item.label.toString();
      }
    }
    return title;
  }

  // node_modules/rc-select/es/hooks/useLayoutEffect.js
  function useLayoutEffect6(effect, deps) {
    if (isBrowserClient) {
      React111.useLayoutEffect(effect, deps);
    } else {
      React111.useEffect(effect, deps);
    }
  }

  // node_modules/rc-select/es/Selector/MultipleSelector.js
  function itemKey(value) {
    var _value$key;
    return (_value$key = value.key) !== null && _value$key !== void 0 ? _value$key : value.value;
  }
  var onPreventMouseDown = function onPreventMouseDown2(event) {
    event.preventDefault();
    event.stopPropagation();
  };
  var SelectSelector = function SelectSelector2(props) {
    var id = props.id, prefixCls = props.prefixCls, values = props.values, open = props.open, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, inputRef = props.inputRef, placeholder = props.placeholder, disabled = props.disabled, mode = props.mode, showSearch = props.showSearch, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, tabIndex = props.tabIndex, removeIcon = props.removeIcon, maxTagCount = props.maxTagCount, maxTagTextLength = props.maxTagTextLength, _props$maxTagPlacehol = props.maxTagPlaceholder, maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function(omittedValues) {
      return "+ ".concat(omittedValues.length, " ...");
    } : _props$maxTagPlacehol, tagRender = props.tagRender, onToggleOpen = props.onToggleOpen, onRemove = props.onRemove, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd;
    var measureRef = React112.useRef(null);
    var _useState = (0, import_react42.useState)(0), _useState2 = _slicedToArray(_useState, 2), inputWidth = _useState2[0], setInputWidth = _useState2[1];
    var _useState3 = (0, import_react42.useState)(false), _useState4 = _slicedToArray(_useState3, 2), focused = _useState4[0], setFocused = _useState4[1];
    var selectionPrefixCls = "".concat(prefixCls, "-selection");
    var inputValue = open || mode === "multiple" && autoClearSearchValue === false || mode === "tags" ? searchValue : "";
    var inputEditable = mode === "tags" || mode === "multiple" && autoClearSearchValue === false || showSearch && (open || focused);
    useLayoutEffect6(function() {
      setInputWidth(measureRef.current.scrollWidth);
    }, [inputValue]);
    var defaultRenderSelector = function defaultRenderSelector2(item, content, itemDisabled, closable, onClose) {
      return /* @__PURE__ */ React112.createElement("span", {
        title: getTitle(item),
        className: (0, import_classnames21.default)("".concat(selectionPrefixCls, "-item"), _defineProperty({}, "".concat(selectionPrefixCls, "-item-disabled"), itemDisabled))
      }, /* @__PURE__ */ React112.createElement("span", {
        className: "".concat(selectionPrefixCls, "-item-content")
      }, content), closable && /* @__PURE__ */ React112.createElement(TransBtn_default, {
        className: "".concat(selectionPrefixCls, "-item-remove"),
        onMouseDown: onPreventMouseDown,
        onClick: onClose,
        customizeIcon: removeIcon
      }, "\xD7"));
    };
    var customizeRenderSelector = function customizeRenderSelector2(value, content, itemDisabled, closable, onClose) {
      var onMouseDown = function onMouseDown2(e3) {
        onPreventMouseDown(e3);
        onToggleOpen(!open);
      };
      return /* @__PURE__ */ React112.createElement("span", {
        onMouseDown
      }, tagRender({
        label: content,
        value,
        disabled: itemDisabled,
        closable,
        onClose
      }));
    };
    var renderItem = function renderItem2(valueItem) {
      var itemDisabled = valueItem.disabled, label = valueItem.label, value = valueItem.value;
      var closable = !disabled && !itemDisabled;
      var displayLabel = label;
      if (typeof maxTagTextLength === "number") {
        if (typeof label === "string" || typeof label === "number") {
          var strLabel = String(displayLabel);
          if (strLabel.length > maxTagTextLength) {
            displayLabel = "".concat(strLabel.slice(0, maxTagTextLength), "...");
          }
        }
      }
      var onClose = function onClose2(event) {
        if (event) {
          event.stopPropagation();
        }
        onRemove(valueItem);
      };
      return typeof tagRender === "function" ? customizeRenderSelector(value, displayLabel, itemDisabled, closable, onClose) : defaultRenderSelector(valueItem, displayLabel, itemDisabled, closable, onClose);
    };
    var renderRest = function renderRest2(omittedValues) {
      var content = typeof maxTagPlaceholder === "function" ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
      return defaultRenderSelector({
        title: content
      }, content, false);
    };
    var inputNode = /* @__PURE__ */ React112.createElement("div", {
      className: "".concat(selectionPrefixCls, "-search"),
      style: {
        width: inputWidth
      },
      onFocus: function onFocus() {
        setFocused(true);
      },
      onBlur: function onBlur() {
        setFocused(false);
      }
    }, /* @__PURE__ */ React112.createElement(Input_default, {
      ref: inputRef,
      open,
      prefixCls,
      id,
      inputElement: null,
      disabled,
      autoFocus,
      autoComplete,
      editable: inputEditable,
      activeDescendantId,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: onInputChange,
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex,
      attrs: pickAttrs(props, true)
    }), /* @__PURE__ */ React112.createElement("span", {
      ref: measureRef,
      className: "".concat(selectionPrefixCls, "-search-mirror"),
      "aria-hidden": true
    }, inputValue, "\xA0"));
    var selectionNode = /* @__PURE__ */ React112.createElement(es_default6, {
      prefixCls: "".concat(selectionPrefixCls, "-overflow"),
      data: values,
      renderItem,
      renderRest,
      suffix: inputNode,
      itemKey,
      maxCount: maxTagCount
    });
    return /* @__PURE__ */ React112.createElement(React112.Fragment, null, selectionNode, !values.length && !inputValue && /* @__PURE__ */ React112.createElement("span", {
      className: "".concat(selectionPrefixCls, "-placeholder")
    }, placeholder));
  };
  var MultipleSelector_default = SelectSelector;

  // node_modules/rc-select/es/Selector/SingleSelector.js
  var React113 = __toESM(require_react());
  var SingleSelector = function SingleSelector2(props) {
    var inputElement = props.inputElement, prefixCls = props.prefixCls, id = props.id, inputRef = props.inputRef, disabled = props.disabled, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, mode = props.mode, open = props.open, values = props.values, placeholder = props.placeholder, tabIndex = props.tabIndex, showSearch = props.showSearch, searchValue = props.searchValue, activeValue = props.activeValue, maxLength = props.maxLength, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd, title = props.title;
    var _React$useState = React113.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), inputChanged = _React$useState2[0], setInputChanged = _React$useState2[1];
    var combobox = mode === "combobox";
    var inputEditable = combobox || showSearch;
    var item = values[0];
    var inputValue = searchValue || "";
    if (combobox && activeValue && !inputChanged) {
      inputValue = activeValue;
    }
    React113.useEffect(function() {
      if (combobox) {
        setInputChanged(false);
      }
    }, [combobox, activeValue]);
    var hasTextInput = mode !== "combobox" && !open && !showSearch ? false : !!inputValue;
    var selectionTitle = title === void 0 ? getTitle(item) : title;
    var placeholderNode = React113.useMemo(function() {
      if (item) {
        return null;
      }
      return /* @__PURE__ */ React113.createElement("span", {
        className: "".concat(prefixCls, "-selection-placeholder"),
        style: hasTextInput ? {
          visibility: "hidden"
        } : void 0
      }, placeholder);
    }, [item, hasTextInput, placeholder, prefixCls]);
    return /* @__PURE__ */ React113.createElement(React113.Fragment, null, /* @__PURE__ */ React113.createElement("span", {
      className: "".concat(prefixCls, "-selection-search")
    }, /* @__PURE__ */ React113.createElement(Input_default, {
      ref: inputRef,
      prefixCls,
      id,
      open,
      inputElement,
      disabled,
      autoFocus,
      autoComplete,
      editable: inputEditable,
      activeDescendantId,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: function onChange(e3) {
        setInputChanged(true);
        onInputChange(e3);
      },
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex,
      attrs: pickAttrs(props, true),
      maxLength: combobox ? maxLength : void 0
    })), !combobox && item ? /* @__PURE__ */ React113.createElement("span", {
      className: "".concat(prefixCls, "-selection-item"),
      title: selectionTitle,
      style: hasTextInput ? {
        visibility: "hidden"
      } : void 0
    }, item.label) : null, placeholderNode);
  };
  var SingleSelector_default = SingleSelector;

  // node_modules/rc-select/es/utils/keyUtil.js
  function isValidateOpenKey(currentKeyCode) {
    return ![
      // System function button
      KeyCode_default.ESC,
      KeyCode_default.SHIFT,
      KeyCode_default.BACKSPACE,
      KeyCode_default.TAB,
      KeyCode_default.WIN_KEY,
      KeyCode_default.ALT,
      KeyCode_default.META,
      KeyCode_default.WIN_KEY_RIGHT,
      KeyCode_default.CTRL,
      KeyCode_default.SEMICOLON,
      KeyCode_default.EQUALS,
      KeyCode_default.CAPS_LOCK,
      KeyCode_default.CONTEXT_MENU,
      // F1-F12
      KeyCode_default.F1,
      KeyCode_default.F2,
      KeyCode_default.F3,
      KeyCode_default.F4,
      KeyCode_default.F5,
      KeyCode_default.F6,
      KeyCode_default.F7,
      KeyCode_default.F8,
      KeyCode_default.F9,
      KeyCode_default.F10,
      KeyCode_default.F11,
      KeyCode_default.F12
    ].includes(currentKeyCode);
  }

  // node_modules/rc-select/es/Selector/index.js
  var Selector = function Selector2(props, ref) {
    var inputRef = (0, import_react43.useRef)(null);
    var compositionStatusRef = (0, import_react43.useRef)(false);
    var prefixCls = props.prefixCls, open = props.open, mode = props.mode, showSearch = props.showSearch, tokenWithEnter = props.tokenWithEnter, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSubmit = props.onSearchSubmit, onToggleOpen = props.onToggleOpen, onInputKeyDown = props.onInputKeyDown, domRef = props.domRef;
    React114.useImperativeHandle(ref, function() {
      return {
        focus: function focus() {
          inputRef.current.focus();
        },
        blur: function blur() {
          inputRef.current.blur();
        }
      };
    });
    var _useLock = useLock(0), _useLock2 = _slicedToArray(_useLock, 2), getInputMouseDown = _useLock2[0], setInputMouseDown = _useLock2[1];
    var onInternalInputKeyDown = function onInternalInputKeyDown2(event) {
      var which = event.which;
      if (which === KeyCode_default.UP || which === KeyCode_default.DOWN) {
        event.preventDefault();
      }
      if (onInputKeyDown) {
        onInputKeyDown(event);
      }
      if (which === KeyCode_default.ENTER && mode === "tags" && !compositionStatusRef.current && !open) {
        onSearchSubmit === null || onSearchSubmit === void 0 || onSearchSubmit(event.target.value);
      }
      if (isValidateOpenKey(which)) {
        onToggleOpen(true);
      }
    };
    var onInternalInputMouseDown = function onInternalInputMouseDown2() {
      setInputMouseDown(true);
    };
    var pastedTextRef = (0, import_react43.useRef)(null);
    var triggerOnSearch = function triggerOnSearch2(value) {
      if (onSearch(value, true, compositionStatusRef.current) !== false) {
        onToggleOpen(true);
      }
    };
    var onInputCompositionStart = function onInputCompositionStart2() {
      compositionStatusRef.current = true;
    };
    var onInputCompositionEnd = function onInputCompositionEnd2(e3) {
      compositionStatusRef.current = false;
      if (mode !== "combobox") {
        triggerOnSearch(e3.target.value);
      }
    };
    var onInputChange = function onInputChange2(event) {
      var value = event.target.value;
      if (tokenWithEnter && pastedTextRef.current && /[\r\n]/.test(pastedTextRef.current)) {
        var replacedText = pastedTextRef.current.replace(/[\r\n]+$/, "").replace(/\r\n/g, " ").replace(/[\r\n]/g, " ");
        value = value.replace(replacedText, pastedTextRef.current);
      }
      pastedTextRef.current = null;
      triggerOnSearch(value);
    };
    var onInputPaste = function onInputPaste2(e3) {
      var clipboardData = e3.clipboardData;
      var value = clipboardData === null || clipboardData === void 0 ? void 0 : clipboardData.getData("text");
      pastedTextRef.current = value || "";
    };
    var onClick = function onClick2(_ref) {
      var target = _ref.target;
      if (target !== inputRef.current) {
        var isIE = document.body.style.msTouchAction !== void 0;
        if (isIE) {
          setTimeout(function() {
            inputRef.current.focus();
          });
        } else {
          inputRef.current.focus();
        }
      }
    };
    var onMouseDown = function onMouseDown2(event) {
      var inputMouseDown = getInputMouseDown();
      if (event.target !== inputRef.current && !inputMouseDown && mode !== "combobox") {
        event.preventDefault();
      }
      if (mode !== "combobox" && (!showSearch || !inputMouseDown) || !open) {
        if (open && autoClearSearchValue !== false) {
          onSearch("", true, false);
        }
        onToggleOpen();
      }
    };
    var sharedProps = {
      inputRef,
      onInputKeyDown: onInternalInputKeyDown,
      onInputMouseDown: onInternalInputMouseDown,
      onInputChange,
      onInputPaste,
      onInputCompositionStart,
      onInputCompositionEnd
    };
    var selectNode = mode === "multiple" || mode === "tags" ? /* @__PURE__ */ React114.createElement(MultipleSelector_default, _extends({}, props, sharedProps)) : /* @__PURE__ */ React114.createElement(SingleSelector_default, _extends({}, props, sharedProps));
    return /* @__PURE__ */ React114.createElement("div", {
      ref: domRef,
      className: "".concat(prefixCls, "-selector"),
      onClick,
      onMouseDown
    }, selectNode);
  };
  var ForwardSelector = /* @__PURE__ */ React114.forwardRef(Selector);
  if (true) {
    ForwardSelector.displayName = "Selector";
  }
  var Selector_default = ForwardSelector;

  // node_modules/@rc-component/trigger/es/index.js
  var import_classnames25 = __toESM(require_classnames());
  var React124 = __toESM(require_react());

  // node_modules/@rc-component/trigger/es/Popup/index.js
  var import_classnames24 = __toESM(require_classnames());
  var React118 = __toESM(require_react());

  // node_modules/@rc-component/trigger/es/Popup/Arrow.js
  var import_classnames22 = __toESM(require_classnames());
  var React115 = __toESM(require_react());
  function Arrow(props) {
    var prefixCls = props.prefixCls, align = props.align, arrow = props.arrow, arrowPos = props.arrowPos;
    var _ref = arrow || {}, className = _ref.className, content = _ref.content;
    var _arrowPos$x = arrowPos.x, x = _arrowPos$x === void 0 ? 0 : _arrowPos$x, _arrowPos$y = arrowPos.y, y = _arrowPos$y === void 0 ? 0 : _arrowPos$y;
    var arrowRef = React115.useRef();
    if (!align || !align.points) {
      return null;
    }
    var alignStyle = {
      position: "absolute"
    };
    if (align.autoArrow !== false) {
      var popupPoints = align.points[0];
      var targetPoints = align.points[1];
      var popupTB = popupPoints[0];
      var popupLR = popupPoints[1];
      var targetTB = targetPoints[0];
      var targetLR = targetPoints[1];
      if (popupTB === targetTB || !["t", "b"].includes(popupTB)) {
        alignStyle.top = y;
      } else if (popupTB === "t") {
        alignStyle.top = 0;
      } else {
        alignStyle.bottom = 0;
      }
      if (popupLR === targetLR || !["l", "r"].includes(popupLR)) {
        alignStyle.left = x;
      } else if (popupLR === "l") {
        alignStyle.left = 0;
      } else {
        alignStyle.right = 0;
      }
    }
    return /* @__PURE__ */ React115.createElement("div", {
      ref: arrowRef,
      className: (0, import_classnames22.default)("".concat(prefixCls, "-arrow"), className),
      style: alignStyle
    }, content);
  }

  // node_modules/@rc-component/trigger/es/Popup/Mask.js
  var import_classnames23 = __toESM(require_classnames());
  var React116 = __toESM(require_react());
  function Mask2(props) {
    var prefixCls = props.prefixCls, open = props.open, zIndex = props.zIndex, mask = props.mask, motion2 = props.motion;
    if (!mask) {
      return null;
    }
    return /* @__PURE__ */ React116.createElement(es_default2, _extends({}, motion2, {
      motionAppear: true,
      visible: open,
      removeOnLeave: true
    }), function(_ref) {
      var className = _ref.className;
      return /* @__PURE__ */ React116.createElement("div", {
        style: {
          zIndex
        },
        className: (0, import_classnames23.default)("".concat(prefixCls, "-mask"), className)
      });
    });
  }

  // node_modules/@rc-component/trigger/es/Popup/PopupContent.js
  var React117 = __toESM(require_react());
  var PopupContent = /* @__PURE__ */ React117.memo(function(_ref) {
    var children = _ref.children;
    return children;
  }, function(_, next2) {
    return next2.cache;
  });
  if (true) {
    PopupContent.displayName = "PopupContent";
  }
  var PopupContent_default = PopupContent;

  // node_modules/@rc-component/trigger/es/Popup/index.js
  var Popup = /* @__PURE__ */ React118.forwardRef(function(props, ref) {
    var popup = props.popup, className = props.className, prefixCls = props.prefixCls, style2 = props.style, target = props.target, _onVisibleChanged = props.onVisibleChanged, open = props.open, keepDom = props.keepDom, fresh = props.fresh, onClick = props.onClick, mask = props.mask, arrow = props.arrow, arrowPos = props.arrowPos, align = props.align, motion2 = props.motion, maskMotion = props.maskMotion, forceRender = props.forceRender, getPopupContainer = props.getPopupContainer, autoDestroy = props.autoDestroy, Portal2 = props.portal, zIndex = props.zIndex, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onPointerEnter = props.onPointerEnter, ready = props.ready, offsetX = props.offsetX, offsetY = props.offsetY, offsetR = props.offsetR, offsetB = props.offsetB, onAlign = props.onAlign, onPrepare = props.onPrepare, stretch = props.stretch, targetWidth = props.targetWidth, targetHeight = props.targetHeight;
    var childNode = typeof popup === "function" ? popup() : popup;
    var isNodeVisible = open || keepDom;
    var getPopupContainerNeedParams = (getPopupContainer === null || getPopupContainer === void 0 ? void 0 : getPopupContainer.length) > 0;
    var _React$useState = React118.useState(!getPopupContainer || !getPopupContainerNeedParams), _React$useState2 = _slicedToArray(_React$useState, 2), show = _React$useState2[0], setShow = _React$useState2[1];
    useLayoutEffect_default(function() {
      if (!show && getPopupContainerNeedParams && target) {
        setShow(true);
      }
    }, [show, getPopupContainerNeedParams, target]);
    if (!show) {
      return null;
    }
    var AUTO = "auto";
    var offsetStyle = {
      left: "-1000vw",
      top: "-1000vh",
      right: AUTO,
      bottom: AUTO
    };
    if (ready || !open) {
      var _experimental;
      var points = align.points;
      var dynamicInset = align.dynamicInset || ((_experimental = align._experimental) === null || _experimental === void 0 ? void 0 : _experimental.dynamicInset);
      var alignRight = dynamicInset && points[0][1] === "r";
      var alignBottom = dynamicInset && points[0][0] === "b";
      if (alignRight) {
        offsetStyle.right = offsetR;
        offsetStyle.left = AUTO;
      } else {
        offsetStyle.left = offsetX;
        offsetStyle.right = AUTO;
      }
      if (alignBottom) {
        offsetStyle.bottom = offsetB;
        offsetStyle.top = AUTO;
      } else {
        offsetStyle.top = offsetY;
        offsetStyle.bottom = AUTO;
      }
    }
    var miscStyle = {};
    if (stretch) {
      if (stretch.includes("height") && targetHeight) {
        miscStyle.height = targetHeight;
      } else if (stretch.includes("minHeight") && targetHeight) {
        miscStyle.minHeight = targetHeight;
      }
      if (stretch.includes("width") && targetWidth) {
        miscStyle.width = targetWidth;
      } else if (stretch.includes("minWidth") && targetWidth) {
        miscStyle.minWidth = targetWidth;
      }
    }
    if (!open) {
      miscStyle.pointerEvents = "none";
    }
    return /* @__PURE__ */ React118.createElement(Portal2, {
      open: forceRender || isNodeVisible,
      getContainer: getPopupContainer && function() {
        return getPopupContainer(target);
      },
      autoDestroy
    }, /* @__PURE__ */ React118.createElement(Mask2, {
      prefixCls,
      open,
      zIndex,
      mask,
      motion: maskMotion
    }), /* @__PURE__ */ React118.createElement(es_default, {
      onResize: onAlign,
      disabled: !open
    }, function(resizeObserverRef) {
      return /* @__PURE__ */ React118.createElement(es_default2, _extends({
        motionAppear: true,
        motionEnter: true,
        motionLeave: true,
        removeOnLeave: false,
        forceRender,
        leavedClassName: "".concat(prefixCls, "-hidden")
      }, motion2, {
        onAppearPrepare: onPrepare,
        onEnterPrepare: onPrepare,
        visible: open,
        onVisibleChanged: function onVisibleChanged(nextVisible) {
          var _motion$onVisibleChan;
          motion2 === null || motion2 === void 0 || (_motion$onVisibleChan = motion2.onVisibleChanged) === null || _motion$onVisibleChan === void 0 || _motion$onVisibleChan.call(motion2, nextVisible);
          _onVisibleChanged(nextVisible);
        }
      }), function(_ref, motionRef) {
        var motionClassName = _ref.className, motionStyle = _ref.style;
        var cls = (0, import_classnames24.default)(prefixCls, motionClassName, className);
        return /* @__PURE__ */ React118.createElement("div", {
          ref: composeRef(resizeObserverRef, ref, motionRef),
          className: cls,
          style: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({
            "--arrow-x": "".concat(arrowPos.x || 0, "px"),
            "--arrow-y": "".concat(arrowPos.y || 0, "px")
          }, offsetStyle), miscStyle), motionStyle), {}, {
            boxSizing: "border-box",
            zIndex
          }, style2),
          onMouseEnter,
          onMouseLeave,
          onPointerEnter,
          onClick
        }, arrow && /* @__PURE__ */ React118.createElement(Arrow, {
          prefixCls,
          arrow,
          arrowPos,
          align
        }), /* @__PURE__ */ React118.createElement(PopupContent_default, {
          cache: !open && !fresh
        }, childNode));
      });
    }));
  });
  if (true) {
    Popup.displayName = "Popup";
  }
  var Popup_default = Popup;

  // node_modules/@rc-component/trigger/es/TriggerWrapper.js
  var React119 = __toESM(require_react());
  var TriggerWrapper = /* @__PURE__ */ React119.forwardRef(function(props, ref) {
    var children = props.children, getTriggerDOMNode = props.getTriggerDOMNode;
    var canUseRef = supportRef(children);
    var setRef = React119.useCallback(function(node2) {
      fillRef(ref, getTriggerDOMNode ? getTriggerDOMNode(node2) : node2);
    }, [getTriggerDOMNode]);
    var mergedRef = useComposeRef(setRef, children.ref);
    return canUseRef ? /* @__PURE__ */ React119.cloneElement(children, {
      ref: mergedRef
    }) : children;
  });
  if (true) {
    TriggerWrapper.displayName = "TriggerWrapper";
  }
  var TriggerWrapper_default = TriggerWrapper;

  // node_modules/@rc-component/trigger/es/context.js
  var React120 = __toESM(require_react());
  var TriggerContext = /* @__PURE__ */ React120.createContext(null);
  var context_default2 = TriggerContext;

  // node_modules/@rc-component/trigger/es/hooks/useAction.js
  var React121 = __toESM(require_react());
  function toArray4(val) {
    return val ? Array.isArray(val) ? val : [val] : [];
  }
  function useAction(mobile, action, showAction, hideAction) {
    return React121.useMemo(function() {
      var mergedShowAction = toArray4(showAction !== null && showAction !== void 0 ? showAction : action);
      var mergedHideAction = toArray4(hideAction !== null && hideAction !== void 0 ? hideAction : action);
      var showActionSet = new Set(mergedShowAction);
      var hideActionSet = new Set(mergedHideAction);
      if (mobile) {
        if (showActionSet.has("hover")) {
          showActionSet.delete("hover");
          showActionSet.add("click");
        }
        if (hideActionSet.has("hover")) {
          hideActionSet.delete("hover");
          hideActionSet.add("click");
        }
      }
      return [showActionSet, hideActionSet];
    }, [mobile, action, showAction, hideAction]);
  }

  // node_modules/@rc-component/trigger/es/hooks/useAlign.js
  var React122 = __toESM(require_react());

  // node_modules/@rc-component/trigger/es/util.js
  function isPointsEq() {
    var a1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var a2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var isAlignPoint = arguments.length > 2 ? arguments[2] : void 0;
    if (isAlignPoint) {
      return a1[0] === a2[0];
    }
    return a1[0] === a2[0] && a1[1] === a2[1];
  }
  function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
    var points = align.points;
    var placements4 = Object.keys(builtinPlacements);
    for (var i = 0; i < placements4.length; i += 1) {
      var _builtinPlacements$pl;
      var placement = placements4[i];
      if (isPointsEq((_builtinPlacements$pl = builtinPlacements[placement]) === null || _builtinPlacements$pl === void 0 ? void 0 : _builtinPlacements$pl.points, points, isAlignPoint)) {
        return "".concat(prefixCls, "-placement-").concat(placement);
      }
    }
    return "";
  }
  function getMotion(prefixCls, motion2, animation, transitionName) {
    if (motion2) {
      return motion2;
    }
    if (animation) {
      return {
        motionName: "".concat(prefixCls, "-").concat(animation)
      };
    }
    if (transitionName) {
      return {
        motionName: transitionName
      };
    }
    return null;
  }
  function getWin(ele) {
    return ele.ownerDocument.defaultView;
  }
  function collectScroller(ele) {
    var scrollerList = [];
    var current2 = ele === null || ele === void 0 ? void 0 : ele.parentElement;
    var scrollStyle = ["hidden", "scroll", "clip", "auto"];
    while (current2) {
      var _getWin$getComputedSt = getWin(current2).getComputedStyle(current2), overflowX = _getWin$getComputedSt.overflowX, overflowY = _getWin$getComputedSt.overflowY, overflow = _getWin$getComputedSt.overflow;
      if ([overflowX, overflowY, overflow].some(function(o3) {
        return scrollStyle.includes(o3);
      })) {
        scrollerList.push(current2);
      }
      current2 = current2.parentElement;
    }
    return scrollerList;
  }
  function toNum(num) {
    var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    return Number.isNaN(num) ? defaultValue : num;
  }
  function getPxValue(val) {
    return toNum(parseFloat(val), 0);
  }
  function getVisibleArea(initArea, scrollerList) {
    var visibleArea = _objectSpread2({}, initArea);
    (scrollerList || []).forEach(function(ele) {
      if (ele instanceof HTMLBodyElement || ele instanceof HTMLHtmlElement) {
        return;
      }
      var _getWin$getComputedSt2 = getWin(ele).getComputedStyle(ele), overflow = _getWin$getComputedSt2.overflow, overflowClipMargin = _getWin$getComputedSt2.overflowClipMargin, borderTopWidth = _getWin$getComputedSt2.borderTopWidth, borderBottomWidth = _getWin$getComputedSt2.borderBottomWidth, borderLeftWidth = _getWin$getComputedSt2.borderLeftWidth, borderRightWidth = _getWin$getComputedSt2.borderRightWidth;
      var eleRect = ele.getBoundingClientRect();
      var eleOutHeight = ele.offsetHeight, eleInnerHeight = ele.clientHeight, eleOutWidth = ele.offsetWidth, eleInnerWidth = ele.clientWidth;
      var borderTopNum = getPxValue(borderTopWidth);
      var borderBottomNum = getPxValue(borderBottomWidth);
      var borderLeftNum = getPxValue(borderLeftWidth);
      var borderRightNum = getPxValue(borderRightWidth);
      var scaleX = toNum(Math.round(eleRect.width / eleOutWidth * 1e3) / 1e3);
      var scaleY = toNum(Math.round(eleRect.height / eleOutHeight * 1e3) / 1e3);
      var eleScrollWidth = (eleOutWidth - eleInnerWidth - borderLeftNum - borderRightNum) * scaleX;
      var eleScrollHeight = (eleOutHeight - eleInnerHeight - borderTopNum - borderBottomNum) * scaleY;
      var scaledBorderTopWidth = borderTopNum * scaleY;
      var scaledBorderBottomWidth = borderBottomNum * scaleY;
      var scaledBorderLeftWidth = borderLeftNum * scaleX;
      var scaledBorderRightWidth = borderRightNum * scaleX;
      var clipMarginWidth = 0;
      var clipMarginHeight = 0;
      if (overflow === "clip") {
        var clipNum = getPxValue(overflowClipMargin);
        clipMarginWidth = clipNum * scaleX;
        clipMarginHeight = clipNum * scaleY;
      }
      var eleLeft = eleRect.x + scaledBorderLeftWidth - clipMarginWidth;
      var eleTop = eleRect.y + scaledBorderTopWidth - clipMarginHeight;
      var eleRight = eleLeft + eleRect.width + 2 * clipMarginWidth - scaledBorderLeftWidth - scaledBorderRightWidth - eleScrollWidth;
      var eleBottom = eleTop + eleRect.height + 2 * clipMarginHeight - scaledBorderTopWidth - scaledBorderBottomWidth - eleScrollHeight;
      visibleArea.left = Math.max(visibleArea.left, eleLeft);
      visibleArea.top = Math.max(visibleArea.top, eleTop);
      visibleArea.right = Math.min(visibleArea.right, eleRight);
      visibleArea.bottom = Math.min(visibleArea.bottom, eleBottom);
    });
    return visibleArea;
  }

  // node_modules/@rc-component/trigger/es/hooks/useAlign.js
  function getUnitOffset(size) {
    var offset3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var offsetStr = "".concat(offset3);
    var cells = offsetStr.match(/^(.*)\%$/);
    if (cells) {
      return size * (parseFloat(cells[1]) / 100);
    }
    return parseFloat(offsetStr);
  }
  function getNumberOffset(rect, offset3) {
    var _ref = offset3 || [], _ref2 = _slicedToArray(_ref, 2), offsetX = _ref2[0], offsetY = _ref2[1];
    return [getUnitOffset(rect.width, offsetX), getUnitOffset(rect.height, offsetY)];
  }
  function splitPoints() {
    var points = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    return [points[0], points[1]];
  }
  function getAlignPoint(rect, points) {
    var topBottom = points[0];
    var leftRight = points[1];
    var x;
    var y;
    if (topBottom === "t") {
      y = rect.y;
    } else if (topBottom === "b") {
      y = rect.y + rect.height;
    } else {
      y = rect.y + rect.height / 2;
    }
    if (leftRight === "l") {
      x = rect.x;
    } else if (leftRight === "r") {
      x = rect.x + rect.width;
    } else {
      x = rect.x + rect.width / 2;
    }
    return {
      x,
      y
    };
  }
  function reversePoints(points, index2) {
    var reverseMap = {
      t: "b",
      b: "t",
      l: "r",
      r: "l"
    };
    return points.map(function(point, i) {
      if (i === index2) {
        return reverseMap[point] || "c";
      }
      return point;
    }).join("");
  }
  function useAlign(open, popupEle, target, placement, builtinPlacements, popupAlign, onPopupAlign) {
    var _React$useState = React122.useState({
      ready: false,
      offsetX: 0,
      offsetY: 0,
      offsetR: 0,
      offsetB: 0,
      arrowX: 0,
      arrowY: 0,
      scaleX: 1,
      scaleY: 1,
      align: builtinPlacements[placement] || {}
    }), _React$useState2 = _slicedToArray(_React$useState, 2), offsetInfo = _React$useState2[0], setOffsetInfo = _React$useState2[1];
    var alignCountRef = React122.useRef(0);
    var scrollerList = React122.useMemo(function() {
      if (!popupEle) {
        return [];
      }
      return collectScroller(popupEle);
    }, [popupEle]);
    var prevFlipRef = React122.useRef({});
    var resetFlipCache = function resetFlipCache2() {
      prevFlipRef.current = {};
    };
    if (!open) {
      resetFlipCache();
    }
    var onAlign = useEvent(function() {
      if (popupEle && target && open) {
        let getIntersectionVisibleArea = function(offsetX, offsetY) {
          var area = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : visibleArea;
          var l2 = popupRect.x + offsetX;
          var t2 = popupRect.y + offsetY;
          var r2 = l2 + popupWidth;
          var b = t2 + popupHeight;
          var visibleL = Math.max(l2, area.left);
          var visibleT = Math.max(t2, area.top);
          var visibleR = Math.min(r2, area.right);
          var visibleB = Math.min(b, area.bottom);
          return Math.max(0, (visibleR - visibleL) * (visibleB - visibleT));
        }, syncNextPopupPosition = function() {
          nextPopupY = popupRect.y + nextOffsetY;
          nextPopupBottom = nextPopupY + popupHeight;
          nextPopupX = popupRect.x + nextOffsetX;
          nextPopupRight = nextPopupX + popupWidth;
        };
        var _popupElement$parentE, _popupElement$parentE2;
        var popupElement = popupEle;
        var doc = popupElement.ownerDocument;
        var win = getWin(popupElement);
        var _win$getComputedStyle = win.getComputedStyle(popupElement), width = _win$getComputedStyle.width, height = _win$getComputedStyle.height, popupPosition = _win$getComputedStyle.position;
        var originLeft = popupElement.style.left;
        var originTop = popupElement.style.top;
        var originRight = popupElement.style.right;
        var originBottom = popupElement.style.bottom;
        var originOverflow = popupElement.style.overflow;
        var placementInfo = _objectSpread2(_objectSpread2({}, builtinPlacements[placement]), popupAlign);
        var placeholderElement = doc.createElement("div");
        (_popupElement$parentE = popupElement.parentElement) === null || _popupElement$parentE === void 0 || _popupElement$parentE.appendChild(placeholderElement);
        placeholderElement.style.left = "".concat(popupElement.offsetLeft, "px");
        placeholderElement.style.top = "".concat(popupElement.offsetTop, "px");
        placeholderElement.style.position = popupPosition;
        placeholderElement.style.height = "".concat(popupElement.offsetHeight, "px");
        placeholderElement.style.width = "".concat(popupElement.offsetWidth, "px");
        popupElement.style.left = "0";
        popupElement.style.top = "0";
        popupElement.style.right = "auto";
        popupElement.style.bottom = "auto";
        popupElement.style.overflow = "hidden";
        var targetRect;
        if (Array.isArray(target)) {
          targetRect = {
            x: target[0],
            y: target[1],
            width: 0,
            height: 0
          };
        } else {
          var rect = target.getBoundingClientRect();
          targetRect = {
            x: rect.x,
            y: rect.y,
            width: rect.width,
            height: rect.height
          };
        }
        var popupRect = popupElement.getBoundingClientRect();
        var _doc$documentElement = doc.documentElement, clientWidth = _doc$documentElement.clientWidth, clientHeight = _doc$documentElement.clientHeight, scrollWidth = _doc$documentElement.scrollWidth, scrollHeight = _doc$documentElement.scrollHeight, scrollTop = _doc$documentElement.scrollTop, scrollLeft = _doc$documentElement.scrollLeft;
        var popupHeight = popupRect.height;
        var popupWidth = popupRect.width;
        var targetHeight = targetRect.height;
        var targetWidth = targetRect.width;
        var visibleRegion = {
          left: 0,
          top: 0,
          right: clientWidth,
          bottom: clientHeight
        };
        var scrollRegion = {
          left: -scrollLeft,
          top: -scrollTop,
          right: scrollWidth - scrollLeft,
          bottom: scrollHeight - scrollTop
        };
        var htmlRegion = placementInfo.htmlRegion;
        var VISIBLE = "visible";
        var VISIBLE_FIRST = "visibleFirst";
        if (htmlRegion !== "scroll" && htmlRegion !== VISIBLE_FIRST) {
          htmlRegion = VISIBLE;
        }
        var isVisibleFirst = htmlRegion === VISIBLE_FIRST;
        var scrollRegionArea = getVisibleArea(scrollRegion, scrollerList);
        var visibleRegionArea = getVisibleArea(visibleRegion, scrollerList);
        var visibleArea = htmlRegion === VISIBLE ? visibleRegionArea : scrollRegionArea;
        var adjustCheckVisibleArea = isVisibleFirst ? visibleRegionArea : visibleArea;
        popupElement.style.left = "auto";
        popupElement.style.top = "auto";
        popupElement.style.right = "0";
        popupElement.style.bottom = "0";
        var popupMirrorRect = popupElement.getBoundingClientRect();
        popupElement.style.left = originLeft;
        popupElement.style.top = originTop;
        popupElement.style.right = originRight;
        popupElement.style.bottom = originBottom;
        popupElement.style.overflow = originOverflow;
        (_popupElement$parentE2 = popupElement.parentElement) === null || _popupElement$parentE2 === void 0 || _popupElement$parentE2.removeChild(placeholderElement);
        var _scaleX = toNum(Math.round(popupWidth / parseFloat(width) * 1e3) / 1e3);
        var _scaleY = toNum(Math.round(popupHeight / parseFloat(height) * 1e3) / 1e3);
        if (_scaleX === 0 || _scaleY === 0 || isDOM(target) && !isVisible_default(target)) {
          return;
        }
        var offset3 = placementInfo.offset, targetOffset3 = placementInfo.targetOffset;
        var _getNumberOffset = getNumberOffset(popupRect, offset3), _getNumberOffset2 = _slicedToArray(_getNumberOffset, 2), popupOffsetX = _getNumberOffset2[0], popupOffsetY = _getNumberOffset2[1];
        var _getNumberOffset3 = getNumberOffset(targetRect, targetOffset3), _getNumberOffset4 = _slicedToArray(_getNumberOffset3, 2), targetOffsetX = _getNumberOffset4[0], targetOffsetY = _getNumberOffset4[1];
        targetRect.x -= targetOffsetX;
        targetRect.y -= targetOffsetY;
        var _ref3 = placementInfo.points || [], _ref4 = _slicedToArray(_ref3, 2), popupPoint = _ref4[0], targetPoint = _ref4[1];
        var targetPoints = splitPoints(targetPoint);
        var popupPoints = splitPoints(popupPoint);
        var targetAlignPoint = getAlignPoint(targetRect, targetPoints);
        var popupAlignPoint = getAlignPoint(popupRect, popupPoints);
        var nextAlignInfo = _objectSpread2({}, placementInfo);
        var nextOffsetX = targetAlignPoint.x - popupAlignPoint.x + popupOffsetX;
        var nextOffsetY = targetAlignPoint.y - popupAlignPoint.y + popupOffsetY;
        var originIntersectionVisibleArea = getIntersectionVisibleArea(nextOffsetX, nextOffsetY);
        var originIntersectionRecommendArea = getIntersectionVisibleArea(nextOffsetX, nextOffsetY, visibleRegionArea);
        var targetAlignPointTL = getAlignPoint(targetRect, ["t", "l"]);
        var popupAlignPointTL = getAlignPoint(popupRect, ["t", "l"]);
        var targetAlignPointBR = getAlignPoint(targetRect, ["b", "r"]);
        var popupAlignPointBR = getAlignPoint(popupRect, ["b", "r"]);
        var overflow = placementInfo.overflow || {};
        var adjustX = overflow.adjustX, adjustY = overflow.adjustY, shiftX = overflow.shiftX, shiftY = overflow.shiftY;
        var supportAdjust = function supportAdjust2(val) {
          if (typeof val === "boolean") {
            return val;
          }
          return val >= 0;
        };
        var nextPopupY;
        var nextPopupBottom;
        var nextPopupX;
        var nextPopupRight;
        syncNextPopupPosition();
        var needAdjustY = supportAdjust(adjustY);
        var sameTB = popupPoints[0] === targetPoints[0];
        if (needAdjustY && popupPoints[0] === "t" && (nextPopupBottom > adjustCheckVisibleArea.bottom || prevFlipRef.current.bt)) {
          var tmpNextOffsetY = nextOffsetY;
          if (sameTB) {
            tmpNextOffsetY -= popupHeight - targetHeight;
          } else {
            tmpNextOffsetY = targetAlignPointTL.y - popupAlignPointBR.y - popupOffsetY;
          }
          var newVisibleArea = getIntersectionVisibleArea(nextOffsetX, tmpNextOffsetY);
          var newVisibleRecommendArea = getIntersectionVisibleArea(nextOffsetX, tmpNextOffsetY, visibleRegionArea);
          if (
            // Of course use larger one
            newVisibleArea > originIntersectionVisibleArea || newVisibleArea === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
            newVisibleRecommendArea >= originIntersectionRecommendArea)
          ) {
            prevFlipRef.current.bt = true;
            nextOffsetY = tmpNextOffsetY;
            popupOffsetY = -popupOffsetY;
            nextAlignInfo.points = [reversePoints(popupPoints, 0), reversePoints(targetPoints, 0)];
          } else {
            prevFlipRef.current.bt = false;
          }
        }
        if (needAdjustY && popupPoints[0] === "b" && (nextPopupY < adjustCheckVisibleArea.top || prevFlipRef.current.tb)) {
          var _tmpNextOffsetY = nextOffsetY;
          if (sameTB) {
            _tmpNextOffsetY += popupHeight - targetHeight;
          } else {
            _tmpNextOffsetY = targetAlignPointBR.y - popupAlignPointTL.y - popupOffsetY;
          }
          var _newVisibleArea = getIntersectionVisibleArea(nextOffsetX, _tmpNextOffsetY);
          var _newVisibleRecommendArea = getIntersectionVisibleArea(nextOffsetX, _tmpNextOffsetY, visibleRegionArea);
          if (
            // Of course use larger one
            _newVisibleArea > originIntersectionVisibleArea || _newVisibleArea === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
            _newVisibleRecommendArea >= originIntersectionRecommendArea)
          ) {
            prevFlipRef.current.tb = true;
            nextOffsetY = _tmpNextOffsetY;
            popupOffsetY = -popupOffsetY;
            nextAlignInfo.points = [reversePoints(popupPoints, 0), reversePoints(targetPoints, 0)];
          } else {
            prevFlipRef.current.tb = false;
          }
        }
        var needAdjustX = supportAdjust(adjustX);
        var sameLR = popupPoints[1] === targetPoints[1];
        if (needAdjustX && popupPoints[1] === "l" && (nextPopupRight > adjustCheckVisibleArea.right || prevFlipRef.current.rl)) {
          var tmpNextOffsetX = nextOffsetX;
          if (sameLR) {
            tmpNextOffsetX -= popupWidth - targetWidth;
          } else {
            tmpNextOffsetX = targetAlignPointTL.x - popupAlignPointBR.x - popupOffsetX;
          }
          var _newVisibleArea2 = getIntersectionVisibleArea(tmpNextOffsetX, nextOffsetY);
          var _newVisibleRecommendArea2 = getIntersectionVisibleArea(tmpNextOffsetX, nextOffsetY, visibleRegionArea);
          if (
            // Of course use larger one
            _newVisibleArea2 > originIntersectionVisibleArea || _newVisibleArea2 === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
            _newVisibleRecommendArea2 >= originIntersectionRecommendArea)
          ) {
            prevFlipRef.current.rl = true;
            nextOffsetX = tmpNextOffsetX;
            popupOffsetX = -popupOffsetX;
            nextAlignInfo.points = [reversePoints(popupPoints, 1), reversePoints(targetPoints, 1)];
          } else {
            prevFlipRef.current.rl = false;
          }
        }
        if (needAdjustX && popupPoints[1] === "r" && (nextPopupX < adjustCheckVisibleArea.left || prevFlipRef.current.lr)) {
          var _tmpNextOffsetX = nextOffsetX;
          if (sameLR) {
            _tmpNextOffsetX += popupWidth - targetWidth;
          } else {
            _tmpNextOffsetX = targetAlignPointBR.x - popupAlignPointTL.x - popupOffsetX;
          }
          var _newVisibleArea3 = getIntersectionVisibleArea(_tmpNextOffsetX, nextOffsetY);
          var _newVisibleRecommendArea3 = getIntersectionVisibleArea(_tmpNextOffsetX, nextOffsetY, visibleRegionArea);
          if (
            // Of course use larger one
            _newVisibleArea3 > originIntersectionVisibleArea || _newVisibleArea3 === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
            _newVisibleRecommendArea3 >= originIntersectionRecommendArea)
          ) {
            prevFlipRef.current.lr = true;
            nextOffsetX = _tmpNextOffsetX;
            popupOffsetX = -popupOffsetX;
            nextAlignInfo.points = [reversePoints(popupPoints, 1), reversePoints(targetPoints, 1)];
          } else {
            prevFlipRef.current.lr = false;
          }
        }
        syncNextPopupPosition();
        var numShiftX = shiftX === true ? 0 : shiftX;
        if (typeof numShiftX === "number") {
          if (nextPopupX < visibleRegionArea.left) {
            nextOffsetX -= nextPopupX - visibleRegionArea.left - popupOffsetX;
            if (targetRect.x + targetWidth < visibleRegionArea.left + numShiftX) {
              nextOffsetX += targetRect.x - visibleRegionArea.left + targetWidth - numShiftX;
            }
          }
          if (nextPopupRight > visibleRegionArea.right) {
            nextOffsetX -= nextPopupRight - visibleRegionArea.right - popupOffsetX;
            if (targetRect.x > visibleRegionArea.right - numShiftX) {
              nextOffsetX += targetRect.x - visibleRegionArea.right + numShiftX;
            }
          }
        }
        var numShiftY = shiftY === true ? 0 : shiftY;
        if (typeof numShiftY === "number") {
          if (nextPopupY < visibleRegionArea.top) {
            nextOffsetY -= nextPopupY - visibleRegionArea.top - popupOffsetY;
            if (targetRect.y + targetHeight < visibleRegionArea.top + numShiftY) {
              nextOffsetY += targetRect.y - visibleRegionArea.top + targetHeight - numShiftY;
            }
          }
          if (nextPopupBottom > visibleRegionArea.bottom) {
            nextOffsetY -= nextPopupBottom - visibleRegionArea.bottom - popupOffsetY;
            if (targetRect.y > visibleRegionArea.bottom - numShiftY) {
              nextOffsetY += targetRect.y - visibleRegionArea.bottom + numShiftY;
            }
          }
        }
        var popupLeft = popupRect.x + nextOffsetX;
        var popupRight = popupLeft + popupWidth;
        var popupTop = popupRect.y + nextOffsetY;
        var popupBottom = popupTop + popupHeight;
        var targetLeft = targetRect.x;
        var targetRight = targetLeft + targetWidth;
        var targetTop = targetRect.y;
        var targetBottom = targetTop + targetHeight;
        var maxLeft = Math.max(popupLeft, targetLeft);
        var minRight = Math.min(popupRight, targetRight);
        var xCenter = (maxLeft + minRight) / 2;
        var nextArrowX = xCenter - popupLeft;
        var maxTop = Math.max(popupTop, targetTop);
        var minBottom = Math.min(popupBottom, targetBottom);
        var yCenter = (maxTop + minBottom) / 2;
        var nextArrowY = yCenter - popupTop;
        onPopupAlign === null || onPopupAlign === void 0 || onPopupAlign(popupEle, nextAlignInfo);
        var offsetX4Right = popupMirrorRect.right - popupRect.x - (nextOffsetX + popupRect.width);
        var offsetY4Bottom = popupMirrorRect.bottom - popupRect.y - (nextOffsetY + popupRect.height);
        setOffsetInfo({
          ready: true,
          offsetX: nextOffsetX / _scaleX,
          offsetY: nextOffsetY / _scaleY,
          offsetR: offsetX4Right / _scaleX,
          offsetB: offsetY4Bottom / _scaleY,
          arrowX: nextArrowX / _scaleX,
          arrowY: nextArrowY / _scaleY,
          scaleX: _scaleX,
          scaleY: _scaleY,
          align: nextAlignInfo
        });
      }
    });
    var triggerAlign = function triggerAlign2() {
      alignCountRef.current += 1;
      var id = alignCountRef.current;
      Promise.resolve().then(function() {
        if (alignCountRef.current === id) {
          onAlign();
        }
      });
    };
    var resetReady = function resetReady2() {
      setOffsetInfo(function(ori) {
        return _objectSpread2(_objectSpread2({}, ori), {}, {
          ready: false
        });
      });
    };
    useLayoutEffect_default(resetReady, [placement]);
    useLayoutEffect_default(function() {
      if (!open) {
        resetReady();
      }
    }, [open]);
    return [offsetInfo.ready, offsetInfo.offsetX, offsetInfo.offsetY, offsetInfo.offsetR, offsetInfo.offsetB, offsetInfo.arrowX, offsetInfo.arrowY, offsetInfo.scaleX, offsetInfo.scaleY, offsetInfo.align, triggerAlign];
  }

  // node_modules/@rc-component/trigger/es/hooks/useWatch.js
  function useWatch2(open, target, popup, onAlign, onScroll) {
    useLayoutEffect_default(function() {
      if (open && target && popup) {
        let notifyScroll = function() {
          onAlign();
          onScroll();
        };
        var targetElement = target;
        var popupElement = popup;
        var targetScrollList = collectScroller(targetElement);
        var popupScrollList = collectScroller(popupElement);
        var win = getWin(popupElement);
        var mergedList = new Set([win].concat(_toConsumableArray(targetScrollList), _toConsumableArray(popupScrollList)));
        mergedList.forEach(function(scroller) {
          scroller.addEventListener("scroll", notifyScroll, {
            passive: true
          });
        });
        win.addEventListener("resize", notifyScroll, {
          passive: true
        });
        onAlign();
        return function() {
          mergedList.forEach(function(scroller) {
            scroller.removeEventListener("scroll", notifyScroll);
            win.removeEventListener("resize", notifyScroll);
          });
        };
      }
    }, [open, target, popup]);
  }

  // node_modules/@rc-component/trigger/es/hooks/useWinClick.js
  var React123 = __toESM(require_react());
  function useWinClick(open, clickToHide, targetEle, popupEle, mask, maskClosable, inPopupOrChild, triggerOpen) {
    var openRef = React123.useRef(open);
    var lockRef = React123.useRef(false);
    if (openRef.current !== open) {
      lockRef.current = true;
      openRef.current = open;
    }
    React123.useEffect(function() {
      var id = raf_default(function() {
        lockRef.current = false;
      });
      return function() {
        raf_default.cancel(id);
      };
    }, [open]);
    React123.useEffect(function() {
      if (clickToHide && popupEle && (!mask || maskClosable)) {
        var genClickEvents = function genClickEvents2() {
          var clickInside = false;
          var onWindowMouseDown = function onWindowMouseDown2(_ref) {
            var target = _ref.target;
            clickInside = inPopupOrChild(target);
          };
          var onWindowClick = function onWindowClick2(_ref2) {
            var target = _ref2.target;
            if (!lockRef.current && openRef.current && !clickInside && !inPopupOrChild(target)) {
              triggerOpen(false);
            }
          };
          return [onWindowMouseDown, onWindowClick];
        };
        var _genClickEvents = genClickEvents(), _genClickEvents2 = _slicedToArray(_genClickEvents, 2), onWinMouseDown = _genClickEvents2[0], onWinClick = _genClickEvents2[1];
        var _genClickEvents3 = genClickEvents(), _genClickEvents4 = _slicedToArray(_genClickEvents3, 2), onShadowMouseDown = _genClickEvents4[0], onShadowClick = _genClickEvents4[1];
        var win = getWin(popupEle);
        win.addEventListener("mousedown", onWinMouseDown, true);
        win.addEventListener("click", onWinClick, true);
        win.addEventListener("contextmenu", onWinClick, true);
        var targetShadowRoot = getShadowRoot(targetEle);
        if (targetShadowRoot) {
          targetShadowRoot.addEventListener("mousedown", onShadowMouseDown, true);
          targetShadowRoot.addEventListener("click", onShadowClick, true);
          targetShadowRoot.addEventListener("contextmenu", onShadowClick, true);
        }
        if (true) {
          var _targetEle$getRootNod, _popupEle$getRootNode;
          var targetRoot = targetEle === null || targetEle === void 0 || (_targetEle$getRootNod = targetEle.getRootNode) === null || _targetEle$getRootNod === void 0 ? void 0 : _targetEle$getRootNod.call(targetEle);
          var popupRoot = (_popupEle$getRootNode = popupEle.getRootNode) === null || _popupEle$getRootNode === void 0 ? void 0 : _popupEle$getRootNode.call(popupEle);
          warning2(targetRoot === popupRoot, "trigger element and popup element should in same shadow root.");
        }
        return function() {
          win.removeEventListener("mousedown", onWinMouseDown, true);
          win.removeEventListener("click", onWinClick, true);
          win.removeEventListener("contextmenu", onWinClick, true);
          if (targetShadowRoot) {
            targetShadowRoot.removeEventListener("mousedown", onShadowMouseDown, true);
            targetShadowRoot.removeEventListener("click", onShadowClick, true);
            targetShadowRoot.removeEventListener("contextmenu", onShadowClick, true);
          }
        };
      }
    }, [clickToHide, targetEle, popupEle, mask, maskClosable]);
  }

  // node_modules/@rc-component/trigger/es/index.js
  var _excluded11 = ["prefixCls", "children", "action", "showAction", "hideAction", "popupVisible", "defaultPopupVisible", "onPopupVisibleChange", "afterPopupVisibleChange", "mouseEnterDelay", "mouseLeaveDelay", "focusDelay", "blurDelay", "mask", "maskClosable", "getPopupContainer", "forceRender", "autoDestroy", "destroyPopupOnHide", "popup", "popupClassName", "popupStyle", "popupPlacement", "builtinPlacements", "popupAlign", "zIndex", "stretch", "getPopupClassNameFromAlign", "fresh", "alignPoint", "onPopupClick", "onPopupAlign", "arrow", "popupMotion", "maskMotion", "popupTransitionName", "popupAnimation", "maskTransitionName", "maskAnimation", "className", "getTriggerDOMNode"];
  function generateTrigger() {
    var PortalComponent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : es_default3;
    var Trigger = /* @__PURE__ */ React124.forwardRef(function(props, ref) {
      var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-trigger-popup" : _props$prefixCls, children = props.children, _props$action = props.action, action = _props$action === void 0 ? "hover" : _props$action, showAction = props.showAction, hideAction = props.hideAction, popupVisible = props.popupVisible, defaultPopupVisible = props.defaultPopupVisible, onPopupVisibleChange = props.onPopupVisibleChange, afterPopupVisibleChange = props.afterPopupVisibleChange, mouseEnterDelay = props.mouseEnterDelay, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, focusDelay = props.focusDelay, blurDelay = props.blurDelay, mask = props.mask, _props$maskClosable = props.maskClosable, maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable, getPopupContainer = props.getPopupContainer, forceRender = props.forceRender, autoDestroy = props.autoDestroy, destroyPopupOnHide = props.destroyPopupOnHide, popup = props.popup, popupClassName = props.popupClassName, popupStyle = props.popupStyle, popupPlacement = props.popupPlacement, _props$builtinPlaceme = props.builtinPlacements, builtinPlacements = _props$builtinPlaceme === void 0 ? {} : _props$builtinPlaceme, popupAlign = props.popupAlign, zIndex = props.zIndex, stretch = props.stretch, getPopupClassNameFromAlign = props.getPopupClassNameFromAlign, fresh = props.fresh, alignPoint = props.alignPoint, onPopupClick = props.onPopupClick, onPopupAlign = props.onPopupAlign, arrow = props.arrow, popupMotion = props.popupMotion, maskMotion = props.maskMotion, popupTransitionName = props.popupTransitionName, popupAnimation = props.popupAnimation, maskTransitionName = props.maskTransitionName, maskAnimation = props.maskAnimation, className = props.className, getTriggerDOMNode = props.getTriggerDOMNode, restProps = _objectWithoutProperties(props, _excluded11);
      var mergedAutoDestroy = autoDestroy || destroyPopupOnHide || false;
      var _React$useState = React124.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
      useLayoutEffect_default(function() {
        setMobile(isMobile_default());
      }, []);
      var subPopupElements = React124.useRef({});
      var parentContext = React124.useContext(context_default2);
      var context = React124.useMemo(function() {
        return {
          registerSubPopup: function registerSubPopup(id2, subPopupEle) {
            subPopupElements.current[id2] = subPopupEle;
            parentContext === null || parentContext === void 0 || parentContext.registerSubPopup(id2, subPopupEle);
          }
        };
      }, [parentContext]);
      var id = useId_default();
      var _React$useState3 = React124.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), popupEle = _React$useState4[0], setPopupEle = _React$useState4[1];
      var setPopupRef = useEvent(function(node2) {
        if (isDOM(node2) && popupEle !== node2) {
          setPopupEle(node2);
        }
        parentContext === null || parentContext === void 0 || parentContext.registerSubPopup(id, node2);
      });
      var _React$useState5 = React124.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), targetEle = _React$useState6[0], setTargetEle = _React$useState6[1];
      var externalForwardRef = React124.useRef(null);
      var setTargetRef = useEvent(function(node2) {
        if (isDOM(node2) && targetEle !== node2) {
          setTargetEle(node2);
          externalForwardRef.current = node2;
        }
      });
      var child = React124.Children.only(children);
      var originChildProps = (child === null || child === void 0 ? void 0 : child.props) || {};
      var cloneProps = {};
      var inPopupOrChild = useEvent(function(ele) {
        var _getShadowRoot, _getShadowRoot2;
        var childDOM = targetEle;
        return (childDOM === null || childDOM === void 0 ? void 0 : childDOM.contains(ele)) || ((_getShadowRoot = getShadowRoot(childDOM)) === null || _getShadowRoot === void 0 ? void 0 : _getShadowRoot.host) === ele || ele === childDOM || (popupEle === null || popupEle === void 0 ? void 0 : popupEle.contains(ele)) || ((_getShadowRoot2 = getShadowRoot(popupEle)) === null || _getShadowRoot2 === void 0 ? void 0 : _getShadowRoot2.host) === ele || ele === popupEle || Object.values(subPopupElements.current).some(function(subPopupEle) {
          return (subPopupEle === null || subPopupEle === void 0 ? void 0 : subPopupEle.contains(ele)) || ele === subPopupEle;
        });
      });
      var mergePopupMotion = getMotion(prefixCls, popupMotion, popupAnimation, popupTransitionName);
      var mergeMaskMotion = getMotion(prefixCls, maskMotion, maskAnimation, maskTransitionName);
      var _React$useState7 = React124.useState(defaultPopupVisible || false), _React$useState8 = _slicedToArray(_React$useState7, 2), internalOpen = _React$useState8[0], setInternalOpen = _React$useState8[1];
      var mergedOpen = popupVisible !== null && popupVisible !== void 0 ? popupVisible : internalOpen;
      var setMergedOpen = useEvent(function(nextOpen) {
        if (popupVisible === void 0) {
          setInternalOpen(nextOpen);
        }
      });
      useLayoutEffect_default(function() {
        setInternalOpen(popupVisible || false);
      }, [popupVisible]);
      var openRef = React124.useRef(mergedOpen);
      openRef.current = mergedOpen;
      var lastTriggerRef = React124.useRef([]);
      lastTriggerRef.current = [];
      var internalTriggerOpen = useEvent(function(nextOpen) {
        var _lastTriggerRef$curre;
        setMergedOpen(nextOpen);
        if (((_lastTriggerRef$curre = lastTriggerRef.current[lastTriggerRef.current.length - 1]) !== null && _lastTriggerRef$curre !== void 0 ? _lastTriggerRef$curre : mergedOpen) !== nextOpen) {
          lastTriggerRef.current.push(nextOpen);
          onPopupVisibleChange === null || onPopupVisibleChange === void 0 || onPopupVisibleChange(nextOpen);
        }
      });
      var delayRef = React124.useRef();
      var clearDelay = function clearDelay2() {
        clearTimeout(delayRef.current);
      };
      var triggerOpen = function triggerOpen2(nextOpen) {
        var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        clearDelay();
        if (delay === 0) {
          internalTriggerOpen(nextOpen);
        } else {
          delayRef.current = setTimeout(function() {
            internalTriggerOpen(nextOpen);
          }, delay * 1e3);
        }
      };
      React124.useEffect(function() {
        return clearDelay;
      }, []);
      var _React$useState9 = React124.useState(false), _React$useState10 = _slicedToArray(_React$useState9, 2), inMotion = _React$useState10[0], setInMotion = _React$useState10[1];
      useLayoutEffect_default(function(firstMount) {
        if (!firstMount || mergedOpen) {
          setInMotion(true);
        }
      }, [mergedOpen]);
      var _React$useState11 = React124.useState(null), _React$useState12 = _slicedToArray(_React$useState11, 2), motionPrepareResolve = _React$useState12[0], setMotionPrepareResolve = _React$useState12[1];
      var _React$useState13 = React124.useState([0, 0]), _React$useState14 = _slicedToArray(_React$useState13, 2), mousePos = _React$useState14[0], setMousePos = _React$useState14[1];
      var setMousePosByEvent = function setMousePosByEvent2(event) {
        setMousePos([event.clientX, event.clientY]);
      };
      var _useAlign = useAlign(mergedOpen, popupEle, alignPoint ? mousePos : targetEle, popupPlacement, builtinPlacements, popupAlign, onPopupAlign), _useAlign2 = _slicedToArray(_useAlign, 11), ready = _useAlign2[0], offsetX = _useAlign2[1], offsetY = _useAlign2[2], offsetR = _useAlign2[3], offsetB = _useAlign2[4], arrowX = _useAlign2[5], arrowY = _useAlign2[6], scaleX = _useAlign2[7], scaleY = _useAlign2[8], alignInfo = _useAlign2[9], onAlign = _useAlign2[10];
      var _useAction = useAction(mobile, action, showAction, hideAction), _useAction2 = _slicedToArray(_useAction, 2), showActions = _useAction2[0], hideActions = _useAction2[1];
      var clickToShow = showActions.has("click");
      var clickToHide = hideActions.has("click") || hideActions.has("contextMenu");
      var triggerAlign = useEvent(function() {
        if (!inMotion) {
          onAlign();
        }
      });
      var onScroll = function onScroll2() {
        if (openRef.current && alignPoint && clickToHide) {
          triggerOpen(false);
        }
      };
      useWatch2(mergedOpen, targetEle, popupEle, triggerAlign, onScroll);
      useLayoutEffect_default(function() {
        triggerAlign();
      }, [mousePos, popupPlacement]);
      useLayoutEffect_default(function() {
        if (mergedOpen && !(builtinPlacements !== null && builtinPlacements !== void 0 && builtinPlacements[popupPlacement])) {
          triggerAlign();
        }
      }, [JSON.stringify(popupAlign)]);
      var alignedClassName = React124.useMemo(function() {
        var baseClassName = getAlignPopupClassName(builtinPlacements, prefixCls, alignInfo, alignPoint);
        return (0, import_classnames25.default)(baseClassName, getPopupClassNameFromAlign === null || getPopupClassNameFromAlign === void 0 ? void 0 : getPopupClassNameFromAlign(alignInfo));
      }, [alignInfo, getPopupClassNameFromAlign, builtinPlacements, prefixCls, alignPoint]);
      React124.useImperativeHandle(ref, function() {
        return {
          nativeElement: externalForwardRef.current,
          forceAlign: triggerAlign
        };
      });
      var _React$useState15 = React124.useState(0), _React$useState16 = _slicedToArray(_React$useState15, 2), targetWidth = _React$useState16[0], setTargetWidth = _React$useState16[1];
      var _React$useState17 = React124.useState(0), _React$useState18 = _slicedToArray(_React$useState17, 2), targetHeight = _React$useState18[0], setTargetHeight = _React$useState18[1];
      var syncTargetSize = function syncTargetSize2() {
        if (stretch && targetEle) {
          var rect = targetEle.getBoundingClientRect();
          setTargetWidth(rect.width);
          setTargetHeight(rect.height);
        }
      };
      var onTargetResize = function onTargetResize2() {
        syncTargetSize();
        triggerAlign();
      };
      var onVisibleChanged = function onVisibleChanged2(visible) {
        setInMotion(false);
        onAlign();
        afterPopupVisibleChange === null || afterPopupVisibleChange === void 0 || afterPopupVisibleChange(visible);
      };
      var onPrepare = function onPrepare2() {
        return new Promise(function(resolve) {
          syncTargetSize();
          setMotionPrepareResolve(function() {
            return resolve;
          });
        });
      };
      useLayoutEffect_default(function() {
        if (motionPrepareResolve) {
          onAlign();
          motionPrepareResolve();
          setMotionPrepareResolve(null);
        }
      }, [motionPrepareResolve]);
      function wrapperAction(eventName, nextOpen, delay, preEvent) {
        cloneProps[eventName] = function(event) {
          var _originChildProps$eve;
          preEvent === null || preEvent === void 0 || preEvent(event);
          triggerOpen(nextOpen, delay);
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          (_originChildProps$eve = originChildProps[eventName]) === null || _originChildProps$eve === void 0 || _originChildProps$eve.call.apply(_originChildProps$eve, [originChildProps, event].concat(args));
        };
      }
      if (clickToShow || clickToHide) {
        cloneProps.onClick = function(event) {
          var _originChildProps$onC;
          if (openRef.current && clickToHide) {
            triggerOpen(false);
          } else if (!openRef.current && clickToShow) {
            setMousePosByEvent(event);
            triggerOpen(true);
          }
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          (_originChildProps$onC = originChildProps.onClick) === null || _originChildProps$onC === void 0 || _originChildProps$onC.call.apply(_originChildProps$onC, [originChildProps, event].concat(args));
        };
      }
      useWinClick(mergedOpen, clickToHide, targetEle, popupEle, mask, maskClosable, inPopupOrChild, triggerOpen);
      var hoverToShow = showActions.has("hover");
      var hoverToHide = hideActions.has("hover");
      var onPopupMouseEnter;
      var onPopupMouseLeave;
      if (hoverToShow) {
        wrapperAction("onMouseEnter", true, mouseEnterDelay, function(event) {
          setMousePosByEvent(event);
        });
        wrapperAction("onPointerEnter", true, mouseEnterDelay, function(event) {
          setMousePosByEvent(event);
        });
        onPopupMouseEnter = function onPopupMouseEnter2(event) {
          if ((mergedOpen || inMotion) && popupEle !== null && popupEle !== void 0 && popupEle.contains(event.target)) {
            triggerOpen(true, mouseEnterDelay);
          }
        };
        if (alignPoint) {
          cloneProps.onMouseMove = function(event) {
            var _originChildProps$onM;
            (_originChildProps$onM = originChildProps.onMouseMove) === null || _originChildProps$onM === void 0 || _originChildProps$onM.call(originChildProps, event);
          };
        }
      }
      if (hoverToHide) {
        wrapperAction("onMouseLeave", false, mouseLeaveDelay);
        wrapperAction("onPointerLeave", false, mouseLeaveDelay);
        onPopupMouseLeave = function onPopupMouseLeave2() {
          triggerOpen(false, mouseLeaveDelay);
        };
      }
      if (showActions.has("focus")) {
        wrapperAction("onFocus", true, focusDelay);
      }
      if (hideActions.has("focus")) {
        wrapperAction("onBlur", false, blurDelay);
      }
      if (showActions.has("contextMenu")) {
        cloneProps.onContextMenu = function(event) {
          var _originChildProps$onC2;
          if (openRef.current && hideActions.has("contextMenu")) {
            triggerOpen(false);
          } else {
            setMousePosByEvent(event);
            triggerOpen(true);
          }
          event.preventDefault();
          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }
          (_originChildProps$onC2 = originChildProps.onContextMenu) === null || _originChildProps$onC2 === void 0 || _originChildProps$onC2.call.apply(_originChildProps$onC2, [originChildProps, event].concat(args));
        };
      }
      if (className) {
        cloneProps.className = (0, import_classnames25.default)(originChildProps.className, className);
      }
      var mergedChildrenProps = _objectSpread2(_objectSpread2({}, originChildProps), cloneProps);
      var passedProps = {};
      var passedEventList = ["onContextMenu", "onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur"];
      passedEventList.forEach(function(eventName) {
        if (restProps[eventName]) {
          passedProps[eventName] = function() {
            var _mergedChildrenProps$;
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }
            (_mergedChildrenProps$ = mergedChildrenProps[eventName]) === null || _mergedChildrenProps$ === void 0 || _mergedChildrenProps$.call.apply(_mergedChildrenProps$, [mergedChildrenProps].concat(args));
            restProps[eventName].apply(restProps, args);
          };
        }
      });
      var triggerNode = /* @__PURE__ */ React124.cloneElement(child, _objectSpread2(_objectSpread2({}, mergedChildrenProps), passedProps));
      var arrowPos = {
        x: arrowX,
        y: arrowY
      };
      var innerArrow = arrow ? _objectSpread2({}, arrow !== true ? arrow : {}) : null;
      return /* @__PURE__ */ React124.createElement(React124.Fragment, null, /* @__PURE__ */ React124.createElement(es_default, {
        disabled: !mergedOpen,
        ref: setTargetRef,
        onResize: onTargetResize
      }, /* @__PURE__ */ React124.createElement(TriggerWrapper_default, {
        getTriggerDOMNode
      }, triggerNode)), /* @__PURE__ */ React124.createElement(context_default2.Provider, {
        value: context
      }, /* @__PURE__ */ React124.createElement(Popup_default, {
        portal: PortalComponent,
        ref: setPopupRef,
        prefixCls,
        popup,
        className: (0, import_classnames25.default)(popupClassName, alignedClassName),
        style: popupStyle,
        target: targetEle,
        onMouseEnter: onPopupMouseEnter,
        onMouseLeave: onPopupMouseLeave,
        onPointerEnter: onPopupMouseEnter,
        zIndex,
        open: mergedOpen,
        keepDom: inMotion,
        fresh,
        onClick: onPopupClick,
        mask,
        motion: mergePopupMotion,
        maskMotion: mergeMaskMotion,
        onVisibleChanged,
        onPrepare,
        forceRender,
        autoDestroy: mergedAutoDestroy,
        getPopupContainer,
        align: alignInfo,
        arrow: innerArrow,
        arrowPos,
        ready,
        offsetX,
        offsetY,
        offsetR,
        offsetB,
        onAlign: triggerAlign,
        stretch,
        targetWidth: targetWidth / scaleX,
        targetHeight: targetHeight / scaleY
      })));
    });
    if (true) {
      Trigger.displayName = "Trigger";
    }
    return Trigger;
  }
  var es_default7 = generateTrigger(es_default3);

  // node_modules/rc-select/es/SelectTrigger.js
  var import_classnames26 = __toESM(require_classnames());
  var React125 = __toESM(require_react());
  var _excluded12 = ["prefixCls", "disabled", "visible", "children", "popupElement", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "direction", "placement", "builtinPlacements", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "getPopupContainer", "empty", "getTriggerDOMNode", "onPopupVisibleChange", "onPopupMouseEnter"];
  var getBuiltInPlacements = function getBuiltInPlacements2(dropdownMatchSelectWidth) {
    var adjustX = dropdownMatchSelectWidth === true ? 0 : 1;
    return {
      bottomLeft: {
        points: ["tl", "bl"],
        offset: [0, 4],
        overflow: {
          adjustX,
          adjustY: 1
        },
        htmlRegion: "scroll"
      },
      bottomRight: {
        points: ["tr", "br"],
        offset: [0, 4],
        overflow: {
          adjustX,
          adjustY: 1
        },
        htmlRegion: "scroll"
      },
      topLeft: {
        points: ["bl", "tl"],
        offset: [0, -4],
        overflow: {
          adjustX,
          adjustY: 1
        },
        htmlRegion: "scroll"
      },
      topRight: {
        points: ["br", "tr"],
        offset: [0, -4],
        overflow: {
          adjustX,
          adjustY: 1
        },
        htmlRegion: "scroll"
      }
    };
  };
  var SelectTrigger = function SelectTrigger2(props, ref) {
    var prefixCls = props.prefixCls, disabled = props.disabled, visible = props.visible, children = props.children, popupElement = props.popupElement, animation = props.animation, transitionName = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, _props$direction = props.direction, direction = _props$direction === void 0 ? "ltr" : _props$direction, placement = props.placement, builtinPlacements = props.builtinPlacements, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, getPopupContainer = props.getPopupContainer, empty = props.empty, getTriggerDOMNode = props.getTriggerDOMNode, onPopupVisibleChange = props.onPopupVisibleChange, onPopupMouseEnter = props.onPopupMouseEnter, restProps = _objectWithoutProperties(props, _excluded12);
    var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
    var popupNode = popupElement;
    if (dropdownRender) {
      popupNode = dropdownRender(popupElement);
    }
    var mergedBuiltinPlacements2 = React125.useMemo(function() {
      return builtinPlacements || getBuiltInPlacements(dropdownMatchSelectWidth);
    }, [builtinPlacements, dropdownMatchSelectWidth]);
    var mergedTransitionName = animation ? "".concat(dropdownPrefixCls, "-").concat(animation) : transitionName;
    var isNumberPopupWidth = typeof dropdownMatchSelectWidth === "number";
    var stretch = React125.useMemo(function() {
      if (isNumberPopupWidth) {
        return null;
      }
      return dropdownMatchSelectWidth === false ? "minWidth" : "width";
    }, [dropdownMatchSelectWidth, isNumberPopupWidth]);
    var popupStyle = dropdownStyle;
    if (isNumberPopupWidth) {
      popupStyle = _objectSpread2(_objectSpread2({}, popupStyle), {}, {
        width: dropdownMatchSelectWidth
      });
    }
    var popupRef = React125.useRef(null);
    React125.useImperativeHandle(ref, function() {
      return {
        getPopupElement: function getPopupElement() {
          return popupRef.current;
        }
      };
    });
    return /* @__PURE__ */ React125.createElement(es_default7, _extends({}, restProps, {
      showAction: onPopupVisibleChange ? ["click"] : [],
      hideAction: onPopupVisibleChange ? ["click"] : [],
      popupPlacement: placement || (direction === "rtl" ? "bottomRight" : "bottomLeft"),
      builtinPlacements: mergedBuiltinPlacements2,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: mergedTransitionName,
      popup: /* @__PURE__ */ React125.createElement("div", {
        ref: popupRef,
        onMouseEnter: onPopupMouseEnter
      }, popupNode),
      stretch,
      popupAlign: dropdownAlign,
      popupVisible: visible,
      getPopupContainer,
      popupClassName: (0, import_classnames26.default)(dropdownClassName, _defineProperty({}, "".concat(dropdownPrefixCls, "-empty"), empty)),
      popupStyle,
      getTriggerDOMNode,
      onPopupVisibleChange
    }), children);
  };
  var RefSelectTrigger = /* @__PURE__ */ React125.forwardRef(SelectTrigger);
  if (true) {
    RefSelectTrigger.displayName = "SelectTrigger";
  }
  var SelectTrigger_default = RefSelectTrigger;

  // node_modules/rc-select/es/utils/valueUtil.js
  function getKey(data, index2) {
    var key = data.key;
    var value;
    if ("value" in data) {
      value = data.value;
    }
    if (key !== null && key !== void 0) {
      return key;
    }
    if (value !== void 0) {
      return value;
    }
    return "rc-index-key-".concat(index2);
  }
  function fillFieldNames(fieldNames, childrenAsData) {
    var _ref = fieldNames || {}, label = _ref.label, value = _ref.value, options = _ref.options, groupLabel = _ref.groupLabel;
    var mergedLabel = label || (childrenAsData ? "children" : "label");
    return {
      label: mergedLabel,
      value: value || "value",
      options: options || "options",
      groupLabel: groupLabel || mergedLabel
    };
  }
  function flattenOptions(options) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, fieldNames = _ref2.fieldNames, childrenAsData = _ref2.childrenAsData;
    var flattenList = [];
    var _fillFieldNames = fillFieldNames(fieldNames, false), fieldLabel = _fillFieldNames.label, fieldValue = _fillFieldNames.value, fieldOptions = _fillFieldNames.options, groupLabel = _fillFieldNames.groupLabel;
    function dig(list, isGroupOption) {
      if (!Array.isArray(list)) {
        return;
      }
      list.forEach(function(data) {
        if (isGroupOption || !(fieldOptions in data)) {
          var value = data[fieldValue];
          flattenList.push({
            key: getKey(data, flattenList.length),
            groupOption: isGroupOption,
            data,
            label: data[fieldLabel],
            value
          });
        } else {
          var grpLabel = data[groupLabel];
          if (grpLabel === void 0 && childrenAsData) {
            grpLabel = data.label;
          }
          flattenList.push({
            key: getKey(data, flattenList.length),
            group: true,
            data,
            label: grpLabel
          });
          dig(data[fieldOptions], true);
        }
      });
    }
    dig(options, false);
    return flattenList;
  }
  function injectPropsWithOption(option) {
    var newOption = _objectSpread2({}, option);
    if (!("props" in newOption)) {
      Object.defineProperty(newOption, "props", {
        get: function get2() {
          warning_default(false, "Return type is option instead of Option instance. Please read value directly instead of reading from `props`.");
          return newOption;
        }
      });
    }
    return newOption;
  }
  var getSeparatedContent = function getSeparatedContent2(text, tokens, end) {
    if (!tokens || !tokens.length) {
      return null;
    }
    var match2 = false;
    var separate = function separate2(str, _ref3) {
      var _ref4 = _toArray(_ref3), token2 = _ref4[0], restTokens = _ref4.slice(1);
      if (!token2) {
        return [str];
      }
      var list2 = str.split(token2);
      match2 = match2 || list2.length > 1;
      return list2.reduce(function(prevList, unitStr) {
        return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate2(unitStr, restTokens)));
      }, []).filter(Boolean);
    };
    var list = separate(text, tokens);
    if (match2) {
      return typeof end !== "undefined" ? list.slice(0, end) : list;
    } else {
      return null;
    }
  };

  // node_modules/rc-select/es/SelectContext.js
  var React126 = __toESM(require_react());
  var SelectContext = /* @__PURE__ */ React126.createContext(null);
  var SelectContext_default = SelectContext;

  // node_modules/rc-select/es/BaseSelect.js
  var _excluded13 = ["id", "prefixCls", "className", "showSearch", "tagRender", "direction", "omitDomProps", "displayValues", "onDisplayValuesChange", "emptyOptions", "notFoundContent", "onClear", "mode", "disabled", "loading", "getInputElement", "getRawInputElement", "open", "defaultOpen", "onDropdownVisibleChange", "activeValue", "onActiveValueChange", "activeDescendantId", "searchValue", "autoClearSearchValue", "onSearch", "onSearchSplit", "tokenSeparators", "allowClear", "suffixIcon", "clearIcon", "OptionList", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "placement", "builtinPlacements", "getPopupContainer", "showAction", "onFocus", "onBlur", "onKeyUp", "onKeyDown", "onMouseDown"];
  var DEFAULT_OMIT_PROPS = ["value", "onChange", "removeIcon", "placeholder", "autoFocus", "maxTagCount", "maxTagTextLength", "maxTagPlaceholder", "choiceTransitionName", "onInputKeyDown", "onPopupScroll", "tabIndex"];
  var isMultiple = function isMultiple2(mode) {
    return mode === "tags" || mode === "multiple";
  };
  var BaseSelect = /* @__PURE__ */ React127.forwardRef(function(props, ref) {
    var _customizeRawInputEle, _classNames2;
    var id = props.id, prefixCls = props.prefixCls, className = props.className, showSearch = props.showSearch, tagRender = props.tagRender, direction = props.direction, omitDomProps = props.omitDomProps, displayValues = props.displayValues, onDisplayValuesChange = props.onDisplayValuesChange, emptyOptions = props.emptyOptions, _props$notFoundConten = props.notFoundContent, notFoundContent = _props$notFoundConten === void 0 ? "Not Found" : _props$notFoundConten, onClear = props.onClear, mode = props.mode, disabled = props.disabled, loading = props.loading, getInputElement = props.getInputElement, getRawInputElement = props.getRawInputElement, open = props.open, defaultOpen = props.defaultOpen, onDropdownVisibleChange = props.onDropdownVisibleChange, activeValue = props.activeValue, onActiveValueChange = props.onActiveValueChange, activeDescendantId = props.activeDescendantId, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSplit = props.onSearchSplit, tokenSeparators = props.tokenSeparators, allowClear = props.allowClear, suffixIcon = props.suffixIcon, clearIcon = props.clearIcon, OptionList3 = props.OptionList, animation = props.animation, transitionName = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, placement = props.placement, builtinPlacements = props.builtinPlacements, getPopupContainer = props.getPopupContainer, _props$showAction = props.showAction, showAction = _props$showAction === void 0 ? [] : _props$showAction, onFocus = props.onFocus, onBlur = props.onBlur, onKeyUp = props.onKeyUp, onKeyDown2 = props.onKeyDown, onMouseDown = props.onMouseDown, restProps = _objectWithoutProperties(props, _excluded13);
    var multiple = isMultiple(mode);
    var mergedShowSearch = (showSearch !== void 0 ? showSearch : multiple) || mode === "combobox";
    var domProps = _objectSpread2({}, restProps);
    DEFAULT_OMIT_PROPS.forEach(function(propName) {
      delete domProps[propName];
    });
    omitDomProps === null || omitDomProps === void 0 || omitDomProps.forEach(function(propName) {
      delete domProps[propName];
    });
    var _React$useState = React127.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
    React127.useEffect(function() {
      setMobile(isMobile_default());
    }, []);
    var containerRef = React127.useRef(null);
    var selectorDomRef = React127.useRef(null);
    var triggerRef = React127.useRef(null);
    var selectorRef = React127.useRef(null);
    var listRef = React127.useRef(null);
    var blurRef = React127.useRef(false);
    var _useDelayReset = useDelayReset(), _useDelayReset2 = _slicedToArray(_useDelayReset, 3), mockFocused = _useDelayReset2[0], setMockFocused = _useDelayReset2[1], cancelSetMockFocused = _useDelayReset2[2];
    React127.useImperativeHandle(ref, function() {
      var _selectorRef$current, _selectorRef$current2;
      return {
        focus: (_selectorRef$current = selectorRef.current) === null || _selectorRef$current === void 0 ? void 0 : _selectorRef$current.focus,
        blur: (_selectorRef$current2 = selectorRef.current) === null || _selectorRef$current2 === void 0 ? void 0 : _selectorRef$current2.blur,
        scrollTo: function scrollTo3(arg) {
          var _listRef$current;
          return (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(arg);
        }
      };
    });
    var mergedSearchValue = React127.useMemo(function() {
      var _displayValues$;
      if (mode !== "combobox") {
        return searchValue;
      }
      var val = (_displayValues$ = displayValues[0]) === null || _displayValues$ === void 0 ? void 0 : _displayValues$.value;
      return typeof val === "string" || typeof val === "number" ? String(val) : "";
    }, [searchValue, mode, displayValues]);
    var customizeInputElement = mode === "combobox" && typeof getInputElement === "function" && getInputElement() || null;
    var customizeRawInputElement = typeof getRawInputElement === "function" && getRawInputElement();
    var customizeRawInputRef = useComposeRef(selectorDomRef, customizeRawInputElement === null || customizeRawInputElement === void 0 || (_customizeRawInputEle = customizeRawInputElement.props) === null || _customizeRawInputEle === void 0 ? void 0 : _customizeRawInputEle.ref);
    var _React$useState3 = React127.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), rendered = _React$useState4[0], setRendered = _React$useState4[1];
    useLayoutEffect_default(function() {
      setRendered(true);
    }, []);
    var _useMergedState = useMergedState(false, {
      defaultValue: defaultOpen,
      value: open
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), innerOpen = _useMergedState2[0], setInnerOpen = _useMergedState2[1];
    var mergedOpen = rendered ? innerOpen : false;
    var emptyListContent = !notFoundContent && emptyOptions;
    if (disabled || emptyListContent && mergedOpen && mode === "combobox") {
      mergedOpen = false;
    }
    var triggerOpen = emptyListContent ? false : mergedOpen;
    var onToggleOpen = React127.useCallback(function(newOpen) {
      var nextOpen = newOpen !== void 0 ? newOpen : !mergedOpen;
      if (!disabled) {
        setInnerOpen(nextOpen);
        if (mergedOpen !== nextOpen) {
          onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 || onDropdownVisibleChange(nextOpen);
        }
      }
    }, [disabled, mergedOpen, setInnerOpen, onDropdownVisibleChange]);
    var tokenWithEnter = React127.useMemo(function() {
      return (tokenSeparators || []).some(function(tokenSeparator) {
        return ["\n", "\r\n"].includes(tokenSeparator);
      });
    }, [tokenSeparators]);
    var _ref = React127.useContext(SelectContext_default) || {}, maxCount = _ref.maxCount, rawValues = _ref.rawValues;
    var onInternalSearch = function onInternalSearch2(searchText, fromTyping, isCompositing) {
      if ((rawValues === null || rawValues === void 0 ? void 0 : rawValues.size) >= maxCount) {
        return;
      }
      var ret = true;
      var newSearchText = searchText;
      onActiveValueChange === null || onActiveValueChange === void 0 || onActiveValueChange(null);
      var separatedList = getSeparatedContent(searchText, tokenSeparators, maxCount && maxCount - rawValues.size);
      var patchLabels = isCompositing ? null : separatedList;
      if (mode !== "combobox" && patchLabels) {
        newSearchText = "";
        onSearchSplit === null || onSearchSplit === void 0 || onSearchSplit(patchLabels);
        onToggleOpen(false);
        ret = false;
      }
      if (onSearch && mergedSearchValue !== newSearchText) {
        onSearch(newSearchText, {
          source: fromTyping ? "typing" : "effect"
        });
      }
      return ret;
    };
    var onInternalSearchSubmit = function onInternalSearchSubmit2(searchText) {
      if (!searchText || !searchText.trim()) {
        return;
      }
      onSearch(searchText, {
        source: "submit"
      });
    };
    React127.useEffect(function() {
      if (!mergedOpen && !multiple && mode !== "combobox") {
        onInternalSearch("", false, false);
      }
    }, [mergedOpen]);
    React127.useEffect(function() {
      if (innerOpen && disabled) {
        setInnerOpen(false);
      }
      if (disabled && !blurRef.current) {
        setMockFocused(false);
      }
    }, [disabled]);
    var _useLock = useLock(), _useLock2 = _slicedToArray(_useLock, 2), getClearLock = _useLock2[0], setClearLock = _useLock2[1];
    var onInternalKeyDown = function onInternalKeyDown2(event) {
      var clearLock = getClearLock();
      var which = event.which;
      if (which === KeyCode_default.ENTER) {
        if (mode !== "combobox") {
          event.preventDefault();
        }
        if (!mergedOpen) {
          onToggleOpen(true);
        }
      }
      setClearLock(!!mergedSearchValue);
      if (which === KeyCode_default.BACKSPACE && !clearLock && multiple && !mergedSearchValue && displayValues.length) {
        var cloneDisplayValues = _toConsumableArray(displayValues);
        var removedDisplayValue = null;
        for (var i = cloneDisplayValues.length - 1; i >= 0; i -= 1) {
          var current2 = cloneDisplayValues[i];
          if (!current2.disabled) {
            cloneDisplayValues.splice(i, 1);
            removedDisplayValue = current2;
            break;
          }
        }
        if (removedDisplayValue) {
          onDisplayValuesChange(cloneDisplayValues, {
            type: "remove",
            values: [removedDisplayValue]
          });
        }
      }
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }
      if (mergedOpen) {
        var _listRef$current2;
        (_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 || _listRef$current2.onKeyDown.apply(_listRef$current2, [event].concat(rest));
      }
      onKeyDown2 === null || onKeyDown2 === void 0 || onKeyDown2.apply(void 0, [event].concat(rest));
    };
    var onInternalKeyUp = function onInternalKeyUp2(event) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }
      if (mergedOpen) {
        var _listRef$current3;
        (_listRef$current3 = listRef.current) === null || _listRef$current3 === void 0 || _listRef$current3.onKeyUp.apply(_listRef$current3, [event].concat(rest));
      }
      onKeyUp === null || onKeyUp === void 0 || onKeyUp.apply(void 0, [event].concat(rest));
    };
    var onSelectorRemove = function onSelectorRemove2(val) {
      var newValues = displayValues.filter(function(i) {
        return i !== val;
      });
      onDisplayValuesChange(newValues, {
        type: "remove",
        values: [val]
      });
    };
    var focusRef = React127.useRef(false);
    var onContainerFocus = function onContainerFocus2() {
      setMockFocused(true);
      if (!disabled) {
        if (onFocus && !focusRef.current) {
          onFocus.apply(void 0, arguments);
        }
        if (showAction.includes("focus")) {
          onToggleOpen(true);
        }
      }
      focusRef.current = true;
    };
    var onContainerBlur = function onContainerBlur2() {
      blurRef.current = true;
      setMockFocused(false, function() {
        focusRef.current = false;
        blurRef.current = false;
        onToggleOpen(false);
      });
      if (disabled) {
        return;
      }
      if (mergedSearchValue) {
        if (mode === "tags") {
          onSearch(mergedSearchValue, {
            source: "submit"
          });
        } else if (mode === "multiple") {
          onSearch("", {
            source: "blur"
          });
        }
      }
      if (onBlur) {
        onBlur.apply(void 0, arguments);
      }
    };
    var activeTimeoutIds = [];
    React127.useEffect(function() {
      return function() {
        activeTimeoutIds.forEach(function(timeoutId) {
          return clearTimeout(timeoutId);
        });
        activeTimeoutIds.splice(0, activeTimeoutIds.length);
      };
    }, []);
    var onInternalMouseDown = function onInternalMouseDown2(event) {
      var _triggerRef$current;
      var target = event.target;
      var popupElement = (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.getPopupElement();
      if (popupElement && popupElement.contains(target)) {
        var timeoutId = setTimeout(function() {
          var index2 = activeTimeoutIds.indexOf(timeoutId);
          if (index2 !== -1) {
            activeTimeoutIds.splice(index2, 1);
          }
          cancelSetMockFocused();
          if (!mobile && !popupElement.contains(document.activeElement)) {
            var _selectorRef$current3;
            (_selectorRef$current3 = selectorRef.current) === null || _selectorRef$current3 === void 0 || _selectorRef$current3.focus();
          }
        });
        activeTimeoutIds.push(timeoutId);
      }
      for (var _len3 = arguments.length, restArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        restArgs[_key3 - 1] = arguments[_key3];
      }
      onMouseDown === null || onMouseDown === void 0 || onMouseDown.apply(void 0, [event].concat(restArgs));
    };
    var _React$useState5 = React127.useState({}), _React$useState6 = _slicedToArray(_React$useState5, 2), forceUpdate = _React$useState6[1];
    function onPopupMouseEnter() {
      forceUpdate({});
    }
    var onTriggerVisibleChange;
    if (customizeRawInputElement) {
      onTriggerVisibleChange = function onTriggerVisibleChange2(newOpen) {
        onToggleOpen(newOpen);
      };
    }
    useSelectTriggerControl(function() {
      var _triggerRef$current2;
      return [containerRef.current, (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : _triggerRef$current2.getPopupElement()];
    }, triggerOpen, onToggleOpen, !!customizeRawInputElement);
    var baseSelectContext = React127.useMemo(function() {
      return _objectSpread2(_objectSpread2({}, props), {}, {
        notFoundContent,
        open: mergedOpen,
        triggerOpen,
        id,
        showSearch: mergedShowSearch,
        multiple,
        toggleOpen: onToggleOpen
      });
    }, [props, notFoundContent, triggerOpen, mergedOpen, id, mergedShowSearch, multiple, onToggleOpen]);
    var showSuffixIcon = !!suffixIcon || loading;
    var arrowNode;
    if (showSuffixIcon) {
      arrowNode = /* @__PURE__ */ React127.createElement(TransBtn_default, {
        className: (0, import_classnames27.default)("".concat(prefixCls, "-arrow"), _defineProperty({}, "".concat(prefixCls, "-arrow-loading"), loading)),
        customizeIcon: suffixIcon,
        customizeIconProps: {
          loading,
          searchValue: mergedSearchValue,
          open: mergedOpen,
          focused: mockFocused,
          showSearch: mergedShowSearch
        }
      });
    }
    var onClearMouseDown = function onClearMouseDown2() {
      var _selectorRef$current4;
      onClear === null || onClear === void 0 || onClear();
      (_selectorRef$current4 = selectorRef.current) === null || _selectorRef$current4 === void 0 || _selectorRef$current4.focus();
      onDisplayValuesChange([], {
        type: "clear",
        values: displayValues
      });
      onInternalSearch("", false, false);
    };
    var _useAllowClear = useAllowClear(prefixCls, onClearMouseDown, displayValues, allowClear, clearIcon, disabled, mergedSearchValue, mode), mergedAllowClear = _useAllowClear.allowClear, clearNode = _useAllowClear.clearIcon;
    var optionList = /* @__PURE__ */ React127.createElement(OptionList3, {
      ref: listRef
    });
    var mergedClassName = (0, import_classnames27.default)(prefixCls, className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-focused"), mockFocused), _defineProperty(_classNames2, "".concat(prefixCls, "-multiple"), multiple), _defineProperty(_classNames2, "".concat(prefixCls, "-single"), !multiple), _defineProperty(_classNames2, "".concat(prefixCls, "-allow-clear"), allowClear), _defineProperty(_classNames2, "".concat(prefixCls, "-show-arrow"), showSuffixIcon), _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(prefixCls, "-loading"), loading), _defineProperty(_classNames2, "".concat(prefixCls, "-open"), mergedOpen), _defineProperty(_classNames2, "".concat(prefixCls, "-customize-input"), customizeInputElement), _defineProperty(_classNames2, "".concat(prefixCls, "-show-search"), mergedShowSearch), _classNames2));
    var selectorNode = /* @__PURE__ */ React127.createElement(SelectTrigger_default, {
      ref: triggerRef,
      disabled,
      prefixCls,
      visible: triggerOpen,
      popupElement: optionList,
      animation,
      transitionName,
      dropdownStyle,
      dropdownClassName,
      direction,
      dropdownMatchSelectWidth,
      dropdownRender,
      dropdownAlign,
      placement,
      builtinPlacements,
      getPopupContainer,
      empty: emptyOptions,
      getTriggerDOMNode: function getTriggerDOMNode() {
        return selectorDomRef.current;
      },
      onPopupVisibleChange: onTriggerVisibleChange,
      onPopupMouseEnter
    }, customizeRawInputElement ? /* @__PURE__ */ React127.cloneElement(customizeRawInputElement, {
      ref: customizeRawInputRef
    }) : /* @__PURE__ */ React127.createElement(Selector_default, _extends({}, props, {
      domRef: selectorDomRef,
      prefixCls,
      inputElement: customizeInputElement,
      ref: selectorRef,
      id,
      showSearch: mergedShowSearch,
      autoClearSearchValue,
      mode,
      activeDescendantId,
      tagRender,
      values: displayValues,
      open: mergedOpen,
      onToggleOpen,
      activeValue,
      searchValue: mergedSearchValue,
      onSearch: onInternalSearch,
      onSearchSubmit: onInternalSearchSubmit,
      onRemove: onSelectorRemove,
      tokenWithEnter
    })));
    var renderNode;
    if (customizeRawInputElement) {
      renderNode = selectorNode;
    } else {
      renderNode = /* @__PURE__ */ React127.createElement("div", _extends({
        className: mergedClassName
      }, domProps, {
        ref: containerRef,
        onMouseDown: onInternalMouseDown,
        onKeyDown: onInternalKeyDown,
        onKeyUp: onInternalKeyUp,
        onFocus: onContainerFocus,
        onBlur: onContainerBlur
      }), mockFocused && !mergedOpen && /* @__PURE__ */ React127.createElement("span", {
        "aria-live": "polite",
        style: {
          width: 0,
          height: 0,
          position: "absolute",
          overflow: "hidden",
          opacity: 0
        }
      }, "".concat(displayValues.map(function(_ref2) {
        var label = _ref2.label, value = _ref2.value;
        return ["number", "string"].includes(_typeof(label)) ? label : value;
      }).join(", "))), selectorNode, arrowNode, mergedAllowClear && clearNode);
    }
    return /* @__PURE__ */ React127.createElement(BaseSelectContext.Provider, {
      value: baseSelectContext
    }, renderNode);
  });
  if (true) {
    BaseSelect.displayName = "BaseSelect";
  }
  var BaseSelect_default = BaseSelect;

  // node_modules/rc-select/es/OptGroup.js
  var OptGroup = function OptGroup2() {
    return null;
  };
  OptGroup.isSelectOptGroup = true;
  var OptGroup_default = OptGroup;

  // node_modules/rc-select/es/Option.js
  var Option = function Option2() {
    return null;
  };
  Option.isSelectOption = true;
  var Option_default = Option;

  // node_modules/rc-select/es/OptionList.js
  var import_classnames31 = __toESM(require_classnames());

  // node_modules/rc-virtual-list/es/List.js
  var React136 = __toESM(require_react());
  var import_react48 = __toESM(require_react());
  var import_react_dom4 = __toESM(require_react_dom());
  var import_classnames30 = __toESM(require_classnames());

  // node_modules/rc-virtual-list/es/Filler.js
  var React128 = __toESM(require_react());
  var import_classnames28 = __toESM(require_classnames());
  var Filler = /* @__PURE__ */ React128.forwardRef(function(_ref, ref) {
    var height = _ref.height, offsetY = _ref.offsetY, offsetX = _ref.offsetX, children = _ref.children, prefixCls = _ref.prefixCls, onInnerResize = _ref.onInnerResize, innerProps = _ref.innerProps, rtl = _ref.rtl, extra = _ref.extra;
    var outerStyle = {};
    var innerStyle = {
      display: "flex",
      flexDirection: "column"
    };
    if (offsetY !== void 0) {
      var _objectSpread22;
      outerStyle = {
        height,
        position: "relative",
        overflow: "hidden"
      };
      innerStyle = _objectSpread2(_objectSpread2({}, innerStyle), {}, (_objectSpread22 = {
        transform: "translateY(".concat(offsetY, "px)")
      }, _defineProperty(_objectSpread22, rtl ? "marginRight" : "marginLeft", -offsetX), _defineProperty(_objectSpread22, "position", "absolute"), _defineProperty(_objectSpread22, "left", 0), _defineProperty(_objectSpread22, "right", 0), _defineProperty(_objectSpread22, "top", 0), _objectSpread22));
    }
    return /* @__PURE__ */ React128.createElement("div", {
      style: outerStyle
    }, /* @__PURE__ */ React128.createElement(es_default, {
      onResize: function onResize2(_ref2) {
        var offsetHeight = _ref2.offsetHeight;
        if (offsetHeight && onInnerResize) {
          onInnerResize();
        }
      }
    }, /* @__PURE__ */ React128.createElement("div", _extends({
      style: innerStyle,
      className: (0, import_classnames28.default)(_defineProperty({}, "".concat(prefixCls, "-holder-inner"), prefixCls)),
      ref
    }, innerProps), children, extra)));
  });
  Filler.displayName = "Filler";
  var Filler_default = Filler;

  // node_modules/rc-virtual-list/es/ScrollBar.js
  var React129 = __toESM(require_react());
  var import_classnames29 = __toESM(require_classnames());
  function getPageXY(e3, horizontal) {
    var obj = "touches" in e3 ? e3.touches[0] : e3;
    return obj[horizontal ? "pageX" : "pageY"];
  }
  var ScrollBar = /* @__PURE__ */ React129.forwardRef(function(props, ref) {
    var _classNames;
    var prefixCls = props.prefixCls, rtl = props.rtl, scrollOffset = props.scrollOffset, scrollRange = props.scrollRange, onStartMove = props.onStartMove, onStopMove = props.onStopMove, onScroll = props.onScroll, horizontal = props.horizontal, spinSize = props.spinSize, containerSize = props.containerSize, style2 = props.style, propsThumbStyle = props.thumbStyle;
    var _React$useState = React129.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), dragging = _React$useState2[0], setDragging = _React$useState2[1];
    var _React$useState3 = React129.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), pageXY = _React$useState4[0], setPageXY = _React$useState4[1];
    var _React$useState5 = React129.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), startTop = _React$useState6[0], setStartTop = _React$useState6[1];
    var isLTR = !rtl;
    var scrollbarRef = React129.useRef();
    var thumbRef = React129.useRef();
    var _React$useState7 = React129.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), visible = _React$useState8[0], setVisible = _React$useState8[1];
    var visibleTimeoutRef = React129.useRef();
    var delayHidden = function delayHidden2() {
      clearTimeout(visibleTimeoutRef.current);
      setVisible(true);
      visibleTimeoutRef.current = setTimeout(function() {
        setVisible(false);
      }, 3e3);
    };
    var enableScrollRange = scrollRange - containerSize || 0;
    var enableOffsetRange = containerSize - spinSize || 0;
    var canScroll = enableScrollRange > 0;
    var top = React129.useMemo(function() {
      if (scrollOffset === 0 || enableScrollRange === 0) {
        return 0;
      }
      var ptg = scrollOffset / enableScrollRange;
      return ptg * enableOffsetRange;
    }, [scrollOffset, enableScrollRange, enableOffsetRange]);
    var onContainerMouseDown = function onContainerMouseDown2(e3) {
      e3.stopPropagation();
      e3.preventDefault();
    };
    var stateRef = React129.useRef({
      top,
      dragging,
      pageY: pageXY,
      startTop
    });
    stateRef.current = {
      top,
      dragging,
      pageY: pageXY,
      startTop
    };
    var onThumbMouseDown = function onThumbMouseDown2(e3) {
      setDragging(true);
      setPageXY(getPageXY(e3, horizontal));
      setStartTop(stateRef.current.top);
      onStartMove();
      e3.stopPropagation();
      e3.preventDefault();
    };
    React129.useEffect(function() {
      var onScrollbarTouchStart = function onScrollbarTouchStart2(e3) {
        e3.preventDefault();
      };
      var scrollbarEle = scrollbarRef.current;
      var thumbEle = thumbRef.current;
      scrollbarEle.addEventListener("touchstart", onScrollbarTouchStart);
      thumbEle.addEventListener("touchstart", onThumbMouseDown);
      return function() {
        scrollbarEle.removeEventListener("touchstart", onScrollbarTouchStart);
        thumbEle.removeEventListener("touchstart", onThumbMouseDown);
      };
    }, []);
    var enableScrollRangeRef = React129.useRef();
    enableScrollRangeRef.current = enableScrollRange;
    var enableOffsetRangeRef = React129.useRef();
    enableOffsetRangeRef.current = enableOffsetRange;
    React129.useEffect(function() {
      if (dragging) {
        var moveRafId;
        var onMouseMove = function onMouseMove2(e3) {
          var _stateRef$current = stateRef.current, stateDragging = _stateRef$current.dragging, statePageY = _stateRef$current.pageY, stateStartTop = _stateRef$current.startTop;
          raf_default.cancel(moveRafId);
          if (stateDragging) {
            var offset3 = getPageXY(e3, horizontal) - statePageY;
            var newTop = stateStartTop;
            if (!isLTR && horizontal) {
              newTop -= offset3;
            } else {
              newTop += offset3;
            }
            var tmpEnableScrollRange = enableScrollRangeRef.current;
            var tmpEnableOffsetRange = enableOffsetRangeRef.current;
            var ptg = tmpEnableOffsetRange ? newTop / tmpEnableOffsetRange : 0;
            var newScrollTop = Math.ceil(ptg * tmpEnableScrollRange);
            newScrollTop = Math.max(newScrollTop, 0);
            newScrollTop = Math.min(newScrollTop, tmpEnableScrollRange);
            moveRafId = raf_default(function() {
              onScroll(newScrollTop, horizontal);
            });
          }
        };
        var onMouseUp = function onMouseUp2() {
          setDragging(false);
          onStopMove();
        };
        window.addEventListener("mousemove", onMouseMove);
        window.addEventListener("touchmove", onMouseMove);
        window.addEventListener("mouseup", onMouseUp);
        window.addEventListener("touchend", onMouseUp);
        return function() {
          window.removeEventListener("mousemove", onMouseMove);
          window.removeEventListener("touchmove", onMouseMove);
          window.removeEventListener("mouseup", onMouseUp);
          window.removeEventListener("touchend", onMouseUp);
          raf_default.cancel(moveRafId);
        };
      }
    }, [dragging]);
    React129.useEffect(function() {
      delayHidden();
    }, [scrollOffset]);
    React129.useImperativeHandle(ref, function() {
      return {
        delayHidden
      };
    });
    var scrollbarPrefixCls = "".concat(prefixCls, "-scrollbar");
    var containerStyle = {
      position: "absolute",
      visibility: visible && canScroll ? null : "hidden"
    };
    var thumbStyle = {
      position: "absolute",
      background: "rgba(0, 0, 0, 0.5)",
      borderRadius: 99,
      cursor: "pointer",
      userSelect: "none"
    };
    if (horizontal) {
      containerStyle.height = 8;
      containerStyle.left = 0;
      containerStyle.right = 0;
      containerStyle.bottom = 0;
      thumbStyle.height = "100%";
      thumbStyle.width = spinSize;
      if (isLTR) {
        thumbStyle.left = top;
      } else {
        thumbStyle.right = top;
      }
    } else {
      containerStyle.width = 8;
      containerStyle.top = 0;
      containerStyle.bottom = 0;
      if (isLTR) {
        containerStyle.right = 0;
      } else {
        containerStyle.left = 0;
      }
      thumbStyle.width = "100%";
      thumbStyle.height = spinSize;
      thumbStyle.top = top;
    }
    return /* @__PURE__ */ React129.createElement("div", {
      ref: scrollbarRef,
      className: (0, import_classnames29.default)(scrollbarPrefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(scrollbarPrefixCls, "-horizontal"), horizontal), _defineProperty(_classNames, "".concat(scrollbarPrefixCls, "-vertical"), !horizontal), _defineProperty(_classNames, "".concat(scrollbarPrefixCls, "-visible"), visible), _classNames)),
      style: _objectSpread2(_objectSpread2({}, containerStyle), style2),
      onMouseDown: onContainerMouseDown,
      onMouseMove: delayHidden
    }, /* @__PURE__ */ React129.createElement("div", {
      ref: thumbRef,
      className: (0, import_classnames29.default)("".concat(scrollbarPrefixCls, "-thumb"), _defineProperty({}, "".concat(scrollbarPrefixCls, "-thumb-moving"), dragging)),
      style: _objectSpread2(_objectSpread2({}, thumbStyle), propsThumbStyle),
      onMouseDown: onThumbMouseDown
    }));
  });
  if (true) {
    ScrollBar.displayName = "ScrollBar";
  }
  var ScrollBar_default = ScrollBar;

  // node_modules/rc-virtual-list/es/hooks/useChildren.js
  var React131 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/Item.js
  var React130 = __toESM(require_react());
  function Item2(_ref) {
    var children = _ref.children, setRef = _ref.setRef;
    var refFunc = React130.useCallback(function(node2) {
      setRef(node2);
    }, []);
    return /* @__PURE__ */ React130.cloneElement(children, {
      ref: refFunc
    });
  }

  // node_modules/rc-virtual-list/es/hooks/useChildren.js
  function useChildren(list, startIndex, endIndex, scrollWidth, setNodeRef, renderFunc, _ref) {
    var getKey3 = _ref.getKey;
    return list.slice(startIndex, endIndex + 1).map(function(item, index2) {
      var eleIndex = startIndex + index2;
      var node2 = renderFunc(item, eleIndex, {
        style: {
          width: scrollWidth
        }
      });
      var key = getKey3(item);
      return /* @__PURE__ */ React131.createElement(Item2, {
        key,
        setRef: function setRef(ele) {
          return setNodeRef(item, ele);
        }
      }, node2);
    });
  }

  // node_modules/rc-virtual-list/es/hooks/useHeights.js
  var React132 = __toESM(require_react());
  var import_react44 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/CacheMap.js
  var CacheMap = /* @__PURE__ */ function() {
    function CacheMap2() {
      _classCallCheck(this, CacheMap2);
      this.maps = void 0;
      this.id = 0;
      this.maps = /* @__PURE__ */ Object.create(null);
    }
    _createClass(CacheMap2, [{
      key: "set",
      value: function set3(key, value) {
        this.maps[key] = value;
        this.id += 1;
      }
    }, {
      key: "get",
      value: function get2(key) {
        return this.maps[key];
      }
    }]);
    return CacheMap2;
  }();
  var CacheMap_default = CacheMap;

  // node_modules/rc-virtual-list/es/hooks/useHeights.js
  function useHeights(getKey3, onItemAdd, onItemRemove) {
    var _React$useState = React132.useState(0), _React$useState2 = _slicedToArray(_React$useState, 2), updatedMark = _React$useState2[0], setUpdatedMark = _React$useState2[1];
    var instanceRef = (0, import_react44.useRef)(/* @__PURE__ */ new Map());
    var heightsRef = (0, import_react44.useRef)(new CacheMap_default());
    var collectRafRef = (0, import_react44.useRef)();
    function cancelRaf() {
      raf_default.cancel(collectRafRef.current);
    }
    function collectHeight() {
      var sync = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      cancelRaf();
      var doCollect = function doCollect2() {
        instanceRef.current.forEach(function(element, key) {
          if (element && element.offsetParent) {
            var htmlElement = findDOMNode(element);
            var offsetHeight = htmlElement.offsetHeight;
            if (heightsRef.current.get(key) !== offsetHeight) {
              heightsRef.current.set(key, htmlElement.offsetHeight);
            }
          }
        });
        setUpdatedMark(function(c) {
          return c + 1;
        });
      };
      if (sync) {
        doCollect();
      } else {
        collectRafRef.current = raf_default(doCollect);
      }
    }
    function setInstanceRef(item, instance) {
      var key = getKey3(item);
      var origin = instanceRef.current.get(key);
      if (instance) {
        instanceRef.current.set(key, instance);
        collectHeight();
      } else {
        instanceRef.current.delete(key);
      }
      if (!origin !== !instance) {
        if (instance) {
          onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);
        } else {
          onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);
        }
      }
    }
    (0, import_react44.useEffect)(function() {
      return cancelRaf;
    }, []);
    return [setInstanceRef, collectHeight, heightsRef.current, updatedMark];
  }

  // node_modules/rc-virtual-list/es/hooks/useScrollTo.js
  var React133 = __toESM(require_react());
  var MAX_TIMES = 10;
  function useScrollTo(containerRef, data, heights, itemHeight, getKey3, collectHeight, syncScrollTop, triggerFlash) {
    var scrollRef = React133.useRef();
    var _React$useState = React133.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), syncState = _React$useState2[0], setSyncState = _React$useState2[1];
    useLayoutEffect_default(function() {
      if (syncState && syncState.times < MAX_TIMES) {
        if (!containerRef.current) {
          setSyncState(function(ori) {
            return _objectSpread2({}, ori);
          });
          return;
        }
        collectHeight();
        var targetAlign = syncState.targetAlign, originAlign = syncState.originAlign, index2 = syncState.index, offset3 = syncState.offset;
        var height = containerRef.current.clientHeight;
        var needCollectHeight = false;
        var newTargetAlign = targetAlign;
        var targetTop = null;
        if (height) {
          var mergedAlign = targetAlign || originAlign;
          var stackTop = 0;
          var itemTop = 0;
          var itemBottom = 0;
          var maxLen = Math.min(data.length - 1, index2);
          for (var i = 0; i <= maxLen; i += 1) {
            var key = getKey3(data[i]);
            itemTop = stackTop;
            var cacheHeight = heights.get(key);
            itemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
            stackTop = itemBottom;
          }
          var leftHeight = mergedAlign === "top" ? offset3 : height - offset3;
          for (var _i = maxLen; _i >= 0; _i -= 1) {
            var _key = getKey3(data[_i]);
            var _cacheHeight = heights.get(_key);
            if (_cacheHeight === void 0) {
              needCollectHeight = true;
              break;
            }
            leftHeight -= _cacheHeight;
            if (leftHeight <= 0) {
              break;
            }
          }
          switch (mergedAlign) {
            case "top":
              targetTop = itemTop - offset3;
              break;
            case "bottom":
              targetTop = itemBottom - height + offset3;
              break;
            default: {
              var scrollTop = containerRef.current.scrollTop;
              var scrollBottom = scrollTop + height;
              if (itemTop < scrollTop) {
                newTargetAlign = "top";
              } else if (itemBottom > scrollBottom) {
                newTargetAlign = "bottom";
              }
            }
          }
          if (targetTop !== null) {
            syncScrollTop(targetTop);
          }
          if (targetTop !== syncState.lastTop) {
            needCollectHeight = true;
          }
        }
        if (needCollectHeight) {
          setSyncState(_objectSpread2(_objectSpread2({}, syncState), {}, {
            times: syncState.times + 1,
            targetAlign: newTargetAlign,
            lastTop: targetTop
          }));
        }
      } else if ((syncState === null || syncState === void 0 ? void 0 : syncState.times) === MAX_TIMES) {
        warning_default(false, "Seems `scrollTo` with `rc-virtual-list` reach the max limitation. Please fire issue for us. Thanks.");
      }
    }, [syncState, containerRef.current]);
    return function(arg) {
      if (arg === null || arg === void 0) {
        triggerFlash();
        return;
      }
      raf_default.cancel(scrollRef.current);
      if (typeof arg === "number") {
        syncScrollTop(arg);
      } else if (arg && _typeof(arg) === "object") {
        var index2;
        var align = arg.align;
        if ("index" in arg) {
          index2 = arg.index;
        } else {
          index2 = data.findIndex(function(item) {
            return getKey3(item) === arg.key;
          });
        }
        var _arg$offset = arg.offset, offset3 = _arg$offset === void 0 ? 0 : _arg$offset;
        setSyncState({
          times: 0,
          index: index2,
          offset: offset3,
          originAlign: align
        });
      }
    };
  }

  // node_modules/rc-virtual-list/es/hooks/useDiffItem.js
  var React134 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/algorithmUtil.js
  function findListDiffIndex(originList, targetList, getKey3) {
    var originLen = originList.length;
    var targetLen = targetList.length;
    var shortList;
    var longList;
    if (originLen === 0 && targetLen === 0) {
      return null;
    }
    if (originLen < targetLen) {
      shortList = originList;
      longList = targetList;
    } else {
      shortList = targetList;
      longList = originList;
    }
    var notExistKey = {
      __EMPTY_ITEM__: true
    };
    function getItemKey(item) {
      if (item !== void 0) {
        return getKey3(item);
      }
      return notExistKey;
    }
    var diffIndex = null;
    var multiple = Math.abs(originLen - targetLen) !== 1;
    for (var i = 0; i < longList.length; i += 1) {
      var shortKey = getItemKey(shortList[i]);
      var longKey = getItemKey(longList[i]);
      if (shortKey !== longKey) {
        diffIndex = i;
        multiple = multiple || shortKey !== getItemKey(longList[i + 1]);
        break;
      }
    }
    return diffIndex === null ? null : {
      index: diffIndex,
      multiple
    };
  }

  // node_modules/rc-virtual-list/es/hooks/useDiffItem.js
  function useDiffItem(data, getKey3, onDiff) {
    var _React$useState = React134.useState(data), _React$useState2 = _slicedToArray(_React$useState, 2), prevData = _React$useState2[0], setPrevData = _React$useState2[1];
    var _React$useState3 = React134.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), diffItem = _React$useState4[0], setDiffItem = _React$useState4[1];
    React134.useEffect(function() {
      var diff = findListDiffIndex(prevData || [], data || [], getKey3);
      if ((diff === null || diff === void 0 ? void 0 : diff.index) !== void 0) {
        onDiff === null || onDiff === void 0 ? void 0 : onDiff(diff.index);
        setDiffItem(data[diff.index]);
      }
      setPrevData(data);
    }, [data]);
    return [diffItem];
  }

  // node_modules/rc-virtual-list/es/hooks/useFrameWheel.js
  var import_react46 = __toESM(require_react());

  // node_modules/rc-virtual-list/es/utils/isFirefox.js
  var isFF = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === "object" && /Firefox/i.test(navigator.userAgent);
  var isFirefox_default = isFF;

  // node_modules/rc-virtual-list/es/hooks/useOriginScroll.js
  var import_react45 = __toESM(require_react());
  var useOriginScroll_default = function(isScrollAtTop, isScrollAtBottom) {
    var lockRef = (0, import_react45.useRef)(false);
    var lockTimeoutRef = (0, import_react45.useRef)(null);
    function lockScroll() {
      clearTimeout(lockTimeoutRef.current);
      lockRef.current = true;
      lockTimeoutRef.current = setTimeout(function() {
        lockRef.current = false;
      }, 50);
    }
    var scrollPingRef = (0, import_react45.useRef)({
      top: isScrollAtTop,
      bottom: isScrollAtBottom
    });
    scrollPingRef.current.top = isScrollAtTop;
    scrollPingRef.current.bottom = isScrollAtBottom;
    return function(deltaY) {
      var smoothOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var originScroll = (
        // Pass origin wheel when on the top
        deltaY < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom
        deltaY > 0 && scrollPingRef.current.bottom
      );
      if (smoothOffset && originScroll) {
        clearTimeout(lockTimeoutRef.current);
        lockRef.current = false;
      } else if (!originScroll || lockRef.current) {
        lockScroll();
      }
      return !lockRef.current && originScroll;
    };
  };

  // node_modules/rc-virtual-list/es/hooks/useFrameWheel.js
  function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, horizontalScroll, onWheelDelta) {
    var offsetRef = (0, import_react46.useRef)(0);
    var nextFrameRef = (0, import_react46.useRef)(null);
    var wheelValueRef = (0, import_react46.useRef)(null);
    var isMouseScrollRef = (0, import_react46.useRef)(false);
    var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom);
    function onWheelY(event, deltaY) {
      raf_default.cancel(nextFrameRef.current);
      offsetRef.current += deltaY;
      wheelValueRef.current = deltaY;
      if (originScroll(deltaY))
        return;
      if (!isFirefox_default) {
        event.preventDefault();
      }
      nextFrameRef.current = raf_default(function() {
        var patchMultiple = isMouseScrollRef.current ? 10 : 1;
        onWheelDelta(offsetRef.current * patchMultiple);
        offsetRef.current = 0;
      });
    }
    function onWheelX(event, deltaX) {
      onWheelDelta(deltaX, true);
      if (!isFirefox_default) {
        event.preventDefault();
      }
    }
    var wheelDirectionRef = (0, import_react46.useRef)(null);
    var wheelDirectionCleanRef = (0, import_react46.useRef)(null);
    function onWheel(event) {
      if (!inVirtual)
        return;
      raf_default.cancel(wheelDirectionCleanRef.current);
      wheelDirectionCleanRef.current = raf_default(function() {
        wheelDirectionRef.current = null;
      }, 2);
      var deltaX = event.deltaX, deltaY = event.deltaY, shiftKey = event.shiftKey;
      var mergedDeltaX = deltaX;
      var mergedDeltaY = deltaY;
      if (wheelDirectionRef.current === "sx" || !wheelDirectionRef.current && (shiftKey || false) && deltaY && !deltaX) {
        mergedDeltaX = deltaY;
        mergedDeltaY = 0;
        wheelDirectionRef.current = "sx";
      }
      var absX = Math.abs(mergedDeltaX);
      var absY = Math.abs(mergedDeltaY);
      if (wheelDirectionRef.current === null) {
        wheelDirectionRef.current = horizontalScroll && absX > absY ? "x" : "y";
      }
      if (wheelDirectionRef.current === "y") {
        onWheelY(event, mergedDeltaY);
      } else {
        onWheelX(event, mergedDeltaX);
      }
    }
    function onFireFoxScroll(event) {
      if (!inVirtual)
        return;
      isMouseScrollRef.current = event.detail === wheelValueRef.current;
    }
    return [onWheel, onFireFoxScroll];
  }

  // node_modules/rc-virtual-list/es/hooks/useMobileTouchMove.js
  var import_react47 = __toESM(require_react());
  var SMOOTH_PTG = 14 / 15;
  function useMobileTouchMove(inVirtual, listRef, callback) {
    var touchedRef = (0, import_react47.useRef)(false);
    var touchYRef = (0, import_react47.useRef)(0);
    var elementRef = (0, import_react47.useRef)(null);
    var intervalRef = (0, import_react47.useRef)(null);
    var cleanUpEvents;
    var onTouchMove = function onTouchMove2(e3) {
      if (touchedRef.current) {
        var currentY = Math.ceil(e3.touches[0].pageY);
        var offsetY = touchYRef.current - currentY;
        touchYRef.current = currentY;
        if (callback(offsetY)) {
          e3.preventDefault();
        }
        clearInterval(intervalRef.current);
        intervalRef.current = setInterval(function() {
          offsetY *= SMOOTH_PTG;
          if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {
            clearInterval(intervalRef.current);
          }
        }, 16);
      }
    };
    var onTouchEnd = function onTouchEnd2() {
      touchedRef.current = false;
      cleanUpEvents();
    };
    var onTouchStart = function onTouchStart2(e3) {
      cleanUpEvents();
      if (e3.touches.length === 1 && !touchedRef.current) {
        touchedRef.current = true;
        touchYRef.current = Math.ceil(e3.touches[0].pageY);
        elementRef.current = e3.target;
        elementRef.current.addEventListener("touchmove", onTouchMove);
        elementRef.current.addEventListener("touchend", onTouchEnd);
      }
    };
    cleanUpEvents = function cleanUpEvents2() {
      if (elementRef.current) {
        elementRef.current.removeEventListener("touchmove", onTouchMove);
        elementRef.current.removeEventListener("touchend", onTouchEnd);
      }
    };
    useLayoutEffect_default(function() {
      if (inVirtual) {
        listRef.current.addEventListener("touchstart", onTouchStart);
      }
      return function() {
        var _listRef$current;
        (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.removeEventListener("touchstart", onTouchStart);
        cleanUpEvents();
        clearInterval(intervalRef.current);
      };
    }, [inVirtual]);
  }

  // node_modules/rc-virtual-list/es/utils/scrollbarUtil.js
  var MIN_SIZE = 20;
  function getSpinSize() {
    var containerSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    var scrollRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var baseSize = containerSize / scrollRange * 100;
    if (isNaN(baseSize)) {
      baseSize = 0;
    }
    baseSize = Math.max(baseSize, MIN_SIZE);
    baseSize = Math.min(baseSize, containerSize / 2);
    return Math.floor(baseSize);
  }

  // node_modules/rc-virtual-list/es/hooks/useGetSize.js
  var React135 = __toESM(require_react());
  function useGetSize(mergedData, getKey3, heights, itemHeight) {
    var _React$useMemo = React135.useMemo(function() {
      return [/* @__PURE__ */ new Map(), []];
    }, [mergedData, heights.id, itemHeight]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), key2Index = _React$useMemo2[0], bottomList = _React$useMemo2[1];
    var getSize3 = function getSize4(startKey) {
      var endKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : startKey;
      var startIndex = key2Index.get(startKey);
      var endIndex = key2Index.get(endKey);
      if (startIndex === void 0 || endIndex === void 0) {
        var dataLen = mergedData.length;
        for (var i = bottomList.length; i < dataLen; i += 1) {
          var _heights$get;
          var item = mergedData[i];
          var key = getKey3(item);
          key2Index.set(key, i);
          var cacheHeight = (_heights$get = heights.get(key)) !== null && _heights$get !== void 0 ? _heights$get : itemHeight;
          bottomList[i] = (bottomList[i - 1] || 0) + cacheHeight;
          if (key === startKey) {
            startIndex = i;
          }
          if (key === endKey) {
            endIndex = i;
          }
          if (startIndex !== void 0 && endIndex !== void 0) {
            break;
          }
        }
      }
      return {
        top: bottomList[startIndex - 1] || 0,
        bottom: bottomList[endIndex]
      };
    };
    return getSize3;
  }

  // node_modules/rc-virtual-list/es/List.js
  var _excluded14 = ["prefixCls", "className", "height", "itemHeight", "fullHeight", "style", "data", "children", "itemKey", "virtual", "direction", "scrollWidth", "component", "onScroll", "onVirtualScroll", "onVisibleChange", "innerProps", "extraRender", "styles"];
  var EMPTY_DATA = [];
  var ScrollStyle = {
    overflowY: "auto",
    overflowAnchor: "none"
  };
  function RawList(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-virtual-list" : _props$prefixCls, className = props.className, height = props.height, itemHeight = props.itemHeight, _props$fullHeight = props.fullHeight, fullHeight = _props$fullHeight === void 0 ? true : _props$fullHeight, style2 = props.style, data = props.data, children = props.children, itemKey3 = props.itemKey, virtual = props.virtual, direction = props.direction, scrollWidth = props.scrollWidth, _props$component = props.component, Component11 = _props$component === void 0 ? "div" : _props$component, onScroll = props.onScroll, onVirtualScroll = props.onVirtualScroll, onVisibleChange = props.onVisibleChange, innerProps = props.innerProps, extraRender = props.extraRender, styles = props.styles, restProps = _objectWithoutProperties(props, _excluded14);
    var useVirtual = !!(virtual !== false && height && itemHeight);
    var inVirtual = useVirtual && data && (itemHeight * data.length > height || !!scrollWidth);
    var isRTL = direction === "rtl";
    var mergedClassName = (0, import_classnames30.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-rtl"), isRTL), className);
    var mergedData = data || EMPTY_DATA;
    var componentRef = (0, import_react48.useRef)();
    var fillerInnerRef = (0, import_react48.useRef)();
    var _useState = (0, import_react48.useState)(0), _useState2 = _slicedToArray(_useState, 2), offsetTop = _useState2[0], setOffsetTop = _useState2[1];
    var _useState3 = (0, import_react48.useState)(0), _useState4 = _slicedToArray(_useState3, 2), offsetLeft = _useState4[0], setOffsetLeft = _useState4[1];
    var _useState5 = (0, import_react48.useState)(false), _useState6 = _slicedToArray(_useState5, 2), scrollMoving = _useState6[0], setScrollMoving = _useState6[1];
    var onScrollbarStartMove = function onScrollbarStartMove2() {
      setScrollMoving(true);
    };
    var onScrollbarStopMove = function onScrollbarStopMove2() {
      setScrollMoving(false);
    };
    var getKey3 = React136.useCallback(function(item) {
      if (typeof itemKey3 === "function") {
        return itemKey3(item);
      }
      return item === null || item === void 0 ? void 0 : item[itemKey3];
    }, [itemKey3]);
    var sharedConfig = {
      getKey: getKey3
    };
    function syncScrollTop(newTop) {
      setOffsetTop(function(origin) {
        var value;
        if (typeof newTop === "function") {
          value = newTop(origin);
        } else {
          value = newTop;
        }
        var alignedTop = keepInRange(value);
        componentRef.current.scrollTop = alignedTop;
        return alignedTop;
      });
    }
    var rangeRef = (0, import_react48.useRef)({
      start: 0,
      end: mergedData.length
    });
    var diffItemRef = (0, import_react48.useRef)();
    var _useDiffItem = useDiffItem(mergedData, getKey3), _useDiffItem2 = _slicedToArray(_useDiffItem, 1), diffItem = _useDiffItem2[0];
    diffItemRef.current = diffItem;
    var _useHeights = useHeights(getKey3, null, null), _useHeights2 = _slicedToArray(_useHeights, 4), setInstanceRef = _useHeights2[0], collectHeight = _useHeights2[1], heights = _useHeights2[2], heightUpdatedMark = _useHeights2[3];
    var _React$useMemo = React136.useMemo(function() {
      if (!useVirtual) {
        return {
          scrollHeight: void 0,
          start: 0,
          end: mergedData.length - 1,
          offset: void 0
        };
      }
      if (!inVirtual) {
        var _fillerInnerRef$curre;
        return {
          scrollHeight: ((_fillerInnerRef$curre = fillerInnerRef.current) === null || _fillerInnerRef$curre === void 0 ? void 0 : _fillerInnerRef$curre.offsetHeight) || 0,
          start: 0,
          end: mergedData.length - 1,
          offset: void 0
        };
      }
      var itemTop = 0;
      var startIndex;
      var startOffset;
      var endIndex;
      var dataLen = mergedData.length;
      for (var i = 0; i < dataLen; i += 1) {
        var item = mergedData[i];
        var key = getKey3(item);
        var cacheHeight = heights.get(key);
        var currentItemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
        if (currentItemBottom >= offsetTop && startIndex === void 0) {
          startIndex = i;
          startOffset = itemTop;
        }
        if (currentItemBottom > offsetTop + height && endIndex === void 0) {
          endIndex = i;
        }
        itemTop = currentItemBottom;
      }
      if (startIndex === void 0) {
        startIndex = 0;
        startOffset = 0;
        endIndex = Math.ceil(height / itemHeight);
      }
      if (endIndex === void 0) {
        endIndex = mergedData.length - 1;
      }
      endIndex = Math.min(endIndex + 1, mergedData.length - 1);
      return {
        scrollHeight: itemTop,
        start: startIndex,
        end: endIndex,
        offset: startOffset
      };
    }, [inVirtual, useVirtual, offsetTop, mergedData, heightUpdatedMark, height]), scrollHeight = _React$useMemo.scrollHeight, start2 = _React$useMemo.start, end = _React$useMemo.end, fillerOffset = _React$useMemo.offset;
    rangeRef.current.start = start2;
    rangeRef.current.end = end;
    var _React$useState = React136.useState({
      width: 0,
      height
    }), _React$useState2 = _slicedToArray(_React$useState, 2), size = _React$useState2[0], setSize = _React$useState2[1];
    var onHolderResize = function onHolderResize2(sizeInfo) {
      setSize({
        width: sizeInfo.width || sizeInfo.offsetWidth,
        height: sizeInfo.height || sizeInfo.offsetHeight
      });
    };
    var verticalScrollBarRef = (0, import_react48.useRef)();
    var horizontalScrollBarRef = (0, import_react48.useRef)();
    var horizontalScrollBarSpinSize = React136.useMemo(function() {
      return getSpinSize(size.width, scrollWidth);
    }, [size.width, scrollWidth]);
    var verticalScrollBarSpinSize = React136.useMemo(function() {
      return getSpinSize(size.height, scrollHeight);
    }, [size.height, scrollHeight]);
    var maxScrollHeight = scrollHeight - height;
    var maxScrollHeightRef = (0, import_react48.useRef)(maxScrollHeight);
    maxScrollHeightRef.current = maxScrollHeight;
    function keepInRange(newScrollTop) {
      var newTop = newScrollTop;
      if (!Number.isNaN(maxScrollHeightRef.current)) {
        newTop = Math.min(newTop, maxScrollHeightRef.current);
      }
      newTop = Math.max(newTop, 0);
      return newTop;
    }
    var isScrollAtTop = offsetTop <= 0;
    var isScrollAtBottom = offsetTop >= maxScrollHeight;
    var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom);
    var getVirtualScrollInfo = function getVirtualScrollInfo2() {
      return {
        x: isRTL ? -offsetLeft : offsetLeft,
        y: offsetTop
      };
    };
    var lastVirtualScrollInfoRef = (0, import_react48.useRef)(getVirtualScrollInfo());
    var triggerScroll = useEvent(function() {
      if (onVirtualScroll) {
        var nextInfo = getVirtualScrollInfo();
        if (lastVirtualScrollInfoRef.current.x !== nextInfo.x || lastVirtualScrollInfoRef.current.y !== nextInfo.y) {
          onVirtualScroll(nextInfo);
          lastVirtualScrollInfoRef.current = nextInfo;
        }
      }
    });
    function onScrollBar(newScrollOffset, horizontal) {
      var newOffset = newScrollOffset;
      if (horizontal) {
        (0, import_react_dom4.flushSync)(function() {
          setOffsetLeft(newOffset);
        });
        triggerScroll();
      } else {
        syncScrollTop(newOffset);
      }
    }
    function onFallbackScroll(e3) {
      var newScrollTop = e3.currentTarget.scrollTop;
      if (newScrollTop !== offsetTop) {
        syncScrollTop(newScrollTop);
      }
      onScroll === null || onScroll === void 0 ? void 0 : onScroll(e3);
      triggerScroll();
    }
    var keepInHorizontalRange = function keepInHorizontalRange2(nextOffsetLeft) {
      var tmpOffsetLeft = nextOffsetLeft;
      var max = scrollWidth - size.width;
      tmpOffsetLeft = Math.max(tmpOffsetLeft, 0);
      tmpOffsetLeft = Math.min(tmpOffsetLeft, max);
      return tmpOffsetLeft;
    };
    var onWheelDelta = useEvent(function(offsetXY, fromHorizontal) {
      if (fromHorizontal) {
        (0, import_react_dom4.flushSync)(function() {
          setOffsetLeft(function(left) {
            var nextOffsetLeft = left + (isRTL ? -offsetXY : offsetXY);
            return keepInHorizontalRange(nextOffsetLeft);
          });
        });
        triggerScroll();
      } else {
        syncScrollTop(function(top) {
          var newTop = top + offsetXY;
          return newTop;
        });
      }
    });
    var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, !!scrollWidth, onWheelDelta), _useFrameWheel2 = _slicedToArray(_useFrameWheel, 2), onRawWheel = _useFrameWheel2[0], onFireFoxScroll = _useFrameWheel2[1];
    useMobileTouchMove(useVirtual, componentRef, function(deltaY, smoothOffset) {
      if (originScroll(deltaY, smoothOffset)) {
        return false;
      }
      onRawWheel({
        preventDefault: function preventDefault() {
        },
        deltaY
      });
      return true;
    });
    useLayoutEffect_default(function() {
      function onMozMousePixelScroll(e3) {
        if (useVirtual) {
          e3.preventDefault();
        }
      }
      var componentEle = componentRef.current;
      componentEle.addEventListener("wheel", onRawWheel);
      componentEle.addEventListener("DOMMouseScroll", onFireFoxScroll);
      componentEle.addEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      return function() {
        componentEle.removeEventListener("wheel", onRawWheel);
        componentEle.removeEventListener("DOMMouseScroll", onFireFoxScroll);
        componentEle.removeEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      };
    }, [useVirtual]);
    useLayoutEffect_default(function() {
      if (scrollWidth) {
        setOffsetLeft(function(left) {
          return keepInHorizontalRange(left);
        });
      }
    }, [size.width, scrollWidth]);
    var delayHideScrollBar = function delayHideScrollBar2() {
      var _verticalScrollBarRef, _horizontalScrollBarR;
      (_verticalScrollBarRef = verticalScrollBarRef.current) === null || _verticalScrollBarRef === void 0 ? void 0 : _verticalScrollBarRef.delayHidden();
      (_horizontalScrollBarR = horizontalScrollBarRef.current) === null || _horizontalScrollBarR === void 0 ? void 0 : _horizontalScrollBarR.delayHidden();
    };
    var _scrollTo = useScrollTo(componentRef, mergedData, heights, itemHeight, getKey3, function() {
      return collectHeight(true);
    }, syncScrollTop, delayHideScrollBar);
    React136.useImperativeHandle(ref, function() {
      return {
        getScrollInfo: getVirtualScrollInfo,
        scrollTo: function scrollTo3(config) {
          function isPosScroll(arg) {
            return arg && _typeof(arg) === "object" && ("left" in arg || "top" in arg);
          }
          if (isPosScroll(config)) {
            if (config.left !== void 0) {
              setOffsetLeft(keepInHorizontalRange(config.left));
            }
            _scrollTo(config.top);
          } else {
            _scrollTo(config);
          }
        }
      };
    });
    useLayoutEffect_default(function() {
      if (onVisibleChange) {
        var renderList = mergedData.slice(start2, end + 1);
        onVisibleChange(renderList, mergedData);
      }
    }, [start2, end, mergedData]);
    var getSize3 = useGetSize(mergedData, getKey3, heights, itemHeight);
    var extraContent = extraRender === null || extraRender === void 0 ? void 0 : extraRender({
      start: start2,
      end,
      virtual: inVirtual,
      offsetX: offsetLeft,
      offsetY: fillerOffset,
      rtl: isRTL,
      getSize: getSize3
    });
    var listChildren = useChildren(mergedData, start2, end, scrollWidth, setInstanceRef, children, sharedConfig);
    var componentStyle = null;
    if (height) {
      componentStyle = _objectSpread2(_defineProperty({}, fullHeight ? "height" : "maxHeight", height), ScrollStyle);
      if (useVirtual) {
        componentStyle.overflowY = "hidden";
        if (scrollWidth) {
          componentStyle.overflowX = "hidden";
        }
        if (scrollMoving) {
          componentStyle.pointerEvents = "none";
        }
      }
    }
    var containerProps = {};
    if (isRTL) {
      containerProps.dir = "rtl";
    }
    return /* @__PURE__ */ React136.createElement("div", _extends({
      style: _objectSpread2(_objectSpread2({}, style2), {}, {
        position: "relative"
      }),
      className: mergedClassName
    }, containerProps, restProps), /* @__PURE__ */ React136.createElement(es_default, {
      onResize: onHolderResize
    }, /* @__PURE__ */ React136.createElement(Component11, {
      className: "".concat(prefixCls, "-holder"),
      style: componentStyle,
      ref: componentRef,
      onScroll: onFallbackScroll,
      onMouseEnter: delayHideScrollBar
    }, /* @__PURE__ */ React136.createElement(Filler_default, {
      prefixCls,
      height: scrollHeight,
      offsetX: offsetLeft,
      offsetY: fillerOffset,
      scrollWidth,
      onInnerResize: collectHeight,
      ref: fillerInnerRef,
      innerProps,
      rtl: isRTL,
      extra: extraContent
    }, listChildren))), inVirtual && scrollHeight > height && /* @__PURE__ */ React136.createElement(ScrollBar_default, {
      ref: verticalScrollBarRef,
      prefixCls,
      scrollOffset: offsetTop,
      scrollRange: scrollHeight,
      rtl: isRTL,
      onScroll: onScrollBar,
      onStartMove: onScrollbarStartMove,
      onStopMove: onScrollbarStopMove,
      spinSize: verticalScrollBarSpinSize,
      containerSize: size.height,
      style: styles === null || styles === void 0 ? void 0 : styles.verticalScrollBar,
      thumbStyle: styles === null || styles === void 0 ? void 0 : styles.verticalScrollBarThumb
    }), inVirtual && scrollWidth && /* @__PURE__ */ React136.createElement(ScrollBar_default, {
      ref: horizontalScrollBarRef,
      prefixCls,
      scrollOffset: offsetLeft,
      scrollRange: scrollWidth,
      rtl: isRTL,
      onScroll: onScrollBar,
      onStartMove: onScrollbarStartMove,
      onStopMove: onScrollbarStopMove,
      spinSize: horizontalScrollBarSpinSize,
      containerSize: size.width,
      horizontal: true,
      style: styles === null || styles === void 0 ? void 0 : styles.horizontalScrollBar,
      thumbStyle: styles === null || styles === void 0 ? void 0 : styles.horizontalScrollBarThumb
    }));
  }
  var List2 = /* @__PURE__ */ React136.forwardRef(RawList);
  List2.displayName = "List";
  var List_default2 = List2;

  // node_modules/rc-virtual-list/es/index.js
  var es_default8 = List_default2;

  // node_modules/rc-select/es/OptionList.js
  var React137 = __toESM(require_react());
  var import_react49 = __toESM(require_react());

  // node_modules/rc-select/es/utils/platformUtil.js
  function isPlatformMac() {
    return /(mac\sos|macintosh)/i.test(navigator.appVersion);
  }

  // node_modules/rc-select/es/OptionList.js
  var _excluded15 = ["disabled", "title", "children", "style", "className"];
  function isTitleType2(content) {
    return typeof content === "string" || typeof content === "number";
  }
  var OptionList = function OptionList2(_, ref) {
    var _useBaseProps = useBaseProps(), prefixCls = _useBaseProps.prefixCls, id = _useBaseProps.id, open = _useBaseProps.open, multiple = _useBaseProps.multiple, mode = _useBaseProps.mode, searchValue = _useBaseProps.searchValue, toggleOpen = _useBaseProps.toggleOpen, notFoundContent = _useBaseProps.notFoundContent, onPopupScroll = _useBaseProps.onPopupScroll;
    var _React$useContext = React137.useContext(SelectContext_default), maxCount = _React$useContext.maxCount, flattenOptions2 = _React$useContext.flattenOptions, onActiveValue = _React$useContext.onActiveValue, defaultActiveFirstOption = _React$useContext.defaultActiveFirstOption, onSelect = _React$useContext.onSelect, menuItemSelectedIcon = _React$useContext.menuItemSelectedIcon, rawValues = _React$useContext.rawValues, fieldNames = _React$useContext.fieldNames, virtual = _React$useContext.virtual, direction = _React$useContext.direction, listHeight = _React$useContext.listHeight, listItemHeight = _React$useContext.listItemHeight, optionRender = _React$useContext.optionRender;
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var memoFlattenOptions = useMemo(function() {
      return flattenOptions2;
    }, [open, flattenOptions2], function(prev2, next2) {
      return next2[0] && prev2[1] !== next2[1];
    });
    var listRef = React137.useRef(null);
    var overMaxCount = React137.useMemo(function() {
      return multiple && typeof maxCount !== "undefined" && (rawValues === null || rawValues === void 0 ? void 0 : rawValues.size) >= maxCount;
    }, [multiple, maxCount, rawValues === null || rawValues === void 0 ? void 0 : rawValues.size]);
    var onListMouseDown = function onListMouseDown2(event) {
      event.preventDefault();
    };
    var scrollIntoView = function scrollIntoView2(args) {
      var _listRef$current;
      (_listRef$current = listRef.current) === null || _listRef$current === void 0 || _listRef$current.scrollTo(typeof args === "number" ? {
        index: args
      } : args);
    };
    var getEnabledActiveIndex = function getEnabledActiveIndex2(index2) {
      var offset3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var len = memoFlattenOptions.length;
      for (var i = 0; i < len; i += 1) {
        var current2 = (index2 + i * offset3 + len) % len;
        var _ref = memoFlattenOptions[current2] || {}, group = _ref.group, data = _ref.data;
        if (!group && !(data !== null && data !== void 0 && data.disabled) && !overMaxCount) {
          return current2;
        }
      }
      return -1;
    };
    var _React$useState = React137.useState(function() {
      return getEnabledActiveIndex(0);
    }), _React$useState2 = _slicedToArray(_React$useState, 2), activeIndex = _React$useState2[0], setActiveIndex = _React$useState2[1];
    var setActive = function setActive2(index2) {
      var fromKeyboard = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      setActiveIndex(index2);
      var info = {
        source: fromKeyboard ? "keyboard" : "mouse"
      };
      var flattenItem = memoFlattenOptions[index2];
      if (!flattenItem) {
        onActiveValue(null, -1, info);
        return;
      }
      onActiveValue(flattenItem.value, index2, info);
    };
    (0, import_react49.useEffect)(function() {
      setActive(defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
    }, [memoFlattenOptions.length, searchValue]);
    var isSelected = React137.useCallback(function(value) {
      return rawValues.has(value) && mode !== "combobox";
    }, [mode, _toConsumableArray(rawValues).toString(), rawValues.size]);
    (0, import_react49.useEffect)(function() {
      var timeoutId = setTimeout(function() {
        if (!multiple && open && rawValues.size === 1) {
          var value = Array.from(rawValues)[0];
          var index2 = memoFlattenOptions.findIndex(function(_ref2) {
            var data = _ref2.data;
            return data.value === value;
          });
          if (index2 !== -1) {
            setActive(index2);
            scrollIntoView(index2);
          }
        }
      });
      if (open) {
        var _listRef$current2;
        (_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 || _listRef$current2.scrollTo(void 0);
      }
      return function() {
        return clearTimeout(timeoutId);
      };
    }, [open, searchValue]);
    var onSelectValue = function onSelectValue2(value) {
      if (value !== void 0) {
        onSelect(value, {
          selected: !rawValues.has(value)
        });
      }
      if (!multiple) {
        toggleOpen(false);
      }
    };
    React137.useImperativeHandle(ref, function() {
      return {
        onKeyDown: function onKeyDown2(event) {
          var which = event.which, ctrlKey = event.ctrlKey;
          switch (which) {
            case KeyCode_default.N:
            case KeyCode_default.P:
            case KeyCode_default.UP:
            case KeyCode_default.DOWN: {
              var offset3 = 0;
              if (which === KeyCode_default.UP) {
                offset3 = -1;
              } else if (which === KeyCode_default.DOWN) {
                offset3 = 1;
              } else if (isPlatformMac() && ctrlKey) {
                if (which === KeyCode_default.N) {
                  offset3 = 1;
                } else if (which === KeyCode_default.P) {
                  offset3 = -1;
                }
              }
              if (offset3 !== 0) {
                var nextActiveIndex = getEnabledActiveIndex(activeIndex + offset3, offset3);
                scrollIntoView(nextActiveIndex);
                setActive(nextActiveIndex, true);
              }
              break;
            }
            case KeyCode_default.ENTER: {
              var _item$data;
              var item = memoFlattenOptions[activeIndex];
              if (item && !(item !== null && item !== void 0 && (_item$data = item.data) !== null && _item$data !== void 0 && _item$data.disabled) && !overMaxCount) {
                onSelectValue(item.value);
              } else {
                onSelectValue(void 0);
              }
              if (open) {
                event.preventDefault();
              }
              break;
            }
            case KeyCode_default.ESC: {
              toggleOpen(false);
              if (open) {
                event.stopPropagation();
              }
            }
          }
        },
        onKeyUp: function onKeyUp() {
        },
        scrollTo: function scrollTo3(index2) {
          scrollIntoView(index2);
        }
      };
    });
    if (memoFlattenOptions.length === 0) {
      return /* @__PURE__ */ React137.createElement("div", {
        role: "listbox",
        id: "".concat(id, "_list"),
        className: "".concat(itemPrefixCls, "-empty"),
        onMouseDown: onListMouseDown
      }, notFoundContent);
    }
    var omitFieldNameList = Object.keys(fieldNames).map(function(key) {
      return fieldNames[key];
    });
    var getLabel = function getLabel2(item) {
      return item.label;
    };
    function getItemAriaProps(item, index2) {
      var group = item.group;
      return {
        role: group ? "presentation" : "option",
        id: "".concat(id, "_list_").concat(index2)
      };
    }
    var renderItem = function renderItem2(index2) {
      var item = memoFlattenOptions[index2];
      if (!item) {
        return null;
      }
      var itemData = item.data || {};
      var value = itemData.value;
      var group = item.group;
      var attrs = pickAttrs(itemData, true);
      var mergedLabel = getLabel(item);
      return item ? /* @__PURE__ */ React137.createElement("div", _extends({
        "aria-label": typeof mergedLabel === "string" && !group ? mergedLabel : null
      }, attrs, {
        key: index2
      }, getItemAriaProps(item, index2), {
        "aria-selected": isSelected(value)
      }), value) : null;
    };
    var a11yProps = {
      role: "listbox",
      id: "".concat(id, "_list")
    };
    return /* @__PURE__ */ React137.createElement(React137.Fragment, null, virtual && /* @__PURE__ */ React137.createElement("div", _extends({}, a11yProps, {
      style: {
        height: 0,
        width: 0,
        overflow: "hidden"
      }
    }), renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)), /* @__PURE__ */ React137.createElement(es_default8, {
      itemKey: "key",
      ref: listRef,
      data: memoFlattenOptions,
      height: listHeight,
      itemHeight: listItemHeight,
      fullHeight: false,
      onMouseDown: onListMouseDown,
      onScroll: onPopupScroll,
      virtual,
      direction,
      innerProps: virtual ? null : a11yProps
    }, function(item, itemIndex) {
      var _classNames;
      var group = item.group, groupOption = item.groupOption, data = item.data, label = item.label, value = item.value;
      var key = data.key;
      if (group) {
        var _data$title;
        var groupTitle = (_data$title = data.title) !== null && _data$title !== void 0 ? _data$title : isTitleType2(label) ? label.toString() : void 0;
        return /* @__PURE__ */ React137.createElement("div", {
          className: (0, import_classnames31.default)(itemPrefixCls, "".concat(itemPrefixCls, "-group")),
          title: groupTitle
        }, label !== void 0 ? label : key);
      }
      var disabled = data.disabled, title = data.title, children = data.children, style2 = data.style, className = data.className, otherProps = _objectWithoutProperties(data, _excluded15);
      var passedProps = omit(otherProps, omitFieldNameList);
      var selected = isSelected(value);
      var mergedDisabled = disabled || !selected && overMaxCount;
      var optionPrefixCls = "".concat(itemPrefixCls, "-option");
      var optionClassName = (0, import_classnames31.default)(itemPrefixCls, optionPrefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(optionPrefixCls, "-grouped"), groupOption), _defineProperty(_classNames, "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !mergedDisabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-disabled"), mergedDisabled), _defineProperty(_classNames, "".concat(optionPrefixCls, "-selected"), selected), _classNames));
      var mergedLabel = getLabel(item);
      var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === "function" || selected;
      var content = typeof mergedLabel === "number" ? mergedLabel : mergedLabel || value;
      var optionTitle = isTitleType2(content) ? content.toString() : void 0;
      if (title !== void 0) {
        optionTitle = title;
      }
      return /* @__PURE__ */ React137.createElement("div", _extends({}, pickAttrs(passedProps), !virtual ? getItemAriaProps(item, itemIndex) : {}, {
        "aria-selected": selected,
        className: optionClassName,
        title: optionTitle,
        onMouseMove: function onMouseMove() {
          if (activeIndex === itemIndex || mergedDisabled) {
            return;
          }
          setActive(itemIndex);
        },
        onClick: function onClick() {
          if (!mergedDisabled) {
            onSelectValue(value);
          }
        },
        style: style2
      }), /* @__PURE__ */ React137.createElement("div", {
        className: "".concat(optionPrefixCls, "-content")
      }, typeof optionRender === "function" ? optionRender(item, {
        index: itemIndex
      }) : content), /* @__PURE__ */ React137.isValidElement(menuItemSelectedIcon) || selected, iconVisible && /* @__PURE__ */ React137.createElement(TransBtn_default, {
        className: "".concat(itemPrefixCls, "-option-state"),
        customizeIcon: menuItemSelectedIcon,
        customizeIconProps: {
          value,
          disabled: mergedDisabled,
          isSelected: selected
        }
      }, selected ? "\u2713" : null));
    }));
  };
  var RefOptionList = /* @__PURE__ */ React137.forwardRef(OptionList);
  if (true) {
    RefOptionList.displayName = "OptionList";
  }
  var OptionList_default = RefOptionList;

  // node_modules/rc-select/es/hooks/useCache.js
  var React138 = __toESM(require_react());
  var useCache_default = function(labeledValues, valueOptions) {
    var cacheRef = React138.useRef({
      values: /* @__PURE__ */ new Map(),
      options: /* @__PURE__ */ new Map()
    });
    var filledLabeledValues = React138.useMemo(function() {
      var _cacheRef$current = cacheRef.current, prevValueCache = _cacheRef$current.values, prevOptionCache = _cacheRef$current.options;
      var patchedValues = labeledValues.map(function(item) {
        if (item.label === void 0) {
          var _prevValueCache$get;
          return _objectSpread2(_objectSpread2({}, item), {}, {
            label: (_prevValueCache$get = prevValueCache.get(item.value)) === null || _prevValueCache$get === void 0 ? void 0 : _prevValueCache$get.label
          });
        }
        return item;
      });
      var valueCache = /* @__PURE__ */ new Map();
      var optionCache = /* @__PURE__ */ new Map();
      patchedValues.forEach(function(item) {
        valueCache.set(item.value, item);
        optionCache.set(item.value, valueOptions.get(item.value) || prevOptionCache.get(item.value));
      });
      cacheRef.current.values = valueCache;
      cacheRef.current.options = optionCache;
      return patchedValues;
    }, [labeledValues, valueOptions]);
    var getOption = React138.useCallback(function(val) {
      return valueOptions.get(val) || cacheRef.current.options.get(val);
    }, [valueOptions]);
    return [filledLabeledValues, getOption];
  };

  // node_modules/rc-select/es/hooks/useFilterOptions.js
  var React139 = __toESM(require_react());
  function includes(test, search) {
    return toArray3(test).join("").toUpperCase().includes(search);
  }
  var useFilterOptions_default = function(options, fieldNames, searchValue, filterOption, optionFilterProp) {
    return React139.useMemo(function() {
      if (!searchValue || filterOption === false) {
        return options;
      }
      var fieldOptions = fieldNames.options, fieldLabel = fieldNames.label, fieldValue = fieldNames.value;
      var filteredOptions = [];
      var customizeFilter = typeof filterOption === "function";
      var upperSearch = searchValue.toUpperCase();
      var filterFunc = customizeFilter ? filterOption : function(_, option) {
        if (optionFilterProp) {
          return includes(option[optionFilterProp], upperSearch);
        }
        if (option[fieldOptions]) {
          return includes(option[fieldLabel !== "children" ? fieldLabel : "label"], upperSearch);
        }
        return includes(option[fieldValue], upperSearch);
      };
      var wrapOption = customizeFilter ? function(opt) {
        return injectPropsWithOption(opt);
      } : function(opt) {
        return opt;
      };
      options.forEach(function(item) {
        if (item[fieldOptions]) {
          var matchGroup = filterFunc(searchValue, wrapOption(item));
          if (matchGroup) {
            filteredOptions.push(item);
          } else {
            var subOptions = item[fieldOptions].filter(function(subItem) {
              return filterFunc(searchValue, wrapOption(subItem));
            });
            if (subOptions.length) {
              filteredOptions.push(_objectSpread2(_objectSpread2({}, item), {}, _defineProperty({}, fieldOptions, subOptions)));
            }
          }
          return;
        }
        if (filterFunc(searchValue, wrapOption(item))) {
          filteredOptions.push(item);
        }
      });
      return filteredOptions;
    }, [options, filterOption, optionFilterProp, searchValue, fieldNames]);
  };

  // node_modules/rc-select/es/hooks/useId.js
  var React140 = __toESM(require_react());
  var uuid6 = 0;
  var isBrowserClient2 = canUseDom();
  function getUUID() {
    var retId;
    if (isBrowserClient2) {
      retId = uuid6;
      uuid6 += 1;
    } else {
      retId = "TEST_OR_SSR";
    }
    return retId;
  }
  function useId3(id) {
    var _React$useState = React140.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
    React140.useEffect(function() {
      setInnerId("rc_select_".concat(getUUID()));
    }, []);
    return id || innerId;
  }

  // node_modules/rc-select/es/hooks/useOptions.js
  var React142 = __toESM(require_react());

  // node_modules/rc-select/es/utils/legacyUtil.js
  var React141 = __toESM(require_react());
  var _excluded16 = ["children", "value"];
  var _excluded24 = ["children"];
  function convertNodeToOption(node2) {
    var _ref = node2, key = _ref.key, _ref$props = _ref.props, children = _ref$props.children, value = _ref$props.value, restProps = _objectWithoutProperties(_ref$props, _excluded16);
    return _objectSpread2({
      key,
      value: value !== void 0 ? value : key,
      children
    }, restProps);
  }
  function convertChildrenToData(nodes) {
    var optionOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return toArray(nodes).map(function(node2, index2) {
      if (!/* @__PURE__ */ React141.isValidElement(node2) || !node2.type) {
        return null;
      }
      var _ref2 = node2, isSelectOptGroup = _ref2.type.isSelectOptGroup, key = _ref2.key, _ref2$props = _ref2.props, children = _ref2$props.children, restProps = _objectWithoutProperties(_ref2$props, _excluded24);
      if (optionOnly || !isSelectOptGroup) {
        return convertNodeToOption(node2);
      }
      return _objectSpread2(_objectSpread2({
        key: "__RC_SELECT_GRP__".concat(key === null ? index2 : key, "__"),
        label: key
      }, restProps), {}, {
        options: convertChildrenToData(children)
      });
    }).filter(function(data) {
      return data;
    });
  }

  // node_modules/rc-select/es/hooks/useOptions.js
  var useOptions = function useOptions2(options, children, fieldNames, optionFilterProp, optionLabelProp) {
    return React142.useMemo(function() {
      var mergedOptions = options;
      var childrenAsData = !options;
      if (childrenAsData) {
        mergedOptions = convertChildrenToData(children);
      }
      var valueOptions = /* @__PURE__ */ new Map();
      var labelOptions = /* @__PURE__ */ new Map();
      var setLabelOptions = function setLabelOptions2(labelOptionsMap, option, key) {
        if (key && typeof key === "string") {
          labelOptionsMap.set(option[key], option);
        }
      };
      var dig = function dig2(optionList) {
        var isChildren = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        for (var i = 0; i < optionList.length; i += 1) {
          var option = optionList[i];
          if (!option[fieldNames.options] || isChildren) {
            valueOptions.set(option[fieldNames.value], option);
            setLabelOptions(labelOptions, option, fieldNames.label);
            setLabelOptions(labelOptions, option, optionFilterProp);
            setLabelOptions(labelOptions, option, optionLabelProp);
          } else {
            dig2(option[fieldNames.options], true);
          }
        }
      };
      dig(mergedOptions);
      return {
        options: mergedOptions,
        valueOptions,
        labelOptions
      };
    }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);
  };
  var useOptions_default = useOptions;

  // node_modules/rc-select/es/hooks/useRefFunc.js
  var React143 = __toESM(require_react());
  function useRefFunc(callback) {
    var funcRef = React143.useRef();
    funcRef.current = callback;
    var cacheFn = React143.useCallback(function() {
      return funcRef.current.apply(funcRef, arguments);
    }, []);
    return cacheFn;
  }

  // node_modules/rc-select/es/utils/warningPropsUtil.js
  var React144 = __toESM(require_react());
  function warningProps(props) {
    var mode = props.mode, options = props.options, children = props.children, backfill = props.backfill, allowClear = props.allowClear, placeholder = props.placeholder, getInputElement = props.getInputElement, showSearch = props.showSearch, onSearch = props.onSearch, defaultOpen = props.defaultOpen, autoFocus = props.autoFocus, labelInValue = props.labelInValue, value = props.value, inputValue = props.inputValue, optionLabelProp = props.optionLabelProp;
    var multiple = isMultiple(mode);
    var mergedShowSearch = showSearch !== void 0 ? showSearch : multiple || mode === "combobox";
    var mergedOptions = options || convertChildrenToData(children);
    warning_default(mode !== "tags" || mergedOptions.every(function(opt) {
      return !opt.disabled;
    }), "Please avoid setting option to disabled in tags mode since user can always type text as tag.");
    if (mode === "tags" || mode === "combobox") {
      var hasNumberValue = mergedOptions.some(function(item) {
        if (item.options) {
          return item.options.some(function(opt) {
            return typeof ("value" in opt ? opt.value : opt.key) === "number";
          });
        }
        return typeof ("value" in item ? item.value : item.key) === "number";
      });
      warning_default(!hasNumberValue, "`value` of Option should not use number type when `mode` is `tags` or `combobox`.");
    }
    warning_default(mode !== "combobox" || !optionLabelProp, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");
    warning_default(mode === "combobox" || !backfill, "`backfill` only works with `combobox` mode.");
    warning_default(mode === "combobox" || !getInputElement, "`getInputElement` only work with `combobox` mode.");
    noteOnce(mode !== "combobox" || !getInputElement || !allowClear || !placeholder, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");
    if (onSearch && !mergedShowSearch && mode !== "combobox" && mode !== "tags") {
      warning_default(false, "`onSearch` should work with `showSearch` instead of use alone.");
    }
    noteOnce(!defaultOpen || autoFocus, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.");
    if (value !== void 0 && value !== null) {
      var values = toArray3(value);
      warning_default(!labelInValue || values.every(function(val) {
        return _typeof(val) === "object" && ("key" in val || "value" in val);
      }), "`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`");
      warning_default(!multiple || Array.isArray(value), "`value` should be array when `mode` is `multiple` or `tags`");
    }
    if (children) {
      var invalidateChildType = null;
      toArray(children).some(function(node2) {
        if (!/* @__PURE__ */ React144.isValidElement(node2) || !node2.type) {
          return false;
        }
        var _ref = node2, type4 = _ref.type;
        if (type4.isSelectOption) {
          return false;
        }
        if (type4.isSelectOptGroup) {
          var allChildrenValid = toArray(node2.props.children).every(function(subNode) {
            if (!/* @__PURE__ */ React144.isValidElement(subNode) || !node2.type || subNode.type.isSelectOption) {
              return true;
            }
            invalidateChildType = subNode.type;
            return false;
          });
          if (allChildrenValid) {
            return false;
          }
          return true;
        }
        invalidateChildType = type4;
        return true;
      });
      if (invalidateChildType) {
        warning_default(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
      }
      warning_default(inputValue === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
    }
  }
  function warningNullOptions(options, fieldNames) {
    if (options) {
      var recursiveOptions = function recursiveOptions2(optionsList) {
        var inGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        for (var i = 0; i < optionsList.length; i++) {
          var option = optionsList[i];
          if (option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.value] === null) {
            warning_default(false, "`value` in Select options should not be `null`.");
            return true;
          }
          if (!inGroup && Array.isArray(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options]) && recursiveOptions2(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options], true)) {
            break;
          }
        }
      };
      recursiveOptions(options);
    }
  }
  var warningPropsUtil_default = warningProps;

  // node_modules/rc-select/es/Select.js
  var _excluded17 = ["id", "mode", "prefixCls", "backfill", "fieldNames", "inputValue", "searchValue", "onSearch", "autoClearSearchValue", "onSelect", "onDeselect", "dropdownMatchSelectWidth", "filterOption", "filterSort", "optionFilterProp", "optionLabelProp", "options", "optionRender", "children", "defaultActiveFirstOption", "menuItemSelectedIcon", "virtual", "direction", "listHeight", "listItemHeight", "value", "defaultValue", "labelInValue", "onChange", "maxCount"];
  var OMIT_DOM_PROPS = ["inputValue"];
  function isRawValue(value) {
    return !value || _typeof(value) !== "object";
  }
  var Select = /* @__PURE__ */ React145.forwardRef(function(props, ref) {
    var id = props.id, mode = props.mode, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-select" : _props$prefixCls, backfill = props.backfill, fieldNames = props.fieldNames, inputValue = props.inputValue, searchValue = props.searchValue, onSearch = props.onSearch, _props$autoClearSearc = props.autoClearSearchValue, autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc, onSelect = props.onSelect, onDeselect = props.onDeselect, _props$dropdownMatchS = props.dropdownMatchSelectWidth, dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS, filterOption = props.filterOption, filterSort = props.filterSort, optionFilterProp = props.optionFilterProp, optionLabelProp = props.optionLabelProp, options = props.options, optionRender = props.optionRender, children = props.children, defaultActiveFirstOption = props.defaultActiveFirstOption, menuItemSelectedIcon = props.menuItemSelectedIcon, virtual = props.virtual, direction = props.direction, _props$listHeight = props.listHeight, listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight, _props$listItemHeight = props.listItemHeight, listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight, value = props.value, defaultValue = props.defaultValue, labelInValue = props.labelInValue, onChange = props.onChange, maxCount = props.maxCount, restProps = _objectWithoutProperties(props, _excluded17);
    var mergedId = useId3(id);
    var multiple = isMultiple(mode);
    var childrenAsData = !!(!options && children);
    var mergedFilterOption = React145.useMemo(function() {
      if (filterOption === void 0 && mode === "combobox") {
        return false;
      }
      return filterOption;
    }, [filterOption, mode]);
    var mergedFieldNames = React145.useMemo(
      function() {
        return fillFieldNames(fieldNames, childrenAsData);
      },
      /* eslint-disable react-hooks/exhaustive-deps */
      [
        // We stringify fieldNames to avoid unnecessary re-renders.
        JSON.stringify(fieldNames),
        childrenAsData
      ]
      /* eslint-enable react-hooks/exhaustive-deps */
    );
    var _useMergedState = useMergedState("", {
      value: searchValue !== void 0 ? searchValue : inputValue,
      postState: function postState(search) {
        return search || "";
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedSearchValue = _useMergedState2[0], setSearchValue = _useMergedState2[1];
    var parsedOptions = useOptions_default(options, children, mergedFieldNames, optionFilterProp, optionLabelProp);
    var valueOptions = parsedOptions.valueOptions, labelOptions = parsedOptions.labelOptions, mergedOptions = parsedOptions.options;
    var convert2LabelValues = React145.useCallback(function(draftValues) {
      var valueList = toArray3(draftValues);
      return valueList.map(function(val) {
        var rawValue;
        var rawLabel;
        var rawKey;
        var rawDisabled;
        var rawTitle;
        if (isRawValue(val)) {
          rawValue = val;
        } else {
          var _val$value;
          rawKey = val.key;
          rawLabel = val.label;
          rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;
        }
        var option = valueOptions.get(rawValue);
        if (option) {
          var _option$key;
          if (rawLabel === void 0)
            rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];
          if (rawKey === void 0)
            rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;
          rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;
          rawTitle = option === null || option === void 0 ? void 0 : option.title;
          if (!optionLabelProp) {
            var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];
            if (optionLabel !== void 0 && !/* @__PURE__ */ React145.isValidElement(optionLabel) && !/* @__PURE__ */ React145.isValidElement(rawLabel) && optionLabel !== rawLabel) {
              warning_default(false, "`label` of `value` is not same as `label` in Select options.");
            }
          }
        }
        return {
          label: rawLabel,
          value: rawValue,
          key: rawKey,
          disabled: rawDisabled,
          title: rawTitle
        };
      });
    }, [mergedFieldNames, optionLabelProp, valueOptions]);
    var _useMergedState3 = useMergedState(defaultValue, {
      value
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), internalValue = _useMergedState4[0], setInternalValue = _useMergedState4[1];
    var rawLabeledValues = React145.useMemo(function() {
      var _values$;
      var newInternalValue = multiple && internalValue === null ? [] : internalValue;
      var values = convert2LabelValues(newInternalValue);
      if (mode === "combobox" && isComboNoValue((_values$ = values[0]) === null || _values$ === void 0 ? void 0 : _values$.value)) {
        return [];
      }
      return values;
    }, [internalValue, convert2LabelValues, mode, multiple]);
    var _useCache = useCache_default(rawLabeledValues, valueOptions), _useCache2 = _slicedToArray(_useCache, 2), mergedValues = _useCache2[0], getMixedOption = _useCache2[1];
    var displayValues = React145.useMemo(function() {
      if (!mode && mergedValues.length === 1) {
        var firstValue = mergedValues[0];
        if (firstValue.value === null && (firstValue.label === null || firstValue.label === void 0)) {
          return [];
        }
      }
      return mergedValues.map(function(item) {
        var _item$label;
        return _objectSpread2(_objectSpread2({}, item), {}, {
          label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value
        });
      });
    }, [mode, mergedValues]);
    var rawValues = React145.useMemo(function() {
      return new Set(mergedValues.map(function(val) {
        return val.value;
      }));
    }, [mergedValues]);
    React145.useEffect(function() {
      if (mode === "combobox") {
        var _mergedValues$;
        var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;
        setSearchValue(hasValue2(strValue) ? String(strValue) : "");
      }
    }, [mergedValues]);
    var createTagOption = useRefFunc(function(val, label) {
      var _ref;
      var mergedLabel = label !== null && label !== void 0 ? label : val;
      return _ref = {}, _defineProperty(_ref, mergedFieldNames.value, val), _defineProperty(_ref, mergedFieldNames.label, mergedLabel), _ref;
    });
    var filledTagOptions = React145.useMemo(function() {
      if (mode !== "tags") {
        return mergedOptions;
      }
      var cloneOptions = _toConsumableArray(mergedOptions);
      var existOptions = function existOptions2(val) {
        return valueOptions.has(val);
      };
      _toConsumableArray(mergedValues).sort(function(a, b) {
        return a.value < b.value ? -1 : 1;
      }).forEach(function(item) {
        var val = item.value;
        if (!existOptions(val)) {
          cloneOptions.push(createTagOption(val, item.label));
        }
      });
      return cloneOptions;
    }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);
    var filteredOptions = useFilterOptions_default(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp);
    var filledSearchOptions = React145.useMemo(function() {
      if (mode !== "tags" || !mergedSearchValue || filteredOptions.some(function(item) {
        return item[optionFilterProp || "value"] === mergedSearchValue;
      })) {
        return filteredOptions;
      }
      if (filteredOptions.some(function(item) {
        return item[mergedFieldNames.value] === mergedSearchValue;
      })) {
        return filteredOptions;
      }
      return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));
    }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue, mergedFieldNames]);
    var orderedFilteredOptions = React145.useMemo(function() {
      if (!filterSort) {
        return filledSearchOptions;
      }
      return _toConsumableArray(filledSearchOptions).sort(function(a, b) {
        return filterSort(a, b);
      });
    }, [filledSearchOptions, filterSort]);
    var displayOptions = React145.useMemo(function() {
      return flattenOptions(orderedFilteredOptions, {
        fieldNames: mergedFieldNames,
        childrenAsData
      });
    }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]);
    var triggerChange = function triggerChange2(values) {
      var labeledValues = convert2LabelValues(values);
      setInternalValue(labeledValues);
      if (onChange && // Trigger event only when value changed
      (labeledValues.length !== mergedValues.length || labeledValues.some(function(newVal, index2) {
        var _mergedValues$index;
        return ((_mergedValues$index = mergedValues[index2]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);
      }))) {
        var returnValues = labelInValue ? labeledValues : labeledValues.map(function(v) {
          return v.value;
        });
        var returnOptions = labeledValues.map(function(v) {
          return injectPropsWithOption(getMixedOption(v.value));
        });
        onChange(
          // Value
          multiple ? returnValues : returnValues[0],
          // Option
          multiple ? returnOptions : returnOptions[0]
        );
      }
    };
    var _React$useState = React145.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), activeValue = _React$useState2[0], setActiveValue = _React$useState2[1];
    var _React$useState3 = React145.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), accessibilityIndex = _React$useState4[0], setAccessibilityIndex = _React$useState4[1];
    var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== void 0 ? defaultActiveFirstOption : mode !== "combobox";
    var onActiveValue = React145.useCallback(function(active, index2) {
      var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref2$source = _ref2.source, source = _ref2$source === void 0 ? "keyboard" : _ref2$source;
      setAccessibilityIndex(index2);
      if (backfill && mode === "combobox" && active !== null && source === "keyboard") {
        setActiveValue(String(active));
      }
    }, [backfill, mode]);
    var triggerSelect = function triggerSelect2(val, selected, type4) {
      var getSelectEnt = function getSelectEnt2() {
        var _option$key2;
        var option = getMixedOption(val);
        return [labelInValue ? {
          label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],
          value: val,
          key: (_option$key2 = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val
        } : val, injectPropsWithOption(option)];
      };
      if (selected && onSelect) {
        var _getSelectEnt = getSelectEnt(), _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2), wrappedValue = _getSelectEnt2[0], _option = _getSelectEnt2[1];
        onSelect(wrappedValue, _option);
      } else if (!selected && onDeselect && type4 !== "clear") {
        var _getSelectEnt3 = getSelectEnt(), _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2), _wrappedValue = _getSelectEnt4[0], _option2 = _getSelectEnt4[1];
        onDeselect(_wrappedValue, _option2);
      }
    };
    var onInternalSelect = useRefFunc(function(val, info) {
      var cloneValues;
      var mergedSelect = multiple ? info.selected : true;
      if (mergedSelect) {
        cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];
      } else {
        cloneValues = mergedValues.filter(function(v) {
          return v.value !== val;
        });
      }
      triggerChange(cloneValues);
      triggerSelect(val, mergedSelect);
      if (mode === "combobox") {
        setActiveValue("");
      } else if (!isMultiple || autoClearSearchValue) {
        setSearchValue("");
        setActiveValue("");
      }
    });
    var onDisplayValuesChange = function onDisplayValuesChange2(nextValues, info) {
      triggerChange(nextValues);
      var type4 = info.type, values = info.values;
      if (type4 === "remove" || type4 === "clear") {
        values.forEach(function(item) {
          triggerSelect(item.value, false, type4);
        });
      }
    };
    var onInternalSearch = function onInternalSearch2(searchText, info) {
      setSearchValue(searchText);
      setActiveValue(null);
      if (info.source === "submit") {
        var formatted = (searchText || "").trim();
        if (formatted) {
          var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));
          triggerChange(newRawValues);
          triggerSelect(formatted, true);
          setSearchValue("");
        }
        return;
      }
      if (info.source !== "blur") {
        if (mode === "combobox") {
          triggerChange(searchText);
        }
        onSearch === null || onSearch === void 0 || onSearch(searchText);
      }
    };
    var onInternalSearchSplit = function onInternalSearchSplit2(words) {
      var patchValues = words;
      if (mode !== "tags") {
        patchValues = words.map(function(word) {
          var opt = labelOptions.get(word);
          return opt === null || opt === void 0 ? void 0 : opt.value;
        }).filter(function(val) {
          return val !== void 0;
        });
      }
      var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));
      triggerChange(newRawValues);
      newRawValues.forEach(function(newRawValue) {
        triggerSelect(newRawValue, true);
      });
    };
    var selectContext = React145.useMemo(function() {
      var realVirtual = virtual !== false && dropdownMatchSelectWidth !== false;
      return _objectSpread2(_objectSpread2({}, parsedOptions), {}, {
        flattenOptions: displayOptions,
        onActiveValue,
        defaultActiveFirstOption: mergedDefaultActiveFirstOption,
        onSelect: onInternalSelect,
        menuItemSelectedIcon,
        rawValues,
        fieldNames: mergedFieldNames,
        virtual: realVirtual,
        direction,
        listHeight,
        listItemHeight,
        childrenAsData,
        maxCount,
        optionRender
      });
    }, [maxCount, parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, dropdownMatchSelectWidth, direction, listHeight, listItemHeight, childrenAsData, optionRender]);
    if (true) {
      warningPropsUtil_default(props);
      warningNullOptions(mergedOptions, mergedFieldNames);
    }
    return /* @__PURE__ */ React145.createElement(SelectContext_default.Provider, {
      value: selectContext
    }, /* @__PURE__ */ React145.createElement(BaseSelect_default, _extends({}, restProps, {
      // >>> MISC
      id: mergedId,
      prefixCls,
      ref,
      omitDomProps: OMIT_DOM_PROPS,
      mode,
      displayValues,
      onDisplayValuesChange,
      direction,
      searchValue: mergedSearchValue,
      onSearch: onInternalSearch,
      autoClearSearchValue,
      onSearchSplit: onInternalSearchSplit,
      dropdownMatchSelectWidth,
      OptionList: OptionList_default,
      emptyOptions: !displayOptions.length,
      activeValue,
      activeDescendantId: "".concat(mergedId, "_list_").concat(accessibilityIndex)
    })));
  });
  if (true) {
    Select.displayName = "Select";
  }
  var TypedSelect = Select;
  TypedSelect.Option = Option_default;
  TypedSelect.OptGroup = OptGroup_default;
  var Select_default = TypedSelect;

  // node_modules/rc-select/es/index.js
  var es_default9 = Select_default;

  // node_modules/antd/es/_util/statusUtils.js
  var import_classnames32 = __toESM(require_classnames());
  function getStatusClassNames(prefixCls, status, hasFeedback) {
    return (0, import_classnames32.default)({
      [`${prefixCls}-status-success`]: status === "success",
      [`${prefixCls}-status-warning`]: status === "warning",
      [`${prefixCls}-status-error`]: status === "error",
      [`${prefixCls}-status-validating`]: status === "validating",
      [`${prefixCls}-has-feedback`]: hasFeedback
    });
  }
  var getMergedStatus = (contextStatus, customStatus) => customStatus || contextStatus;

  // node_modules/antd/es/config-provider/defaultRenderEmpty.js
  var import_react51 = __toESM(require_react());

  // node_modules/antd/es/empty/index.js
  var import_classnames33 = __toESM(require_classnames());
  var React148 = __toESM(require_react());

  // node_modules/antd/es/empty/empty.js
  var React146 = __toESM(require_react());
  var Empty2 = () => {
    const [, token2] = useToken();
    const bgColor = new TinyColor(token2.colorBgBase);
    const themeStyle = bgColor.toHsl().l < 0.5 ? {
      opacity: 0.65
    } : {};
    return /* @__PURE__ */ React146.createElement("svg", {
      style: themeStyle,
      width: "184",
      height: "152",
      viewBox: "0 0 184 152",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ React146.createElement("g", {
      fill: "none",
      fillRule: "evenodd"
    }, /* @__PURE__ */ React146.createElement("g", {
      transform: "translate(24 31.67)"
    }, /* @__PURE__ */ React146.createElement("ellipse", {
      fillOpacity: ".8",
      fill: "#F5F5F7",
      cx: "67.797",
      cy: "106.89",
      rx: "67.797",
      ry: "12.668"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z",
      fill: "#AEB8C2"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
      fill: "url(#linearGradient-1)",
      transform: "translate(13.56)"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z",
      fill: "#F5F5F7"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z",
      fill: "#DCE0E6"
    })), /* @__PURE__ */ React146.createElement("path", {
      d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z",
      fill: "#DCE0E6"
    }), /* @__PURE__ */ React146.createElement("g", {
      transform: "translate(149.65 15.383)",
      fill: "#FFF"
    }, /* @__PURE__ */ React146.createElement("ellipse", {
      cx: "20.654",
      cy: "3.167",
      rx: "2.849",
      ry: "2.815"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
    }))));
  };
  if (true) {
    Empty2.displayName = "EmptyImage";
  }
  var empty_default = Empty2;

  // node_modules/antd/es/empty/simple.js
  var React147 = __toESM(require_react());
  var import_react50 = __toESM(require_react());
  var Simple = () => {
    const [, token2] = useToken();
    const {
      colorFill,
      colorFillTertiary,
      colorFillQuaternary,
      colorBgContainer
    } = token2;
    const {
      borderColor,
      shadowColor,
      contentColor
    } = (0, import_react50.useMemo)(() => ({
      borderColor: new TinyColor(colorFill).onBackground(colorBgContainer).toHexShortString(),
      shadowColor: new TinyColor(colorFillTertiary).onBackground(colorBgContainer).toHexShortString(),
      contentColor: new TinyColor(colorFillQuaternary).onBackground(colorBgContainer).toHexShortString()
    }), [colorFill, colorFillTertiary, colorFillQuaternary, colorBgContainer]);
    return /* @__PURE__ */ React147.createElement("svg", {
      width: "64",
      height: "41",
      viewBox: "0 0 64 41",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ React147.createElement("g", {
      transform: "translate(0 1)",
      fill: "none",
      fillRule: "evenodd"
    }, /* @__PURE__ */ React147.createElement("ellipse", {
      fill: shadowColor,
      cx: "32",
      cy: "33",
      rx: "32",
      ry: "7"
    }), /* @__PURE__ */ React147.createElement("g", {
      fillRule: "nonzero",
      stroke: borderColor
    }, /* @__PURE__ */ React147.createElement("path", {
      d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
    }), /* @__PURE__ */ React147.createElement("path", {
      d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
      fill: contentColor
    }))));
  };
  if (true) {
    Simple.displayName = "SimpleImage";
  }
  var simple_default = Simple;

  // node_modules/antd/es/empty/style/index.js
  var genSharedEmptyStyle = (token2) => {
    const {
      componentCls,
      margin,
      marginXS,
      marginXL,
      fontSize,
      lineHeight
    } = token2;
    return {
      [componentCls]: {
        marginInline: marginXS,
        fontSize,
        lineHeight,
        textAlign: "center",
        // 原来 &-image 没有父子结构，现在为了外层承担我们的hashId，改成父子结果
        [`${componentCls}-image`]: {
          height: token2.emptyImgHeight,
          marginBottom: marginXS,
          opacity: token2.opacityImage,
          img: {
            height: "100%"
          },
          svg: {
            maxWidth: "100%",
            height: "100%",
            margin: "auto"
          }
        },
        [`${componentCls}-description`]: {
          color: token2.colorText
        },
        // 原来 &-footer 没有父子结构，现在为了外层承担我们的hashId，改成父子结果
        [`${componentCls}-footer`]: {
          marginTop: margin
        },
        "&-normal": {
          marginBlock: marginXL,
          color: token2.colorTextDisabled,
          [`${componentCls}-description`]: {
            color: token2.colorTextDisabled
          },
          [`${componentCls}-image`]: {
            height: token2.emptyImgHeightMD
          }
        },
        "&-small": {
          marginBlock: marginXS,
          color: token2.colorTextDisabled,
          [`${componentCls}-image`]: {
            height: token2.emptyImgHeightSM
          }
        }
      }
    };
  };
  var style_default5 = genStyleHooks("Empty", (token2) => {
    const {
      componentCls,
      controlHeightLG,
      calc
    } = token2;
    const emptyToken = merge2(token2, {
      emptyImgCls: `${componentCls}-img`,
      emptyImgHeight: calc(controlHeightLG).mul(2.5).equal(),
      emptyImgHeightMD: controlHeightLG,
      emptyImgHeightSM: calc(controlHeightLG).mul(0.875).equal()
    });
    return [genSharedEmptyStyle(emptyToken)];
  });

  // node_modules/antd/es/empty/index.js
  var __rest10 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var defaultEmptyImg = /* @__PURE__ */ React148.createElement(empty_default, null);
  var simpleEmptyImg = /* @__PURE__ */ React148.createElement(simple_default, null);
  var Empty3 = (_a) => {
    var {
      className,
      rootClassName,
      prefixCls: customizePrefixCls,
      image = defaultEmptyImg,
      description,
      children,
      imageStyle,
      style: style2
    } = _a, restProps = __rest10(_a, ["className", "rootClassName", "prefixCls", "image", "description", "children", "imageStyle", "style"]);
    const {
      getPrefixCls,
      direction,
      empty
    } = React148.useContext(ConfigContext);
    const prefixCls = getPrefixCls("empty", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default5(prefixCls);
    const [locale9] = useLocale_default("Empty");
    const des = typeof description !== "undefined" ? description : locale9 === null || locale9 === void 0 ? void 0 : locale9.description;
    const alt = typeof des === "string" ? des : "empty";
    let imageNode = null;
    if (typeof image === "string") {
      imageNode = /* @__PURE__ */ React148.createElement("img", {
        alt,
        src: image
      });
    } else {
      imageNode = image;
    }
    return wrapCSSVar(/* @__PURE__ */ React148.createElement("div", Object.assign({
      className: (0, import_classnames33.default)(hashId, cssVarCls, prefixCls, empty === null || empty === void 0 ? void 0 : empty.className, {
        [`${prefixCls}-normal`]: image === simpleEmptyImg,
        [`${prefixCls}-rtl`]: direction === "rtl"
      }, className, rootClassName),
      style: Object.assign(Object.assign({}, empty === null || empty === void 0 ? void 0 : empty.style), style2)
    }, restProps), /* @__PURE__ */ React148.createElement("div", {
      className: `${prefixCls}-image`,
      style: imageStyle
    }, imageNode), des && /* @__PURE__ */ React148.createElement("div", {
      className: `${prefixCls}-description`
    }, des), children && /* @__PURE__ */ React148.createElement("div", {
      className: `${prefixCls}-footer`
    }, children)));
  };
  Empty3.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
  Empty3.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
  if (true) {
    Empty3.displayName = "Empty";
  }
  var empty_default2 = Empty3;

  // node_modules/antd/es/config-provider/defaultRenderEmpty.js
  var DefaultRenderEmpty = (props) => {
    const {
      componentName
    } = props;
    const {
      getPrefixCls
    } = (0, import_react51.useContext)(ConfigContext);
    const prefix = getPrefixCls("empty");
    switch (componentName) {
      case "Table":
      case "List":
        return /* @__PURE__ */ import_react51.default.createElement(empty_default2, {
          image: empty_default2.PRESENTED_IMAGE_SIMPLE
        });
      case "Select":
      case "TreeSelect":
      case "Cascader":
      case "Transfer":
      case "Mentions":
        return /* @__PURE__ */ import_react51.default.createElement(empty_default2, {
          image: empty_default2.PRESENTED_IMAGE_SIMPLE,
          className: `${prefix}-small`
        });
      default:
        return /* @__PURE__ */ import_react51.default.createElement(empty_default2, null);
    }
  };
  var defaultRenderEmpty_default = DefaultRenderEmpty;

  // node_modules/antd/es/form/hooks/useVariants.js
  var import_react52 = __toESM(require_react());
  var Variants = ["outlined", "borderless", "filled"];
  var useVariant = function(variant) {
    let legacyBordered = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    const ctxVariant = (0, import_react52.useContext)(VariantContext);
    let mergedVariant;
    if (typeof variant !== "undefined") {
      mergedVariant = variant;
    } else if (legacyBordered === false) {
      mergedVariant = "borderless";
    } else {
      mergedVariant = ctxVariant !== null && ctxVariant !== void 0 ? ctxVariant : "outlined";
    }
    const enableVariantCls = Variants.includes(mergedVariant);
    return [mergedVariant, enableVariantCls];
  };
  var useVariants_default = useVariant;

  // node_modules/antd/es/select/mergedBuiltinPlacements.js
  var getBuiltInPlacements3 = (popupOverflow) => {
    const htmlRegion = popupOverflow === "scroll" ? "scroll" : "visible";
    const sharedConfig = {
      overflow: {
        adjustX: true,
        adjustY: true,
        shiftY: true
      },
      htmlRegion,
      dynamicInset: true
    };
    return {
      bottomLeft: Object.assign(Object.assign({}, sharedConfig), {
        points: ["tl", "bl"],
        offset: [0, 4]
      }),
      bottomRight: Object.assign(Object.assign({}, sharedConfig), {
        points: ["tr", "br"],
        offset: [0, 4]
      }),
      topLeft: Object.assign(Object.assign({}, sharedConfig), {
        points: ["bl", "tl"],
        offset: [0, -4]
      }),
      topRight: Object.assign(Object.assign({}, sharedConfig), {
        points: ["br", "tr"],
        offset: [0, -4]
      })
    };
  };
  function mergedBuiltinPlacements(buildInPlacements, popupOverflow) {
    return buildInPlacements || getBuiltInPlacements3(popupOverflow);
  }
  var mergedBuiltinPlacements_default = mergedBuiltinPlacements;

  // node_modules/antd/es/select/style/dropdown.js
  var genItemStyle = (token2) => {
    const {
      optionHeight,
      optionFontSize,
      optionLineHeight,
      optionPadding
    } = token2;
    return {
      position: "relative",
      display: "block",
      minHeight: optionHeight,
      padding: optionPadding,
      color: token2.colorText,
      fontWeight: "normal",
      fontSize: optionFontSize,
      lineHeight: optionLineHeight,
      boxSizing: "border-box"
    };
  };
  var genSingleStyle = (token2) => {
    const {
      antCls,
      componentCls
    } = token2;
    const selectItemCls = `${componentCls}-item`;
    const slideUpEnterActive = `&${antCls}-slide-up-enter${antCls}-slide-up-enter-active`;
    const slideUpAppearActive = `&${antCls}-slide-up-appear${antCls}-slide-up-appear-active`;
    const slideUpLeaveActive = `&${antCls}-slide-up-leave${antCls}-slide-up-leave-active`;
    const dropdownPlacementCls = `${componentCls}-dropdown-placement-`;
    return [
      {
        [`${componentCls}-dropdown`]: Object.assign(Object.assign({}, resetComponent(token2)), {
          position: "absolute",
          top: -9999,
          zIndex: token2.zIndexPopup,
          boxSizing: "border-box",
          padding: token2.paddingXXS,
          overflow: "hidden",
          fontSize: token2.fontSize,
          // Fix select render lag of long text in chrome
          // https://github.com/ant-design/ant-design/issues/11456
          // https://github.com/ant-design/ant-design/issues/11843
          fontVariant: "initial",
          backgroundColor: token2.colorBgElevated,
          borderRadius: token2.borderRadiusLG,
          outline: "none",
          boxShadow: token2.boxShadowSecondary,
          [`
          ${slideUpEnterActive}${dropdownPlacementCls}bottomLeft,
          ${slideUpAppearActive}${dropdownPlacementCls}bottomLeft
        `]: {
            animationName: slideUpIn
          },
          [`
          ${slideUpEnterActive}${dropdownPlacementCls}topLeft,
          ${slideUpAppearActive}${dropdownPlacementCls}topLeft,
          ${slideUpEnterActive}${dropdownPlacementCls}topRight,
          ${slideUpAppearActive}${dropdownPlacementCls}topRight
        `]: {
            animationName: slideDownIn
          },
          [`${slideUpLeaveActive}${dropdownPlacementCls}bottomLeft`]: {
            animationName: slideUpOut
          },
          [`
          ${slideUpLeaveActive}${dropdownPlacementCls}topLeft,
          ${slideUpLeaveActive}${dropdownPlacementCls}topRight
        `]: {
            animationName: slideDownOut
          },
          "&-hidden": {
            display: "none"
          },
          [`${selectItemCls}`]: Object.assign(Object.assign({}, genItemStyle(token2)), {
            cursor: "pointer",
            transition: `background ${token2.motionDurationSlow} ease`,
            borderRadius: token2.borderRadiusSM,
            // =========== Group ============
            "&-group": {
              color: token2.colorTextDescription,
              fontSize: token2.fontSizeSM,
              cursor: "default"
            },
            // =========== Option ===========
            "&-option": {
              display: "flex",
              "&-content": Object.assign({
                flex: "auto"
              }, textEllipsis),
              "&-state": {
                flex: "none",
                display: "flex",
                alignItems: "center"
              },
              [`&-active:not(${selectItemCls}-option-disabled)`]: {
                backgroundColor: token2.optionActiveBg
              },
              [`&-selected:not(${selectItemCls}-option-disabled)`]: {
                color: token2.optionSelectedColor,
                fontWeight: token2.optionSelectedFontWeight,
                backgroundColor: token2.optionSelectedBg,
                [`${selectItemCls}-option-state`]: {
                  color: token2.colorPrimary
                },
                [`&:has(+ ${selectItemCls}-option-selected:not(${selectItemCls}-option-disabled))`]: {
                  borderEndStartRadius: 0,
                  borderEndEndRadius: 0,
                  [`& + ${selectItemCls}-option-selected:not(${selectItemCls}-option-disabled)`]: {
                    borderStartStartRadius: 0,
                    borderStartEndRadius: 0
                  }
                }
              },
              "&-disabled": {
                [`&${selectItemCls}-option-selected`]: {
                  backgroundColor: token2.colorBgContainerDisabled
                },
                color: token2.colorTextDisabled,
                cursor: "not-allowed"
              },
              "&-grouped": {
                paddingInlineStart: token2.calc(token2.controlPaddingHorizontal).mul(2).equal()
              }
            },
            "&-empty": Object.assign(Object.assign({}, genItemStyle(token2)), {
              color: token2.colorTextDisabled
            })
          }),
          // =========================== RTL ===========================
          "&-rtl": {
            direction: "rtl"
          }
        })
      },
      // Follow code may reuse in other components
      initSlideMotion(token2, "slide-up"),
      initSlideMotion(token2, "slide-down"),
      initMoveMotion(token2, "move-up"),
      initMoveMotion(token2, "move-down")
    ];
  };
  var dropdown_default = genSingleStyle;

  // node_modules/antd/es/select/style/multiple.js
  var FIXED_ITEM_MARGIN = 2;
  var getSelectItemStyle = (token2) => {
    const {
      multipleSelectItemHeight,
      selectHeight,
      lineWidth
    } = token2;
    const selectItemDist = token2.calc(selectHeight).sub(multipleSelectItemHeight).div(2).sub(lineWidth).equal();
    return selectItemDist;
  };
  function genSizeStyle(token2, suffix) {
    const {
      componentCls,
      iconCls
    } = token2;
    const selectOverflowPrefixCls = `${componentCls}-selection-overflow`;
    const selectItemHeight = token2.multipleSelectItemHeight;
    const selectItemDist = getSelectItemStyle(token2);
    const suffixCls = suffix ? `${componentCls}-${suffix}` : "";
    return {
      [`${componentCls}-multiple${suffixCls}`]: {
        fontSize: token2.fontSize,
        /**
         * Do not merge `height` & `line-height` under style with `selection` & `search`, since chrome
         * may update to redesign with its align logic.
         */
        // =========================== Overflow ===========================
        [selectOverflowPrefixCls]: {
          position: "relative",
          display: "flex",
          flex: "auto",
          flexWrap: "wrap",
          maxWidth: "100%",
          "&-item": {
            flex: "none",
            alignSelf: "center",
            maxWidth: "100%",
            display: "inline-flex"
          }
        },
        // ========================= Selector =========================
        [`${componentCls}-selector`]: {
          display: "flex",
          flexWrap: "wrap",
          alignItems: "center",
          height: "100%",
          // Multiple is little different that horizontal is follow the vertical
          paddingInline: token2.calc(FIXED_ITEM_MARGIN).mul(2).equal(),
          paddingBlock: token2.calc(selectItemDist).sub(FIXED_ITEM_MARGIN).equal(),
          borderRadius: token2.borderRadius,
          [`${componentCls}-show-search&`]: {
            cursor: "text"
          },
          [`${componentCls}-disabled&`]: {
            background: token2.multipleSelectorBgDisabled,
            cursor: "not-allowed"
          },
          "&:after": {
            display: "inline-block",
            width: 0,
            margin: `${unit(FIXED_ITEM_MARGIN)} 0`,
            lineHeight: unit(selectItemHeight),
            visibility: "hidden",
            content: '"\\a0"'
          }
        },
        [`
        &${componentCls}-show-arrow ${componentCls}-selector,
        &${componentCls}-allow-clear ${componentCls}-selector
      `]: {
          paddingInlineEnd: token2.calc(token2.fontSizeIcon).add(token2.controlPaddingHorizontal).equal()
        },
        // ======================== Selections ========================
        [`${componentCls}-selection-item`]: {
          display: "flex",
          alignSelf: "center",
          flex: "none",
          boxSizing: "border-box",
          maxWidth: "100%",
          height: selectItemHeight,
          marginTop: FIXED_ITEM_MARGIN,
          marginBottom: FIXED_ITEM_MARGIN,
          lineHeight: unit(token2.calc(selectItemHeight).sub(token2.calc(token2.lineWidth).mul(2)).equal()),
          borderRadius: token2.borderRadiusSM,
          cursor: "default",
          transition: `font-size ${token2.motionDurationSlow}, line-height ${token2.motionDurationSlow}, height ${token2.motionDurationSlow}`,
          marginInlineEnd: token2.calc(FIXED_ITEM_MARGIN).mul(2).equal(),
          paddingInlineStart: token2.paddingXS,
          paddingInlineEnd: token2.calc(token2.paddingXS).div(2).equal(),
          [`${componentCls}-disabled&`]: {
            color: token2.multipleItemColorDisabled,
            borderColor: token2.multipleItemBorderColorDisabled,
            cursor: "not-allowed"
          },
          // It's ok not to do this, but 24px makes bottom narrow in view should adjust
          "&-content": {
            display: "inline-block",
            marginInlineEnd: token2.calc(token2.paddingXS).div(2).equal(),
            overflow: "hidden",
            whiteSpace: "pre",
            // fix whitespace wrapping. custom tags display all whitespace within.
            textOverflow: "ellipsis"
          },
          "&-remove": Object.assign(Object.assign({}, resetIcon()), {
            display: "inline-flex",
            alignItems: "center",
            color: token2.colorIcon,
            fontWeight: "bold",
            fontSize: 10,
            lineHeight: "inherit",
            cursor: "pointer",
            [`> ${iconCls}`]: {
              verticalAlign: "-0.2em"
            },
            "&:hover": {
              color: token2.colorIconHover
            }
          })
        },
        // ========================== Input ==========================
        [`${selectOverflowPrefixCls}-item + ${selectOverflowPrefixCls}-item`]: {
          [`${componentCls}-selection-search`]: {
            marginInlineStart: 0
          }
        },
        // https://github.com/ant-design/ant-design/issues/44754
        [`${selectOverflowPrefixCls}-item-suffix`]: {
          height: "100%"
        },
        [`${componentCls}-selection-search`]: {
          display: "inline-flex",
          position: "relative",
          maxWidth: "100%",
          marginInlineStart: token2.calc(token2.inputPaddingHorizontalBase).sub(selectItemDist).equal(),
          [`
          &-input,
          &-mirror
        `]: {
            height: selectItemHeight,
            fontFamily: token2.fontFamily,
            lineHeight: unit(selectItemHeight),
            transition: `all ${token2.motionDurationSlow}`
          },
          "&-input": {
            width: "100%",
            minWidth: 4.1
            // fix search cursor missing
          },
          "&-mirror": {
            position: "absolute",
            top: 0,
            insetInlineStart: 0,
            insetInlineEnd: "auto",
            zIndex: 999,
            whiteSpace: "pre",
            // fix whitespace wrapping caused width calculation bug
            visibility: "hidden"
          }
        },
        // ======================= Placeholder =======================
        [`${componentCls}-selection-placeholder`]: {
          position: "absolute",
          top: "50%",
          insetInlineStart: token2.inputPaddingHorizontalBase,
          insetInlineEnd: token2.inputPaddingHorizontalBase,
          transform: "translateY(-50%)",
          transition: `all ${token2.motionDurationSlow}`
        }
      }
    };
  }
  var genMultipleStyle = (token2) => {
    const {
      componentCls
    } = token2;
    const smallToken = merge2(token2, {
      selectHeight: token2.controlHeightSM,
      multipleSelectItemHeight: token2.controlHeightXS,
      borderRadius: token2.borderRadiusSM,
      borderRadiusSM: token2.borderRadiusXS
    });
    const largeToken = merge2(token2, {
      fontSize: token2.fontSizeLG,
      selectHeight: token2.controlHeightLG,
      multipleSelectItemHeight: token2.multipleItemHeightLG,
      borderRadius: token2.borderRadiusLG,
      borderRadiusSM: token2.borderRadius
    });
    return [
      genSizeStyle(token2),
      // ======================== Small ========================
      genSizeStyle(smallToken, "sm"),
      // Padding
      {
        [`${componentCls}-multiple${componentCls}-sm`]: {
          [`${componentCls}-selection-placeholder`]: {
            insetInline: token2.calc(token2.controlPaddingHorizontalSM).sub(token2.lineWidth).equal()
          },
          // https://github.com/ant-design/ant-design/issues/29559
          [`${componentCls}-selection-search`]: {
            marginInlineStart: 2
            // Magic Number
          }
        }
      },
      // ======================== Large ========================
      genSizeStyle(largeToken, "lg")
    ];
  };
  var multiple_default = genMultipleStyle;

  // node_modules/antd/es/select/style/single.js
  function genSizeStyle2(token2, suffix) {
    const {
      componentCls,
      inputPaddingHorizontalBase,
      borderRadius
    } = token2;
    const selectHeightWithoutBorder = token2.calc(token2.controlHeight).sub(token2.calc(token2.lineWidth).mul(2)).equal();
    const suffixCls = suffix ? `${componentCls}-${suffix}` : "";
    return {
      [`${componentCls}-single${suffixCls}`]: {
        fontSize: token2.fontSize,
        height: token2.controlHeight,
        // ========================= Selector =========================
        [`${componentCls}-selector`]: Object.assign(Object.assign({}, resetComponent(token2, true)), {
          display: "flex",
          borderRadius,
          [`${componentCls}-selection-search`]: {
            position: "absolute",
            top: 0,
            insetInlineStart: inputPaddingHorizontalBase,
            insetInlineEnd: inputPaddingHorizontalBase,
            bottom: 0,
            "&-input": {
              width: "100%",
              WebkitAppearance: "textfield"
            }
          },
          [`
          ${componentCls}-selection-item,
          ${componentCls}-selection-placeholder
        `]: {
            padding: 0,
            lineHeight: unit(selectHeightWithoutBorder),
            transition: `all ${token2.motionDurationSlow}, visibility 0s`,
            alignSelf: "center"
          },
          [`${componentCls}-selection-placeholder`]: {
            transition: "none",
            pointerEvents: "none"
          },
          // For common baseline align
          [[
            "&:after",
            /* For '' value baseline align */
            `${componentCls}-selection-item:empty:after`,
            /* For undefined value baseline align */
            `${componentCls}-selection-placeholder:empty:after`
          ].join(",")]: {
            display: "inline-block",
            width: 0,
            visibility: "hidden",
            content: '"\\a0"'
          }
        }),
        [`
        &${componentCls}-show-arrow ${componentCls}-selection-item,
        &${componentCls}-show-arrow ${componentCls}-selection-placeholder
      `]: {
          paddingInlineEnd: token2.showArrowPaddingInlineEnd
        },
        // Opacity selection if open
        [`&${componentCls}-open ${componentCls}-selection-item`]: {
          color: token2.colorTextPlaceholder
        },
        // ========================== Input ==========================
        // We only change the style of non-customize input which is only support by `combobox` mode.
        // Not customize
        [`&:not(${componentCls}-customize-input)`]: {
          [`${componentCls}-selector`]: {
            width: "100%",
            height: "100%",
            padding: `0 ${unit(inputPaddingHorizontalBase)}`,
            [`${componentCls}-selection-search-input`]: {
              height: selectHeightWithoutBorder
            },
            "&:after": {
              lineHeight: unit(selectHeightWithoutBorder)
            }
          }
        },
        [`&${componentCls}-customize-input`]: {
          [`${componentCls}-selector`]: {
            "&:after": {
              display: "none"
            },
            [`${componentCls}-selection-search`]: {
              position: "static",
              width: "100%"
            },
            [`${componentCls}-selection-placeholder`]: {
              position: "absolute",
              insetInlineStart: 0,
              insetInlineEnd: 0,
              padding: `0 ${unit(inputPaddingHorizontalBase)}`,
              "&:after": {
                display: "none"
              }
            }
          }
        }
      }
    };
  }
  function genSingleStyle2(token2) {
    const {
      componentCls
    } = token2;
    const inputPaddingHorizontalSM = token2.calc(token2.controlPaddingHorizontalSM).sub(token2.lineWidth).equal();
    return [
      genSizeStyle2(token2),
      // ======================== Small ========================
      // Shared
      genSizeStyle2(merge2(token2, {
        controlHeight: token2.controlHeightSM,
        borderRadius: token2.borderRadiusSM
      }), "sm"),
      // padding
      {
        [`${componentCls}-single${componentCls}-sm`]: {
          [`&:not(${componentCls}-customize-input)`]: {
            [`${componentCls}-selection-search`]: {
              insetInlineStart: inputPaddingHorizontalSM,
              insetInlineEnd: inputPaddingHorizontalSM
            },
            [`${componentCls}-selector`]: {
              padding: `0 ${unit(inputPaddingHorizontalSM)}`
            },
            // With arrow should provides `padding-right` to show the arrow
            [`&${componentCls}-show-arrow ${componentCls}-selection-search`]: {
              insetInlineEnd: token2.calc(inputPaddingHorizontalSM).add(token2.calc(token2.fontSize).mul(1.5)).equal()
            },
            [`
            &${componentCls}-show-arrow ${componentCls}-selection-item,
            &${componentCls}-show-arrow ${componentCls}-selection-placeholder
          `]: {
              paddingInlineEnd: token2.calc(token2.fontSize).mul(1.5).equal()
            }
          }
        }
      },
      // ======================== Large ========================
      // Shared
      genSizeStyle2(merge2(token2, {
        controlHeight: token2.singleItemHeightLG,
        fontSize: token2.fontSizeLG,
        borderRadius: token2.borderRadiusLG
      }), "lg")
    ];
  }

  // node_modules/antd/es/select/style/token.js
  var prepareComponentToken3 = (token2) => {
    const {
      fontSize,
      lineHeight,
      controlHeight,
      controlPaddingHorizontal,
      zIndexPopupBase,
      colorText,
      fontWeightStrong,
      controlItemBgActive,
      controlItemBgHover,
      colorBgContainer,
      colorFillSecondary,
      controlHeightLG,
      controlHeightSM,
      colorBgContainerDisabled,
      colorTextDisabled
    } = token2;
    return {
      zIndexPopup: zIndexPopupBase + 50,
      optionSelectedColor: colorText,
      optionSelectedFontWeight: fontWeightStrong,
      optionSelectedBg: controlItemBgActive,
      optionActiveBg: controlItemBgHover,
      optionPadding: `${(controlHeight - fontSize * lineHeight) / 2}px ${controlPaddingHorizontal}px`,
      optionFontSize: fontSize,
      optionLineHeight: lineHeight,
      optionHeight: controlHeight,
      selectorBg: colorBgContainer,
      clearBg: colorBgContainer,
      singleItemHeightLG: controlHeightLG,
      multipleItemBg: colorFillSecondary,
      multipleItemBorderColor: "transparent",
      multipleItemHeight: controlHeightSM,
      multipleItemHeightLG: controlHeight,
      multipleSelectorBgDisabled: colorBgContainerDisabled,
      multipleItemColorDisabled: colorTextDisabled,
      multipleItemBorderColorDisabled: "transparent",
      showArrowPaddingInlineEnd: Math.ceil(token2.fontSize * 1.25)
    };
  };

  // node_modules/antd/es/select/style/variants.js
  var genBaseOutlinedStyle = (token2, options) => {
    const {
      componentCls,
      antCls,
      controlOutlineWidth
    } = token2;
    return {
      [`&:not(${componentCls}-customize-input) ${componentCls}-selector`]: {
        border: `${unit(token2.lineWidth)} ${token2.lineType} ${options.borderColor}`,
        background: token2.selectorBg
      },
      [`&:not(${componentCls}-disabled):not(${componentCls}-customize-input):not(${antCls}-pagination-size-changer)`]: {
        [`&:hover ${componentCls}-selector`]: {
          borderColor: options.hoverBorderHover
        },
        [`${componentCls}-focused& ${componentCls}-selector`]: {
          borderColor: options.activeBorderColor,
          boxShadow: `0 0 0 ${unit(controlOutlineWidth)} ${options.activeShadowColor}`,
          outline: 0
        }
      }
    };
  };
  var genOutlinedStatusStyle = (token2, options) => ({
    [`&${token2.componentCls}-status-${options.status}`]: Object.assign({}, genBaseOutlinedStyle(token2, options))
  });
  var genOutlinedStyle = (token2) => ({
    "&-outlined": Object.assign(Object.assign(Object.assign(Object.assign({}, genBaseOutlinedStyle(token2, {
      borderColor: token2.colorBorder,
      hoverBorderHover: token2.colorPrimaryHover,
      activeBorderColor: token2.colorPrimary,
      activeShadowColor: token2.controlOutline
    })), genOutlinedStatusStyle(token2, {
      status: "error",
      borderColor: token2.colorError,
      hoverBorderHover: token2.colorErrorHover,
      activeBorderColor: token2.colorError,
      activeShadowColor: token2.colorErrorOutline
    })), genOutlinedStatusStyle(token2, {
      status: "warning",
      borderColor: token2.colorWarning,
      hoverBorderHover: token2.colorWarningHover,
      activeBorderColor: token2.colorWarning,
      activeShadowColor: token2.colorWarningOutline
    })), {
      [`&${token2.componentCls}-disabled`]: {
        [`&:not(${token2.componentCls}-customize-input) ${token2.componentCls}-selector`]: {
          background: token2.colorBgContainerDisabled,
          color: token2.colorTextDisabled
        }
      },
      [`&${token2.componentCls}-multiple ${token2.componentCls}-selection-item`]: {
        background: token2.multipleItemBg,
        border: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.multipleItemBorderColor}`
      }
    })
  });
  var genBaseFilledStyle = (token2, options) => {
    const {
      componentCls,
      antCls
    } = token2;
    return {
      [`&:not(${componentCls}-customize-input) ${componentCls}-selector`]: {
        background: options.bg,
        border: `${unit(token2.lineWidth)} ${token2.lineType} transparent`,
        color: options.color
      },
      [`&:not(${componentCls}-disabled):not(${componentCls}-customize-input):not(${antCls}-pagination-size-changer)`]: {
        [`&:hover ${componentCls}-selector`]: {
          background: options.hoverBg
        },
        [`${componentCls}-focused& ${componentCls}-selector`]: {
          background: token2.selectorBg,
          borderColor: options.activeBorderColor,
          outline: 0
        }
      }
    };
  };
  var genFilledStatusStyle = (token2, options) => ({
    [`&${token2.componentCls}-status-${options.status}`]: Object.assign({}, genBaseFilledStyle(token2, options))
  });
  var genFilledStyle = (token2) => ({
    "&-filled": Object.assign(Object.assign(Object.assign(Object.assign({}, genBaseFilledStyle(token2, {
      bg: token2.colorFillTertiary,
      hoverBg: token2.colorFillSecondary,
      activeBorderColor: token2.colorPrimary,
      color: token2.colorText
    })), genFilledStatusStyle(token2, {
      status: "error",
      bg: token2.colorErrorBg,
      hoverBg: token2.colorErrorBgHover,
      activeBorderColor: token2.colorError,
      color: token2.colorError
    })), genFilledStatusStyle(token2, {
      status: "warning",
      bg: token2.colorWarningBg,
      hoverBg: token2.colorWarningBgHover,
      activeBorderColor: token2.colorWarning,
      color: token2.colorWarning
    })), {
      [`&${token2.componentCls}-disabled`]: {
        [`&:not(${token2.componentCls}-customize-input) ${token2.componentCls}-selector`]: {
          borderColor: token2.colorBorder,
          background: token2.colorBgContainerDisabled,
          color: token2.colorTextDisabled
        }
      },
      [`&${token2.componentCls}-multiple ${token2.componentCls}-selection-item`]: {
        background: token2.colorBgContainer,
        border: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorSplit}`
      }
    })
  });
  var genBorderlessStyle = (token2) => ({
    "&-borderless": {
      [`${token2.componentCls}-selector`]: {
        background: "transparent",
        borderColor: "transparent"
      },
      [`&${token2.componentCls}-disabled`]: {
        [`&:not(${token2.componentCls}-customize-input) ${token2.componentCls}-selector`]: {
          color: token2.colorTextDisabled
        }
      },
      [`&${token2.componentCls}-multiple ${token2.componentCls}-selection-item`]: {
        background: token2.multipleItemBg,
        border: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.multipleItemBorderColor}`
      }
    }
  });
  var genVariantsStyle = (token2) => ({
    [token2.componentCls]: Object.assign(Object.assign(Object.assign({}, genOutlinedStyle(token2)), genFilledStyle(token2)), genBorderlessStyle(token2))
  });
  var variants_default = genVariantsStyle;

  // node_modules/antd/es/select/style/index.js
  var genSelectorStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      position: "relative",
      transition: `all ${token2.motionDurationMid} ${token2.motionEaseInOut}`,
      input: {
        cursor: "pointer"
      },
      [`${componentCls}-show-search&`]: {
        cursor: "text",
        input: {
          cursor: "auto",
          color: "inherit",
          height: "100%"
        }
      },
      [`${componentCls}-disabled&`]: {
        cursor: "not-allowed",
        input: {
          cursor: "not-allowed"
        }
      }
    };
  };
  var getSearchInputWithoutBorderStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-selection-search-input`]: {
        margin: 0,
        padding: 0,
        background: "transparent",
        border: "none",
        outline: "none",
        appearance: "none",
        fontFamily: "inherit",
        "&::-webkit-search-cancel-button": {
          display: "none",
          "-webkit-appearance": "none"
        }
      }
    };
  };
  var genBaseStyle = (token2) => {
    const {
      antCls,
      componentCls,
      inputPaddingHorizontalBase,
      iconCls
    } = token2;
    return {
      [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "relative",
        display: "inline-block",
        cursor: "pointer",
        [`&:not(${componentCls}-customize-input) ${componentCls}-selector`]: Object.assign(Object.assign({}, genSelectorStyle(token2)), getSearchInputWithoutBorderStyle(token2)),
        // ======================== Selection ========================
        [`${componentCls}-selection-item`]: Object.assign(Object.assign({
          flex: 1,
          fontWeight: "normal",
          position: "relative",
          userSelect: "none"
        }, textEllipsis), {
          // https://github.com/ant-design/ant-design/issues/40421
          [`> ${antCls}-typography`]: {
            display: "inline"
          }
        }),
        // ======================= Placeholder =======================
        [`${componentCls}-selection-placeholder`]: Object.assign(Object.assign({}, textEllipsis), {
          flex: 1,
          color: token2.colorTextPlaceholder,
          pointerEvents: "none"
        }),
        // ========================== Arrow ==========================
        [`${componentCls}-arrow`]: Object.assign(Object.assign({}, resetIcon()), {
          position: "absolute",
          top: "50%",
          insetInlineStart: "auto",
          insetInlineEnd: inputPaddingHorizontalBase,
          height: token2.fontSizeIcon,
          marginTop: token2.calc(token2.fontSizeIcon).mul(-1).div(2).equal(),
          color: token2.colorTextQuaternary,
          fontSize: token2.fontSizeIcon,
          lineHeight: 1,
          textAlign: "center",
          pointerEvents: "none",
          display: "flex",
          alignItems: "center",
          transition: `opacity ${token2.motionDurationSlow} ease`,
          [iconCls]: {
            verticalAlign: "top",
            transition: `transform ${token2.motionDurationSlow}`,
            "> svg": {
              verticalAlign: "top"
            },
            [`&:not(${componentCls}-suffix)`]: {
              pointerEvents: "auto"
            }
          },
          [`${componentCls}-disabled &`]: {
            cursor: "not-allowed"
          },
          "> *:not(:last-child)": {
            marginInlineEnd: 8
            // FIXME: magic
          }
        }),
        // ========================== Clear ==========================
        [`${componentCls}-clear`]: {
          position: "absolute",
          top: "50%",
          insetInlineStart: "auto",
          insetInlineEnd: inputPaddingHorizontalBase,
          zIndex: 1,
          display: "inline-block",
          width: token2.fontSizeIcon,
          height: token2.fontSizeIcon,
          marginTop: token2.calc(token2.fontSizeIcon).mul(-1).div(2).equal(),
          color: token2.colorTextQuaternary,
          fontSize: token2.fontSizeIcon,
          fontStyle: "normal",
          lineHeight: 1,
          textAlign: "center",
          textTransform: "none",
          cursor: "pointer",
          opacity: 0,
          transition: `color ${token2.motionDurationMid} ease, opacity ${token2.motionDurationSlow} ease`,
          textRendering: "auto",
          "&:before": {
            display: "block"
          },
          "&:hover": {
            color: token2.colorTextTertiary
          }
        },
        "&:hover": {
          [`${componentCls}-clear`]: {
            opacity: 1
          },
          // Should use the following selector, but since `:has` has poor compatibility,
          // we use `:not(:last-child)` instead, which may cause some problems in some cases.
          // [`${componentCls}-arrow:has(+ ${componentCls}-clear)`]: {
          [`${componentCls}-arrow:not(:last-child)`]: {
            opacity: 0
          }
        }
      }),
      // ========================= Feedback ==========================
      [`${componentCls}-has-feedback`]: {
        [`${componentCls}-clear`]: {
          insetInlineEnd: token2.calc(inputPaddingHorizontalBase).add(token2.fontSize).add(token2.paddingXS).equal()
        }
      }
    };
  };
  var genSelectStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return [
      {
        [componentCls]: {
          // ==================== In Form ====================
          [`&${componentCls}-in-form-item`]: {
            width: "100%"
          }
        }
      },
      // =====================================================
      // ==                       LTR                       ==
      // =====================================================
      // Base
      genBaseStyle(token2),
      // Single
      genSingleStyle2(token2),
      // Multiple
      multiple_default(token2),
      // Dropdown
      dropdown_default(token2),
      // =====================================================
      // ==                       RTL                       ==
      // =====================================================
      {
        [`${componentCls}-rtl`]: {
          direction: "rtl"
        }
      },
      // =====================================================
      // ==             Space Compact                       ==
      // =====================================================
      genCompactItemStyle(token2, {
        borderElCls: `${componentCls}-selector`,
        focusElCls: `${componentCls}-focused`
      })
    ];
  };
  var style_default6 = genStyleHooks("Select", (token2, _ref) => {
    let {
      rootPrefixCls
    } = _ref;
    const selectToken = merge2(token2, {
      rootPrefixCls,
      inputPaddingHorizontalBase: token2.calc(token2.paddingSM).sub(1).equal(),
      multipleSelectItemHeight: token2.multipleItemHeight,
      selectHeight: token2.controlHeight
    });
    return [genSelectStyle(selectToken), variants_default(selectToken)];
  }, prepareComponentToken3, {
    unitless: {
      optionLineHeight: true,
      optionSelectedFontWeight: true
    }
  });

  // node_modules/antd/es/select/useIcons.js
  var React153 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/CheckOutlined.js
  var React150 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CheckOutlined.js
  var CheckOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" } }] }, "name": "check", "theme": "outlined" };
  var CheckOutlined_default = CheckOutlined;

  // node_modules/@ant-design/icons/es/icons/CheckOutlined.js
  var CheckOutlined2 = function CheckOutlined3(props, ref) {
    return /* @__PURE__ */ React150.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CheckOutlined_default
    }));
  };
  if (true) {
    CheckOutlined2.displayName = "CheckOutlined";
  }
  var CheckOutlined_default2 = /* @__PURE__ */ React150.forwardRef(CheckOutlined2);

  // node_modules/@ant-design/icons/es/icons/DownOutlined.js
  var React151 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DownOutlined.js
  var DownOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z" } }] }, "name": "down", "theme": "outlined" };
  var DownOutlined_default = DownOutlined;

  // node_modules/@ant-design/icons/es/icons/DownOutlined.js
  var DownOutlined2 = function DownOutlined3(props, ref) {
    return /* @__PURE__ */ React151.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: DownOutlined_default
    }));
  };
  if (true) {
    DownOutlined2.displayName = "DownOutlined";
  }
  var DownOutlined_default2 = /* @__PURE__ */ React151.forwardRef(DownOutlined2);

  // node_modules/@ant-design/icons/es/icons/SearchOutlined.js
  var React152 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js
  var SearchOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" } }] }, "name": "search", "theme": "outlined" };
  var SearchOutlined_default = SearchOutlined;

  // node_modules/@ant-design/icons/es/icons/SearchOutlined.js
  var SearchOutlined2 = function SearchOutlined3(props, ref) {
    return /* @__PURE__ */ React152.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: SearchOutlined_default
    }));
  };
  if (true) {
    SearchOutlined2.displayName = "SearchOutlined";
  }
  var SearchOutlined_default2 = /* @__PURE__ */ React152.forwardRef(SearchOutlined2);

  // node_modules/antd/es/select/useIcons.js
  function useIcons(_ref) {
    let {
      suffixIcon,
      clearIcon,
      menuItemSelectedIcon,
      removeIcon,
      loading,
      multiple,
      hasFeedback,
      prefixCls,
      showSuffixIcon,
      feedbackIcon,
      showArrow,
      componentName
    } = _ref;
    if (true) {
      const warning8 = devUseWarning(componentName);
      warning8.deprecated(!clearIcon, "clearIcon", "allowClear={{ clearIcon: React.ReactNode }}");
    }
    const mergedClearIcon = clearIcon !== null && clearIcon !== void 0 ? clearIcon : /* @__PURE__ */ React153.createElement(CloseCircleFilled_default2, null);
    const getSuffixIconNode = (arrowIcon) => {
      if (suffixIcon === null && !hasFeedback && !showArrow) {
        return null;
      }
      return /* @__PURE__ */ React153.createElement(React153.Fragment, null, showSuffixIcon !== false && arrowIcon, hasFeedback && feedbackIcon);
    };
    let mergedSuffixIcon = null;
    if (suffixIcon !== void 0) {
      mergedSuffixIcon = getSuffixIconNode(suffixIcon);
    } else if (loading) {
      mergedSuffixIcon = getSuffixIconNode(/* @__PURE__ */ React153.createElement(LoadingOutlined_default2, {
        spin: true
      }));
    } else {
      const iconCls = `${prefixCls}-suffix`;
      mergedSuffixIcon = (_ref2) => {
        let {
          open,
          showSearch
        } = _ref2;
        if (open && showSearch) {
          return getSuffixIconNode(/* @__PURE__ */ React153.createElement(SearchOutlined_default2, {
            className: iconCls
          }));
        }
        return getSuffixIconNode(/* @__PURE__ */ React153.createElement(DownOutlined_default2, {
          className: iconCls
        }));
      };
    }
    let mergedItemIcon = null;
    if (menuItemSelectedIcon !== void 0) {
      mergedItemIcon = menuItemSelectedIcon;
    } else if (multiple) {
      mergedItemIcon = /* @__PURE__ */ React153.createElement(CheckOutlined_default2, null);
    } else {
      mergedItemIcon = null;
    }
    let mergedRemoveIcon = null;
    if (removeIcon !== void 0) {
      mergedRemoveIcon = removeIcon;
    } else {
      mergedRemoveIcon = /* @__PURE__ */ React153.createElement(CloseOutlined_default2, null);
    }
    return {
      clearIcon: mergedClearIcon,
      suffixIcon: mergedSuffixIcon,
      itemIcon: mergedItemIcon,
      removeIcon: mergedRemoveIcon
    };
  }

  // node_modules/antd/es/select/useShowArrow.js
  function useShowArrow(suffixIcon, showArrow) {
    return showArrow !== void 0 ? showArrow : suffixIcon !== null;
  }

  // node_modules/antd/es/select/index.js
  var __rest11 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var SECRET_COMBOBOX_MODE_DO_NOT_USE = "SECRET_COMBOBOX_MODE_DO_NOT_USE";
  var InternalSelect = (props, ref) => {
    var _a;
    const {
      prefixCls: customizePrefixCls,
      bordered,
      className,
      rootClassName,
      getPopupContainer,
      popupClassName,
      dropdownClassName,
      listHeight = 256,
      placement,
      listItemHeight: customListItemHeight,
      size: customizeSize,
      disabled: customDisabled,
      notFoundContent,
      status: customStatus,
      builtinPlacements,
      dropdownMatchSelectWidth,
      popupMatchSelectWidth,
      direction: propDirection,
      style: style2,
      allowClear,
      variant: customizeVariant,
      dropdownStyle,
      transitionName,
      tagRender,
      maxCount
    } = props, rest = __rest11(props, ["prefixCls", "bordered", "className", "rootClassName", "getPopupContainer", "popupClassName", "dropdownClassName", "listHeight", "placement", "listItemHeight", "size", "disabled", "notFoundContent", "status", "builtinPlacements", "dropdownMatchSelectWidth", "popupMatchSelectWidth", "direction", "style", "allowClear", "variant", "dropdownStyle", "transitionName", "tagRender", "maxCount"]);
    const {
      getPopupContainer: getContextPopupContainer,
      getPrefixCls,
      renderEmpty,
      direction: contextDirection,
      virtual,
      popupMatchSelectWidth: contextPopupMatchSelectWidth,
      popupOverflow,
      select
    } = React154.useContext(ConfigContext);
    const [, token2] = useToken();
    const listItemHeight = customListItemHeight !== null && customListItemHeight !== void 0 ? customListItemHeight : token2 === null || token2 === void 0 ? void 0 : token2.controlHeight;
    const prefixCls = getPrefixCls("select", customizePrefixCls);
    const rootPrefixCls = getPrefixCls();
    const direction = propDirection !== null && propDirection !== void 0 ? propDirection : contextDirection;
    const {
      compactSize,
      compactItemClassnames
    } = useCompactItemContext(prefixCls, direction);
    const [variant, enableVariantCls] = useVariants_default(customizeVariant, bordered);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default6(prefixCls, rootCls);
    const mode = React154.useMemo(() => {
      const {
        mode: m
      } = props;
      if (m === "combobox") {
        return void 0;
      }
      if (m === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
        return "combobox";
      }
      return m;
    }, [props.mode]);
    const isMultiple3 = mode === "multiple" || mode === "tags";
    const showSuffixIcon = useShowArrow(props.suffixIcon, props.showArrow);
    const mergedPopupMatchSelectWidth = (_a = popupMatchSelectWidth !== null && popupMatchSelectWidth !== void 0 ? popupMatchSelectWidth : dropdownMatchSelectWidth) !== null && _a !== void 0 ? _a : contextPopupMatchSelectWidth;
    const {
      status: contextStatus,
      hasFeedback,
      isFormItemInput,
      feedbackIcon
    } = React154.useContext(FormItemInputContext);
    const mergedStatus = getMergedStatus(contextStatus, customStatus);
    let mergedNotFound;
    if (notFoundContent !== void 0) {
      mergedNotFound = notFoundContent;
    } else if (mode === "combobox") {
      mergedNotFound = null;
    } else {
      mergedNotFound = (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty("Select")) || /* @__PURE__ */ React154.createElement(defaultRenderEmpty_default, {
        componentName: "Select"
      });
    }
    const {
      suffixIcon,
      itemIcon,
      removeIcon,
      clearIcon
    } = useIcons(Object.assign(Object.assign({}, rest), {
      multiple: isMultiple3,
      hasFeedback,
      feedbackIcon,
      showSuffixIcon,
      prefixCls,
      componentName: "Select"
    }));
    const mergedAllowClear = allowClear === true ? {
      clearIcon
    } : allowClear;
    const selectProps = omit(rest, ["suffixIcon", "itemIcon"]);
    const mergedPopupClassName = (0, import_classnames34.default)(popupClassName || dropdownClassName, {
      [`${prefixCls}-dropdown-${direction}`]: direction === "rtl"
    }, rootClassName, cssVarCls, rootCls, hashId);
    const mergedSize = useSize_default((ctx) => {
      var _a2;
      return (_a2 = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a2 !== void 0 ? _a2 : ctx;
    });
    const disabled = React154.useContext(DisabledContext_default);
    const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    const mergedClassName = (0, import_classnames34.default)({
      [`${prefixCls}-lg`]: mergedSize === "large",
      [`${prefixCls}-sm`]: mergedSize === "small",
      [`${prefixCls}-rtl`]: direction === "rtl",
      [`${prefixCls}-${variant}`]: enableVariantCls,
      [`${prefixCls}-in-form-item`]: isFormItemInput
    }, getStatusClassNames(prefixCls, mergedStatus, hasFeedback), compactItemClassnames, select === null || select === void 0 ? void 0 : select.className, className, rootClassName, cssVarCls, rootCls, hashId);
    const memoPlacement = React154.useMemo(() => {
      if (placement !== void 0) {
        return placement;
      }
      return direction === "rtl" ? "bottomRight" : "bottomLeft";
    }, [placement, direction]);
    if (true) {
      const warning8 = devUseWarning("Select");
      warning8.deprecated(!dropdownClassName, "dropdownClassName", "popupClassName");
      warning8.deprecated(dropdownMatchSelectWidth === void 0, "dropdownMatchSelectWidth", "popupMatchSelectWidth");
      true ? warning8(!("showArrow" in props), "deprecated", "`showArrow` is deprecated which will be removed in next major version. It will be a default behavior, you can hide it by setting `suffixIcon` to null.") : void 0;
      warning8.deprecated(!("bordered" in props), "bordered", "variant");
      true ? warning8(!(typeof maxCount !== "undefined" && !isMultiple3), "usage", "`maxCount` only works with mode `multiple` or `tags`") : void 0;
    }
    const [zIndex] = useZIndex("SelectLike", dropdownStyle === null || dropdownStyle === void 0 ? void 0 : dropdownStyle.zIndex);
    return wrapCSSVar(/* @__PURE__ */ React154.createElement(es_default9, Object.assign({
      ref,
      virtual,
      showSearch: select === null || select === void 0 ? void 0 : select.showSearch
    }, selectProps, {
      style: Object.assign(Object.assign({}, select === null || select === void 0 ? void 0 : select.style), style2),
      dropdownMatchSelectWidth: mergedPopupMatchSelectWidth,
      transitionName: getTransitionName2(rootPrefixCls, "slide-up", transitionName),
      builtinPlacements: mergedBuiltinPlacements_default(builtinPlacements, popupOverflow),
      listHeight,
      listItemHeight,
      mode,
      prefixCls,
      placement: memoPlacement,
      direction,
      suffixIcon,
      menuItemSelectedIcon: itemIcon,
      removeIcon,
      allowClear: mergedAllowClear,
      notFoundContent: mergedNotFound,
      className: mergedClassName,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      dropdownClassName: mergedPopupClassName,
      disabled: mergedDisabled,
      dropdownStyle: Object.assign(Object.assign({}, dropdownStyle), {
        zIndex
      }),
      maxCount: isMultiple3 ? maxCount : void 0,
      tagRender: isMultiple3 ? tagRender : void 0
    })));
  };
  if (true) {
    InternalSelect.displayName = "Select";
  }
  var Select2 = /* @__PURE__ */ React154.forwardRef(InternalSelect);
  var PurePanel = PurePanel_default(Select2);
  Select2.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
  Select2.Option = Option_default;
  Select2.OptGroup = OptGroup_default;
  Select2._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;
  if (true) {
    Select2.displayName = "Select";
  }
  var select_default = Select2;

  // node_modules/antd/es/_util/responsiveObserver.js
  var import_react53 = __toESM(require_react());
  var responsiveArray = ["xxl", "xl", "lg", "md", "sm", "xs"];
  var getResponsiveMap = (token2) => ({
    xs: `(max-width: ${token2.screenXSMax}px)`,
    sm: `(min-width: ${token2.screenSM}px)`,
    md: `(min-width: ${token2.screenMD}px)`,
    lg: `(min-width: ${token2.screenLG}px)`,
    xl: `(min-width: ${token2.screenXL}px)`,
    xxl: `(min-width: ${token2.screenXXL}px)`
  });
  var validateBreakpoints = (token2) => {
    const indexableToken = token2;
    const revBreakpoints = [].concat(responsiveArray).reverse();
    revBreakpoints.forEach((breakpoint, i) => {
      const breakpointUpper = breakpoint.toUpperCase();
      const screenMin = `screen${breakpointUpper}Min`;
      const screen = `screen${breakpointUpper}`;
      if (!(indexableToken[screenMin] <= indexableToken[screen])) {
        throw new Error(`${screenMin}<=${screen} fails : !(${indexableToken[screenMin]}<=${indexableToken[screen]})`);
      }
      if (i < revBreakpoints.length - 1) {
        const screenMax = `screen${breakpointUpper}Max`;
        if (!(indexableToken[screen] <= indexableToken[screenMax])) {
          throw new Error(`${screen}<=${screenMax} fails : !(${indexableToken[screen]}<=${indexableToken[screenMax]})`);
        }
        const nextBreakpointUpperMin = revBreakpoints[i + 1].toUpperCase();
        const nextScreenMin = `screen${nextBreakpointUpperMin}Min`;
        if (!(indexableToken[screenMax] <= indexableToken[nextScreenMin])) {
          throw new Error(`${screenMax}<=${nextScreenMin} fails : !(${indexableToken[screenMax]}<=${indexableToken[nextScreenMin]})`);
        }
      }
    });
    return token2;
  };
  function useResponsiveObserver() {
    const [, token2] = useToken();
    const responsiveMap = getResponsiveMap(validateBreakpoints(token2));
    return import_react53.default.useMemo(() => {
      const subscribers = /* @__PURE__ */ new Map();
      let subUid = -1;
      let screens = {};
      return {
        matchHandlers: {},
        dispatch(pointMap) {
          screens = pointMap;
          subscribers.forEach((func) => func(screens));
          return subscribers.size >= 1;
        },
        subscribe(func) {
          if (!subscribers.size)
            this.register();
          subUid += 1;
          subscribers.set(subUid, func);
          func(screens);
          return subUid;
        },
        unsubscribe(paramToken) {
          subscribers.delete(paramToken);
          if (!subscribers.size)
            this.unregister();
        },
        unregister() {
          Object.keys(responsiveMap).forEach((screen) => {
            const matchMediaQuery = responsiveMap[screen];
            const handler = this.matchHandlers[matchMediaQuery];
            handler === null || handler === void 0 ? void 0 : handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);
          });
          subscribers.clear();
        },
        register() {
          Object.keys(responsiveMap).forEach((screen) => {
            const matchMediaQuery = responsiveMap[screen];
            const listener2 = (_ref) => {
              let {
                matches: matches2
              } = _ref;
              this.dispatch(Object.assign(Object.assign({}, screens), {
                [screen]: matches2
              }));
            };
            const mql = window.matchMedia(matchMediaQuery);
            mql.addListener(listener2);
            this.matchHandlers[matchMediaQuery] = {
              mql,
              listener: listener2
            };
            listener2(mql);
          });
        },
        responsiveMap
      };
    }, [token2]);
  }

  // node_modules/antd/es/grid/hooks/useBreakpoint.js
  var import_react54 = __toESM(require_react());

  // node_modules/antd/es/_util/hooks/useForceUpdate.js
  var React156 = __toESM(require_react());
  function useForceUpdate() {
    const [, forceUpdate] = React156.useReducer((x) => x + 1, 0);
    return forceUpdate;
  }

  // node_modules/antd/es/grid/hooks/useBreakpoint.js
  function useBreakpoint() {
    let refreshOnChange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    const screensRef = (0, import_react54.useRef)({});
    const forceUpdate = useForceUpdate();
    const responsiveObserver = useResponsiveObserver();
    useLayoutEffect_default(() => {
      const token2 = responsiveObserver.subscribe((supportScreens) => {
        screensRef.current = supportScreens;
        if (refreshOnChange) {
          forceUpdate();
        }
      });
      return () => responsiveObserver.unsubscribe(token2);
    }, []);
    return screensRef.current;
  }
  var useBreakpoint_default = useBreakpoint;

  // node_modules/antd/es/tooltip/index.js
  var React160 = __toESM(require_react());
  var import_classnames38 = __toESM(require_classnames());

  // node_modules/rc-tooltip/es/Popup.js
  var import_classnames35 = __toESM(require_classnames());
  var React157 = __toESM(require_react());
  function Popup2(props) {
    var children = props.children, prefixCls = props.prefixCls, id = props.id, overlayInnerStyle = props.overlayInnerStyle, className = props.className, style2 = props.style;
    return /* @__PURE__ */ React157.createElement("div", {
      className: (0, import_classnames35.default)("".concat(prefixCls, "-content"), className),
      style: style2
    }, /* @__PURE__ */ React157.createElement("div", {
      className: "".concat(prefixCls, "-inner"),
      id,
      role: "tooltip",
      style: overlayInnerStyle
    }, typeof children === "function" ? children() : children));
  }

  // node_modules/rc-tooltip/es/Tooltip.js
  var React158 = __toESM(require_react());
  var import_react55 = __toESM(require_react());

  // node_modules/rc-tooltip/es/placements.js
  var autoAdjustOverflowTopBottom = {
    shiftX: 64,
    adjustY: 1
  };
  var autoAdjustOverflowLeftRight = {
    adjustX: 1,
    shiftY: true
  };
  var targetOffset = [0, 0];
  var placements = {
    left: {
      points: ["cr", "cl"],
      overflow: autoAdjustOverflowLeftRight,
      offset: [-4, 0],
      targetOffset
    },
    right: {
      points: ["cl", "cr"],
      overflow: autoAdjustOverflowLeftRight,
      offset: [4, 0],
      targetOffset
    },
    top: {
      points: ["bc", "tc"],
      overflow: autoAdjustOverflowTopBottom,
      offset: [0, -4],
      targetOffset
    },
    bottom: {
      points: ["tc", "bc"],
      overflow: autoAdjustOverflowTopBottom,
      offset: [0, 4],
      targetOffset
    },
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflowTopBottom,
      offset: [0, -4],
      targetOffset
    },
    leftTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflowLeftRight,
      offset: [-4, 0],
      targetOffset
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflowTopBottom,
      offset: [0, -4],
      targetOffset
    },
    rightTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflowLeftRight,
      offset: [4, 0],
      targetOffset
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflowTopBottom,
      offset: [0, 4],
      targetOffset
    },
    rightBottom: {
      points: ["bl", "br"],
      overflow: autoAdjustOverflowLeftRight,
      offset: [4, 0],
      targetOffset
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflowTopBottom,
      offset: [0, 4],
      targetOffset
    },
    leftBottom: {
      points: ["br", "bl"],
      overflow: autoAdjustOverflowLeftRight,
      offset: [-4, 0],
      targetOffset
    }
  };

  // node_modules/rc-tooltip/es/Tooltip.js
  var _excluded18 = ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle", "arrowContent", "overlay", "id", "showArrow"];
  var Tooltip = function Tooltip2(props, ref) {
    var overlayClassName = props.overlayClassName, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, overlayStyle = props.overlayStyle, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-tooltip" : _props$prefixCls, children = props.children, onVisibleChange = props.onVisibleChange, afterVisibleChange = props.afterVisibleChange, transitionName = props.transitionName, animation = props.animation, motion2 = props.motion, _props$placement = props.placement, placement = _props$placement === void 0 ? "right" : _props$placement, _props$align = props.align, align = _props$align === void 0 ? {} : _props$align, _props$destroyTooltip = props.destroyTooltipOnHide, destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip, defaultVisible = props.defaultVisible, getTooltipContainer = props.getTooltipContainer, overlayInnerStyle = props.overlayInnerStyle, arrowContent = props.arrowContent, overlay = props.overlay, id = props.id, _props$showArrow = props.showArrow, showArrow = _props$showArrow === void 0 ? true : _props$showArrow, restProps = _objectWithoutProperties(props, _excluded18);
    var triggerRef = (0, import_react55.useRef)(null);
    (0, import_react55.useImperativeHandle)(ref, function() {
      return triggerRef.current;
    });
    var extraProps = _objectSpread2({}, restProps);
    if ("visible" in props) {
      extraProps.popupVisible = props.visible;
    }
    var getPopupElement = function getPopupElement2() {
      return /* @__PURE__ */ React158.createElement(Popup2, {
        key: "content",
        prefixCls,
        id,
        overlayInnerStyle
      }, overlay);
    };
    return /* @__PURE__ */ React158.createElement(es_default7, _extends({
      popupClassName: overlayClassName,
      prefixCls,
      popup: getPopupElement,
      action: trigger,
      builtinPlacements: placements,
      popupPlacement: placement,
      ref: triggerRef,
      popupAlign: align,
      getPopupContainer: getTooltipContainer,
      onPopupVisibleChange: onVisibleChange,
      afterPopupVisibleChange: afterVisibleChange,
      popupTransitionName: transitionName,
      popupAnimation: animation,
      popupMotion: motion2,
      defaultPopupVisible: defaultVisible,
      autoDestroy: destroyTooltipOnHide,
      mouseLeaveDelay,
      popupStyle: overlayStyle,
      mouseEnterDelay,
      arrow: showArrow
    }, extraProps), children);
  };
  var Tooltip_default = /* @__PURE__ */ (0, import_react55.forwardRef)(Tooltip);

  // node_modules/rc-tooltip/es/index.js
  var es_default10 = Tooltip_default;

  // node_modules/antd/es/style/roundedArrow.js
  function getArrowToken(token2) {
    const {
      sizePopupArrow,
      borderRadiusXS,
      borderRadiusOuter
    } = token2;
    const unitWidth = sizePopupArrow / 2;
    const ax = 0;
    const ay = unitWidth;
    const bx = borderRadiusOuter * 1 / Math.sqrt(2);
    const by = unitWidth - borderRadiusOuter * (1 - 1 / Math.sqrt(2));
    const cx = unitWidth - borderRadiusXS * (1 / Math.sqrt(2));
    const cy = borderRadiusOuter * (Math.sqrt(2) - 1) + borderRadiusXS * (1 / Math.sqrt(2));
    const dx = 2 * unitWidth - cx;
    const dy = cy;
    const ex = 2 * unitWidth - bx;
    const ey = by;
    const fx = 2 * unitWidth - ax;
    const fy = ay;
    const shadowWidth = unitWidth * Math.sqrt(2) + borderRadiusOuter * (Math.sqrt(2) - 2);
    const polygonOffset = borderRadiusOuter * (Math.sqrt(2) - 1);
    const arrowPolygon = `polygon(${polygonOffset}px 100%, 50% ${polygonOffset}px, ${2 * unitWidth - polygonOffset}px 100%, ${polygonOffset}px 100%)`;
    const arrowPath = `path('M ${ax} ${ay} A ${borderRadiusOuter} ${borderRadiusOuter} 0 0 0 ${bx} ${by} L ${cx} ${cy} A ${borderRadiusXS} ${borderRadiusXS} 0 0 1 ${dx} ${dy} L ${ex} ${ey} A ${borderRadiusOuter} ${borderRadiusOuter} 0 0 0 ${fx} ${fy} Z')`;
    return {
      arrowShadowWidth: shadowWidth,
      arrowPath,
      arrowPolygon
    };
  }
  var genRoundedArrow = (token2, bgColor, boxShadow) => {
    const {
      sizePopupArrow,
      arrowPolygon,
      arrowPath,
      arrowShadowWidth,
      borderRadiusXS,
      calc
    } = token2;
    return {
      pointerEvents: "none",
      width: sizePopupArrow,
      height: sizePopupArrow,
      overflow: "hidden",
      "&::before": {
        position: "absolute",
        bottom: 0,
        insetInlineStart: 0,
        width: sizePopupArrow,
        height: calc(sizePopupArrow).div(2).equal(),
        background: bgColor,
        clipPath: {
          _multi_value_: true,
          value: [arrowPolygon, arrowPath]
        },
        content: '""'
      },
      "&::after": {
        content: '""',
        position: "absolute",
        width: arrowShadowWidth,
        height: arrowShadowWidth,
        bottom: 0,
        insetInline: 0,
        margin: "auto",
        borderRadius: {
          _skip_check_: true,
          value: `0 0 ${unit(borderRadiusXS)} 0`
        },
        transform: "translateY(50%) rotate(-135deg)",
        boxShadow,
        zIndex: 0,
        background: "transparent"
      }
    };
  };

  // node_modules/antd/es/style/placementArrow.js
  var MAX_VERTICAL_CONTENT_RADIUS = 8;
  function getArrowOffsetToken(options) {
    const {
      contentRadius,
      limitVerticalRadius
    } = options;
    const arrowOffset = contentRadius > 12 ? contentRadius + 2 : 12;
    const arrowOffsetVertical = limitVerticalRadius ? MAX_VERTICAL_CONTENT_RADIUS : arrowOffset;
    return {
      arrowOffsetHorizontal: arrowOffset,
      arrowOffsetVertical
    };
  }
  function isInject(valid, code) {
    if (!valid) {
      return {};
    }
    return code;
  }
  function getArrowStyle(token2, colorBg, options) {
    const {
      componentCls,
      boxShadowPopoverArrow,
      arrowOffsetVertical,
      arrowOffsetHorizontal
    } = token2;
    const {
      arrowDistance = 0,
      arrowPlacement = {
        left: true,
        right: true,
        top: true,
        bottom: true
      }
    } = options || {};
    return {
      [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({
        // ============================ Basic ============================
        [`${componentCls}-arrow`]: [Object.assign(Object.assign({
          position: "absolute",
          zIndex: 1,
          display: "block"
        }, genRoundedArrow(token2, colorBg, boxShadowPopoverArrow)), {
          "&:before": {
            background: colorBg
          }
        })]
      }, isInject(!!arrowPlacement.top, {
        [[`&-placement-top > ${componentCls}-arrow`, `&-placement-topLeft > ${componentCls}-arrow`, `&-placement-topRight > ${componentCls}-arrow`].join(",")]: {
          bottom: arrowDistance,
          transform: "translateY(100%) rotate(180deg)"
        },
        [`&-placement-top > ${componentCls}-arrow`]: {
          left: {
            _skip_check_: true,
            value: "50%"
          },
          transform: "translateX(-50%) translateY(100%) rotate(180deg)"
        },
        [`&-placement-topLeft > ${componentCls}-arrow`]: {
          left: {
            _skip_check_: true,
            value: arrowOffsetHorizontal
          }
        },
        [`&-placement-topRight > ${componentCls}-arrow`]: {
          right: {
            _skip_check_: true,
            value: arrowOffsetHorizontal
          }
        }
      })), isInject(!!arrowPlacement.bottom, {
        [[`&-placement-bottom > ${componentCls}-arrow`, `&-placement-bottomLeft > ${componentCls}-arrow`, `&-placement-bottomRight > ${componentCls}-arrow`].join(",")]: {
          top: arrowDistance,
          transform: `translateY(-100%)`
        },
        [`&-placement-bottom > ${componentCls}-arrow`]: {
          left: {
            _skip_check_: true,
            value: "50%"
          },
          transform: `translateX(-50%) translateY(-100%)`
        },
        [`&-placement-bottomLeft > ${componentCls}-arrow`]: {
          left: {
            _skip_check_: true,
            value: arrowOffsetHorizontal
          }
        },
        [`&-placement-bottomRight > ${componentCls}-arrow`]: {
          right: {
            _skip_check_: true,
            value: arrowOffsetHorizontal
          }
        }
      })), isInject(!!arrowPlacement.left, {
        [[`&-placement-left > ${componentCls}-arrow`, `&-placement-leftTop > ${componentCls}-arrow`, `&-placement-leftBottom > ${componentCls}-arrow`].join(",")]: {
          right: {
            _skip_check_: true,
            value: arrowDistance
          },
          transform: "translateX(100%) rotate(90deg)"
        },
        [`&-placement-left > ${componentCls}-arrow`]: {
          top: {
            _skip_check_: true,
            value: "50%"
          },
          transform: "translateY(-50%) translateX(100%) rotate(90deg)"
        },
        [`&-placement-leftTop > ${componentCls}-arrow`]: {
          top: arrowOffsetVertical
        },
        [`&-placement-leftBottom > ${componentCls}-arrow`]: {
          bottom: arrowOffsetVertical
        }
      })), isInject(!!arrowPlacement.right, {
        [[`&-placement-right > ${componentCls}-arrow`, `&-placement-rightTop > ${componentCls}-arrow`, `&-placement-rightBottom > ${componentCls}-arrow`].join(",")]: {
          left: {
            _skip_check_: true,
            value: arrowDistance
          },
          transform: "translateX(-100%) rotate(-90deg)"
        },
        [`&-placement-right > ${componentCls}-arrow`]: {
          top: {
            _skip_check_: true,
            value: "50%"
          },
          transform: "translateY(-50%) translateX(-100%) rotate(-90deg)"
        },
        [`&-placement-rightTop > ${componentCls}-arrow`]: {
          top: arrowOffsetVertical
        },
        [`&-placement-rightBottom > ${componentCls}-arrow`]: {
          bottom: arrowOffsetVertical
        }
      }))
    };
  }

  // node_modules/antd/es/_util/placements.js
  function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow3) {
    if (autoAdjustOverflow3 === false) {
      return {
        adjustX: false,
        adjustY: false
      };
    }
    const overflow = autoAdjustOverflow3 && typeof autoAdjustOverflow3 === "object" ? autoAdjustOverflow3 : {};
    const baseOverflow = {};
    switch (placement) {
      case "top":
      case "bottom":
        baseOverflow.shiftX = arrowOffset.arrowOffsetHorizontal * 2 + arrowWidth;
        baseOverflow.shiftY = true;
        baseOverflow.adjustY = true;
        break;
      case "left":
      case "right":
        baseOverflow.shiftY = arrowOffset.arrowOffsetVertical * 2 + arrowWidth;
        baseOverflow.shiftX = true;
        baseOverflow.adjustX = true;
        break;
    }
    const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);
    if (!mergedOverflow.shiftX) {
      mergedOverflow.adjustX = true;
    }
    if (!mergedOverflow.shiftY) {
      mergedOverflow.adjustY = true;
    }
    return mergedOverflow;
  }
  var PlacementAlignMap = {
    left: {
      points: ["cr", "cl"]
    },
    right: {
      points: ["cl", "cr"]
    },
    top: {
      points: ["bc", "tc"]
    },
    bottom: {
      points: ["tc", "bc"]
    },
    topLeft: {
      points: ["bl", "tl"]
    },
    leftTop: {
      points: ["tr", "tl"]
    },
    topRight: {
      points: ["br", "tr"]
    },
    rightTop: {
      points: ["tl", "tr"]
    },
    bottomRight: {
      points: ["tr", "br"]
    },
    rightBottom: {
      points: ["bl", "br"]
    },
    bottomLeft: {
      points: ["tl", "bl"]
    },
    leftBottom: {
      points: ["br", "bl"]
    }
  };
  var ArrowCenterPlacementAlignMap = {
    topLeft: {
      points: ["bl", "tc"]
    },
    leftTop: {
      points: ["tr", "cl"]
    },
    topRight: {
      points: ["br", "tc"]
    },
    rightTop: {
      points: ["tl", "cr"]
    },
    bottomRight: {
      points: ["tr", "bc"]
    },
    rightBottom: {
      points: ["bl", "cr"]
    },
    bottomLeft: {
      points: ["tl", "bc"]
    },
    leftBottom: {
      points: ["br", "cl"]
    }
  };
  var DisableAutoArrowList = /* @__PURE__ */ new Set(["topLeft", "topRight", "bottomLeft", "bottomRight", "leftTop", "leftBottom", "rightTop", "rightBottom"]);
  function getPlacements(config) {
    const {
      arrowWidth,
      autoAdjustOverflow: autoAdjustOverflow3,
      arrowPointAtCenter,
      offset: offset3,
      borderRadius,
      visibleFirst
    } = config;
    const halfArrowWidth = arrowWidth / 2;
    const placementMap = {};
    Object.keys(PlacementAlignMap).forEach((key) => {
      const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];
      const placementInfo = Object.assign(Object.assign({}, template), {
        offset: [0, 0],
        dynamicInset: true
      });
      placementMap[key] = placementInfo;
      if (DisableAutoArrowList.has(key)) {
        placementInfo.autoArrow = false;
      }
      switch (key) {
        case "top":
        case "topLeft":
        case "topRight":
          placementInfo.offset[1] = -halfArrowWidth - offset3;
          break;
        case "bottom":
        case "bottomLeft":
        case "bottomRight":
          placementInfo.offset[1] = halfArrowWidth + offset3;
          break;
        case "left":
        case "leftTop":
        case "leftBottom":
          placementInfo.offset[0] = -halfArrowWidth - offset3;
          break;
        case "right":
        case "rightTop":
        case "rightBottom":
          placementInfo.offset[0] = halfArrowWidth + offset3;
          break;
      }
      const arrowOffset = getArrowOffsetToken({
        contentRadius: borderRadius,
        limitVerticalRadius: true
      });
      if (arrowPointAtCenter) {
        switch (key) {
          case "topLeft":
          case "bottomLeft":
            placementInfo.offset[0] = -arrowOffset.arrowOffsetHorizontal - halfArrowWidth;
            break;
          case "topRight":
          case "bottomRight":
            placementInfo.offset[0] = arrowOffset.arrowOffsetHorizontal + halfArrowWidth;
            break;
          case "leftTop":
          case "rightTop":
            placementInfo.offset[1] = -arrowOffset.arrowOffsetHorizontal - halfArrowWidth;
            break;
          case "leftBottom":
          case "rightBottom":
            placementInfo.offset[1] = arrowOffset.arrowOffsetHorizontal + halfArrowWidth;
            break;
        }
      }
      placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow3);
      if (visibleFirst) {
        placementInfo.htmlRegion = "visibleFirst";
      }
    });
    return placementMap;
  }

  // node_modules/antd/es/tooltip/PurePanel.js
  var import_classnames37 = __toESM(require_classnames());
  var React159 = __toESM(require_react());

  // node_modules/antd/es/tooltip/style/index.js
  var genTooltipStyle = (token2) => {
    const {
      componentCls,
      // ant-tooltip
      tooltipMaxWidth,
      tooltipColor,
      tooltipBg,
      tooltipBorderRadius,
      zIndexPopup,
      controlHeight,
      boxShadowSecondary,
      paddingSM,
      paddingXS
    } = token2;
    return [
      {
        [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), {
          position: "absolute",
          zIndex: zIndexPopup,
          display: "block",
          width: "max-content",
          maxWidth: tooltipMaxWidth,
          visibility: "visible",
          transformOrigin: `var(--arrow-x, 50%) var(--arrow-y, 50%)`,
          "&-hidden": {
            display: "none"
          },
          "--antd-arrow-background-color": tooltipBg,
          // Wrapper for the tooltip content
          [`${componentCls}-inner`]: {
            minWidth: controlHeight,
            minHeight: controlHeight,
            padding: `${unit(token2.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,
            color: tooltipColor,
            textAlign: "start",
            textDecoration: "none",
            wordWrap: "break-word",
            backgroundColor: tooltipBg,
            borderRadius: tooltipBorderRadius,
            boxShadow: boxShadowSecondary,
            boxSizing: "border-box"
          },
          // Limit left and right placement radius
          [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(",")]: {
            [`${componentCls}-inner`]: {
              borderRadius: token2.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)
            }
          },
          [`${componentCls}-content`]: {
            position: "relative"
          }
        }), genPresetColor(token2, (colorKey, _ref) => {
          let {
            darkColor
          } = _ref;
          return {
            [`&${componentCls}-${colorKey}`]: {
              [`${componentCls}-inner`]: {
                backgroundColor: darkColor
              },
              [`${componentCls}-arrow`]: {
                "--antd-arrow-background-color": darkColor
              }
            }
          };
        })), {
          // RTL
          "&-rtl": {
            direction: "rtl"
          }
        })
      },
      // Arrow Style
      getArrowStyle(token2, "var(--antd-arrow-background-color)"),
      // Pure Render
      {
        [`${componentCls}-pure`]: {
          position: "relative",
          maxWidth: "none",
          margin: token2.sizePopupArrow
        }
      }
    ];
  };
  var prepareComponentToken4 = (token2) => Object.assign(Object.assign({
    zIndexPopup: token2.zIndexPopupBase + 70
  }, getArrowOffsetToken({
    contentRadius: token2.borderRadius,
    limitVerticalRadius: true
  })), getArrowToken(merge2(token2, {
    borderRadiusOuter: Math.min(token2.borderRadiusOuter, 4)
  })));
  var style_default7 = function(prefixCls) {
    let injectStyle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const useStyle = genStyleHooks("Tooltip", (token2) => {
      const {
        borderRadius,
        colorTextLightSolid,
        colorBgSpotlight
      } = token2;
      const TooltipToken = merge2(token2, {
        // default variables
        tooltipMaxWidth: 250,
        tooltipColor: colorTextLightSolid,
        tooltipBorderRadius: borderRadius,
        tooltipBg: colorBgSpotlight
      });
      return [genTooltipStyle(TooltipToken), initZoomMotion(token2, "zoom-big-fast")];
    }, prepareComponentToken4, {
      resetStyle: false,
      // Popover use Tooltip as internal component. We do not need to handle this.
      injectStyle
    });
    return useStyle(prefixCls);
  };

  // node_modules/antd/es/tooltip/util.js
  var import_classnames36 = __toESM(require_classnames());

  // node_modules/antd/es/_util/colors.js
  var inverseColors = PresetColors.map((color) => `${color}-inverse`);
  function isPresetColor(color) {
    let includeInverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (includeInverse) {
      return [].concat(_toConsumableArray(inverseColors), _toConsumableArray(PresetColors)).includes(color);
    }
    return PresetColors.includes(color);
  }

  // node_modules/antd/es/tooltip/util.js
  function parseColor(prefixCls, color) {
    const isInternalColor = isPresetColor(color);
    const className = (0, import_classnames36.default)({
      [`${prefixCls}-${color}`]: color && isInternalColor
    });
    const overlayStyle = {};
    const arrowStyle = {};
    if (color && !isInternalColor) {
      overlayStyle.background = color;
      arrowStyle["--antd-arrow-background-color"] = color;
    }
    return {
      className,
      overlayStyle,
      arrowStyle
    };
  }

  // node_modules/antd/es/tooltip/PurePanel.js
  var PurePanel2 = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      placement = "top",
      title,
      color,
      overlayInnerStyle
    } = props;
    const {
      getPrefixCls
    } = React159.useContext(ConfigContext);
    const prefixCls = getPrefixCls("tooltip", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default7(prefixCls);
    const colorInfo = parseColor(prefixCls, color);
    const arrowContentStyle = colorInfo.arrowStyle;
    const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);
    const cls = (0, import_classnames37.default)(hashId, cssVarCls, prefixCls, `${prefixCls}-pure`, `${prefixCls}-placement-${placement}`, className, colorInfo.className);
    return wrapCSSVar(/* @__PURE__ */ React159.createElement("div", {
      className: cls,
      style: arrowContentStyle
    }, /* @__PURE__ */ React159.createElement("div", {
      className: `${prefixCls}-arrow`
    }), /* @__PURE__ */ React159.createElement(Popup2, Object.assign({}, props, {
      className: hashId,
      prefixCls,
      overlayInnerStyle: formattedOverlayInnerStyle
    }), title)));
  };
  var PurePanel_default2 = PurePanel2;

  // node_modules/antd/es/tooltip/index.js
  var __rest12 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Tooltip3 = /* @__PURE__ */ React160.forwardRef((props, ref) => {
    var _a, _b;
    const {
      prefixCls: customizePrefixCls,
      openClassName,
      getTooltipContainer,
      overlayClassName,
      color,
      overlayInnerStyle,
      children,
      afterOpenChange,
      afterVisibleChange,
      destroyTooltipOnHide,
      arrow = true,
      title,
      overlay,
      builtinPlacements,
      arrowPointAtCenter = false,
      autoAdjustOverflow: autoAdjustOverflow3 = true
    } = props;
    const mergedShowArrow = !!arrow;
    const [, token2] = useToken();
    const {
      getPopupContainer: getContextPopupContainer,
      getPrefixCls,
      direction
    } = React160.useContext(ConfigContext);
    const warning8 = devUseWarning("Tooltip");
    const tooltipRef = React160.useRef(null);
    const forceAlign = () => {
      var _a2;
      (_a2 = tooltipRef.current) === null || _a2 === void 0 ? void 0 : _a2.forceAlign();
    };
    React160.useImperativeHandle(ref, () => ({
      forceAlign,
      forcePopupAlign: () => {
        warning8.deprecated(false, "forcePopupAlign", "forceAlign");
        forceAlign();
      }
    }));
    if (true) {
      [["visible", "open"], ["defaultVisible", "defaultOpen"], ["onVisibleChange", "onOpenChange"], ["afterVisibleChange", "afterOpenChange"], ["arrowPointAtCenter", "arrow={{ pointAtCenter: true }}"]].forEach((_ref) => {
        let [deprecatedName, newName] = _ref;
        warning8.deprecated(!(deprecatedName in props), deprecatedName, newName);
      });
      true ? warning8(!destroyTooltipOnHide || typeof destroyTooltipOnHide === "boolean", "usage", "`destroyTooltipOnHide` no need config `keepParent` anymore. Please use `boolean` value directly.") : void 0;
      true ? warning8(!arrow || typeof arrow === "boolean" || !("arrowPointAtCenter" in arrow), "deprecated", "`arrowPointAtCenter` in `arrow` is deprecated. Please use `pointAtCenter` instead.") : void 0;
    }
    const [open, setOpen] = useMergedState(false, {
      value: (_a = props.open) !== null && _a !== void 0 ? _a : props.visible,
      defaultValue: (_b = props.defaultOpen) !== null && _b !== void 0 ? _b : props.defaultVisible
    });
    const noTitle = !title && !overlay && title !== 0;
    const onOpenChange = (vis) => {
      var _a2, _b2;
      setOpen(noTitle ? false : vis);
      if (!noTitle) {
        (_a2 = props.onOpenChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, vis);
        (_b2 = props.onVisibleChange) === null || _b2 === void 0 ? void 0 : _b2.call(props, vis);
      }
    };
    const tooltipPlacements = React160.useMemo(() => {
      var _a2, _b2;
      let mergedArrowPointAtCenter = arrowPointAtCenter;
      if (typeof arrow === "object") {
        mergedArrowPointAtCenter = (_b2 = (_a2 = arrow.pointAtCenter) !== null && _a2 !== void 0 ? _a2 : arrow.arrowPointAtCenter) !== null && _b2 !== void 0 ? _b2 : arrowPointAtCenter;
      }
      return builtinPlacements || getPlacements({
        arrowPointAtCenter: mergedArrowPointAtCenter,
        autoAdjustOverflow: autoAdjustOverflow3,
        arrowWidth: mergedShowArrow ? token2.sizePopupArrow : 0,
        borderRadius: token2.borderRadius,
        offset: token2.marginXXS,
        visibleFirst: true
      });
    }, [arrowPointAtCenter, arrow, builtinPlacements, token2]);
    const memoOverlay = React160.useMemo(() => {
      if (title === 0) {
        return title;
      }
      return overlay || title || "";
    }, [overlay, title]);
    const memoOverlayWrapper = /* @__PURE__ */ React160.createElement(NoCompactStyle, null, typeof memoOverlay === "function" ? memoOverlay() : memoOverlay);
    const {
      getPopupContainer,
      placement = "top",
      mouseEnterDelay = 0.1,
      mouseLeaveDelay = 0.1,
      overlayStyle,
      rootClassName
    } = props, otherProps = __rest12(props, ["getPopupContainer", "placement", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "rootClassName"]);
    const prefixCls = getPrefixCls("tooltip", customizePrefixCls);
    const rootPrefixCls = getPrefixCls();
    const injectFromPopover = props["data-popover-inject"];
    let tempOpen = open;
    if (!("open" in props) && !("visible" in props) && noTitle) {
      tempOpen = false;
    }
    const child = isValidElement4(children) && !isFragment3(children) ? children : /* @__PURE__ */ React160.createElement("span", null, children);
    const childProps = child.props;
    const childCls = !childProps.className || typeof childProps.className === "string" ? (0, import_classnames38.default)(childProps.className, openClassName || `${prefixCls}-open`) : childProps.className;
    const [wrapCSSVar, hashId, cssVarCls] = style_default7(prefixCls, !injectFromPopover);
    const colorInfo = parseColor(prefixCls, color);
    const arrowContentStyle = colorInfo.arrowStyle;
    const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);
    const customOverlayClassName = (0, import_classnames38.default)(overlayClassName, {
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, colorInfo.className, rootClassName, hashId, cssVarCls);
    const [zIndex, contextZIndex] = useZIndex("Tooltip", otherProps.zIndex);
    const content = /* @__PURE__ */ React160.createElement(es_default10, Object.assign({}, otherProps, {
      zIndex,
      showArrow: mergedShowArrow,
      placement,
      mouseEnterDelay,
      mouseLeaveDelay,
      prefixCls,
      overlayClassName: customOverlayClassName,
      overlayStyle: Object.assign(Object.assign({}, arrowContentStyle), overlayStyle),
      getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
      ref: tooltipRef,
      builtinPlacements: tooltipPlacements,
      overlay: memoOverlayWrapper,
      visible: tempOpen,
      onVisibleChange: onOpenChange,
      afterVisibleChange: afterOpenChange !== null && afterOpenChange !== void 0 ? afterOpenChange : afterVisibleChange,
      overlayInnerStyle: formattedOverlayInnerStyle,
      arrowContent: /* @__PURE__ */ React160.createElement("span", {
        className: `${prefixCls}-arrow-content`
      }),
      motion: {
        motionName: getTransitionName2(rootPrefixCls, "zoom-big-fast", props.transitionName),
        motionDeadline: 1e3
      },
      destroyTooltipOnHide: !!destroyTooltipOnHide
    }), tempOpen ? cloneElement4(child, {
      className: childCls
    }) : child);
    return wrapCSSVar(/* @__PURE__ */ React160.createElement(zindexContext_default.Provider, {
      value: contextZIndex
    }, content));
  });
  if (true) {
    Tooltip3.displayName = "Tooltip";
  }
  Tooltip3._InternalPanelDoNotUseOrYouWillBeFired = PurePanel_default2;
  var tooltip_default = Tooltip3;

  // node_modules/antd/es/dropdown/dropdown.js
  var React198 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/RightOutlined.js
  var React161 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/RightOutlined.js
  var RightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z" } }] }, "name": "right", "theme": "outlined" };
  var RightOutlined_default = RightOutlined;

  // node_modules/@ant-design/icons/es/icons/RightOutlined.js
  var RightOutlined2 = function RightOutlined3(props, ref) {
    return /* @__PURE__ */ React161.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: RightOutlined_default
    }));
  };
  if (true) {
    RightOutlined2.displayName = "RightOutlined";
  }
  var RightOutlined_default2 = /* @__PURE__ */ React161.forwardRef(RightOutlined2);

  // node_modules/antd/es/dropdown/dropdown.js
  var import_classnames52 = __toESM(require_classnames());

  // node_modules/rc-dropdown/es/Dropdown.js
  var import_classnames39 = __toESM(require_classnames());
  var import_react57 = __toESM(require_react());

  // node_modules/rc-dropdown/es/hooks/useAccessibility.js
  var React162 = __toESM(require_react());
  var ESC = KeyCode_default.ESC;
  var TAB = KeyCode_default.TAB;
  function useAccessibility(_ref) {
    var visible = _ref.visible, triggerRef = _ref.triggerRef, onVisibleChange = _ref.onVisibleChange, autoFocus = _ref.autoFocus, overlayRef = _ref.overlayRef;
    var focusMenuRef = React162.useRef(false);
    var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus2() {
      if (visible) {
        var _triggerRef$current, _triggerRef$current$f;
        (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$f = _triggerRef$current.focus) === null || _triggerRef$current$f === void 0 ? void 0 : _triggerRef$current$f.call(_triggerRef$current);
        onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(false);
      }
    };
    var focusMenu = function focusMenu2() {
      var _overlayRef$current;
      if ((_overlayRef$current = overlayRef.current) !== null && _overlayRef$current !== void 0 && _overlayRef$current.focus) {
        overlayRef.current.focus();
        focusMenuRef.current = true;
        return true;
      }
      return false;
    };
    var handleKeyDown = function handleKeyDown2(event) {
      switch (event.keyCode) {
        case ESC:
          handleCloseMenuAndReturnFocus();
          break;
        case TAB: {
          var focusResult = false;
          if (!focusMenuRef.current) {
            focusResult = focusMenu();
          }
          if (focusResult) {
            event.preventDefault();
          } else {
            handleCloseMenuAndReturnFocus();
          }
          break;
        }
      }
    };
    React162.useEffect(function() {
      if (visible) {
        window.addEventListener("keydown", handleKeyDown);
        if (autoFocus) {
          raf_default(focusMenu, 3);
        }
        return function() {
          window.removeEventListener("keydown", handleKeyDown);
          focusMenuRef.current = false;
        };
      }
      return function() {
        focusMenuRef.current = false;
      };
    }, [visible]);
  }

  // node_modules/rc-dropdown/es/Overlay.js
  var import_react56 = __toESM(require_react());
  var Overlay = /* @__PURE__ */ (0, import_react56.forwardRef)(function(props, ref) {
    var overlay = props.overlay, arrow = props.arrow, prefixCls = props.prefixCls;
    var overlayNode = (0, import_react56.useMemo)(function() {
      var overlayElement;
      if (typeof overlay === "function") {
        overlayElement = overlay();
      } else {
        overlayElement = overlay;
      }
      return overlayElement;
    }, [overlay]);
    var composedRef = composeRef(ref, overlayNode === null || overlayNode === void 0 ? void 0 : overlayNode.ref);
    return /* @__PURE__ */ import_react56.default.createElement(import_react56.default.Fragment, null, arrow && /* @__PURE__ */ import_react56.default.createElement("div", {
      className: "".concat(prefixCls, "-arrow")
    }), /* @__PURE__ */ import_react56.default.cloneElement(overlayNode, {
      ref: supportRef(overlayNode) ? composedRef : void 0
    }));
  });
  var Overlay_default = Overlay;

  // node_modules/rc-dropdown/es/placements.js
  var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
  };
  var targetOffset2 = [0, 0];
  var placements2 = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset: targetOffset2
    },
    top: {
      points: ["bc", "tc"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset: targetOffset2
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset: targetOffset2
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset: targetOffset2
    },
    bottom: {
      points: ["tc", "bc"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset: targetOffset2
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset: targetOffset2
    }
  };
  var placements_default = placements2;

  // node_modules/rc-dropdown/es/Dropdown.js
  var _excluded19 = ["arrow", "prefixCls", "transitionName", "animation", "align", "placement", "placements", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "visible", "trigger", "autoFocus", "overlay", "children", "onVisibleChange"];
  function Dropdown(props, ref) {
    var _children$props;
    var _props$arrow = props.arrow, arrow = _props$arrow === void 0 ? false : _props$arrow, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dropdown" : _props$prefixCls, transitionName = props.transitionName, animation = props.animation, align = props.align, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottomLeft" : _props$placement, _props$placements = props.placements, placements4 = _props$placements === void 0 ? placements_default : _props$placements, getPopupContainer = props.getPopupContainer, showAction = props.showAction, hideAction = props.hideAction, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, visible = props.visible, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, autoFocus = props.autoFocus, overlay = props.overlay, children = props.children, onVisibleChange = props.onVisibleChange, otherProps = _objectWithoutProperties(props, _excluded19);
    var _React$useState = import_react57.default.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), triggerVisible = _React$useState2[0], setTriggerVisible = _React$useState2[1];
    var mergedVisible = "visible" in props ? visible : triggerVisible;
    var triggerRef = import_react57.default.useRef(null);
    var overlayRef = import_react57.default.useRef(null);
    var childRef = import_react57.default.useRef(null);
    import_react57.default.useImperativeHandle(ref, function() {
      return triggerRef.current;
    });
    var handleVisibleChange = function handleVisibleChange2(newVisible) {
      setTriggerVisible(newVisible);
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(newVisible);
    };
    useAccessibility({
      visible: mergedVisible,
      triggerRef: childRef,
      onVisibleChange: handleVisibleChange,
      autoFocus,
      overlayRef
    });
    var onClick = function onClick2(e3) {
      var onOverlayClick = props.onOverlayClick;
      setTriggerVisible(false);
      if (onOverlayClick) {
        onOverlayClick(e3);
      }
    };
    var getMenuElement = function getMenuElement2() {
      return /* @__PURE__ */ import_react57.default.createElement(Overlay_default, {
        ref: overlayRef,
        overlay,
        prefixCls,
        arrow
      });
    };
    var getMenuElementOrLambda = function getMenuElementOrLambda2() {
      if (typeof overlay === "function") {
        return getMenuElement;
      }
      return getMenuElement();
    };
    var getMinOverlayWidthMatchTrigger = function getMinOverlayWidthMatchTrigger2() {
      var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger, alignPoint = props.alignPoint;
      if ("minOverlayWidthMatchTrigger" in props) {
        return minOverlayWidthMatchTrigger;
      }
      return !alignPoint;
    };
    var getOpenClassName = function getOpenClassName2() {
      var openClassName = props.openClassName;
      if (openClassName !== void 0) {
        return openClassName;
      }
      return "".concat(prefixCls, "-open");
    };
    var childrenNode = /* @__PURE__ */ import_react57.default.cloneElement(children, {
      className: (0, import_classnames39.default)((_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.className, mergedVisible && getOpenClassName()),
      ref: supportRef(children) ? composeRef(childRef, children.ref) : void 0
    });
    var triggerHideAction = hideAction;
    if (!triggerHideAction && trigger.indexOf("contextMenu") !== -1) {
      triggerHideAction = ["click"];
    }
    return /* @__PURE__ */ import_react57.default.createElement(es_default7, _extends({
      builtinPlacements: placements4
    }, otherProps, {
      prefixCls,
      ref: triggerRef,
      popupClassName: (0, import_classnames39.default)(overlayClassName, _defineProperty({}, "".concat(prefixCls, "-show-arrow"), arrow)),
      popupStyle: overlayStyle,
      action: trigger,
      showAction,
      hideAction: triggerHideAction,
      popupPlacement: placement,
      popupAlign: align,
      popupTransitionName: transitionName,
      popupAnimation: animation,
      popupVisible: mergedVisible,
      stretch: getMinOverlayWidthMatchTrigger() ? "minWidth" : "",
      popup: getMenuElementOrLambda(),
      onPopupVisibleChange: handleVisibleChange,
      onPopupClick: onClick,
      getPopupContainer
    }), childrenNode);
  }
  var Dropdown_default = /* @__PURE__ */ import_react57.default.forwardRef(Dropdown);

  // node_modules/rc-dropdown/es/index.js
  var es_default11 = Dropdown_default;

  // node_modules/antd/es/menu/index.js
  var React197 = __toESM(require_react());
  var import_react63 = __toESM(require_react());

  // node_modules/rc-menu/es/Menu.js
  var import_classnames46 = __toESM(require_classnames());
  var React185 = __toESM(require_react());
  var import_react59 = __toESM(require_react());
  var import_react_dom5 = __toESM(require_react_dom());

  // node_modules/rc-menu/es/context/IdContext.js
  var React165 = __toESM(require_react());
  var IdContext = /* @__PURE__ */ React165.createContext(null);
  function getMenuId(uuid8, eventKey) {
    if (uuid8 === void 0) {
      return null;
    }
    return "".concat(uuid8, "-").concat(eventKey);
  }
  function useMenuId(eventKey) {
    var id = React165.useContext(IdContext);
    return getMenuId(id, eventKey);
  }

  // node_modules/rc-menu/es/context/MenuContext.js
  var React166 = __toESM(require_react());
  var _excluded20 = ["children", "locked"];
  var MenuContext = /* @__PURE__ */ React166.createContext(null);
  function mergeProps(origin, target) {
    var clone = _objectSpread2({}, origin);
    Object.keys(target).forEach(function(key) {
      var value = target[key];
      if (value !== void 0) {
        clone[key] = value;
      }
    });
    return clone;
  }
  function InheritableContextProvider(_ref) {
    var children = _ref.children, locked = _ref.locked, restProps = _objectWithoutProperties(_ref, _excluded20);
    var context = React166.useContext(MenuContext);
    var inheritableContext = useMemo(function() {
      return mergeProps(context, restProps);
    }, [context, restProps], function(prev2, next2) {
      return !locked && (prev2[0] !== next2[0] || !isEqual_default(prev2[1], next2[1], true));
    });
    return /* @__PURE__ */ React166.createElement(MenuContext.Provider, {
      value: inheritableContext
    }, children);
  }

  // node_modules/rc-menu/es/context/PathContext.js
  var React167 = __toESM(require_react());
  var EmptyList = [];
  var PathRegisterContext = /* @__PURE__ */ React167.createContext(null);
  function useMeasure() {
    return React167.useContext(PathRegisterContext);
  }
  var PathTrackerContext = /* @__PURE__ */ React167.createContext(EmptyList);
  function useFullPath(eventKey) {
    var parentKeyPath = React167.useContext(PathTrackerContext);
    return React167.useMemo(function() {
      return eventKey !== void 0 ? [].concat(_toConsumableArray(parentKeyPath), [eventKey]) : parentKeyPath;
    }, [parentKeyPath, eventKey]);
  }
  var PathUserContext = /* @__PURE__ */ React167.createContext(null);

  // node_modules/rc-menu/es/context/PrivateContext.js
  var React168 = __toESM(require_react());
  var PrivateContext = /* @__PURE__ */ React168.createContext({});
  var PrivateContext_default = PrivateContext;

  // node_modules/rc-util/es/Dom/focus.js
  function focusable(node2) {
    var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (isVisible_default(node2)) {
      var nodeName = node2.nodeName.toLowerCase();
      var isFocusableElement = (
        // Focusable element
        ["input", "select", "textarea", "button"].includes(nodeName) || // Editable element
        node2.isContentEditable || // Anchor with href element
        nodeName === "a" && !!node2.getAttribute("href")
      );
      var tabIndexAttr = node2.getAttribute("tabindex");
      var tabIndexNum = Number(tabIndexAttr);
      var tabIndex = null;
      if (tabIndexAttr && !Number.isNaN(tabIndexNum)) {
        tabIndex = tabIndexNum;
      } else if (isFocusableElement && tabIndex === null) {
        tabIndex = 0;
      }
      if (isFocusableElement && node2.disabled) {
        tabIndex = null;
      }
      return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);
    }
    return false;
  }
  function getFocusNodeList(node2) {
    var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var res = _toConsumableArray(node2.querySelectorAll("*")).filter(function(child) {
      return focusable(child, includePositive);
    });
    if (focusable(node2, includePositive)) {
      res.unshift(node2);
    }
    return res;
  }

  // node_modules/rc-menu/es/hooks/useAccessibility.js
  var React169 = __toESM(require_react());
  var LEFT = KeyCode_default.LEFT;
  var RIGHT = KeyCode_default.RIGHT;
  var UP = KeyCode_default.UP;
  var DOWN = KeyCode_default.DOWN;
  var ENTER = KeyCode_default.ENTER;
  var ESC2 = KeyCode_default.ESC;
  var HOME = KeyCode_default.HOME;
  var END = KeyCode_default.END;
  var ArrowKeys = [UP, DOWN, LEFT, RIGHT];
  function getOffset(mode, isRootLevel, isRtl, which) {
    var _inline, _horizontal, _vertical, _offsets;
    var prev2 = "prev";
    var next2 = "next";
    var children = "children";
    var parent = "parent";
    if (mode === "inline" && which === ENTER) {
      return {
        inlineTrigger: true
      };
    }
    var inline2 = (_inline = {}, _defineProperty(_inline, UP, prev2), _defineProperty(_inline, DOWN, next2), _inline);
    var horizontal = (_horizontal = {}, _defineProperty(_horizontal, LEFT, isRtl ? next2 : prev2), _defineProperty(_horizontal, RIGHT, isRtl ? prev2 : next2), _defineProperty(_horizontal, DOWN, children), _defineProperty(_horizontal, ENTER, children), _horizontal);
    var vertical = (_vertical = {}, _defineProperty(_vertical, UP, prev2), _defineProperty(_vertical, DOWN, next2), _defineProperty(_vertical, ENTER, children), _defineProperty(_vertical, ESC2, parent), _defineProperty(_vertical, LEFT, isRtl ? children : parent), _defineProperty(_vertical, RIGHT, isRtl ? parent : children), _vertical);
    var offsets = {
      inline: inline2,
      horizontal,
      vertical,
      inlineSub: inline2,
      horizontalSub: vertical,
      verticalSub: vertical
    };
    var type4 = (_offsets = offsets["".concat(mode).concat(isRootLevel ? "" : "Sub")]) === null || _offsets === void 0 ? void 0 : _offsets[which];
    switch (type4) {
      case prev2:
        return {
          offset: -1,
          sibling: true
        };
      case next2:
        return {
          offset: 1,
          sibling: true
        };
      case parent:
        return {
          offset: -1,
          sibling: false
        };
      case children:
        return {
          offset: 1,
          sibling: false
        };
      default:
        return null;
    }
  }
  function findContainerUL(element) {
    var current2 = element;
    while (current2) {
      if (current2.getAttribute("data-menu-list")) {
        return current2;
      }
      current2 = current2.parentElement;
    }
    return null;
  }
  function getFocusElement(activeElement, elements) {
    var current2 = activeElement || document.activeElement;
    while (current2) {
      if (elements.has(current2)) {
        return current2;
      }
      current2 = current2.parentElement;
    }
    return null;
  }
  function getFocusableElements(container, elements) {
    var list = getFocusNodeList(container, true);
    return list.filter(function(ele) {
      return elements.has(ele);
    });
  }
  function getNextFocusElement(parentQueryContainer, elements, focusMenuElement) {
    var offset3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    if (!parentQueryContainer) {
      return null;
    }
    var sameLevelFocusableMenuElementList = getFocusableElements(parentQueryContainer, elements);
    var count = sameLevelFocusableMenuElementList.length;
    var focusIndex = sameLevelFocusableMenuElementList.findIndex(function(ele) {
      return focusMenuElement === ele;
    });
    if (offset3 < 0) {
      if (focusIndex === -1) {
        focusIndex = count - 1;
      } else {
        focusIndex -= 1;
      }
    } else if (offset3 > 0) {
      focusIndex += 1;
    }
    focusIndex = (focusIndex + count) % count;
    return sameLevelFocusableMenuElementList[focusIndex];
  }
  var refreshElements = function refreshElements2(keys2, id) {
    var elements = /* @__PURE__ */ new Set();
    var key2element = /* @__PURE__ */ new Map();
    var element2key = /* @__PURE__ */ new Map();
    keys2.forEach(function(key) {
      var element = document.querySelector("[data-menu-id='".concat(getMenuId(id, key), "']"));
      if (element) {
        elements.add(element);
        element2key.set(element, key);
        key2element.set(key, element);
      }
    });
    return {
      elements,
      key2element,
      element2key
    };
  };
  function useAccessibility2(mode, activeKey, isRtl, id, containerRef, getKeys, getKeyPath, triggerActiveKey, triggerAccessibilityOpen, originOnKeyDown) {
    var rafRef = React169.useRef();
    var activeRef = React169.useRef();
    activeRef.current = activeKey;
    var cleanRaf = function cleanRaf2() {
      raf_default.cancel(rafRef.current);
    };
    React169.useEffect(function() {
      return function() {
        cleanRaf();
      };
    }, []);
    return function(e3) {
      var which = e3.which;
      if ([].concat(ArrowKeys, [ENTER, ESC2, HOME, END]).includes(which)) {
        var keys2 = getKeys();
        var refreshedElements = refreshElements(keys2, id);
        var _refreshedElements = refreshedElements, elements = _refreshedElements.elements, key2element = _refreshedElements.key2element, element2key = _refreshedElements.element2key;
        var activeElement = key2element.get(activeKey);
        var focusMenuElement = getFocusElement(activeElement, elements);
        var focusMenuKey = element2key.get(focusMenuElement);
        var offsetObj = getOffset(mode, getKeyPath(focusMenuKey, true).length === 1, isRtl, which);
        if (!offsetObj && which !== HOME && which !== END) {
          return;
        }
        if (ArrowKeys.includes(which) || [HOME, END].includes(which)) {
          e3.preventDefault();
        }
        var tryFocus = function tryFocus2(menuElement) {
          if (menuElement) {
            var focusTargetElement = menuElement;
            var link = menuElement.querySelector("a");
            if (link !== null && link !== void 0 && link.getAttribute("href")) {
              focusTargetElement = link;
            }
            var targetKey = element2key.get(menuElement);
            triggerActiveKey(targetKey);
            cleanRaf();
            rafRef.current = raf_default(function() {
              if (activeRef.current === targetKey) {
                focusTargetElement.focus();
              }
            });
          }
        };
        if ([HOME, END].includes(which) || offsetObj.sibling || !focusMenuElement) {
          var parentQueryContainer;
          if (!focusMenuElement || mode === "inline") {
            parentQueryContainer = containerRef.current;
          } else {
            parentQueryContainer = findContainerUL(focusMenuElement);
          }
          var targetElement;
          var focusableElements = getFocusableElements(parentQueryContainer, elements);
          if (which === HOME) {
            targetElement = focusableElements[0];
          } else if (which === END) {
            targetElement = focusableElements[focusableElements.length - 1];
          } else {
            targetElement = getNextFocusElement(parentQueryContainer, elements, focusMenuElement, offsetObj.offset);
          }
          tryFocus(targetElement);
        } else if (offsetObj.inlineTrigger) {
          triggerAccessibilityOpen(focusMenuKey);
        } else if (offsetObj.offset > 0) {
          triggerAccessibilityOpen(focusMenuKey, true);
          cleanRaf();
          rafRef.current = raf_default(function() {
            refreshedElements = refreshElements(keys2, id);
            var controlId = focusMenuElement.getAttribute("aria-controls");
            var subQueryContainer = document.getElementById(controlId);
            var targetElement2 = getNextFocusElement(subQueryContainer, refreshedElements.elements);
            tryFocus(targetElement2);
          }, 5);
        } else if (offsetObj.offset < 0) {
          var keyPath = getKeyPath(focusMenuKey, true);
          var parentKey = keyPath[keyPath.length - 2];
          var parentMenuElement = key2element.get(parentKey);
          triggerAccessibilityOpen(parentKey, false);
          tryFocus(parentMenuElement);
        }
      }
      originOnKeyDown === null || originOnKeyDown === void 0 || originOnKeyDown(e3);
    };
  }

  // node_modules/rc-menu/es/hooks/useKeyRecords.js
  var React170 = __toESM(require_react());
  var import_react58 = __toESM(require_react());

  // node_modules/rc-menu/es/utils/timeUtil.js
  function nextSlice(callback) {
    Promise.resolve().then(callback);
  }

  // node_modules/rc-menu/es/hooks/useKeyRecords.js
  var PATH_SPLIT = "__RC_UTIL_PATH_SPLIT__";
  var getPathStr = function getPathStr2(keyPath) {
    return keyPath.join(PATH_SPLIT);
  };
  var getPathKeys = function getPathKeys2(keyPathStr) {
    return keyPathStr.split(PATH_SPLIT);
  };
  var OVERFLOW_KEY = "rc-menu-more";
  function useKeyRecords() {
    var _React$useState = React170.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), internalForceUpdate = _React$useState2[1];
    var key2pathRef = (0, import_react58.useRef)(/* @__PURE__ */ new Map());
    var path2keyRef = (0, import_react58.useRef)(/* @__PURE__ */ new Map());
    var _React$useState3 = React170.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), overflowKeys = _React$useState4[0], setOverflowKeys = _React$useState4[1];
    var updateRef = (0, import_react58.useRef)(0);
    var destroyRef = (0, import_react58.useRef)(false);
    var forceUpdate = function forceUpdate2() {
      if (!destroyRef.current) {
        internalForceUpdate({});
      }
    };
    var registerPath = (0, import_react58.useCallback)(function(key, keyPath) {
      if (true) {
        warning_default(!key2pathRef.current.has(key), "Duplicated key '".concat(key, "' used in Menu by path [").concat(keyPath.join(" > "), "]"));
      }
      var connectedPath = getPathStr(keyPath);
      path2keyRef.current.set(connectedPath, key);
      key2pathRef.current.set(key, connectedPath);
      updateRef.current += 1;
      var id = updateRef.current;
      nextSlice(function() {
        if (id === updateRef.current) {
          forceUpdate();
        }
      });
    }, []);
    var unregisterPath = (0, import_react58.useCallback)(function(key, keyPath) {
      var connectedPath = getPathStr(keyPath);
      path2keyRef.current.delete(connectedPath);
      key2pathRef.current.delete(key);
    }, []);
    var refreshOverflowKeys = (0, import_react58.useCallback)(function(keys2) {
      setOverflowKeys(keys2);
    }, []);
    var getKeyPath = (0, import_react58.useCallback)(function(eventKey, includeOverflow) {
      var fullPath = key2pathRef.current.get(eventKey) || "";
      var keys2 = getPathKeys(fullPath);
      if (includeOverflow && overflowKeys.includes(keys2[0])) {
        keys2.unshift(OVERFLOW_KEY);
      }
      return keys2;
    }, [overflowKeys]);
    var isSubPathKey = (0, import_react58.useCallback)(function(pathKeys, eventKey) {
      return pathKeys.some(function(pathKey2) {
        var pathKeyList = getKeyPath(pathKey2, true);
        return pathKeyList.includes(eventKey);
      });
    }, [getKeyPath]);
    var getKeys = function getKeys2() {
      var keys2 = _toConsumableArray(key2pathRef.current.keys());
      if (overflowKeys.length) {
        keys2.push(OVERFLOW_KEY);
      }
      return keys2;
    };
    var getSubPathKeys = (0, import_react58.useCallback)(function(key) {
      var connectedPath = "".concat(key2pathRef.current.get(key)).concat(PATH_SPLIT);
      var pathKeys = /* @__PURE__ */ new Set();
      _toConsumableArray(path2keyRef.current.keys()).forEach(function(pathKey2) {
        if (pathKey2.startsWith(connectedPath)) {
          pathKeys.add(path2keyRef.current.get(pathKey2));
        }
      });
      return pathKeys;
    }, []);
    React170.useEffect(function() {
      return function() {
        destroyRef.current = true;
      };
    }, []);
    return {
      // Register
      registerPath,
      unregisterPath,
      refreshOverflowKeys,
      // Util
      isSubPathKey,
      getKeyPath,
      getKeys,
      getSubPathKeys
    };
  }

  // node_modules/rc-menu/es/hooks/useMemoCallback.js
  var React171 = __toESM(require_react());
  function useMemoCallback(func) {
    var funRef = React171.useRef(func);
    funRef.current = func;
    var callback = React171.useCallback(function() {
      var _funRef$current;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));
    }, []);
    return func ? callback : void 0;
  }

  // node_modules/rc-menu/es/hooks/useUUID.js
  var React172 = __toESM(require_react());
  var uniquePrefix = Math.random().toFixed(5).toString().slice(2);
  var internalId = 0;
  function useUUID(id) {
    var _useMergedState = useMergedState(id, {
      value: id
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), uuid8 = _useMergedState2[0], setUUID = _useMergedState2[1];
    React172.useEffect(function() {
      internalId += 1;
      var newId = false ? "test" : "".concat(uniquePrefix, "-").concat(internalId);
      setUUID("rc-menu-uuid-".concat(newId));
    }, []);
    return uuid8;
  }

  // node_modules/rc-menu/es/MenuItem.js
  var import_classnames40 = __toESM(require_classnames());
  var React176 = __toESM(require_react());

  // node_modules/rc-menu/es/hooks/useActive.js
  var React173 = __toESM(require_react());
  function useActive(eventKey, disabled, onMouseEnter, onMouseLeave) {
    var _React$useContext = React173.useContext(MenuContext), activeKey = _React$useContext.activeKey, onActive = _React$useContext.onActive, onInactive = _React$useContext.onInactive;
    var ret = {
      active: activeKey === eventKey
    };
    if (!disabled) {
      ret.onMouseEnter = function(domEvent) {
        onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
          key: eventKey,
          domEvent
        });
        onActive(eventKey);
      };
      ret.onMouseLeave = function(domEvent) {
        onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
          key: eventKey,
          domEvent
        });
        onInactive(eventKey);
      };
    }
    return ret;
  }

  // node_modules/rc-menu/es/hooks/useDirectionStyle.js
  var React174 = __toESM(require_react());
  function useDirectionStyle(level) {
    var _React$useContext = React174.useContext(MenuContext), mode = _React$useContext.mode, rtl = _React$useContext.rtl, inlineIndent = _React$useContext.inlineIndent;
    if (mode !== "inline") {
      return null;
    }
    var len = level;
    return rtl ? {
      paddingRight: len * inlineIndent
    } : {
      paddingLeft: len * inlineIndent
    };
  }

  // node_modules/rc-menu/es/Icon.js
  var React175 = __toESM(require_react());
  function Icon2(_ref) {
    var icon = _ref.icon, props = _ref.props, children = _ref.children;
    var iconNode;
    if (icon === null || icon === false) {
      return null;
    }
    if (typeof icon === "function") {
      iconNode = /* @__PURE__ */ React175.createElement(icon, _objectSpread2({}, props));
    } else if (typeof icon !== "boolean") {
      iconNode = icon;
    }
    return iconNode || children || null;
  }

  // node_modules/rc-menu/es/utils/warnUtil.js
  var _excluded21 = ["item"];
  function warnItemProp(_ref) {
    var item = _ref.item, restInfo = _objectWithoutProperties(_ref, _excluded21);
    Object.defineProperty(restInfo, "item", {
      get: function get2() {
        warning_default(false, "`info.item` is deprecated since we will move to function component that not provides React Node instance in future.");
        return item;
      }
    });
    return restInfo;
  }

  // node_modules/rc-menu/es/MenuItem.js
  var _excluded25 = ["title", "attribute", "elementRef"];
  var _excluded26 = ["style", "className", "eventKey", "warnKey", "disabled", "itemIcon", "children", "role", "onMouseEnter", "onMouseLeave", "onClick", "onKeyDown", "onFocus"];
  var _excluded33 = ["active"];
  var LegacyMenuItem = /* @__PURE__ */ function(_React$Component) {
    _inherits(LegacyMenuItem2, _React$Component);
    var _super = _createSuper(LegacyMenuItem2);
    function LegacyMenuItem2() {
      _classCallCheck(this, LegacyMenuItem2);
      return _super.apply(this, arguments);
    }
    _createClass(LegacyMenuItem2, [{
      key: "render",
      value: function render2() {
        var _this$props = this.props, title = _this$props.title, attribute = _this$props.attribute, elementRef = _this$props.elementRef, restProps = _objectWithoutProperties(_this$props, _excluded25);
        var passedProps = omit(restProps, ["eventKey", "popupClassName", "popupOffset", "onTitleClick"]);
        warning_default(!attribute, "`attribute` of Menu.Item is deprecated. Please pass attribute directly.");
        return /* @__PURE__ */ React176.createElement(es_default6.Item, _extends({}, attribute, {
          title: typeof title === "string" ? title : void 0
        }, passedProps, {
          ref: elementRef
        }));
      }
    }]);
    return LegacyMenuItem2;
  }(React176.Component);
  var InternalMenuItem = /* @__PURE__ */ React176.forwardRef(function(props, ref) {
    var _classNames;
    var style2 = props.style, className = props.className, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, itemIcon = props.itemIcon, children = props.children, role = props.role, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClick = props.onClick, onKeyDown2 = props.onKeyDown, onFocus = props.onFocus, restProps = _objectWithoutProperties(props, _excluded26);
    var domDataId = useMenuId(eventKey);
    var _React$useContext = React176.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, onItemClick = _React$useContext.onItemClick, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, contextItemIcon = _React$useContext.itemIcon, selectedKeys = _React$useContext.selectedKeys, onActive = _React$useContext.onActive;
    var _React$useContext2 = React176.useContext(PrivateContext_default), _internalRenderMenuItem = _React$useContext2._internalRenderMenuItem;
    var itemCls = "".concat(prefixCls, "-item");
    var legacyMenuItemRef = React176.useRef();
    var elementRef = React176.useRef();
    var mergedDisabled = contextDisabled || disabled;
    var mergedEleRef = useComposeRef(ref, elementRef);
    var connectedKeys = useFullPath(eventKey);
    if (warnKey) {
      warning_default(false, "MenuItem should not leave undefined `key`.");
    }
    var getEventInfo = function getEventInfo2(e3) {
      return {
        key: eventKey,
        // Note: For legacy code is reversed which not like other antd component
        keyPath: _toConsumableArray(connectedKeys).reverse(),
        item: legacyMenuItemRef.current,
        domEvent: e3
      };
    };
    var mergedItemIcon = itemIcon || contextItemIcon;
    var _useActive = useActive(eventKey, mergedDisabled, onMouseEnter, onMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded33);
    var selected = selectedKeys.includes(eventKey);
    var directionStyle = useDirectionStyle(connectedKeys.length);
    var onInternalClick = function onInternalClick2(e3) {
      if (mergedDisabled) {
        return;
      }
      var info = getEventInfo(e3);
      onClick === null || onClick === void 0 || onClick(warnItemProp(info));
      onItemClick(info);
    };
    var onInternalKeyDown = function onInternalKeyDown2(e3) {
      onKeyDown2 === null || onKeyDown2 === void 0 || onKeyDown2(e3);
      if (e3.which === KeyCode_default.ENTER) {
        var info = getEventInfo(e3);
        onClick === null || onClick === void 0 || onClick(warnItemProp(info));
        onItemClick(info);
      }
    };
    var onInternalFocus = function onInternalFocus2(e3) {
      onActive(eventKey);
      onFocus === null || onFocus === void 0 || onFocus(e3);
    };
    var optionRoleProps = {};
    if (props.role === "option") {
      optionRoleProps["aria-selected"] = selected;
    }
    var renderNode = /* @__PURE__ */ React176.createElement(LegacyMenuItem, _extends({
      ref: legacyMenuItemRef,
      elementRef: mergedEleRef,
      role: role === null ? "none" : role || "menuitem",
      tabIndex: disabled ? null : -1,
      "data-menu-id": overflowDisabled && domDataId ? null : domDataId
    }, restProps, activeProps, optionRoleProps, {
      component: "li",
      "aria-disabled": disabled,
      style: _objectSpread2(_objectSpread2({}, directionStyle), style2),
      className: (0, import_classnames40.default)(itemCls, (_classNames = {}, _defineProperty(_classNames, "".concat(itemCls, "-active"), active), _defineProperty(_classNames, "".concat(itemCls, "-selected"), selected), _defineProperty(_classNames, "".concat(itemCls, "-disabled"), mergedDisabled), _classNames), className),
      onClick: onInternalClick,
      onKeyDown: onInternalKeyDown,
      onFocus: onInternalFocus
    }), children, /* @__PURE__ */ React176.createElement(Icon2, {
      props: _objectSpread2(_objectSpread2({}, props), {}, {
        isSelected: selected
      }),
      icon: mergedItemIcon
    }));
    if (_internalRenderMenuItem) {
      renderNode = _internalRenderMenuItem(renderNode, props, {
        selected
      });
    }
    return renderNode;
  });
  function MenuItem(props, ref) {
    var eventKey = props.eventKey;
    var measure = useMeasure();
    var connectedKeyPath = useFullPath(eventKey);
    React176.useEffect(function() {
      if (measure) {
        measure.registerPath(eventKey, connectedKeyPath);
        return function() {
          measure.unregisterPath(eventKey, connectedKeyPath);
        };
      }
    }, [connectedKeyPath]);
    if (measure) {
      return null;
    }
    return /* @__PURE__ */ React176.createElement(InternalMenuItem, _extends({}, props, {
      ref
    }));
  }
  var MenuItem_default = /* @__PURE__ */ React176.forwardRef(MenuItem);

  // node_modules/rc-menu/es/SubMenu/index.js
  var React181 = __toESM(require_react());
  var import_classnames43 = __toESM(require_classnames());

  // node_modules/rc-menu/es/SubMenu/SubMenuList.js
  var React177 = __toESM(require_react());
  var import_classnames41 = __toESM(require_classnames());
  var _excluded27 = ["className", "children"];
  var InternalSubMenuList = function InternalSubMenuList2(_ref, ref) {
    var className = _ref.className, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded27);
    var _React$useContext = React177.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, rtl = _React$useContext.rtl;
    return /* @__PURE__ */ React177.createElement("ul", _extends({
      className: (0, import_classnames41.default)(prefixCls, rtl && "".concat(prefixCls, "-rtl"), "".concat(prefixCls, "-sub"), "".concat(prefixCls, "-").concat(mode === "inline" ? "inline" : "vertical"), className),
      role: "menu"
    }, restProps, {
      "data-menu-list": true,
      ref
    }), children);
  };
  var SubMenuList = /* @__PURE__ */ React177.forwardRef(InternalSubMenuList);
  SubMenuList.displayName = "SubMenuList";
  var SubMenuList_default = SubMenuList;

  // node_modules/rc-menu/es/utils/commonUtil.js
  var React178 = __toESM(require_react());
  function parseChildren(children, keyPath) {
    return toArray(children).map(function(child, index2) {
      if (/* @__PURE__ */ React178.isValidElement(child)) {
        var _eventKey, _child$props;
        var key = child.key;
        var eventKey = (_eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _eventKey !== void 0 ? _eventKey : key;
        var emptyKey = eventKey === null || eventKey === void 0;
        if (emptyKey) {
          eventKey = "tmp_key-".concat([].concat(_toConsumableArray(keyPath), [index2]).join("-"));
        }
        var cloneProps = {
          key: eventKey,
          eventKey
        };
        if (emptyKey) {
          cloneProps.warnKey = true;
        }
        return /* @__PURE__ */ React178.cloneElement(child, cloneProps);
      }
      return child;
    });
  }

  // node_modules/rc-menu/es/SubMenu/PopupTrigger.js
  var React179 = __toESM(require_react());
  var import_classnames42 = __toESM(require_classnames());

  // node_modules/rc-menu/es/placements.js
  var autoAdjustOverflow2 = {
    adjustX: 1,
    adjustY: 1
  };
  var placements3 = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow2
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflow2
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow2
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflow2
    },
    leftTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow2
    },
    leftBottom: {
      points: ["br", "bl"],
      overflow: autoAdjustOverflow2
    },
    rightTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow2
    },
    rightBottom: {
      points: ["bl", "br"],
      overflow: autoAdjustOverflow2
    }
  };
  var placementsRtl = {
    topLeft: {
      points: ["bl", "tl"],
      overflow: autoAdjustOverflow2
    },
    topRight: {
      points: ["br", "tr"],
      overflow: autoAdjustOverflow2
    },
    bottomLeft: {
      points: ["tl", "bl"],
      overflow: autoAdjustOverflow2
    },
    bottomRight: {
      points: ["tr", "br"],
      overflow: autoAdjustOverflow2
    },
    rightTop: {
      points: ["tr", "tl"],
      overflow: autoAdjustOverflow2
    },
    rightBottom: {
      points: ["br", "bl"],
      overflow: autoAdjustOverflow2
    },
    leftTop: {
      points: ["tl", "tr"],
      overflow: autoAdjustOverflow2
    },
    leftBottom: {
      points: ["bl", "br"],
      overflow: autoAdjustOverflow2
    }
  };

  // node_modules/rc-menu/es/utils/motionUtil.js
  function getMotion2(mode, motion2, defaultMotions) {
    if (motion2) {
      return motion2;
    }
    if (defaultMotions) {
      return defaultMotions[mode] || defaultMotions.other;
    }
    return void 0;
  }

  // node_modules/rc-menu/es/SubMenu/PopupTrigger.js
  var popupPlacementMap = {
    horizontal: "bottomLeft",
    vertical: "rightTop",
    "vertical-left": "rightTop",
    "vertical-right": "leftTop"
  };
  function PopupTrigger(_ref) {
    var prefixCls = _ref.prefixCls, visible = _ref.visible, children = _ref.children, popup = _ref.popup, popupStyle = _ref.popupStyle, popupClassName = _ref.popupClassName, popupOffset = _ref.popupOffset, disabled = _ref.disabled, mode = _ref.mode, onVisibleChange = _ref.onVisibleChange;
    var _React$useContext = React179.useContext(MenuContext), getPopupContainer = _React$useContext.getPopupContainer, rtl = _React$useContext.rtl, subMenuOpenDelay = _React$useContext.subMenuOpenDelay, subMenuCloseDelay = _React$useContext.subMenuCloseDelay, builtinPlacements = _React$useContext.builtinPlacements, triggerSubMenuAction = _React$useContext.triggerSubMenuAction, forceSubMenuRender = _React$useContext.forceSubMenuRender, rootClassName = _React$useContext.rootClassName, motion2 = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions;
    var _React$useState = React179.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), innerVisible = _React$useState2[0], setInnerVisible = _React$useState2[1];
    var placement = rtl ? _objectSpread2(_objectSpread2({}, placementsRtl), builtinPlacements) : _objectSpread2(_objectSpread2({}, placements3), builtinPlacements);
    var popupPlacement = popupPlacementMap[mode];
    var targetMotion = getMotion2(mode, motion2, defaultMotions);
    var targetMotionRef = React179.useRef(targetMotion);
    if (mode !== "inline") {
      targetMotionRef.current = targetMotion;
    }
    var mergedMotion = _objectSpread2(_objectSpread2({}, targetMotionRef.current), {}, {
      leavedClassName: "".concat(prefixCls, "-hidden"),
      removeOnLeave: false,
      motionAppear: true
    });
    var visibleRef = React179.useRef();
    React179.useEffect(function() {
      visibleRef.current = raf_default(function() {
        setInnerVisible(visible);
      });
      return function() {
        raf_default.cancel(visibleRef.current);
      };
    }, [visible]);
    return /* @__PURE__ */ React179.createElement(es_default7, {
      prefixCls,
      popupClassName: (0, import_classnames42.default)("".concat(prefixCls, "-popup"), _defineProperty({}, "".concat(prefixCls, "-rtl"), rtl), popupClassName, rootClassName),
      stretch: mode === "horizontal" ? "minWidth" : null,
      getPopupContainer,
      builtinPlacements: placement,
      popupPlacement,
      popupVisible: innerVisible,
      popup,
      popupStyle,
      popupAlign: popupOffset && {
        offset: popupOffset
      },
      action: disabled ? [] : [triggerSubMenuAction],
      mouseEnterDelay: subMenuOpenDelay,
      mouseLeaveDelay: subMenuCloseDelay,
      onPopupVisibleChange: onVisibleChange,
      forceRender: forceSubMenuRender,
      popupMotion: mergedMotion,
      fresh: true
    }, children);
  }

  // node_modules/rc-menu/es/SubMenu/InlineSubMenuList.js
  var React180 = __toESM(require_react());
  function InlineSubMenuList(_ref) {
    var id = _ref.id, open = _ref.open, keyPath = _ref.keyPath, children = _ref.children;
    var fixedMode = "inline";
    var _React$useContext = React180.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, forceSubMenuRender = _React$useContext.forceSubMenuRender, motion2 = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions, mode = _React$useContext.mode;
    var sameModeRef = React180.useRef(false);
    sameModeRef.current = mode === fixedMode;
    var _React$useState = React180.useState(!sameModeRef.current), _React$useState2 = _slicedToArray(_React$useState, 2), destroy = _React$useState2[0], setDestroy = _React$useState2[1];
    var mergedOpen = sameModeRef.current ? open : false;
    React180.useEffect(function() {
      if (sameModeRef.current) {
        setDestroy(false);
      }
    }, [mode]);
    var mergedMotion = _objectSpread2({}, getMotion2(fixedMode, motion2, defaultMotions));
    if (keyPath.length > 1) {
      mergedMotion.motionAppear = false;
    }
    var originOnVisibleChanged = mergedMotion.onVisibleChanged;
    mergedMotion.onVisibleChanged = function(newVisible) {
      if (!sameModeRef.current && !newVisible) {
        setDestroy(true);
      }
      return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);
    };
    if (destroy) {
      return null;
    }
    return /* @__PURE__ */ React180.createElement(InheritableContextProvider, {
      mode: fixedMode,
      locked: !sameModeRef.current
    }, /* @__PURE__ */ React180.createElement(es_default2, _extends({
      visible: mergedOpen
    }, mergedMotion, {
      forceRender: forceSubMenuRender,
      removeOnLeave: false,
      leavedClassName: "".concat(prefixCls, "-hidden")
    }), function(_ref2) {
      var motionClassName = _ref2.className, motionStyle = _ref2.style;
      return /* @__PURE__ */ React180.createElement(SubMenuList_default, {
        id,
        className: motionClassName,
        style: motionStyle
      }, children);
    }));
  }

  // node_modules/rc-menu/es/SubMenu/index.js
  var _excluded28 = ["style", "className", "title", "eventKey", "warnKey", "disabled", "internalPopupClose", "children", "itemIcon", "expandIcon", "popupClassName", "popupOffset", "popupStyle", "onClick", "onMouseEnter", "onMouseLeave", "onTitleClick", "onTitleMouseEnter", "onTitleMouseLeave"];
  var _excluded29 = ["active"];
  var InternalSubMenu = function InternalSubMenu2(props) {
    var _classNames;
    var style2 = props.style, className = props.className, title = props.title, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, internalPopupClose = props.internalPopupClose, children = props.children, itemIcon = props.itemIcon, expandIcon = props.expandIcon, popupClassName = props.popupClassName, popupOffset = props.popupOffset, popupStyle = props.popupStyle, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onTitleClick = props.onTitleClick, onTitleMouseEnter = props.onTitleMouseEnter, onTitleMouseLeave = props.onTitleMouseLeave, restProps = _objectWithoutProperties(props, _excluded28);
    var domDataId = useMenuId(eventKey);
    var _React$useContext = React181.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, openKeys = _React$useContext.openKeys, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, activeKey = _React$useContext.activeKey, selectedKeys = _React$useContext.selectedKeys, contextItemIcon = _React$useContext.itemIcon, contextExpandIcon = _React$useContext.expandIcon, onItemClick = _React$useContext.onItemClick, onOpenChange = _React$useContext.onOpenChange, onActive = _React$useContext.onActive;
    var _React$useContext2 = React181.useContext(PrivateContext_default), _internalRenderSubMenuItem = _React$useContext2._internalRenderSubMenuItem;
    var _React$useContext3 = React181.useContext(PathUserContext), isSubPathKey = _React$useContext3.isSubPathKey;
    var connectedPath = useFullPath();
    var subMenuPrefixCls = "".concat(prefixCls, "-submenu");
    var mergedDisabled = contextDisabled || disabled;
    var elementRef = React181.useRef();
    var popupRef = React181.useRef();
    if (warnKey) {
      warning_default(false, "SubMenu should not leave undefined `key`.");
    }
    var mergedItemIcon = itemIcon !== null && itemIcon !== void 0 ? itemIcon : contextItemIcon;
    var mergedExpandIcon = expandIcon !== null && expandIcon !== void 0 ? expandIcon : contextExpandIcon;
    var originOpen = openKeys.includes(eventKey);
    var open = !overflowDisabled && originOpen;
    var childrenSelected = isSubPathKey(selectedKeys, eventKey);
    var _useActive = useActive(eventKey, mergedDisabled, onTitleMouseEnter, onTitleMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded29);
    var _React$useState = React181.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), childrenActive = _React$useState2[0], setChildrenActive = _React$useState2[1];
    var triggerChildrenActive = function triggerChildrenActive2(newActive) {
      if (!mergedDisabled) {
        setChildrenActive(newActive);
      }
    };
    var onInternalMouseEnter = function onInternalMouseEnter2(domEvent) {
      triggerChildrenActive(true);
      onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
        key: eventKey,
        domEvent
      });
    };
    var onInternalMouseLeave = function onInternalMouseLeave2(domEvent) {
      triggerChildrenActive(false);
      onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
        key: eventKey,
        domEvent
      });
    };
    var mergedActive = React181.useMemo(function() {
      if (active) {
        return active;
      }
      if (mode !== "inline") {
        return childrenActive || isSubPathKey([activeKey], eventKey);
      }
      return false;
    }, [mode, active, activeKey, childrenActive, eventKey, isSubPathKey]);
    var directionStyle = useDirectionStyle(connectedPath.length);
    var onInternalTitleClick = function onInternalTitleClick2(e3) {
      if (mergedDisabled) {
        return;
      }
      onTitleClick === null || onTitleClick === void 0 || onTitleClick({
        key: eventKey,
        domEvent: e3
      });
      if (mode === "inline") {
        onOpenChange(eventKey, !originOpen);
      }
    };
    var onMergedItemClick = useMemoCallback(function(info) {
      onClick === null || onClick === void 0 || onClick(warnItemProp(info));
      onItemClick(info);
    });
    var onPopupVisibleChange = function onPopupVisibleChange2(newVisible) {
      if (mode !== "inline") {
        onOpenChange(eventKey, newVisible);
      }
    };
    var onInternalFocus = function onInternalFocus2() {
      onActive(eventKey);
    };
    var popupId = domDataId && "".concat(domDataId, "-popup");
    var titleNode = /* @__PURE__ */ React181.createElement("div", _extends({
      role: "menuitem",
      style: directionStyle,
      className: "".concat(subMenuPrefixCls, "-title"),
      tabIndex: mergedDisabled ? null : -1,
      ref: elementRef,
      title: typeof title === "string" ? title : null,
      "data-menu-id": overflowDisabled && domDataId ? null : domDataId,
      "aria-expanded": open,
      "aria-haspopup": true,
      "aria-controls": popupId,
      "aria-disabled": mergedDisabled,
      onClick: onInternalTitleClick,
      onFocus: onInternalFocus
    }, activeProps), title, /* @__PURE__ */ React181.createElement(Icon2, {
      icon: mode !== "horizontal" ? mergedExpandIcon : void 0,
      props: _objectSpread2(_objectSpread2({}, props), {}, {
        isOpen: open,
        // [Legacy] Not sure why need this mark
        isSubMenu: true
      })
    }, /* @__PURE__ */ React181.createElement("i", {
      className: "".concat(subMenuPrefixCls, "-arrow")
    })));
    var triggerModeRef = React181.useRef(mode);
    if (mode !== "inline" && connectedPath.length > 1) {
      triggerModeRef.current = "vertical";
    } else {
      triggerModeRef.current = mode;
    }
    if (!overflowDisabled) {
      var triggerMode = triggerModeRef.current;
      titleNode = /* @__PURE__ */ React181.createElement(PopupTrigger, {
        mode: triggerMode,
        prefixCls: subMenuPrefixCls,
        visible: !internalPopupClose && open && mode !== "inline",
        popupClassName,
        popupOffset,
        popupStyle,
        popup: /* @__PURE__ */ React181.createElement(
          InheritableContextProvider,
          {
            mode: triggerMode === "horizontal" ? "vertical" : triggerMode
          },
          /* @__PURE__ */ React181.createElement(SubMenuList_default, {
            id: popupId,
            ref: popupRef
          }, children)
        ),
        disabled: mergedDisabled,
        onVisibleChange: onPopupVisibleChange
      }, titleNode);
    }
    var listNode = /* @__PURE__ */ React181.createElement(es_default6.Item, _extends({
      role: "none"
    }, restProps, {
      component: "li",
      style: style2,
      className: (0, import_classnames43.default)(subMenuPrefixCls, "".concat(subMenuPrefixCls, "-").concat(mode), className, (_classNames = {}, _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-open"), open), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-active"), mergedActive), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-selected"), childrenSelected), _defineProperty(_classNames, "".concat(subMenuPrefixCls, "-disabled"), mergedDisabled), _classNames)),
      onMouseEnter: onInternalMouseEnter,
      onMouseLeave: onInternalMouseLeave
    }), titleNode, !overflowDisabled && /* @__PURE__ */ React181.createElement(InlineSubMenuList, {
      id: popupId,
      open,
      keyPath: connectedPath
    }, children));
    if (_internalRenderSubMenuItem) {
      listNode = _internalRenderSubMenuItem(listNode, props, {
        selected: childrenSelected,
        active: mergedActive,
        open,
        disabled: mergedDisabled
      });
    }
    return /* @__PURE__ */ React181.createElement(InheritableContextProvider, {
      onItemClick: onMergedItemClick,
      mode: mode === "horizontal" ? "vertical" : mode,
      itemIcon: mergedItemIcon,
      expandIcon: mergedExpandIcon
    }, listNode);
  };
  function SubMenu(props) {
    var eventKey = props.eventKey, children = props.children;
    var connectedKeyPath = useFullPath(eventKey);
    var childList = parseChildren(children, connectedKeyPath);
    var measure = useMeasure();
    React181.useEffect(function() {
      if (measure) {
        measure.registerPath(eventKey, connectedKeyPath);
        return function() {
          measure.unregisterPath(eventKey, connectedKeyPath);
        };
      }
    }, [connectedKeyPath]);
    var renderNode;
    if (measure) {
      renderNode = childList;
    } else {
      renderNode = /* @__PURE__ */ React181.createElement(InternalSubMenu, props, childList);
    }
    return /* @__PURE__ */ React181.createElement(PathTrackerContext.Provider, {
      value: connectedKeyPath
    }, renderNode);
  }

  // node_modules/rc-menu/es/utils/nodeUtil.js
  var React184 = __toESM(require_react());

  // node_modules/rc-menu/es/MenuItemGroup.js
  var import_classnames44 = __toESM(require_classnames());
  var React182 = __toESM(require_react());
  var _excluded30 = ["className", "title", "eventKey", "children"];
  var _excluded210 = ["children"];
  var InternalMenuItemGroup = function InternalMenuItemGroup2(_ref) {
    var className = _ref.className, title = _ref.title, eventKey = _ref.eventKey, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded30);
    var _React$useContext = React182.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
    var groupPrefixCls = "".concat(prefixCls, "-item-group");
    return /* @__PURE__ */ React182.createElement("li", _extends({
      role: "presentation"
    }, restProps, {
      onClick: function onClick(e3) {
        return e3.stopPropagation();
      },
      className: (0, import_classnames44.default)(groupPrefixCls, className)
    }), /* @__PURE__ */ React182.createElement("div", {
      role: "presentation",
      className: "".concat(groupPrefixCls, "-title"),
      title: typeof title === "string" ? title : void 0
    }, title), /* @__PURE__ */ React182.createElement("ul", {
      role: "group",
      className: "".concat(groupPrefixCls, "-list")
    }, children));
  };
  function MenuItemGroup(_ref2) {
    var children = _ref2.children, props = _objectWithoutProperties(_ref2, _excluded210);
    var connectedKeyPath = useFullPath(props.eventKey);
    var childList = parseChildren(children, connectedKeyPath);
    var measure = useMeasure();
    if (measure) {
      return childList;
    }
    return /* @__PURE__ */ React182.createElement(InternalMenuItemGroup, omit(props, ["warnKey"]), childList);
  }

  // node_modules/rc-menu/es/Divider.js
  var React183 = __toESM(require_react());
  var import_classnames45 = __toESM(require_classnames());
  function Divider(_ref) {
    var className = _ref.className, style2 = _ref.style;
    var _React$useContext = React183.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
    var measure = useMeasure();
    if (measure) {
      return null;
    }
    return /* @__PURE__ */ React183.createElement("li", {
      role: "separator",
      className: (0, import_classnames45.default)("".concat(prefixCls, "-item-divider"), className),
      style: style2
    });
  }

  // node_modules/rc-menu/es/utils/nodeUtil.js
  var _excluded31 = ["label", "children", "key", "type"];
  function convertItemsToNodes(list) {
    return (list || []).map(function(opt, index2) {
      if (opt && _typeof(opt) === "object") {
        var _ref = opt, label = _ref.label, children = _ref.children, key = _ref.key, type4 = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded31);
        var mergedKey = key !== null && key !== void 0 ? key : "tmp-".concat(index2);
        if (children || type4 === "group") {
          if (type4 === "group") {
            return /* @__PURE__ */ React184.createElement(MenuItemGroup, _extends({
              key: mergedKey
            }, restProps, {
              title: label
            }), convertItemsToNodes(children));
          }
          return /* @__PURE__ */ React184.createElement(SubMenu, _extends({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes(children));
        }
        if (type4 === "divider") {
          return /* @__PURE__ */ React184.createElement(Divider, _extends({
            key: mergedKey
          }, restProps));
        }
        return /* @__PURE__ */ React184.createElement(MenuItem_default, _extends({
          key: mergedKey
        }, restProps), label);
      }
      return null;
    }).filter(function(opt) {
      return opt;
    });
  }
  function parseItems(children, items, keyPath) {
    var childNodes = children;
    if (items) {
      childNodes = convertItemsToNodes(items);
    }
    return parseChildren(childNodes, keyPath);
  }

  // node_modules/rc-menu/es/Menu.js
  var _excluded34 = ["prefixCls", "rootClassName", "style", "className", "tabIndex", "items", "children", "direction", "id", "mode", "inlineCollapsed", "disabled", "disabledOverflow", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "defaultOpenKeys", "openKeys", "activeKey", "defaultActiveFirst", "selectable", "multiple", "defaultSelectedKeys", "selectedKeys", "onSelect", "onDeselect", "inlineIndent", "motion", "defaultMotions", "triggerSubMenuAction", "builtinPlacements", "itemIcon", "expandIcon", "overflowedIndicator", "overflowedIndicatorPopupClassName", "getPopupContainer", "onClick", "onOpenChange", "onKeyDown", "openAnimation", "openTransitionName", "_internalRenderMenuItem", "_internalRenderSubMenuItem"];
  var EMPTY_LIST2 = [];
  var Menu = /* @__PURE__ */ React185.forwardRef(function(props, ref) {
    var _childList$, _classNames;
    var _ref = props, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-menu" : _ref$prefixCls, rootClassName = _ref.rootClassName, style2 = _ref.style, className = _ref.className, _ref$tabIndex = _ref.tabIndex, tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex, items = _ref.items, children = _ref.children, direction = _ref.direction, id = _ref.id, _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? "vertical" : _ref$mode, inlineCollapsed = _ref.inlineCollapsed, disabled = _ref.disabled, disabledOverflow = _ref.disabledOverflow, _ref$subMenuOpenDelay = _ref.subMenuOpenDelay, subMenuOpenDelay = _ref$subMenuOpenDelay === void 0 ? 0.1 : _ref$subMenuOpenDelay, _ref$subMenuCloseDela = _ref.subMenuCloseDelay, subMenuCloseDelay = _ref$subMenuCloseDela === void 0 ? 0.1 : _ref$subMenuCloseDela, forceSubMenuRender = _ref.forceSubMenuRender, defaultOpenKeys = _ref.defaultOpenKeys, openKeys = _ref.openKeys, activeKey = _ref.activeKey, defaultActiveFirst = _ref.defaultActiveFirst, _ref$selectable = _ref.selectable, selectable = _ref$selectable === void 0 ? true : _ref$selectable, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple, defaultSelectedKeys = _ref.defaultSelectedKeys, selectedKeys = _ref.selectedKeys, onSelect = _ref.onSelect, onDeselect = _ref.onDeselect, _ref$inlineIndent = _ref.inlineIndent, inlineIndent = _ref$inlineIndent === void 0 ? 24 : _ref$inlineIndent, motion2 = _ref.motion, defaultMotions = _ref.defaultMotions, _ref$triggerSubMenuAc = _ref.triggerSubMenuAction, triggerSubMenuAction = _ref$triggerSubMenuAc === void 0 ? "hover" : _ref$triggerSubMenuAc, builtinPlacements = _ref.builtinPlacements, itemIcon = _ref.itemIcon, expandIcon = _ref.expandIcon, _ref$overflowedIndica = _ref.overflowedIndicator, overflowedIndicator = _ref$overflowedIndica === void 0 ? "..." : _ref$overflowedIndica, overflowedIndicatorPopupClassName = _ref.overflowedIndicatorPopupClassName, getPopupContainer = _ref.getPopupContainer, onClick = _ref.onClick, onOpenChange = _ref.onOpenChange, onKeyDown2 = _ref.onKeyDown, openAnimation = _ref.openAnimation, openTransitionName = _ref.openTransitionName, _internalRenderMenuItem = _ref._internalRenderMenuItem, _internalRenderSubMenuItem = _ref._internalRenderSubMenuItem, restProps = _objectWithoutProperties(_ref, _excluded34);
    var childList = React185.useMemo(function() {
      return parseItems(children, items, EMPTY_LIST2);
    }, [children, items]);
    var _React$useState = React185.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mounted = _React$useState2[0], setMounted = _React$useState2[1];
    var containerRef = React185.useRef();
    var uuid8 = useUUID(id);
    var isRtl = direction === "rtl";
    if (true) {
      warning_default(!openAnimation && !openTransitionName, "`openAnimation` and `openTransitionName` is removed. Please use `motion` or `defaultMotion` instead.");
    }
    var _useMergedState = useMergedState(defaultOpenKeys, {
      value: openKeys,
      postState: function postState(keys2) {
        return keys2 || EMPTY_LIST2;
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedOpenKeys = _useMergedState2[0], setMergedOpenKeys = _useMergedState2[1];
    var triggerOpenKeys = function triggerOpenKeys2(keys2) {
      var forceFlush = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      function doUpdate() {
        setMergedOpenKeys(keys2);
        onOpenChange === null || onOpenChange === void 0 || onOpenChange(keys2);
      }
      if (forceFlush) {
        (0, import_react_dom5.flushSync)(doUpdate);
      } else {
        doUpdate();
      }
    };
    var _React$useState3 = React185.useState(mergedOpenKeys), _React$useState4 = _slicedToArray(_React$useState3, 2), inlineCacheOpenKeys = _React$useState4[0], setInlineCacheOpenKeys = _React$useState4[1];
    var mountRef = React185.useRef(false);
    var _React$useMemo = React185.useMemo(function() {
      if ((mode === "inline" || mode === "vertical") && inlineCollapsed) {
        return ["vertical", inlineCollapsed];
      }
      return [mode, false];
    }, [mode, inlineCollapsed]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), mergedMode = _React$useMemo2[0], mergedInlineCollapsed = _React$useMemo2[1];
    var isInlineMode = mergedMode === "inline";
    var _React$useState5 = React185.useState(mergedMode), _React$useState6 = _slicedToArray(_React$useState5, 2), internalMode = _React$useState6[0], setInternalMode = _React$useState6[1];
    var _React$useState7 = React185.useState(mergedInlineCollapsed), _React$useState8 = _slicedToArray(_React$useState7, 2), internalInlineCollapsed = _React$useState8[0], setInternalInlineCollapsed = _React$useState8[1];
    React185.useEffect(function() {
      setInternalMode(mergedMode);
      setInternalInlineCollapsed(mergedInlineCollapsed);
      if (!mountRef.current) {
        return;
      }
      if (isInlineMode) {
        setMergedOpenKeys(inlineCacheOpenKeys);
      } else {
        triggerOpenKeys(EMPTY_LIST2);
      }
    }, [mergedMode, mergedInlineCollapsed]);
    var _React$useState9 = React185.useState(0), _React$useState10 = _slicedToArray(_React$useState9, 2), lastVisibleIndex = _React$useState10[0], setLastVisibleIndex = _React$useState10[1];
    var allVisible = lastVisibleIndex >= childList.length - 1 || internalMode !== "horizontal" || disabledOverflow;
    React185.useEffect(function() {
      if (isInlineMode) {
        setInlineCacheOpenKeys(mergedOpenKeys);
      }
    }, [mergedOpenKeys]);
    React185.useEffect(function() {
      mountRef.current = true;
      return function() {
        mountRef.current = false;
      };
    }, []);
    var _useKeyRecords = useKeyRecords(), registerPath = _useKeyRecords.registerPath, unregisterPath = _useKeyRecords.unregisterPath, refreshOverflowKeys = _useKeyRecords.refreshOverflowKeys, isSubPathKey = _useKeyRecords.isSubPathKey, getKeyPath = _useKeyRecords.getKeyPath, getKeys = _useKeyRecords.getKeys, getSubPathKeys = _useKeyRecords.getSubPathKeys;
    var registerPathContext = React185.useMemo(function() {
      return {
        registerPath,
        unregisterPath
      };
    }, [registerPath, unregisterPath]);
    var pathUserContext = React185.useMemo(function() {
      return {
        isSubPathKey
      };
    }, [isSubPathKey]);
    React185.useEffect(function() {
      refreshOverflowKeys(allVisible ? EMPTY_LIST2 : childList.slice(lastVisibleIndex + 1).map(function(child) {
        return child.key;
      }));
    }, [lastVisibleIndex, allVisible]);
    var _useMergedState3 = useMergedState(activeKey || defaultActiveFirst && ((_childList$ = childList[0]) === null || _childList$ === void 0 ? void 0 : _childList$.key), {
      value: activeKey
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedActiveKey = _useMergedState4[0], setMergedActiveKey = _useMergedState4[1];
    var onActive = useMemoCallback(function(key) {
      setMergedActiveKey(key);
    });
    var onInactive = useMemoCallback(function() {
      setMergedActiveKey(void 0);
    });
    (0, import_react59.useImperativeHandle)(ref, function() {
      return {
        list: containerRef.current,
        focus: function focus(options) {
          var _childList$find;
          var keys2 = getKeys();
          var _refreshElements = refreshElements(keys2, uuid8), elements = _refreshElements.elements, key2element = _refreshElements.key2element, element2key = _refreshElements.element2key;
          var focusableElements = getFocusableElements(containerRef.current, elements);
          var shouldFocusKey = mergedActiveKey !== null && mergedActiveKey !== void 0 ? mergedActiveKey : focusableElements[0] ? element2key.get(focusableElements[0]) : (_childList$find = childList.find(function(node2) {
            return !node2.props.disabled;
          })) === null || _childList$find === void 0 ? void 0 : _childList$find.key;
          var elementToFocus = key2element.get(shouldFocusKey);
          if (shouldFocusKey && elementToFocus) {
            var _elementToFocus$focus;
            elementToFocus === null || elementToFocus === void 0 || (_elementToFocus$focus = elementToFocus.focus) === null || _elementToFocus$focus === void 0 || _elementToFocus$focus.call(elementToFocus, options);
          }
        }
      };
    });
    var _useMergedState5 = useMergedState(defaultSelectedKeys || [], {
      value: selectedKeys,
      // Legacy convert key to array
      postState: function postState(keys2) {
        if (Array.isArray(keys2)) {
          return keys2;
        }
        if (keys2 === null || keys2 === void 0) {
          return EMPTY_LIST2;
        }
        return [keys2];
      }
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedSelectKeys = _useMergedState6[0], setMergedSelectKeys = _useMergedState6[1];
    var triggerSelection = function triggerSelection2(info) {
      if (selectable) {
        var targetKey = info.key;
        var exist = mergedSelectKeys.includes(targetKey);
        var newSelectKeys;
        if (multiple) {
          if (exist) {
            newSelectKeys = mergedSelectKeys.filter(function(key) {
              return key !== targetKey;
            });
          } else {
            newSelectKeys = [].concat(_toConsumableArray(mergedSelectKeys), [targetKey]);
          }
        } else {
          newSelectKeys = [targetKey];
        }
        setMergedSelectKeys(newSelectKeys);
        var selectInfo = _objectSpread2(_objectSpread2({}, info), {}, {
          selectedKeys: newSelectKeys
        });
        if (exist) {
          onDeselect === null || onDeselect === void 0 || onDeselect(selectInfo);
        } else {
          onSelect === null || onSelect === void 0 || onSelect(selectInfo);
        }
      }
      if (!multiple && mergedOpenKeys.length && internalMode !== "inline") {
        triggerOpenKeys(EMPTY_LIST2);
      }
    };
    var onInternalClick = useMemoCallback(function(info) {
      onClick === null || onClick === void 0 || onClick(warnItemProp(info));
      triggerSelection(info);
    });
    var onInternalOpenChange = useMemoCallback(function(key, open) {
      var newOpenKeys = mergedOpenKeys.filter(function(k) {
        return k !== key;
      });
      if (open) {
        newOpenKeys.push(key);
      } else if (internalMode !== "inline") {
        var subPathKeys = getSubPathKeys(key);
        newOpenKeys = newOpenKeys.filter(function(k) {
          return !subPathKeys.has(k);
        });
      }
      if (!isEqual_default(mergedOpenKeys, newOpenKeys, true)) {
        triggerOpenKeys(newOpenKeys, true);
      }
    });
    var triggerAccessibilityOpen = function triggerAccessibilityOpen2(key, open) {
      var nextOpen = open !== null && open !== void 0 ? open : !mergedOpenKeys.includes(key);
      onInternalOpenChange(key, nextOpen);
    };
    var onInternalKeyDown = useAccessibility2(internalMode, mergedActiveKey, isRtl, uuid8, containerRef, getKeys, getKeyPath, setMergedActiveKey, triggerAccessibilityOpen, onKeyDown2);
    React185.useEffect(function() {
      setMounted(true);
    }, []);
    var privateContext = React185.useMemo(function() {
      return {
        _internalRenderMenuItem,
        _internalRenderSubMenuItem
      };
    }, [_internalRenderMenuItem, _internalRenderSubMenuItem]);
    var wrappedChildList = internalMode !== "horizontal" || disabledOverflow ? childList : (
      // Need wrap for overflow dropdown that do not response for open
      childList.map(function(child, index2) {
        return (
          // Always wrap provider to avoid sub node re-mount
          /* @__PURE__ */ React185.createElement(InheritableContextProvider, {
            key: child.key,
            overflowDisabled: index2 > lastVisibleIndex
          }, child)
        );
      })
    );
    var container = /* @__PURE__ */ React185.createElement(es_default6, _extends({
      id,
      ref: containerRef,
      prefixCls: "".concat(prefixCls, "-overflow"),
      component: "ul",
      itemComponent: MenuItem_default,
      className: (0, import_classnames46.default)(prefixCls, "".concat(prefixCls, "-root"), "".concat(prefixCls, "-").concat(internalMode), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-inline-collapsed"), internalInlineCollapsed), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), isRtl), _classNames), rootClassName),
      dir: direction,
      style: style2,
      role: "menu",
      tabIndex,
      data: wrappedChildList,
      renderRawItem: function renderRawItem(node2) {
        return node2;
      },
      renderRawRest: function renderRawRest(omitItems) {
        var len = omitItems.length;
        var originOmitItems = len ? childList.slice(-len) : null;
        return /* @__PURE__ */ React185.createElement(SubMenu, {
          eventKey: OVERFLOW_KEY,
          title: overflowedIndicator,
          disabled: allVisible,
          internalPopupClose: len === 0,
          popupClassName: overflowedIndicatorPopupClassName
        }, originOmitItems);
      },
      maxCount: internalMode !== "horizontal" || disabledOverflow ? es_default6.INVALIDATE : es_default6.RESPONSIVE,
      ssr: "full",
      "data-menu-list": true,
      onVisibleChange: function onVisibleChange(newLastIndex) {
        setLastVisibleIndex(newLastIndex);
      },
      onKeyDown: onInternalKeyDown
    }, restProps));
    return /* @__PURE__ */ React185.createElement(PrivateContext_default.Provider, {
      value: privateContext
    }, /* @__PURE__ */ React185.createElement(IdContext.Provider, {
      value: uuid8
    }, /* @__PURE__ */ React185.createElement(InheritableContextProvider, {
      prefixCls,
      rootClassName,
      mode: internalMode,
      openKeys: mergedOpenKeys,
      rtl: isRtl,
      disabled,
      motion: mounted ? motion2 : null,
      defaultMotions: mounted ? defaultMotions : null,
      activeKey: mergedActiveKey,
      onActive,
      onInactive,
      selectedKeys: mergedSelectKeys,
      inlineIndent,
      subMenuOpenDelay,
      subMenuCloseDelay,
      forceSubMenuRender,
      builtinPlacements,
      triggerSubMenuAction,
      getPopupContainer,
      itemIcon,
      expandIcon,
      onItemClick: onInternalClick,
      onOpenChange: onInternalOpenChange
    }, /* @__PURE__ */ React185.createElement(PathUserContext.Provider, {
      value: pathUserContext
    }, container), /* @__PURE__ */ React185.createElement("div", {
      style: {
        display: "none"
      },
      "aria-hidden": true
    }, /* @__PURE__ */ React185.createElement(PathRegisterContext.Provider, {
      value: registerPathContext
    }, childList)))));
  });
  var Menu_default = Menu;

  // node_modules/rc-menu/es/index.js
  var ExportMenu = Menu_default;
  ExportMenu.Item = MenuItem_default;
  ExportMenu.SubMenu = SubMenu;
  ExportMenu.ItemGroup = MenuItemGroup;
  ExportMenu.Divider = Divider;
  var es_default12 = ExportMenu;

  // node_modules/antd/es/layout/Sider.js
  var React189 = __toESM(require_react());
  var import_react60 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/BarsOutlined.js
  var React186 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/BarsOutlined.js
  var BarsOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "bars", "theme": "outlined" };
  var BarsOutlined_default = BarsOutlined;

  // node_modules/@ant-design/icons/es/icons/BarsOutlined.js
  var BarsOutlined2 = function BarsOutlined3(props, ref) {
    return /* @__PURE__ */ React186.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: BarsOutlined_default
    }));
  };
  if (true) {
    BarsOutlined2.displayName = "BarsOutlined";
  }
  var BarsOutlined_default2 = /* @__PURE__ */ React186.forwardRef(BarsOutlined2);

  // node_modules/@ant-design/icons/es/icons/LeftOutlined.js
  var React187 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js
  var LeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z" } }] }, "name": "left", "theme": "outlined" };
  var LeftOutlined_default = LeftOutlined;

  // node_modules/@ant-design/icons/es/icons/LeftOutlined.js
  var LeftOutlined2 = function LeftOutlined3(props, ref) {
    return /* @__PURE__ */ React187.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: LeftOutlined_default
    }));
  };
  if (true) {
    LeftOutlined2.displayName = "LeftOutlined";
  }
  var LeftOutlined_default2 = /* @__PURE__ */ React187.forwardRef(LeftOutlined2);

  // node_modules/antd/es/layout/Sider.js
  var import_classnames47 = __toESM(require_classnames());

  // node_modules/antd/es/_util/isNumeric.js
  var isNumeric = (value) => !isNaN(parseFloat(value)) && isFinite(value);
  var isNumeric_default = isNumeric;

  // node_modules/antd/es/layout/context.js
  var React188 = __toESM(require_react());
  var LayoutContext = /* @__PURE__ */ React188.createContext({
    siderHook: {
      addSider: () => null,
      removeSider: () => null
    }
  });

  // node_modules/antd/es/layout/Sider.js
  var __rest13 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var dimensionMaxMap = {
    xs: "479.98px",
    sm: "575.98px",
    md: "767.98px",
    lg: "991.98px",
    xl: "1199.98px",
    xxl: "1599.98px"
  };
  var SiderContext = /* @__PURE__ */ React189.createContext({});
  var generateId = /* @__PURE__ */ (() => {
    let i = 0;
    return function() {
      let prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      i += 1;
      return `${prefix}${i}`;
    };
  })();
  var Sider = /* @__PURE__ */ React189.forwardRef((props, ref) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      trigger,
      children,
      defaultCollapsed = false,
      theme: theme3 = "dark",
      style: style2 = {},
      collapsible = false,
      reverseArrow = false,
      width = 200,
      collapsedWidth = 80,
      zeroWidthTriggerStyle,
      breakpoint,
      onCollapse,
      onBreakpoint
    } = props, otherProps = __rest13(props, ["prefixCls", "className", "trigger", "children", "defaultCollapsed", "theme", "style", "collapsible", "reverseArrow", "width", "collapsedWidth", "zeroWidthTriggerStyle", "breakpoint", "onCollapse", "onBreakpoint"]);
    const {
      siderHook
    } = (0, import_react60.useContext)(LayoutContext);
    const [collapsed, setCollapsed] = (0, import_react60.useState)("collapsed" in props ? props.collapsed : defaultCollapsed);
    const [below, setBelow] = (0, import_react60.useState)(false);
    (0, import_react60.useEffect)(() => {
      if ("collapsed" in props) {
        setCollapsed(props.collapsed);
      }
    }, [props.collapsed]);
    const handleSetCollapsed = (value, type4) => {
      if (!("collapsed" in props)) {
        setCollapsed(value);
      }
      onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(value, type4);
    };
    const responsiveHandlerRef = (0, import_react60.useRef)();
    responsiveHandlerRef.current = (mql) => {
      setBelow(mql.matches);
      onBreakpoint === null || onBreakpoint === void 0 ? void 0 : onBreakpoint(mql.matches);
      if (collapsed !== mql.matches) {
        handleSetCollapsed(mql.matches, "responsive");
      }
    };
    (0, import_react60.useEffect)(() => {
      function responsiveHandler(mql2) {
        return responsiveHandlerRef.current(mql2);
      }
      let mql;
      if (typeof window !== "undefined") {
        const {
          matchMedia
        } = window;
        if (matchMedia && breakpoint && breakpoint in dimensionMaxMap) {
          mql = matchMedia(`screen and (max-width: ${dimensionMaxMap[breakpoint]})`);
          try {
            mql.addEventListener("change", responsiveHandler);
          } catch (error) {
            mql.addListener(responsiveHandler);
          }
          responsiveHandler(mql);
        }
      }
      return () => {
        try {
          mql === null || mql === void 0 ? void 0 : mql.removeEventListener("change", responsiveHandler);
        } catch (error) {
          mql === null || mql === void 0 ? void 0 : mql.removeListener(responsiveHandler);
        }
      };
    }, [breakpoint]);
    (0, import_react60.useEffect)(() => {
      const uniqueId = generateId("ant-sider-");
      siderHook.addSider(uniqueId);
      return () => siderHook.removeSider(uniqueId);
    }, []);
    const toggle = () => {
      handleSetCollapsed(!collapsed, "clickTrigger");
    };
    const {
      getPrefixCls
    } = (0, import_react60.useContext)(ConfigContext);
    const renderSider = () => {
      const prefixCls = getPrefixCls("layout-sider", customizePrefixCls);
      const divProps = omit(otherProps, ["collapsed"]);
      const rawWidth = collapsed ? collapsedWidth : width;
      const siderWidth = isNumeric_default(rawWidth) ? `${rawWidth}px` : String(rawWidth);
      const zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? /* @__PURE__ */ React189.createElement("span", {
        onClick: toggle,
        className: (0, import_classnames47.default)(`${prefixCls}-zero-width-trigger`, `${prefixCls}-zero-width-trigger-${reverseArrow ? "right" : "left"}`),
        style: zeroWidthTriggerStyle
      }, trigger || /* @__PURE__ */ React189.createElement(BarsOutlined_default2, null)) : null;
      const iconObj = {
        expanded: reverseArrow ? /* @__PURE__ */ React189.createElement(RightOutlined_default2, null) : /* @__PURE__ */ React189.createElement(LeftOutlined_default2, null),
        collapsed: reverseArrow ? /* @__PURE__ */ React189.createElement(LeftOutlined_default2, null) : /* @__PURE__ */ React189.createElement(RightOutlined_default2, null)
      };
      const status = collapsed ? "collapsed" : "expanded";
      const defaultTrigger = iconObj[status];
      const triggerDom = trigger !== null ? zeroWidthTrigger || /* @__PURE__ */ React189.createElement("div", {
        className: `${prefixCls}-trigger`,
        onClick: toggle,
        style: {
          width: siderWidth
        }
      }, trigger || defaultTrigger) : null;
      const divStyle = Object.assign(Object.assign({}, style2), {
        flex: `0 0 ${siderWidth}`,
        maxWidth: siderWidth,
        minWidth: siderWidth,
        width: siderWidth
      });
      const siderCls = (0, import_classnames47.default)(prefixCls, `${prefixCls}-${theme3}`, {
        [`${prefixCls}-collapsed`]: !!collapsed,
        [`${prefixCls}-has-trigger`]: collapsible && trigger !== null && !zeroWidthTrigger,
        [`${prefixCls}-below`]: !!below,
        [`${prefixCls}-zero-width`]: parseFloat(siderWidth) === 0
      }, className);
      return /* @__PURE__ */ React189.createElement("aside", Object.assign({
        className: siderCls
      }, divProps, {
        style: divStyle,
        ref
      }), /* @__PURE__ */ React189.createElement("div", {
        className: `${prefixCls}-children`
      }, children), collapsible || below && zeroWidthTrigger ? triggerDom : null);
    };
    const contextValue = React189.useMemo(() => ({
      siderCollapsed: collapsed
    }), [collapsed]);
    return /* @__PURE__ */ React189.createElement(SiderContext.Provider, {
      value: contextValue
    }, renderSider());
  });
  if (true) {
    Sider.displayName = "Sider";
  }
  var Sider_default = Sider;

  // node_modules/antd/es/menu/menu.js
  var React196 = __toESM(require_react());
  var import_react62 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js
  var React190 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EllipsisOutlined.js
  var EllipsisOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "ellipsis", "theme": "outlined" };
  var EllipsisOutlined_default = EllipsisOutlined;

  // node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js
  var EllipsisOutlined2 = function EllipsisOutlined3(props, ref) {
    return /* @__PURE__ */ React190.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: EllipsisOutlined_default
    }));
  };
  if (true) {
    EllipsisOutlined2.displayName = "EllipsisOutlined";
  }
  var EllipsisOutlined_default2 = /* @__PURE__ */ React190.forwardRef(EllipsisOutlined2);

  // node_modules/antd/es/menu/menu.js
  var import_classnames51 = __toESM(require_classnames());

  // node_modules/antd/es/menu/hooks/useItems.js
  var React194 = __toESM(require_react());

  // node_modules/antd/es/menu/MenuDivider.js
  var import_classnames48 = __toESM(require_classnames());
  var React191 = __toESM(require_react());
  var __rest14 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var MenuDivider = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      dashed
    } = props, restProps = __rest14(props, ["prefixCls", "className", "dashed"]);
    const {
      getPrefixCls
    } = React191.useContext(ConfigContext);
    const prefixCls = getPrefixCls("menu", customizePrefixCls);
    const classString = (0, import_classnames48.default)({
      [`${prefixCls}-item-divider-dashed`]: !!dashed
    }, className);
    return /* @__PURE__ */ React191.createElement(Divider, Object.assign({
      className: classString
    }, restProps));
  };
  var MenuDivider_default = MenuDivider;

  // node_modules/antd/es/menu/MenuItem.js
  var import_classnames49 = __toESM(require_classnames());
  var React192 = __toESM(require_react());

  // node_modules/antd/es/menu/MenuContext.js
  var import_react61 = __toESM(require_react());
  var MenuContext2 = /* @__PURE__ */ (0, import_react61.createContext)({
    prefixCls: "",
    firstLevel: true,
    inlineCollapsed: false
  });
  var MenuContext_default = MenuContext2;

  // node_modules/antd/es/menu/MenuItem.js
  var MenuItem2 = (props) => {
    var _a;
    const {
      className,
      children,
      icon,
      title,
      danger
    } = props;
    const {
      prefixCls,
      firstLevel,
      direction,
      disableMenuItemTitleTooltip,
      inlineCollapsed: isInlineCollapsed
    } = React192.useContext(MenuContext_default);
    const renderItemChildren = (inlineCollapsed) => {
      const wrapNode = /* @__PURE__ */ React192.createElement("span", {
        className: `${prefixCls}-title-content`
      }, children);
      if (!icon || isValidElement4(children) && children.type === "span") {
        if (children && inlineCollapsed && firstLevel && typeof children === "string") {
          return /* @__PURE__ */ React192.createElement("div", {
            className: `${prefixCls}-inline-collapsed-noicon`
          }, children.charAt(0));
        }
      }
      return wrapNode;
    };
    const {
      siderCollapsed
    } = React192.useContext(SiderContext);
    let tooltipTitle = title;
    if (typeof title === "undefined") {
      tooltipTitle = firstLevel ? children : "";
    } else if (title === false) {
      tooltipTitle = "";
    }
    const tooltipProps = {
      title: tooltipTitle
    };
    if (!siderCollapsed && !isInlineCollapsed) {
      tooltipProps.title = null;
      tooltipProps.open = false;
    }
    const childrenLength = toArray(children).length;
    let returnNode = /* @__PURE__ */ React192.createElement(MenuItem_default, Object.assign({}, omit(props, ["title", "icon", "danger"]), {
      className: (0, import_classnames49.default)({
        [`${prefixCls}-item-danger`]: danger,
        [`${prefixCls}-item-only-child`]: (icon ? childrenLength + 1 : childrenLength) === 1
      }, className),
      title: typeof title === "string" ? title : void 0
    }), cloneElement4(icon, {
      className: (0, import_classnames49.default)(isValidElement4(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", `${prefixCls}-item-icon`)
    }), renderItemChildren(isInlineCollapsed));
    if (!disableMenuItemTitleTooltip) {
      returnNode = /* @__PURE__ */ React192.createElement(tooltip_default, Object.assign({}, tooltipProps, {
        placement: direction === "rtl" ? "left" : "right",
        overlayClassName: `${prefixCls}-inline-collapsed-tooltip`
      }), returnNode);
    }
    return returnNode;
  };
  var MenuItem_default2 = MenuItem2;

  // node_modules/antd/es/menu/SubMenu.js
  var React193 = __toESM(require_react());
  var import_classnames50 = __toESM(require_classnames());
  var SubMenu2 = (props) => {
    var _a;
    const {
      popupClassName,
      icon,
      title,
      theme: customTheme
    } = props;
    const context = React193.useContext(MenuContext_default);
    const {
      prefixCls,
      inlineCollapsed,
      theme: contextTheme
    } = context;
    const parentPath = useFullPath();
    let titleNode;
    if (!icon) {
      titleNode = inlineCollapsed && !parentPath.length && title && typeof title === "string" ? /* @__PURE__ */ React193.createElement("div", {
        className: `${prefixCls}-inline-collapsed-noicon`
      }, title.charAt(0)) : /* @__PURE__ */ React193.createElement("span", {
        className: `${prefixCls}-title-content`
      }, title);
    } else {
      const titleIsSpan = isValidElement4(title) && title.type === "span";
      titleNode = /* @__PURE__ */ React193.createElement(React193.Fragment, null, cloneElement4(icon, {
        className: (0, import_classnames50.default)(isValidElement4(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", `${prefixCls}-item-icon`)
      }), titleIsSpan ? title : /* @__PURE__ */ React193.createElement("span", {
        className: `${prefixCls}-title-content`
      }, title));
    }
    const contextValue = React193.useMemo(() => Object.assign(Object.assign({}, context), {
      firstLevel: false
    }), [context]);
    const [zIndex] = useZIndex("Menu");
    return /* @__PURE__ */ React193.createElement(MenuContext_default.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React193.createElement(SubMenu, Object.assign({}, omit(props, ["icon"]), {
      title: titleNode,
      popupClassName: (0, import_classnames50.default)(prefixCls, popupClassName, `${prefixCls}-${customTheme || contextTheme}`),
      popupStyle: {
        zIndex
      }
    })));
  };
  var SubMenu_default = SubMenu2;

  // node_modules/antd/es/menu/hooks/useItems.js
  var __rest15 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function convertItemsToNodes2(list) {
    return (list || []).map((opt, index2) => {
      if (opt && typeof opt === "object") {
        const _a = opt, {
          label,
          children,
          key,
          type: type4
        } = _a, restProps = __rest15(_a, ["label", "children", "key", "type"]);
        const mergedKey = key !== null && key !== void 0 ? key : `tmp-${index2}`;
        if (children || type4 === "group") {
          if (type4 === "group") {
            return /* @__PURE__ */ React194.createElement(MenuItemGroup, Object.assign({
              key: mergedKey
            }, restProps, {
              title: label
            }), convertItemsToNodes2(children));
          }
          return /* @__PURE__ */ React194.createElement(SubMenu_default, Object.assign({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes2(children));
        }
        if (type4 === "divider") {
          return /* @__PURE__ */ React194.createElement(MenuDivider_default, Object.assign({
            key: mergedKey
          }, restProps));
        }
        return /* @__PURE__ */ React194.createElement(MenuItem_default2, Object.assign({
          key: mergedKey
        }, restProps), label);
      }
      return null;
    }).filter((opt) => opt);
  }
  function useItems(items) {
    return React194.useMemo(() => {
      if (!items) {
        return items;
      }
      return convertItemsToNodes2(items);
    }, [items]);
  }

  // node_modules/antd/es/menu/OverrideContext.js
  var React195 = __toESM(require_react());
  var __rest16 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var OverrideContext = /* @__PURE__ */ React195.createContext(null);
  var OverrideProvider = /* @__PURE__ */ React195.forwardRef((props, ref) => {
    const {
      children
    } = props, restProps = __rest16(props, ["children"]);
    const override = React195.useContext(OverrideContext);
    const context = React195.useMemo(() => Object.assign(Object.assign({}, override), restProps), [
      override,
      restProps.prefixCls,
      // restProps.expandIcon, Not mark as deps since this is a ReactNode
      restProps.mode,
      restProps.selectable,
      restProps.rootClassName
      // restProps.validator, Not mark as deps since this is a function
    ]);
    const canRef = supportNodeRef(children);
    const mergedRef = useComposeRef(ref, canRef ? children.ref : null);
    return /* @__PURE__ */ React195.createElement(OverrideContext.Provider, {
      value: context
    }, /* @__PURE__ */ React195.createElement(NoCompactStyle, null, canRef ? /* @__PURE__ */ React195.cloneElement(children, {
      ref: mergedRef
    }) : children));
  });
  var OverrideContext_default = OverrideContext;

  // node_modules/antd/es/menu/style/horizontal.js
  var getHorizontalStyle = (token2) => {
    const {
      componentCls,
      motionDurationSlow,
      horizontalLineHeight,
      colorSplit,
      lineWidth,
      lineType,
      itemPaddingInline
    } = token2;
    return {
      [`${componentCls}-horizontal`]: {
        lineHeight: horizontalLineHeight,
        border: 0,
        borderBottom: `${unit(lineWidth)} ${lineType} ${colorSplit}`,
        boxShadow: "none",
        "&::after": {
          display: "block",
          clear: "both",
          height: 0,
          content: '"\\20"'
        },
        // ======================= Item =======================
        [`${componentCls}-item, ${componentCls}-submenu`]: {
          position: "relative",
          display: "inline-block",
          verticalAlign: "bottom",
          paddingInline: itemPaddingInline
        },
        [`> ${componentCls}-item:hover,
        > ${componentCls}-item-active,
        > ${componentCls}-submenu ${componentCls}-submenu-title:hover`]: {
          backgroundColor: "transparent"
        },
        [`${componentCls}-item, ${componentCls}-submenu-title`]: {
          transition: [`border-color ${motionDurationSlow}`, `background ${motionDurationSlow}`].join(",")
        },
        // ===================== Sub Menu =====================
        [`${componentCls}-submenu-arrow`]: {
          display: "none"
        }
      }
    };
  };
  var horizontal_default = getHorizontalStyle;

  // node_modules/antd/es/menu/style/rtl.js
  var getRTLStyle = (_ref) => {
    let {
      componentCls,
      menuArrowOffset,
      calc
    } = _ref;
    return {
      [`${componentCls}-rtl`]: {
        direction: "rtl"
      },
      [`${componentCls}-submenu-rtl`]: {
        transformOrigin: "100% 0"
      },
      // Vertical Arrow
      [`${componentCls}-rtl${componentCls}-vertical,
    ${componentCls}-submenu-rtl ${componentCls}-vertical`]: {
        [`${componentCls}-submenu-arrow`]: {
          "&::before": {
            transform: `rotate(-45deg) translateY(${unit(calc(menuArrowOffset).mul(-1).equal())})`
          },
          "&::after": {
            transform: `rotate(45deg) translateY(${unit(menuArrowOffset)})`
          }
        }
      }
    };
  };
  var rtl_default = getRTLStyle;

  // node_modules/antd/es/menu/style/theme.js
  var accessibilityFocus = (token2) => Object.assign({}, genFocusOutline(token2));
  var getThemeStyle = (token2, themeSuffix) => {
    const {
      componentCls,
      itemColor,
      itemSelectedColor,
      groupTitleColor,
      itemBg,
      subMenuItemBg,
      itemSelectedBg,
      activeBarHeight,
      activeBarWidth,
      activeBarBorderWidth,
      motionDurationSlow,
      motionEaseInOut,
      motionEaseOut,
      itemPaddingInline,
      motionDurationMid,
      itemHoverColor,
      lineType,
      colorSplit,
      // Disabled
      itemDisabledColor,
      // Danger
      dangerItemColor,
      dangerItemHoverColor,
      dangerItemSelectedColor,
      dangerItemActiveBg,
      dangerItemSelectedBg,
      // Bg
      popupBg,
      itemHoverBg,
      itemActiveBg,
      menuSubMenuBg,
      // Horizontal
      horizontalItemSelectedColor,
      horizontalItemSelectedBg,
      horizontalItemBorderRadius,
      horizontalItemHoverBg
    } = token2;
    return {
      [`${componentCls}-${themeSuffix}, ${componentCls}-${themeSuffix} > ${componentCls}`]: {
        color: itemColor,
        background: itemBg,
        [`&${componentCls}-root:focus-visible`]: Object.assign({}, accessibilityFocus(token2)),
        // ======================== Item ========================
        [`${componentCls}-item-group-title`]: {
          color: groupTitleColor
        },
        [`${componentCls}-submenu-selected`]: {
          [`> ${componentCls}-submenu-title`]: {
            color: itemSelectedColor
          }
        },
        // Disabled
        [`${componentCls}-item-disabled, ${componentCls}-submenu-disabled`]: {
          color: `${itemDisabledColor} !important`
        },
        // Hover
        [`${componentCls}-item:not(${componentCls}-item-selected):not(${componentCls}-submenu-selected)`]: {
          [`&:hover, > ${componentCls}-submenu-title:hover`]: {
            color: itemHoverColor
          }
        },
        [`&:not(${componentCls}-horizontal)`]: {
          [`${componentCls}-item:not(${componentCls}-item-selected)`]: {
            "&:hover": {
              backgroundColor: itemHoverBg
            },
            "&:active": {
              backgroundColor: itemActiveBg
            }
          },
          [`${componentCls}-submenu-title`]: {
            "&:hover": {
              backgroundColor: itemHoverBg
            },
            "&:active": {
              backgroundColor: itemActiveBg
            }
          }
        },
        // Danger - only Item has
        [`${componentCls}-item-danger`]: {
          color: dangerItemColor,
          [`&${componentCls}-item:hover`]: {
            [`&:not(${componentCls}-item-selected):not(${componentCls}-submenu-selected)`]: {
              color: dangerItemHoverColor
            }
          },
          [`&${componentCls}-item:active`]: {
            background: dangerItemActiveBg
          }
        },
        [`${componentCls}-item a`]: {
          "&, &:hover": {
            color: "inherit"
          }
        },
        [`${componentCls}-item-selected`]: {
          color: itemSelectedColor,
          // Danger
          [`&${componentCls}-item-danger`]: {
            color: dangerItemSelectedColor
          },
          [`a, a:hover`]: {
            color: "inherit"
          }
        },
        [`& ${componentCls}-item-selected`]: {
          backgroundColor: itemSelectedBg,
          // Danger
          [`&${componentCls}-item-danger`]: {
            backgroundColor: dangerItemSelectedBg
          }
        },
        [`${componentCls}-item, ${componentCls}-submenu-title`]: {
          [`&:not(${componentCls}-item-disabled):focus-visible`]: Object.assign({}, accessibilityFocus(token2))
        },
        [`&${componentCls}-submenu > ${componentCls}`]: {
          backgroundColor: menuSubMenuBg
        },
        // ===== 设置浮层的颜色 =======
        // ！dark 模式会被popupBg 会被rest 为 darkPopupBg
        [`&${componentCls}-popup > ${componentCls}`]: {
          backgroundColor: popupBg
        },
        [`&${componentCls}-submenu-popup > ${componentCls}`]: {
          backgroundColor: popupBg
        },
        // ===== 设置浮层的颜色 end =======
        // ====================== Horizontal ======================
        [`&${componentCls}-horizontal`]: Object.assign(Object.assign({}, themeSuffix === "dark" ? {
          borderBottom: 0
        } : {}), {
          [`> ${componentCls}-item, > ${componentCls}-submenu`]: {
            top: activeBarBorderWidth,
            marginTop: token2.calc(activeBarBorderWidth).mul(-1).equal(),
            marginBottom: 0,
            borderRadius: horizontalItemBorderRadius,
            "&::after": {
              position: "absolute",
              insetInline: itemPaddingInline,
              bottom: 0,
              borderBottom: `${unit(activeBarHeight)} solid transparent`,
              transition: `border-color ${motionDurationSlow} ${motionEaseInOut}`,
              content: '""'
            },
            [`&:hover, &-active, &-open`]: {
              background: horizontalItemHoverBg,
              "&::after": {
                borderBottomWidth: activeBarHeight,
                borderBottomColor: horizontalItemSelectedColor
              }
            },
            [`&-selected`]: {
              color: horizontalItemSelectedColor,
              backgroundColor: horizontalItemSelectedBg,
              "&:hover": {
                backgroundColor: horizontalItemSelectedBg
              },
              "&::after": {
                borderBottomWidth: activeBarHeight,
                borderBottomColor: horizontalItemSelectedColor
              }
            }
          }
        }),
        // ================== Inline & Vertical ===================
        //
        [`&${componentCls}-root`]: {
          [`&${componentCls}-inline, &${componentCls}-vertical`]: {
            borderInlineEnd: `${unit(activeBarBorderWidth)} ${lineType} ${colorSplit}`
          }
        },
        // ======================== Inline ========================
        [`&${componentCls}-inline`]: {
          // Sub
          [`${componentCls}-sub${componentCls}-inline`]: {
            background: subMenuItemBg
          },
          [`${componentCls}-item`]: {
            position: "relative",
            "&::after": {
              position: "absolute",
              insetBlock: 0,
              insetInlineEnd: 0,
              borderInlineEnd: `${unit(activeBarWidth)} solid ${itemSelectedColor}`,
              transform: "scaleY(0.0001)",
              opacity: 0,
              transition: [`transform ${motionDurationMid} ${motionEaseOut}`, `opacity ${motionDurationMid} ${motionEaseOut}`].join(","),
              content: '""'
            },
            // Danger
            [`&${componentCls}-item-danger`]: {
              "&::after": {
                borderInlineEndColor: dangerItemSelectedColor
              }
            }
          },
          [`${componentCls}-selected, ${componentCls}-item-selected`]: {
            "&::after": {
              transform: "scaleY(1)",
              opacity: 1,
              transition: [`transform ${motionDurationMid} ${motionEaseInOut}`, `opacity ${motionDurationMid} ${motionEaseInOut}`].join(",")
            }
          }
        }
      }
    };
  };
  var theme_default = getThemeStyle;

  // node_modules/antd/es/menu/style/vertical.js
  var getVerticalInlineStyle = (token2) => {
    const {
      componentCls,
      itemHeight,
      itemMarginInline,
      padding,
      menuArrowSize,
      marginXS,
      itemMarginBlock,
      itemWidth
    } = token2;
    const paddingWithArrow = token2.calc(menuArrowSize).add(padding).add(marginXS).equal();
    return {
      [`${componentCls}-item`]: {
        position: "relative",
        overflow: "hidden"
      },
      [`${componentCls}-item, ${componentCls}-submenu-title`]: {
        height: itemHeight,
        lineHeight: unit(itemHeight),
        paddingInline: padding,
        overflow: "hidden",
        textOverflow: "ellipsis",
        marginInline: itemMarginInline,
        marginBlock: itemMarginBlock,
        width: itemWidth
      },
      [`> ${componentCls}-item,
            > ${componentCls}-submenu > ${componentCls}-submenu-title`]: {
        height: itemHeight,
        lineHeight: unit(itemHeight)
      },
      [`${componentCls}-item-group-list ${componentCls}-submenu-title,
            ${componentCls}-submenu-title`]: {
        paddingInlineEnd: paddingWithArrow
      }
    };
  };
  var getVerticalStyle = (token2) => {
    const {
      componentCls,
      iconCls,
      itemHeight,
      colorTextLightSolid,
      dropdownWidth,
      controlHeightLG,
      motionDurationMid,
      motionEaseOut,
      paddingXL,
      itemMarginInline,
      fontSizeLG,
      motionDurationSlow,
      paddingXS,
      boxShadowSecondary,
      collapsedWidth,
      collapsedIconSize
    } = token2;
    const inlineItemStyle = {
      height: itemHeight,
      lineHeight: unit(itemHeight),
      listStylePosition: "inside",
      listStyleType: "disc"
    };
    return [
      {
        [componentCls]: {
          [`&-inline, &-vertical`]: Object.assign({
            [`&${componentCls}-root`]: {
              boxShadow: "none"
            }
          }, getVerticalInlineStyle(token2))
        },
        [`${componentCls}-submenu-popup`]: {
          [`${componentCls}-vertical`]: Object.assign(Object.assign({}, getVerticalInlineStyle(token2)), {
            boxShadow: boxShadowSecondary
          })
        }
      },
      // Vertical only
      {
        [`${componentCls}-submenu-popup ${componentCls}-vertical${componentCls}-sub`]: {
          minWidth: dropdownWidth,
          maxHeight: `calc(100vh - ${unit(token2.calc(controlHeightLG).mul(2.5).equal())})`,
          padding: "0",
          overflow: "hidden",
          borderInlineEnd: 0,
          // https://github.com/ant-design/ant-design/issues/22244
          // https://github.com/ant-design/ant-design/issues/26812
          "&:not([class*='-active'])": {
            overflowX: "hidden",
            overflowY: "auto"
          }
        }
      },
      // Inline Only
      {
        [`${componentCls}-inline`]: {
          width: "100%",
          // Motion enhance for first level
          [`&${componentCls}-root`]: {
            [`${componentCls}-item, ${componentCls}-submenu-title`]: {
              display: "flex",
              alignItems: "center",
              transition: [`border-color ${motionDurationSlow}`, `background ${motionDurationSlow}`, `padding ${motionDurationMid} ${motionEaseOut}`].join(","),
              [`> ${componentCls}-title-content`]: {
                flex: "auto",
                minWidth: 0,
                overflow: "hidden",
                textOverflow: "ellipsis"
              },
              "> *": {
                flex: "none"
              }
            }
          },
          // >>>>> Sub
          [`${componentCls}-sub${componentCls}-inline`]: {
            padding: 0,
            border: 0,
            borderRadius: 0,
            boxShadow: "none",
            [`& > ${componentCls}-submenu > ${componentCls}-submenu-title`]: inlineItemStyle,
            [`& ${componentCls}-item-group-title`]: {
              paddingInlineStart: paddingXL
            }
          },
          // >>>>> Item
          [`${componentCls}-item`]: inlineItemStyle
        }
      },
      // Inline Collapse Only
      {
        [`${componentCls}-inline-collapsed`]: {
          width: collapsedWidth,
          [`&${componentCls}-root`]: {
            [`${componentCls}-item, ${componentCls}-submenu ${componentCls}-submenu-title`]: {
              [`> ${componentCls}-inline-collapsed-noicon`]: {
                fontSize: fontSizeLG,
                textAlign: "center"
              }
            }
          },
          [`> ${componentCls}-item,
          > ${componentCls}-item-group > ${componentCls}-item-group-list > ${componentCls}-item,
          > ${componentCls}-item-group > ${componentCls}-item-group-list > ${componentCls}-submenu > ${componentCls}-submenu-title,
          > ${componentCls}-submenu > ${componentCls}-submenu-title`]: {
            insetInlineStart: 0,
            paddingInline: `calc(50% - ${unit(token2.calc(fontSizeLG).div(2).equal())} - ${unit(itemMarginInline)})`,
            textOverflow: "clip",
            [`
            ${componentCls}-submenu-arrow,
            ${componentCls}-submenu-expand-icon
          `]: {
              opacity: 0
            },
            [`${componentCls}-item-icon, ${iconCls}`]: {
              margin: 0,
              fontSize: collapsedIconSize,
              lineHeight: unit(itemHeight),
              "+ span": {
                display: "inline-block",
                opacity: 0
              }
            }
          },
          [`${componentCls}-item-icon, ${iconCls}`]: {
            display: "inline-block"
          },
          "&-tooltip": {
            pointerEvents: "none",
            [`${componentCls}-item-icon, ${iconCls}`]: {
              display: "none"
            },
            "a, a:hover": {
              color: colorTextLightSolid
            }
          },
          [`${componentCls}-item-group-title`]: Object.assign(Object.assign({}, textEllipsis), {
            paddingInline: paddingXS
          })
        }
      }
    ];
  };
  var vertical_default = getVerticalStyle;

  // node_modules/antd/es/menu/style/index.js
  var genMenuItemStyle = (token2) => {
    const {
      componentCls,
      motionDurationSlow,
      motionDurationMid,
      motionEaseInOut,
      motionEaseOut,
      iconCls,
      iconSize,
      iconMarginInlineEnd
    } = token2;
    return {
      // >>>>> Item
      [`${componentCls}-item, ${componentCls}-submenu-title`]: {
        position: "relative",
        display: "block",
        margin: 0,
        whiteSpace: "nowrap",
        cursor: "pointer",
        transition: [`border-color ${motionDurationSlow}`, `background ${motionDurationSlow}`, `padding ${motionDurationSlow} ${motionEaseInOut}`].join(","),
        [`${componentCls}-item-icon, ${iconCls}`]: {
          minWidth: iconSize,
          fontSize: iconSize,
          transition: [`font-size ${motionDurationMid} ${motionEaseOut}`, `margin ${motionDurationSlow} ${motionEaseInOut}`, `color ${motionDurationSlow}`].join(","),
          "+ span": {
            marginInlineStart: iconMarginInlineEnd,
            opacity: 1,
            transition: [`opacity ${motionDurationSlow} ${motionEaseInOut}`, `margin ${motionDurationSlow}`, `color ${motionDurationSlow}`].join(",")
          }
        },
        [`${componentCls}-item-icon`]: Object.assign({}, resetIcon()),
        [`&${componentCls}-item-only-child`]: {
          [`> ${iconCls}, > ${componentCls}-item-icon`]: {
            marginInlineEnd: 0
          }
        }
      },
      // Disabled state sets text to gray and nukes hover/tab effects
      [`${componentCls}-item-disabled, ${componentCls}-submenu-disabled`]: {
        background: "none !important",
        cursor: "not-allowed",
        "&::after": {
          borderColor: "transparent !important"
        },
        a: {
          color: "inherit !important"
        },
        [`> ${componentCls}-submenu-title`]: {
          color: "inherit !important",
          cursor: "not-allowed"
        }
      }
    };
  };
  var genSubMenuArrowStyle = (token2) => {
    const {
      componentCls,
      motionDurationSlow,
      motionEaseInOut,
      borderRadius,
      menuArrowSize,
      menuArrowOffset
    } = token2;
    return {
      [`${componentCls}-submenu`]: {
        [`&-expand-icon, &-arrow`]: {
          position: "absolute",
          top: "50%",
          insetInlineEnd: token2.margin,
          width: menuArrowSize,
          color: "currentcolor",
          transform: "translateY(-50%)",
          transition: `transform ${motionDurationSlow} ${motionEaseInOut}, opacity ${motionDurationSlow}`
        },
        "&-arrow": {
          // →
          "&::before, &::after": {
            position: "absolute",
            width: token2.calc(menuArrowSize).mul(0.6).equal(),
            height: token2.calc(menuArrowSize).mul(0.15).equal(),
            backgroundColor: "currentcolor",
            borderRadius,
            transition: [`background ${motionDurationSlow} ${motionEaseInOut}`, `transform ${motionDurationSlow} ${motionEaseInOut}`, `top ${motionDurationSlow} ${motionEaseInOut}`, `color ${motionDurationSlow} ${motionEaseInOut}`].join(","),
            content: '""'
          },
          "&::before": {
            transform: `rotate(45deg) translateY(${unit(token2.calc(menuArrowOffset).mul(-1).equal())})`
          },
          "&::after": {
            transform: `rotate(-45deg) translateY(${unit(menuArrowOffset)})`
          }
        }
      }
    };
  };
  var getBaseStyle = (token2) => {
    const {
      antCls,
      componentCls,
      fontSize,
      motionDurationSlow,
      motionDurationMid,
      motionEaseInOut,
      paddingXS,
      padding,
      colorSplit,
      lineWidth,
      zIndexPopup,
      borderRadiusLG,
      subMenuItemBorderRadius,
      menuArrowSize,
      menuArrowOffset,
      lineType,
      menuPanelMaskInset,
      groupTitleLineHeight,
      groupTitleFontSize
    } = token2;
    return [
      // Misc
      {
        "": {
          [`${componentCls}`]: Object.assign(Object.assign({}, clearFix()), {
            // Hidden
            [`&-hidden`]: {
              display: "none"
            }
          })
        },
        [`${componentCls}-submenu-hidden`]: {
          display: "none"
        }
      },
      {
        [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), clearFix()), {
          marginBottom: 0,
          paddingInlineStart: 0,
          // Override default ul/ol
          fontSize,
          lineHeight: 0,
          listStyle: "none",
          outline: "none",
          // Magic cubic here but smooth transition
          transition: `width ${motionDurationSlow} cubic-bezier(0.2, 0, 0, 1) 0s`,
          [`ul, ol`]: {
            margin: 0,
            padding: 0,
            listStyle: "none"
          },
          // Overflow ellipsis
          [`&-overflow`]: {
            display: "flex",
            [`${componentCls}-item`]: {
              flex: "none"
            }
          },
          [`${componentCls}-item, ${componentCls}-submenu, ${componentCls}-submenu-title`]: {
            borderRadius: token2.itemBorderRadius
          },
          [`${componentCls}-item-group-title`]: {
            padding: `${unit(paddingXS)} ${unit(padding)}`,
            fontSize: groupTitleFontSize,
            lineHeight: groupTitleLineHeight,
            transition: `all ${motionDurationSlow}`
          },
          [`&-horizontal ${componentCls}-submenu`]: {
            transition: [`border-color ${motionDurationSlow} ${motionEaseInOut}`, `background ${motionDurationSlow} ${motionEaseInOut}`].join(",")
          },
          [`${componentCls}-submenu, ${componentCls}-submenu-inline`]: {
            transition: [`border-color ${motionDurationSlow} ${motionEaseInOut}`, `background ${motionDurationSlow} ${motionEaseInOut}`, `padding ${motionDurationMid} ${motionEaseInOut}`].join(",")
          },
          [`${componentCls}-submenu ${componentCls}-sub`]: {
            cursor: "initial",
            transition: [`background ${motionDurationSlow} ${motionEaseInOut}`, `padding ${motionDurationSlow} ${motionEaseInOut}`].join(",")
          },
          [`${componentCls}-title-content`]: {
            transition: `color ${motionDurationSlow}`,
            // https://github.com/ant-design/ant-design/issues/41143
            [`> ${antCls}-typography-ellipsis-single-line`]: {
              display: "inline",
              verticalAlign: "unset"
            }
          },
          [`${componentCls}-item a`]: {
            "&::before": {
              position: "absolute",
              inset: 0,
              backgroundColor: "transparent",
              content: '""'
            }
          },
          // Removed a Badge related style seems it's safe
          // https://github.com/ant-design/ant-design/issues/19809
          // >>>>> Divider
          [`${componentCls}-item-divider`]: {
            overflow: "hidden",
            lineHeight: 0,
            borderColor: colorSplit,
            borderStyle: lineType,
            borderWidth: 0,
            borderTopWidth: lineWidth,
            marginBlock: lineWidth,
            padding: 0,
            "&-dashed": {
              borderStyle: "dashed"
            }
          }
        }), genMenuItemStyle(token2)), {
          [`${componentCls}-item-group`]: {
            [`${componentCls}-item-group-list`]: {
              margin: 0,
              padding: 0,
              [`${componentCls}-item, ${componentCls}-submenu-title`]: {
                paddingInline: `${unit(token2.calc(fontSize).mul(2).equal())} ${unit(padding)}`
              }
            }
          },
          // ======================= Sub Menu =======================
          "&-submenu": {
            "&-popup": {
              position: "absolute",
              zIndex: zIndexPopup,
              borderRadius: borderRadiusLG,
              boxShadow: "none",
              transformOrigin: "0 0",
              [`&${componentCls}-submenu`]: {
                background: "transparent"
              },
              // https://github.com/ant-design/ant-design/issues/13955
              "&::before": {
                position: "absolute",
                inset: `${unit(menuPanelMaskInset)} 0 0`,
                zIndex: -1,
                width: "100%",
                height: "100%",
                opacity: 0,
                content: '""'
              }
            },
            // https://github.com/ant-design/ant-design/issues/13955
            "&-placement-rightTop::before": {
              top: 0,
              insetInlineStart: menuPanelMaskInset
            },
            [`
          &-placement-leftTop,
          &-placement-bottomRight,
          `]: {
              transformOrigin: "100% 0"
            },
            [`
          &-placement-leftBottom,
          &-placement-topRight,
          `]: {
              transformOrigin: "100% 100%"
            },
            [`
          &-placement-rightBottom,
          &-placement-topLeft,
          `]: {
              transformOrigin: "0 100%"
            },
            [`
          &-placement-bottomLeft,
          &-placement-rightTop,
          `]: {
              transformOrigin: "0 0"
            },
            [`
          &-placement-leftTop,
          &-placement-leftBottom
          `]: {
              paddingInlineEnd: token2.paddingXS
            },
            [`
          &-placement-rightTop,
          &-placement-rightBottom
          `]: {
              paddingInlineStart: token2.paddingXS
            },
            [`
          &-placement-topRight,
          &-placement-topLeft
          `]: {
              paddingBottom: token2.paddingXS
            },
            [`
          &-placement-bottomRight,
          &-placement-bottomLeft
          `]: {
              paddingTop: token2.paddingXS
            },
            [`> ${componentCls}`]: Object.assign(Object.assign(Object.assign({
              borderRadius: borderRadiusLG
            }, genMenuItemStyle(token2)), genSubMenuArrowStyle(token2)), {
              [`${componentCls}-item, ${componentCls}-submenu > ${componentCls}-submenu-title`]: {
                borderRadius: subMenuItemBorderRadius
              },
              [`${componentCls}-submenu-title::after`]: {
                transition: `transform ${motionDurationSlow} ${motionEaseInOut}`
              }
            })
          }
        }), genSubMenuArrowStyle(token2)), {
          [`&-inline-collapsed ${componentCls}-submenu-arrow,
        &-inline ${componentCls}-submenu-arrow`]: {
            // ↓
            "&::before": {
              transform: `rotate(-45deg) translateX(${unit(menuArrowOffset)})`
            },
            "&::after": {
              transform: `rotate(45deg) translateX(${unit(token2.calc(menuArrowOffset).mul(-1).equal())})`
            }
          },
          [`${componentCls}-submenu-open${componentCls}-submenu-inline > ${componentCls}-submenu-title > ${componentCls}-submenu-arrow`]: {
            // ↑
            transform: `translateY(${unit(token2.calc(menuArrowSize).mul(0.2).mul(-1).equal())})`,
            "&::after": {
              transform: `rotate(-45deg) translateX(${unit(token2.calc(menuArrowOffset).mul(-1).equal())})`
            },
            "&::before": {
              transform: `rotate(45deg) translateX(${unit(menuArrowOffset)})`
            }
          }
        })
      },
      // Integration with header element so menu items have the same height
      {
        [`${antCls}-layout-header`]: {
          [componentCls]: {
            lineHeight: "inherit"
          }
        }
      }
    ];
  };
  var prepareComponentToken5 = (token2) => {
    var _a, _b, _c;
    const {
      colorPrimary,
      colorError,
      colorTextDisabled,
      colorErrorBg,
      colorText,
      colorTextDescription,
      colorBgContainer,
      colorFillAlter,
      colorFillContent,
      lineWidth,
      lineWidthBold,
      controlItemBgActive,
      colorBgTextHover,
      controlHeightLG,
      lineHeight,
      colorBgElevated,
      marginXXS,
      padding,
      fontSize,
      controlHeightSM,
      fontSizeLG,
      colorTextLightSolid,
      colorErrorHover
    } = token2;
    const activeBarWidth = (_a = token2.activeBarWidth) !== null && _a !== void 0 ? _a : 0;
    const activeBarBorderWidth = (_b = token2.activeBarBorderWidth) !== null && _b !== void 0 ? _b : lineWidth;
    const itemMarginInline = (_c = token2.itemMarginInline) !== null && _c !== void 0 ? _c : token2.marginXXS;
    const colorTextDark = new TinyColor(colorTextLightSolid).setAlpha(0.65).toRgbString();
    return {
      dropdownWidth: 160,
      zIndexPopup: token2.zIndexPopupBase + 50,
      radiusItem: token2.borderRadiusLG,
      itemBorderRadius: token2.borderRadiusLG,
      radiusSubMenuItem: token2.borderRadiusSM,
      subMenuItemBorderRadius: token2.borderRadiusSM,
      colorItemText: colorText,
      itemColor: colorText,
      colorItemTextHover: colorText,
      itemHoverColor: colorText,
      colorItemTextHoverHorizontal: colorPrimary,
      horizontalItemHoverColor: colorPrimary,
      colorGroupTitle: colorTextDescription,
      groupTitleColor: colorTextDescription,
      colorItemTextSelected: colorPrimary,
      itemSelectedColor: colorPrimary,
      colorItemTextSelectedHorizontal: colorPrimary,
      horizontalItemSelectedColor: colorPrimary,
      colorItemBg: colorBgContainer,
      itemBg: colorBgContainer,
      colorItemBgHover: colorBgTextHover,
      itemHoverBg: colorBgTextHover,
      colorItemBgActive: colorFillContent,
      itemActiveBg: controlItemBgActive,
      colorSubItemBg: colorFillAlter,
      subMenuItemBg: colorFillAlter,
      colorItemBgSelected: controlItemBgActive,
      itemSelectedBg: controlItemBgActive,
      colorItemBgSelectedHorizontal: "transparent",
      horizontalItemSelectedBg: "transparent",
      colorActiveBarWidth: 0,
      activeBarWidth,
      colorActiveBarHeight: lineWidthBold,
      activeBarHeight: lineWidthBold,
      colorActiveBarBorderSize: lineWidth,
      activeBarBorderWidth,
      // Disabled
      colorItemTextDisabled: colorTextDisabled,
      itemDisabledColor: colorTextDisabled,
      // Danger
      colorDangerItemText: colorError,
      dangerItemColor: colorError,
      colorDangerItemTextHover: colorError,
      dangerItemHoverColor: colorError,
      colorDangerItemTextSelected: colorError,
      dangerItemSelectedColor: colorError,
      colorDangerItemBgActive: colorErrorBg,
      dangerItemActiveBg: colorErrorBg,
      colorDangerItemBgSelected: colorErrorBg,
      dangerItemSelectedBg: colorErrorBg,
      itemMarginInline,
      horizontalItemBorderRadius: 0,
      horizontalItemHoverBg: "transparent",
      itemHeight: controlHeightLG,
      groupTitleLineHeight: lineHeight,
      collapsedWidth: controlHeightLG * 2,
      popupBg: colorBgElevated,
      itemMarginBlock: marginXXS,
      itemPaddingInline: padding,
      horizontalLineHeight: `${controlHeightLG * 1.15}px`,
      iconSize: fontSize,
      iconMarginInlineEnd: controlHeightSM - fontSize,
      collapsedIconSize: fontSizeLG,
      groupTitleFontSize: fontSize,
      // Disabled
      darkItemDisabledColor: new TinyColor(colorTextLightSolid).setAlpha(0.25).toRgbString(),
      // Dark
      darkItemColor: colorTextDark,
      darkDangerItemColor: colorError,
      darkItemBg: "#001529",
      darkPopupBg: "#001529",
      darkSubMenuItemBg: "#000c17",
      darkItemSelectedColor: colorTextLightSolid,
      darkItemSelectedBg: colorPrimary,
      darkDangerItemSelectedBg: colorError,
      darkItemHoverBg: "transparent",
      darkGroupTitleColor: colorTextDark,
      darkItemHoverColor: colorTextLightSolid,
      darkDangerItemHoverColor: colorErrorHover,
      darkDangerItemSelectedColor: colorTextLightSolid,
      darkDangerItemActiveBg: colorError,
      // internal
      itemWidth: activeBarWidth ? `calc(100% + ${activeBarBorderWidth}px)` : `calc(100% - ${itemMarginInline * 2}px)`
    };
  };
  var style_default8 = function(prefixCls) {
    let rootCls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : prefixCls;
    let injectStyle = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    const useStyle = genStyleHooks("Menu", (token2) => {
      const {
        colorBgElevated,
        colorPrimary,
        colorTextLightSolid,
        controlHeightLG,
        fontSize,
        darkItemColor,
        darkDangerItemColor,
        darkItemBg,
        darkSubMenuItemBg,
        darkItemSelectedColor,
        darkItemSelectedBg,
        darkDangerItemSelectedBg,
        darkItemHoverBg,
        darkGroupTitleColor,
        darkItemHoverColor,
        darkItemDisabledColor,
        darkDangerItemHoverColor,
        darkDangerItemSelectedColor,
        darkDangerItemActiveBg,
        popupBg,
        darkPopupBg
      } = token2;
      const menuArrowSize = token2.calc(fontSize).div(7).mul(5).equal();
      const menuToken = merge2(token2, {
        menuArrowSize,
        menuHorizontalHeight: token2.calc(controlHeightLG).mul(1.15).equal(),
        menuArrowOffset: token2.calc(menuArrowSize).mul(0.25).equal(),
        menuPanelMaskInset: -7,
        // Still a hardcode here since it's offset by rc-align
        menuSubMenuBg: colorBgElevated,
        calc: token2.calc,
        popupBg
      });
      const menuDarkToken = merge2(menuToken, {
        itemColor: darkItemColor,
        itemHoverColor: darkItemHoverColor,
        groupTitleColor: darkGroupTitleColor,
        itemSelectedColor: darkItemSelectedColor,
        itemBg: darkItemBg,
        popupBg: darkPopupBg,
        subMenuItemBg: darkSubMenuItemBg,
        itemActiveBg: "transparent",
        itemSelectedBg: darkItemSelectedBg,
        activeBarHeight: 0,
        activeBarBorderWidth: 0,
        itemHoverBg: darkItemHoverBg,
        // Disabled
        itemDisabledColor: darkItemDisabledColor,
        // Danger
        dangerItemColor: darkDangerItemColor,
        dangerItemHoverColor: darkDangerItemHoverColor,
        dangerItemSelectedColor: darkDangerItemSelectedColor,
        dangerItemActiveBg: darkDangerItemActiveBg,
        dangerItemSelectedBg: darkDangerItemSelectedBg,
        menuSubMenuBg: darkSubMenuItemBg,
        // Horizontal
        horizontalItemSelectedColor: colorTextLightSolid,
        horizontalItemSelectedBg: colorPrimary
      });
      return [
        // Basic
        getBaseStyle(menuToken),
        // Horizontal
        horizontal_default(menuToken),
        // Hard code for some light style
        // Vertical
        vertical_default(menuToken),
        // Hard code for some light style
        // Theme
        theme_default(menuToken, "light"),
        theme_default(menuDarkToken, "dark"),
        // RTL
        rtl_default(menuToken),
        // Motion
        collapse_default(menuToken),
        initSlideMotion(menuToken, "slide-up"),
        initSlideMotion(menuToken, "slide-down"),
        initZoomMotion(menuToken, "zoom-big")
      ];
    }, prepareComponentToken5, {
      deprecatedTokens: [["colorGroupTitle", "groupTitleColor"], ["radiusItem", "itemBorderRadius"], ["radiusSubMenuItem", "subMenuItemBorderRadius"], ["colorItemText", "itemColor"], ["colorItemTextHover", "itemHoverColor"], ["colorItemTextHoverHorizontal", "horizontalItemHoverColor"], ["colorItemTextSelected", "itemSelectedColor"], ["colorItemTextSelectedHorizontal", "horizontalItemSelectedColor"], ["colorItemTextDisabled", "itemDisabledColor"], ["colorDangerItemText", "dangerItemColor"], ["colorDangerItemTextHover", "dangerItemHoverColor"], ["colorDangerItemTextSelected", "dangerItemSelectedColor"], ["colorDangerItemBgActive", "dangerItemActiveBg"], ["colorDangerItemBgSelected", "dangerItemSelectedBg"], ["colorItemBg", "itemBg"], ["colorItemBgHover", "itemHoverBg"], ["colorSubItemBg", "subMenuItemBg"], ["colorItemBgActive", "itemActiveBg"], ["colorItemBgSelectedHorizontal", "horizontalItemSelectedBg"], ["colorActiveBarWidth", "activeBarWidth"], ["colorActiveBarHeight", "activeBarHeight"], ["colorActiveBarBorderSize", "activeBarBorderWidth"], ["colorItemBgSelected", "itemSelectedBg"]],
      // Dropdown will handle menu style self. We do not need to handle this.
      injectStyle,
      unitless: {
        groupTitleLineHeight: true
      }
    });
    return useStyle(prefixCls, rootCls);
  };

  // node_modules/antd/es/menu/menu.js
  var __rest17 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var InternalMenu = /* @__PURE__ */ (0, import_react62.forwardRef)((props, ref) => {
    var _a, _b;
    const override = React196.useContext(OverrideContext_default);
    const overrideObj = override || {};
    const {
      getPrefixCls,
      getPopupContainer,
      direction,
      menu
    } = React196.useContext(ConfigContext);
    const rootPrefixCls = getPrefixCls();
    const {
      prefixCls: customizePrefixCls,
      className,
      style: style2,
      theme: theme3 = "light",
      expandIcon,
      _internalDisableMenuItemTitleTooltip,
      inlineCollapsed,
      siderCollapsed,
      items,
      children,
      rootClassName,
      mode,
      selectable,
      onClick,
      overflowedIndicatorPopupClassName
    } = props, restProps = __rest17(props, ["prefixCls", "className", "style", "theme", "expandIcon", "_internalDisableMenuItemTitleTooltip", "inlineCollapsed", "siderCollapsed", "items", "children", "rootClassName", "mode", "selectable", "onClick", "overflowedIndicatorPopupClassName"]);
    const passedProps = omit(restProps, ["collapsedWidth"]);
    const mergedChildren = useItems(items) || children;
    if (true) {
      const warning8 = devUseWarning("Menu");
      true ? warning8(!("inlineCollapsed" in props && mode !== "inline"), "usage", "`inlineCollapsed` should only be used when `mode` is inline.") : void 0;
      true ? warning8(!(props.siderCollapsed !== void 0 && "inlineCollapsed" in props), "usage", "`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.") : void 0;
      warning8.deprecated("items" in props && !children, "children", "items");
    }
    (_a = overrideObj.validator) === null || _a === void 0 ? void 0 : _a.call(overrideObj, {
      mode
    });
    const onItemClick = useEvent(function() {
      var _a2;
      onClick === null || onClick === void 0 ? void 0 : onClick.apply(void 0, arguments);
      (_a2 = overrideObj.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(overrideObj);
    });
    const mergedMode = overrideObj.mode || mode;
    const mergedSelectable = selectable !== null && selectable !== void 0 ? selectable : overrideObj.selectable;
    const mergedInlineCollapsed = React196.useMemo(() => {
      if (siderCollapsed !== void 0) {
        return siderCollapsed;
      }
      return inlineCollapsed;
    }, [inlineCollapsed, siderCollapsed]);
    const defaultMotions = {
      horizontal: {
        motionName: `${rootPrefixCls}-slide-up`
      },
      inline: motion_default(rootPrefixCls),
      other: {
        motionName: `${rootPrefixCls}-zoom-big`
      }
    };
    const prefixCls = getPrefixCls("menu", customizePrefixCls || overrideObj.prefixCls);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default8(prefixCls, rootCls, !override);
    const menuClassName = (0, import_classnames51.default)(`${prefixCls}-${theme3}`, menu === null || menu === void 0 ? void 0 : menu.className, className);
    let mergedExpandIcon;
    if (typeof expandIcon === "function") {
      mergedExpandIcon = expandIcon;
    } else if (expandIcon === null || expandIcon === false) {
      mergedExpandIcon = null;
    } else if (overrideObj.expandIcon === null || overrideObj.expandIcon === false) {
      mergedExpandIcon = null;
    } else {
      const beClone = expandIcon !== null && expandIcon !== void 0 ? expandIcon : overrideObj.expandIcon;
      mergedExpandIcon = cloneElement4(beClone, {
        className: (0, import_classnames51.default)(`${prefixCls}-submenu-expand-icon`, isValidElement4(beClone) ? (_b = beClone.props) === null || _b === void 0 ? void 0 : _b.className : "")
      });
    }
    const contextValue = React196.useMemo(() => ({
      prefixCls,
      inlineCollapsed: mergedInlineCollapsed || false,
      direction,
      firstLevel: true,
      theme: theme3,
      mode: mergedMode,
      disableMenuItemTitleTooltip: _internalDisableMenuItemTitleTooltip
    }), [prefixCls, mergedInlineCollapsed, direction, _internalDisableMenuItemTitleTooltip, theme3]);
    return wrapCSSVar(/* @__PURE__ */ React196.createElement(OverrideContext_default.Provider, {
      value: null
    }, /* @__PURE__ */ React196.createElement(MenuContext_default.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React196.createElement(es_default12, Object.assign({
      getPopupContainer,
      overflowedIndicator: /* @__PURE__ */ React196.createElement(EllipsisOutlined_default2, null),
      overflowedIndicatorPopupClassName: (0, import_classnames51.default)(prefixCls, `${prefixCls}-${theme3}`, overflowedIndicatorPopupClassName),
      mode: mergedMode,
      selectable: mergedSelectable,
      onClick: onItemClick
    }, passedProps, {
      inlineCollapsed: mergedInlineCollapsed,
      style: Object.assign(Object.assign({}, menu === null || menu === void 0 ? void 0 : menu.style), style2),
      className: menuClassName,
      prefixCls,
      direction,
      defaultMotions,
      expandIcon: mergedExpandIcon,
      ref,
      rootClassName: (0, import_classnames51.default)(rootClassName, hashId, overrideObj.rootClassName, cssVarCls, rootCls)
    }), mergedChildren))));
  });
  var menu_default = InternalMenu;

  // node_modules/antd/es/menu/index.js
  var Menu2 = /* @__PURE__ */ (0, import_react63.forwardRef)((props, ref) => {
    const menuRef = (0, import_react63.useRef)(null);
    const context = React197.useContext(SiderContext);
    (0, import_react63.useImperativeHandle)(ref, () => ({
      menu: menuRef.current,
      focus: (options) => {
        var _a;
        (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.focus(options);
      }
    }));
    return /* @__PURE__ */ React197.createElement(menu_default, Object.assign({
      ref: menuRef
    }, props, context));
  });
  Menu2.Item = MenuItem_default2;
  Menu2.SubMenu = SubMenu_default;
  Menu2.Divider = MenuDivider_default;
  Menu2.ItemGroup = MenuItemGroup;
  if (true) {
    Menu2.displayName = "Menu";
  }
  var menu_default2 = Menu2;

  // node_modules/antd/es/dropdown/style/status.js
  var genStatusStyle = (token2) => {
    const {
      componentCls,
      menuCls,
      colorError,
      colorTextLightSolid
    } = token2;
    const itemCls = `${menuCls}-item`;
    return {
      [`${componentCls}, ${componentCls}-menu-submenu`]: {
        [`${menuCls} ${itemCls}`]: {
          [`&${itemCls}-danger:not(${itemCls}-disabled)`]: {
            color: colorError,
            "&:hover": {
              color: colorTextLightSolid,
              backgroundColor: colorError
            }
          }
        }
      }
    };
  };
  var status_default = genStatusStyle;

  // node_modules/antd/es/dropdown/style/index.js
  var genBaseStyle2 = (token2) => {
    const {
      componentCls,
      menuCls,
      zIndexPopup,
      dropdownArrowDistance,
      sizePopupArrow,
      antCls,
      iconCls,
      motionDurationMid,
      paddingBlock,
      fontSize,
      dropdownEdgeChildPadding,
      colorTextDisabled,
      fontSizeIcon,
      controlPaddingHorizontal,
      colorBgElevated
    } = token2;
    return [
      {
        [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
          position: "absolute",
          top: -9999,
          left: {
            _skip_check_: true,
            value: -9999
          },
          zIndex: zIndexPopup,
          display: "block",
          // A placeholder out of dropdown visible range to avoid close when user moving
          "&::before": {
            position: "absolute",
            insetBlock: token2.calc(sizePopupArrow).div(2).sub(dropdownArrowDistance).equal(),
            // insetInlineStart: -7, // FIXME: Seems not work for hidden element
            zIndex: -9999,
            opacity: 1e-4,
            content: '""'
          },
          [`&-trigger${antCls}-btn`]: {
            [`& > ${iconCls}-down, & > ${antCls}-btn-icon > ${iconCls}-down`]: {
              fontSize: fontSizeIcon
            }
          },
          [`${componentCls}-wrap`]: {
            position: "relative",
            [`${antCls}-btn > ${iconCls}-down`]: {
              fontSize: fontSizeIcon
            },
            [`${iconCls}-down::before`]: {
              transition: `transform ${motionDurationMid}`
            }
          },
          [`${componentCls}-wrap-open`]: {
            [`${iconCls}-down::before`]: {
              transform: `rotate(180deg)`
            }
          },
          [`
        &-hidden,
        &-menu-hidden,
        &-menu-submenu-hidden
      `]: {
            display: "none"
          },
          // =============================================================
          // ==                         Motion                          ==
          // =============================================================
          // When position is not enough for dropdown, the placement will revert.
          // We will handle this with revert motion name.
          [`&${antCls}-slide-down-enter${antCls}-slide-down-enter-active${componentCls}-placement-bottomLeft,
          &${antCls}-slide-down-appear${antCls}-slide-down-appear-active${componentCls}-placement-bottomLeft,
          &${antCls}-slide-down-enter${antCls}-slide-down-enter-active${componentCls}-placement-bottom,
          &${antCls}-slide-down-appear${antCls}-slide-down-appear-active${componentCls}-placement-bottom,
          &${antCls}-slide-down-enter${antCls}-slide-down-enter-active${componentCls}-placement-bottomRight,
          &${antCls}-slide-down-appear${antCls}-slide-down-appear-active${componentCls}-placement-bottomRight`]: {
            animationName: slideUpIn
          },
          [`&${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-placement-topLeft,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-placement-topLeft,
          &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-placement-top,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-placement-top,
          &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-placement-topRight,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-placement-topRight`]: {
            animationName: slideDownIn
          },
          [`&${antCls}-slide-down-leave${antCls}-slide-down-leave-active${componentCls}-placement-bottomLeft,
          &${antCls}-slide-down-leave${antCls}-slide-down-leave-active${componentCls}-placement-bottom,
          &${antCls}-slide-down-leave${antCls}-slide-down-leave-active${componentCls}-placement-bottomRight`]: {
            animationName: slideUpOut
          },
          [`&${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-placement-topLeft,
          &${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-placement-top,
          &${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-placement-topRight`]: {
            animationName: slideDownOut
          }
        })
      },
      // =============================================================
      // ==                        Arrow style                      ==
      // =============================================================
      getArrowStyle(token2, colorBgElevated, {
        arrowPlacement: {
          top: true,
          bottom: true
        }
      }),
      {
        // =============================================================
        // ==                          Menu                           ==
        // =============================================================
        [`${componentCls} ${menuCls}`]: {
          position: "relative",
          margin: 0
        },
        [`${menuCls}-submenu-popup`]: {
          position: "absolute",
          zIndex: zIndexPopup,
          background: "transparent",
          boxShadow: "none",
          transformOrigin: "0 0",
          "ul, li": {
            listStyle: "none",
            margin: 0
          }
        },
        [`${componentCls}, ${componentCls}-menu-submenu`]: {
          [menuCls]: Object.assign(Object.assign({
            padding: dropdownEdgeChildPadding,
            listStyleType: "none",
            backgroundColor: colorBgElevated,
            backgroundClip: "padding-box",
            borderRadius: token2.borderRadiusLG,
            outline: "none",
            boxShadow: token2.boxShadowSecondary
          }, genFocusStyle(token2)), {
            [`${menuCls}-item-group-title`]: {
              padding: `${unit(paddingBlock)} ${unit(controlPaddingHorizontal)}`,
              color: token2.colorTextDescription,
              transition: `all ${motionDurationMid}`
            },
            // ======================= Item Content =======================
            [`${menuCls}-item`]: {
              position: "relative",
              display: "flex",
              alignItems: "center"
            },
            [`${menuCls}-item-icon`]: {
              minWidth: fontSize,
              marginInlineEnd: token2.marginXS,
              fontSize: token2.fontSizeSM
            },
            [`${menuCls}-title-content`]: {
              flex: "auto",
              "> a": {
                color: "inherit",
                transition: `all ${motionDurationMid}`,
                "&:hover": {
                  color: "inherit"
                },
                "&::after": {
                  position: "absolute",
                  inset: 0,
                  content: '""'
                }
              }
            },
            // =========================== Item ===========================
            [`${menuCls}-item, ${menuCls}-submenu-title`]: Object.assign(Object.assign({
              clear: "both",
              margin: 0,
              padding: `${unit(paddingBlock)} ${unit(controlPaddingHorizontal)}`,
              color: token2.colorText,
              fontWeight: "normal",
              fontSize,
              lineHeight: token2.lineHeight,
              cursor: "pointer",
              transition: `all ${motionDurationMid}`,
              borderRadius: token2.borderRadiusSM,
              [`&:hover, &-active`]: {
                backgroundColor: token2.controlItemBgHover
              }
            }, genFocusStyle(token2)), {
              "&-selected": {
                color: token2.colorPrimary,
                backgroundColor: token2.controlItemBgActive,
                "&:hover, &-active": {
                  backgroundColor: token2.controlItemBgActiveHover
                }
              },
              "&-disabled": {
                color: colorTextDisabled,
                cursor: "not-allowed",
                "&:hover": {
                  color: colorTextDisabled,
                  backgroundColor: colorBgElevated,
                  cursor: "not-allowed"
                },
                a: {
                  pointerEvents: "none"
                }
              },
              "&-divider": {
                height: 1,
                // By design
                margin: `${unit(token2.marginXXS)} 0`,
                overflow: "hidden",
                lineHeight: 0,
                backgroundColor: token2.colorSplit
              },
              [`${componentCls}-menu-submenu-expand-icon`]: {
                position: "absolute",
                insetInlineEnd: token2.paddingXS,
                [`${componentCls}-menu-submenu-arrow-icon`]: {
                  marginInlineEnd: "0 !important",
                  color: token2.colorTextDescription,
                  fontSize: fontSizeIcon,
                  fontStyle: "normal"
                }
              }
            }),
            [`${menuCls}-item-group-list`]: {
              margin: `0 ${unit(token2.marginXS)}`,
              padding: 0,
              listStyle: "none"
            },
            [`${menuCls}-submenu-title`]: {
              paddingInlineEnd: token2.calc(controlPaddingHorizontal).add(token2.fontSizeSM).equal()
            },
            [`${menuCls}-submenu-vertical`]: {
              position: "relative"
            },
            [`${menuCls}-submenu${menuCls}-submenu-disabled ${componentCls}-menu-submenu-title`]: {
              [`&, ${componentCls}-menu-submenu-arrow-icon`]: {
                color: colorTextDisabled,
                backgroundColor: colorBgElevated,
                cursor: "not-allowed"
              }
            },
            // https://github.com/ant-design/ant-design/issues/19264
            [`${menuCls}-submenu-selected ${componentCls}-menu-submenu-title`]: {
              color: token2.colorPrimary
            }
          })
        }
      },
      // Follow code may reuse in other components
      [initSlideMotion(token2, "slide-up"), initSlideMotion(token2, "slide-down"), initMoveMotion(token2, "move-up"), initMoveMotion(token2, "move-down"), initZoomMotion(token2, "zoom-big")]
    ];
  };
  var prepareComponentToken6 = (token2) => Object.assign(Object.assign({
    zIndexPopup: token2.zIndexPopupBase + 50,
    paddingBlock: (token2.controlHeight - token2.fontSize * token2.lineHeight) / 2
  }, getArrowOffsetToken({
    contentRadius: token2.borderRadiusLG,
    limitVerticalRadius: true
  })), getArrowToken(token2));
  var style_default9 = genStyleHooks("Dropdown", (token2) => {
    const {
      marginXXS,
      sizePopupArrow,
      paddingXXS,
      componentCls
    } = token2;
    const dropdownToken = merge2(token2, {
      menuCls: `${componentCls}-menu`,
      dropdownArrowDistance: token2.calc(sizePopupArrow).div(2).add(marginXXS).equal(),
      dropdownEdgeChildPadding: paddingXXS
    });
    return [genBaseStyle2(dropdownToken), status_default(dropdownToken)];
  }, prepareComponentToken6);

  // node_modules/antd/es/dropdown/dropdown.js
  var Dropdown2 = (props) => {
    const {
      menu,
      arrow,
      prefixCls: customizePrefixCls,
      children,
      trigger,
      disabled,
      dropdownRender,
      getPopupContainer,
      overlayClassName,
      rootClassName,
      overlayStyle,
      open,
      onOpenChange,
      // Deprecated
      visible,
      onVisibleChange,
      mouseEnterDelay = 0.15,
      mouseLeaveDelay = 0.1,
      autoAdjustOverflow: autoAdjustOverflow3 = true,
      placement = "",
      overlay,
      transitionName
    } = props;
    const {
      getPopupContainer: getContextPopupContainer,
      getPrefixCls,
      direction,
      dropdown
    } = React198.useContext(ConfigContext);
    const warning8 = devUseWarning("Dropdown");
    if (true) {
      [["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach((_ref) => {
        let [deprecatedName, newName] = _ref;
        warning8.deprecated(!(deprecatedName in props), deprecatedName, newName);
      });
      warning8.deprecated(!("overlay" in props), "overlay", "menu");
    }
    const memoTransitionName = React198.useMemo(() => {
      const rootPrefixCls = getPrefixCls();
      if (transitionName !== void 0) {
        return transitionName;
      }
      if (placement.includes("top")) {
        return `${rootPrefixCls}-slide-down`;
      }
      return `${rootPrefixCls}-slide-up`;
    }, [getPrefixCls, placement, transitionName]);
    const memoPlacement = React198.useMemo(() => {
      if (!placement) {
        return direction === "rtl" ? "bottomRight" : "bottomLeft";
      }
      if (placement.includes("Center")) {
        return placement.slice(0, placement.indexOf("Center"));
      }
      return placement;
    }, [placement, direction]);
    if (true) {
      if (placement.includes("Center")) {
        const newPlacement = placement.slice(0, placement.indexOf("Center"));
        true ? warning8(!placement.includes("Center"), "deprecated", `You are using '${placement}' placement in Dropdown, which is deprecated. Try to use '${newPlacement}' instead.`) : void 0;
      }
      [["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach((_ref2) => {
        let [deprecatedName, newName] = _ref2;
        warning8.deprecated(!(deprecatedName in props), deprecatedName, newName);
      });
    }
    const prefixCls = getPrefixCls("dropdown", customizePrefixCls);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default9(prefixCls, rootCls);
    const [, token2] = useToken();
    const child = React198.Children.only(children);
    const dropdownTrigger = cloneElement4(child, {
      className: (0, import_classnames52.default)(`${prefixCls}-trigger`, {
        [`${prefixCls}-rtl`]: direction === "rtl"
      }, child.props.className),
      disabled
    });
    const triggerActions = disabled ? [] : trigger;
    let alignPoint;
    if (triggerActions && triggerActions.includes("contextMenu")) {
      alignPoint = true;
    }
    const [mergedOpen, setOpen] = useMergedState(false, {
      value: open !== null && open !== void 0 ? open : visible
    });
    const onInnerOpenChange = useEvent((nextOpen) => {
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(nextOpen, {
        source: "trigger"
      });
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(nextOpen);
      setOpen(nextOpen);
    });
    const overlayClassNameCustomized = (0, import_classnames52.default)(overlayClassName, rootClassName, hashId, cssVarCls, rootCls, dropdown === null || dropdown === void 0 ? void 0 : dropdown.className, {
      [`${prefixCls}-rtl`]: direction === "rtl"
    });
    const builtinPlacements = getPlacements({
      arrowPointAtCenter: typeof arrow === "object" && arrow.pointAtCenter,
      autoAdjustOverflow: autoAdjustOverflow3,
      offset: token2.marginXXS,
      arrowWidth: arrow ? token2.sizePopupArrow : 0,
      borderRadius: token2.borderRadius
    });
    const onMenuClick = React198.useCallback(() => {
      if ((menu === null || menu === void 0 ? void 0 : menu.selectable) && (menu === null || menu === void 0 ? void 0 : menu.multiple)) {
        return;
      }
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(false, {
        source: "menu"
      });
      setOpen(false);
    }, [menu === null || menu === void 0 ? void 0 : menu.selectable, menu === null || menu === void 0 ? void 0 : menu.multiple]);
    const renderOverlay = () => {
      let overlayNode;
      if (menu === null || menu === void 0 ? void 0 : menu.items) {
        overlayNode = /* @__PURE__ */ React198.createElement(menu_default2, Object.assign({}, menu));
      } else if (typeof overlay === "function") {
        overlayNode = overlay();
      } else {
        overlayNode = overlay;
      }
      if (dropdownRender) {
        overlayNode = dropdownRender(overlayNode);
      }
      overlayNode = React198.Children.only(typeof overlayNode === "string" ? /* @__PURE__ */ React198.createElement("span", null, overlayNode) : overlayNode);
      return /* @__PURE__ */ React198.createElement(OverrideProvider, {
        prefixCls: `${prefixCls}-menu`,
        rootClassName: (0, import_classnames52.default)(cssVarCls, rootCls),
        expandIcon: /* @__PURE__ */ React198.createElement("span", {
          className: `${prefixCls}-menu-submenu-arrow`
        }, /* @__PURE__ */ React198.createElement(RightOutlined_default2, {
          className: `${prefixCls}-menu-submenu-arrow-icon`
        })),
        mode: "vertical",
        selectable: false,
        onClick: onMenuClick,
        validator: (_ref3) => {
          let {
            mode
          } = _ref3;
          true ? warning8(!mode || mode === "vertical", "usage", `mode="${mode}" is not supported for Dropdown's Menu.`) : void 0;
        }
      }, overlayNode);
    };
    const [zIndex, contextZIndex] = useZIndex("Dropdown", overlayStyle === null || overlayStyle === void 0 ? void 0 : overlayStyle.zIndex);
    let renderNode = /* @__PURE__ */ React198.createElement(es_default11, Object.assign({
      alignPoint
    }, omit(props, ["rootClassName"]), {
      mouseEnterDelay,
      mouseLeaveDelay,
      visible: mergedOpen,
      builtinPlacements,
      arrow: !!arrow,
      overlayClassName: overlayClassNameCustomized,
      prefixCls,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      transitionName: memoTransitionName,
      trigger: triggerActions,
      overlay: renderOverlay,
      placement: memoPlacement,
      onVisibleChange: onInnerOpenChange,
      overlayStyle: Object.assign(Object.assign(Object.assign({}, dropdown === null || dropdown === void 0 ? void 0 : dropdown.style), overlayStyle), {
        zIndex
      })
    }), dropdownTrigger);
    if (zIndex) {
      renderNode = /* @__PURE__ */ React198.createElement(zindexContext_default.Provider, {
        value: contextZIndex
      }, renderNode);
    }
    return wrapCSSVar(renderNode);
  };
  function postPureProps(props) {
    return Object.assign(Object.assign({}, props), {
      align: {
        overflow: {
          adjustX: false,
          adjustY: false
        }
      }
    });
  }
  var PurePanel3 = PurePanel_default(Dropdown2, "dropdown", (prefixCls) => prefixCls, postPureProps);
  var WrapPurePanel = (props) => /* @__PURE__ */ React198.createElement(PurePanel3, Object.assign({}, props), /* @__PURE__ */ React198.createElement("span", null));
  Dropdown2._InternalPanelDoNotUseOrYouWillBeFired = WrapPurePanel;
  if (true) {
    Dropdown2.displayName = "Dropdown";
  }
  var dropdown_default2 = Dropdown2;

  // node_modules/rc-picker/es/generate/dayjs.js
  var import_dayjs = __toESM(require_dayjs_min());
  var import_weekday = __toESM(require_weekday());
  var import_localeData = __toESM(require_localeData());
  var import_weekOfYear = __toESM(require_weekOfYear());
  var import_weekYear = __toESM(require_weekYear());
  var import_advancedFormat = __toESM(require_advancedFormat());
  var import_customParseFormat = __toESM(require_customParseFormat());
  import_dayjs.default.extend(import_customParseFormat.default);
  import_dayjs.default.extend(import_advancedFormat.default);
  import_dayjs.default.extend(import_weekday.default);
  import_dayjs.default.extend(import_localeData.default);
  import_dayjs.default.extend(import_weekOfYear.default);
  import_dayjs.default.extend(import_weekYear.default);
  import_dayjs.default.extend(function(o3, c) {
    var proto2 = c.prototype;
    var oldFormat = proto2.format;
    proto2.format = function f(formatStr) {
      var str = (formatStr || "").replace("Wo", "wo");
      return oldFormat.bind(this)(str);
    };
  });
  var localeMap = {
    // ar_EG:
    // az_AZ:
    // bg_BG:
    bn_BD: "bn-bd",
    by_BY: "be",
    // ca_ES:
    // cs_CZ:
    // da_DK:
    // de_DE:
    // el_GR:
    en_GB: "en-gb",
    en_US: "en",
    // es_ES:
    // et_EE:
    // fa_IR:
    // fi_FI:
    fr_BE: "fr",
    // todo: dayjs has no fr_BE locale, use fr at present
    fr_CA: "fr-ca",
    // fr_FR:
    // ga_IE:
    // gl_ES:
    // he_IL:
    // hi_IN:
    // hr_HR:
    // hu_HU:
    hy_AM: "hy-am",
    // id_ID:
    // is_IS:
    // it_IT:
    // ja_JP:
    // ka_GE:
    // kk_KZ:
    // km_KH:
    kmr_IQ: "ku",
    // kn_IN:
    // ko_KR:
    // ku_IQ: // previous ku in antd
    // lt_LT:
    // lv_LV:
    // mk_MK:
    // ml_IN:
    // mn_MN:
    // ms_MY:
    // nb_NO:
    // ne_NP:
    nl_BE: "nl-be",
    // nl_NL:
    // pl_PL:
    pt_BR: "pt-br",
    // pt_PT:
    // ro_RO:
    // ru_RU:
    // sk_SK:
    // sl_SI:
    // sr_RS:
    // sv_SE:
    // ta_IN:
    // th_TH:
    // tr_TR:
    // uk_UA:
    // ur_PK:
    // vi_VN:
    zh_CN: "zh-cn",
    zh_HK: "zh-hk",
    zh_TW: "zh-tw"
  };
  var parseLocale = function parseLocale2(locale9) {
    var mapLocale = localeMap[locale9];
    return mapLocale || locale9.split("_")[0];
  };
  var parseNoMatchNotice = function parseNoMatchNotice2() {
    noteOnce(false, "Not match any format. Please help to fire a issue about this.");
  };
  var generateConfig = {
    // get
    getNow: function getNow() {
      return (0, import_dayjs.default)();
    },
    getFixedDate: function getFixedDate(string3) {
      return (0, import_dayjs.default)(string3, ["YYYY-M-DD", "YYYY-MM-DD"]);
    },
    getEndDate: function getEndDate(date4) {
      return date4.endOf("month");
    },
    getWeekDay: function getWeekDay(date4) {
      var clone = date4.locale("en");
      return clone.weekday() + clone.localeData().firstDayOfWeek();
    },
    getYear: function getYear(date4) {
      return date4.year();
    },
    getMonth: function getMonth(date4) {
      return date4.month();
    },
    getDate: function getDate(date4) {
      return date4.date();
    },
    getHour: function getHour(date4) {
      return date4.hour();
    },
    getMinute: function getMinute(date4) {
      return date4.minute();
    },
    getSecond: function getSecond(date4) {
      return date4.second();
    },
    // set
    addYear: function addYear(date4, diff) {
      return date4.add(diff, "year");
    },
    addMonth: function addMonth(date4, diff) {
      return date4.add(diff, "month");
    },
    addDate: function addDate(date4, diff) {
      return date4.add(diff, "day");
    },
    setYear: function setYear(date4, year) {
      return date4.year(year);
    },
    setMonth: function setMonth(date4, month) {
      return date4.month(month);
    },
    setDate: function setDate(date4, num) {
      return date4.date(num);
    },
    setHour: function setHour(date4, hour) {
      return date4.hour(hour);
    },
    setMinute: function setMinute(date4, minute) {
      return date4.minute(minute);
    },
    setSecond: function setSecond(date4, second) {
      return date4.second(second);
    },
    // Compare
    isAfter: function isAfter(date1, date22) {
      return date1.isAfter(date22);
    },
    isValidate: function isValidate(date4) {
      return date4.isValid();
    },
    locale: {
      getWeekFirstDay: function getWeekFirstDay(locale9) {
        return (0, import_dayjs.default)().locale(parseLocale(locale9)).localeData().firstDayOfWeek();
      },
      getWeekFirstDate: function getWeekFirstDate(locale9, date4) {
        return date4.locale(parseLocale(locale9)).weekday(0);
      },
      getWeek: function getWeek(locale9, date4) {
        return date4.locale(parseLocale(locale9)).week();
      },
      getShortWeekDays: function getShortWeekDays(locale9) {
        return (0, import_dayjs.default)().locale(parseLocale(locale9)).localeData().weekdaysMin();
      },
      getShortMonths: function getShortMonths(locale9) {
        return (0, import_dayjs.default)().locale(parseLocale(locale9)).localeData().monthsShort();
      },
      format: function format2(locale9, date4, _format) {
        return date4.locale(parseLocale(locale9)).format(_format);
      },
      parse: function parse2(locale9, text, formats) {
        var localeStr = parseLocale(locale9);
        for (var i = 0; i < formats.length; i += 1) {
          var format3 = formats[i];
          var formatText = text;
          if (format3.includes("wo") || format3.includes("Wo")) {
            var year = formatText.split("-")[0];
            var weekStr = formatText.split("-")[1];
            var firstWeek = (0, import_dayjs.default)(year, "YYYY").startOf("year").locale(localeStr);
            for (var j = 0; j <= 52; j += 1) {
              var nextWeek = firstWeek.add(j, "week");
              if (nextWeek.format("Wo") === weekStr) {
                return nextWeek;
              }
            }
            parseNoMatchNotice();
            return null;
          }
          var date4 = (0, import_dayjs.default)(formatText, format3, true).locale(localeStr);
          if (date4.isValid()) {
            return date4;
          }
        }
        if (text) {
          parseNoMatchNotice();
        }
        return null;
      }
    }
  };
  var dayjs_default = generateConfig;

  // node_modules/rc-picker/es/Picker.js
  var import_classnames61 = __toESM(require_classnames());
  var React234 = __toESM(require_react());

  // node_modules/rc-picker/es/hooks/useHoverValue.js
  var import_react64 = __toESM(require_react());

  // node_modules/rc-picker/es/hooks/useValueTexts.js
  var React199 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/DecadePanel/constant.js
  var DECADE_UNIT_DIFF = 10;
  var DECADE_DISTANCE_COUNT = DECADE_UNIT_DIFF * 10;

  // node_modules/rc-picker/es/utils/dateUtil.js
  var WEEK_DAY_COUNT = 7;
  function isNullEqual(value1, value2) {
    if (!value1 && !value2) {
      return true;
    }
    if (!value1 || !value2) {
      return false;
    }
    return void 0;
  }
  function isSameDecade(generateConfig2, decade1, decade2) {
    var equal = isNullEqual(decade1, decade2);
    if (typeof equal === "boolean") {
      return equal;
    }
    var num1 = Math.floor(generateConfig2.getYear(decade1) / 10);
    var num2 = Math.floor(generateConfig2.getYear(decade2) / 10);
    return num1 === num2;
  }
  function isSameYear(generateConfig2, year1, year2) {
    var equal = isNullEqual(year1, year2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return generateConfig2.getYear(year1) === generateConfig2.getYear(year2);
  }
  function getQuarter(generateConfig2, date4) {
    var quota = Math.floor(generateConfig2.getMonth(date4) / 3);
    return quota + 1;
  }
  function isSameQuarter(generateConfig2, quarter1, quarter2) {
    var equal = isNullEqual(quarter1, quarter2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return isSameYear(generateConfig2, quarter1, quarter2) && getQuarter(generateConfig2, quarter1) === getQuarter(generateConfig2, quarter2);
  }
  function isSameMonth(generateConfig2, month1, month2) {
    var equal = isNullEqual(month1, month2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return isSameYear(generateConfig2, month1, month2) && generateConfig2.getMonth(month1) === generateConfig2.getMonth(month2);
  }
  function isSameDate(generateConfig2, date1, date22) {
    var equal = isNullEqual(date1, date22);
    if (typeof equal === "boolean") {
      return equal;
    }
    return generateConfig2.getYear(date1) === generateConfig2.getYear(date22) && generateConfig2.getMonth(date1) === generateConfig2.getMonth(date22) && generateConfig2.getDate(date1) === generateConfig2.getDate(date22);
  }
  function isSameTime(generateConfig2, time1, time2) {
    var equal = isNullEqual(time1, time2);
    if (typeof equal === "boolean") {
      return equal;
    }
    return generateConfig2.getHour(time1) === generateConfig2.getHour(time2) && generateConfig2.getMinute(time1) === generateConfig2.getMinute(time2) && generateConfig2.getSecond(time1) === generateConfig2.getSecond(time2);
  }
  function isSameWeek(generateConfig2, locale9, date1, date22) {
    var equal = isNullEqual(date1, date22);
    if (typeof equal === "boolean") {
      return equal;
    }
    return isSameYear(generateConfig2, date1, date22) && generateConfig2.locale.getWeek(locale9, date1) === generateConfig2.locale.getWeek(locale9, date22);
  }
  function isEqual2(generateConfig2, value1, value2) {
    return isSameDate(generateConfig2, value1, value2) && isSameTime(generateConfig2, value1, value2);
  }
  function isInRange(generateConfig2, startDate, endDate, current2) {
    if (!startDate || !endDate || !current2) {
      return false;
    }
    return !isSameDate(generateConfig2, startDate, current2) && !isSameDate(generateConfig2, endDate, current2) && generateConfig2.isAfter(current2, startDate) && generateConfig2.isAfter(endDate, current2);
  }
  function getWeekStartDate(locale9, generateConfig2, value) {
    var weekFirstDay = generateConfig2.locale.getWeekFirstDay(locale9);
    var monthStartDate = generateConfig2.setDate(value, 1);
    var startDateWeekDay = generateConfig2.getWeekDay(monthStartDate);
    var alignStartDate = generateConfig2.addDate(monthStartDate, weekFirstDay - startDateWeekDay);
    if (generateConfig2.getMonth(alignStartDate) === generateConfig2.getMonth(value) && generateConfig2.getDate(alignStartDate) > 1) {
      alignStartDate = generateConfig2.addDate(alignStartDate, -7);
    }
    return alignStartDate;
  }
  function getClosingViewDate(viewDate, picker, generateConfig2) {
    var offset3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    switch (picker) {
      case "year":
        return generateConfig2.addYear(viewDate, offset3 * 10);
      case "quarter":
      case "month":
        return generateConfig2.addYear(viewDate, offset3);
      default:
        return generateConfig2.addMonth(viewDate, offset3);
    }
  }
  function formatValue(value, _ref) {
    var generateConfig2 = _ref.generateConfig, locale9 = _ref.locale, format3 = _ref.format;
    return typeof format3 === "function" ? format3(value) : generateConfig2.locale.format(locale9.locale, value, format3);
  }
  function parseValue(value, _ref2) {
    var generateConfig2 = _ref2.generateConfig, locale9 = _ref2.locale, formatList = _ref2.formatList;
    if (!value || typeof formatList[0] === "function") {
      return null;
    }
    return generateConfig2.locale.parse(locale9.locale, value, formatList);
  }
  function getCellDateDisabled(_ref3) {
    var cellDate = _ref3.cellDate, mode = _ref3.mode, disabledDate = _ref3.disabledDate, generateConfig2 = _ref3.generateConfig;
    if (!disabledDate)
      return false;
    var getDisabledFromRange = function getDisabledFromRange2(currentMode, start2, end) {
      var current2 = start2;
      while (current2 <= end) {
        var _date = void 0;
        switch (currentMode) {
          case "date": {
            _date = generateConfig2.setDate(cellDate, current2);
            if (!disabledDate(_date)) {
              return false;
            }
            break;
          }
          case "month": {
            _date = generateConfig2.setMonth(cellDate, current2);
            if (!getCellDateDisabled({
              cellDate: _date,
              mode: "month",
              generateConfig: generateConfig2,
              disabledDate
            })) {
              return false;
            }
            break;
          }
          case "year": {
            _date = generateConfig2.setYear(cellDate, current2);
            if (!getCellDateDisabled({
              cellDate: _date,
              mode: "year",
              generateConfig: generateConfig2,
              disabledDate
            })) {
              return false;
            }
            break;
          }
        }
        current2 += 1;
      }
      return true;
    };
    switch (mode) {
      case "date":
      case "week": {
        return disabledDate(cellDate);
      }
      case "month": {
        var startDate = 1;
        var endDate = generateConfig2.getDate(generateConfig2.getEndDate(cellDate));
        return getDisabledFromRange("date", startDate, endDate);
      }
      case "quarter": {
        var startMonth = Math.floor(generateConfig2.getMonth(cellDate) / 3) * 3;
        var endMonth = startMonth + 2;
        return getDisabledFromRange("month", startMonth, endMonth);
      }
      case "year": {
        return getDisabledFromRange("month", 0, 11);
      }
      case "decade": {
        var year = generateConfig2.getYear(cellDate);
        var startYear = Math.floor(year / DECADE_UNIT_DIFF) * DECADE_UNIT_DIFF;
        var endYear = startYear + DECADE_UNIT_DIFF - 1;
        return getDisabledFromRange("year", startYear, endYear);
      }
    }
  }

  // node_modules/rc-picker/es/hooks/useValueTexts.js
  function useValueTexts(value, _ref) {
    var formatList = _ref.formatList, generateConfig2 = _ref.generateConfig, locale9 = _ref.locale;
    var _useMemo = useMemo(function() {
      if (!value) {
        return [[""], ""];
      }
      var firstValueText = "";
      var fullValueTexts = [];
      for (var i = 0; i < formatList.length; i += 1) {
        var format3 = formatList[i];
        var formatStr = formatValue(value, {
          generateConfig: generateConfig2,
          locale: locale9,
          format: format3
        });
        fullValueTexts.push(formatStr);
        if (i === 0) {
          firstValueText = formatStr;
        }
      }
      return [fullValueTexts, firstValueText];
    }, [value, formatList, locale9], function(prev2, next2) {
      return (
        // Not Same Date
        !isEqual2(generateConfig2, prev2[0], next2[0]) || // Not Same format
        !isEqual_default(prev2[1], next2[1], true) || // Not Same locale
        !isEqual_default(prev2[2], next2[2], true)
      );
    }), _useMemo2 = _slicedToArray(_useMemo, 2), texts = _useMemo2[0], text = _useMemo2[1];
    return React199.useMemo(function() {
      return [texts, text];
    }, [texts.join(""), text]);
  }

  // node_modules/rc-picker/es/hooks/useHoverValue.js
  function useHoverValue(valueText, _ref) {
    var formatList = _ref.formatList, generateConfig2 = _ref.generateConfig, locale9 = _ref.locale;
    var _useState = (0, import_react64.useState)(null), _useState2 = _slicedToArray(_useState, 2), value = _useState2[0], internalSetValue = _useState2[1];
    var raf3 = (0, import_react64.useRef)(null);
    function setValue(val) {
      var immediately = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      cancelAnimationFrame(raf3.current);
      if (immediately) {
        internalSetValue(val);
        return;
      }
      raf3.current = requestAnimationFrame(function() {
        internalSetValue(val);
      });
    }
    var _useValueTexts = useValueTexts(value, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale9
    }), _useValueTexts2 = _slicedToArray(_useValueTexts, 2), firstText = _useValueTexts2[1];
    function onEnter(date4) {
      setValue(date4);
    }
    function onLeave() {
      var immediately = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      setValue(null, immediately);
    }
    (0, import_react64.useEffect)(function() {
      onLeave(true);
    }, [valueText]);
    (0, import_react64.useEffect)(function() {
      return function() {
        return cancelAnimationFrame(raf3.current);
      };
    }, []);
    return [firstText, onEnter, onLeave];
  }

  // node_modules/rc-picker/es/hooks/usePickerInput.js
  var import_react65 = __toESM(require_react());

  // node_modules/rc-picker/es/utils/uiUtil.js
  var scrollIds = /* @__PURE__ */ new Map();
  function waitElementReady(element, callback) {
    var id;
    function tryOrNextFrame() {
      if (isVisible_default(element)) {
        callback();
      } else {
        id = raf_default(function() {
          tryOrNextFrame();
        });
      }
    }
    tryOrNextFrame();
    return function() {
      raf_default.cancel(id);
    };
  }
  function scrollTo2(element, to, duration) {
    if (scrollIds.get(element)) {
      cancelAnimationFrame(scrollIds.get(element));
    }
    if (duration <= 0) {
      scrollIds.set(element, requestAnimationFrame(function() {
        element.scrollTop = to;
      }));
      return;
    }
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;
    scrollIds.set(element, requestAnimationFrame(function() {
      element.scrollTop += perTick;
      if (element.scrollTop !== to) {
        scrollTo2(element, to, duration - 10);
      }
    }));
  }
  function createKeyDownHandler(event, _ref) {
    var onLeftRight = _ref.onLeftRight, onCtrlLeftRight = _ref.onCtrlLeftRight, onUpDown = _ref.onUpDown, onPageUpDown = _ref.onPageUpDown, onEnter = _ref.onEnter;
    var which = event.which, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
    switch (which) {
      case KeyCode_default.LEFT:
        if (ctrlKey || metaKey) {
          if (onCtrlLeftRight) {
            onCtrlLeftRight(-1);
            return true;
          }
        } else if (onLeftRight) {
          onLeftRight(-1);
          return true;
        }
        break;
      case KeyCode_default.RIGHT:
        if (ctrlKey || metaKey) {
          if (onCtrlLeftRight) {
            onCtrlLeftRight(1);
            return true;
          }
        } else if (onLeftRight) {
          onLeftRight(1);
          return true;
        }
        break;
      case KeyCode_default.UP:
        if (onUpDown) {
          onUpDown(-1);
          return true;
        }
        break;
      case KeyCode_default.DOWN:
        if (onUpDown) {
          onUpDown(1);
          return true;
        }
        break;
      case KeyCode_default.PAGE_UP:
        if (onPageUpDown) {
          onPageUpDown(-1);
          return true;
        }
        break;
      case KeyCode_default.PAGE_DOWN:
        if (onPageUpDown) {
          onPageUpDown(1);
          return true;
        }
        break;
      case KeyCode_default.ENTER:
        if (onEnter) {
          onEnter();
          return true;
        }
        break;
    }
    return false;
  }
  function getDefaultFormat(format3, picker, showTime, use12Hours) {
    var mergedFormat = format3;
    if (!mergedFormat) {
      switch (picker) {
        case "time":
          mergedFormat = use12Hours ? "hh:mm:ss a" : "HH:mm:ss";
          break;
        case "week":
          mergedFormat = "gggg-wo";
          break;
        case "month":
          mergedFormat = "YYYY-MM";
          break;
        case "quarter":
          mergedFormat = "YYYY-[Q]Q";
          break;
        case "year":
          mergedFormat = "YYYY";
          break;
        default:
          mergedFormat = showTime ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD";
      }
    }
    return mergedFormat;
  }
  function getInputSize(picker, format3, generateConfig2) {
    var defaultSize = picker === "time" ? 8 : 10;
    var length2 = typeof format3 === "function" ? format3(generateConfig2.getNow()).length : format3.length;
    return Math.max(defaultSize, length2) + 2;
  }
  var globalClickFunc = null;
  var clickCallbacks = /* @__PURE__ */ new Set();
  function addGlobalMouseDownEvent(callback) {
    if (!globalClickFunc && typeof window !== "undefined" && window.addEventListener) {
      globalClickFunc = function globalClickFunc2(e3) {
        _toConsumableArray(clickCallbacks).forEach(function(queueFunc) {
          queueFunc(e3);
        });
      };
      window.addEventListener("mousedown", globalClickFunc);
    }
    clickCallbacks.add(callback);
    return function() {
      clickCallbacks.delete(callback);
      if (clickCallbacks.size === 0) {
        window.removeEventListener("mousedown", globalClickFunc);
        globalClickFunc = null;
      }
    };
  }
  function getTargetFromEvent(e3) {
    var target = e3.target;
    if (e3.composed && target.shadowRoot) {
      var _e$composedPath;
      return ((_e$composedPath = e3.composedPath) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath.call(e3)[0]) || target;
    }
    return target;
  }
  var getYearNextMode = function getYearNextMode2(next2) {
    if (next2 === "month" || next2 === "date") {
      return "year";
    }
    return next2;
  };
  var getMonthNextMode = function getMonthNextMode2(next2) {
    if (next2 === "date") {
      return "month";
    }
    return next2;
  };
  var getQuarterNextMode = function getQuarterNextMode2(next2) {
    if (next2 === "month" || next2 === "date") {
      return "quarter";
    }
    return next2;
  };
  var getWeekNextMode = function getWeekNextMode2(next2) {
    if (next2 === "date") {
      return "week";
    }
    return next2;
  };
  var PickerModeMap = {
    year: getYearNextMode,
    month: getMonthNextMode,
    quarter: getQuarterNextMode,
    week: getWeekNextMode,
    time: null,
    date: null
  };
  function elementsContains(elements, target) {
    return elements.some(function(ele) {
      return ele && ele.contains(target);
    });
  }

  // node_modules/rc-picker/es/hooks/usePickerInput.js
  function usePickerInput(_ref) {
    var open = _ref.open, value = _ref.value, isClickOutside = _ref.isClickOutside, triggerOpen = _ref.triggerOpen, forwardKeyDown = _ref.forwardKeyDown, _onKeyDown = _ref.onKeyDown, blurToCancel = _ref.blurToCancel, changeOnBlur = _ref.changeOnBlur, onSubmit = _ref.onSubmit, onCancel = _ref.onCancel, _onFocus = _ref.onFocus, _onBlur = _ref.onBlur;
    var _useState = (0, import_react65.useState)(false), _useState2 = _slicedToArray(_useState, 2), typing = _useState2[0], setTyping = _useState2[1];
    var _useState3 = (0, import_react65.useState)(false), _useState4 = _slicedToArray(_useState3, 2), focused = _useState4[0], setFocused = _useState4[1];
    var preventBlurRef = (0, import_react65.useRef)(false);
    var valueChangedRef = (0, import_react65.useRef)(false);
    var preventDefaultRef = (0, import_react65.useRef)(false);
    var inputProps = {
      onMouseDown: function onMouseDown() {
        setTyping(true);
        triggerOpen(true);
      },
      onKeyDown: function onKeyDown2(e3) {
        var preventDefault = function preventDefault2() {
          preventDefaultRef.current = true;
        };
        _onKeyDown(e3, preventDefault);
        if (preventDefaultRef.current)
          return;
        switch (e3.which) {
          case KeyCode_default.ENTER: {
            if (!open) {
              triggerOpen(true);
            } else if (onSubmit() !== false) {
              setTyping(true);
            }
            e3.preventDefault();
            return;
          }
          case KeyCode_default.TAB: {
            if (typing && open && !e3.shiftKey) {
              setTyping(false);
              e3.preventDefault();
            } else if (!typing && open) {
              if (!forwardKeyDown(e3) && e3.shiftKey) {
                setTyping(true);
                e3.preventDefault();
              }
            }
            return;
          }
          case KeyCode_default.ESC: {
            setTyping(true);
            onCancel();
            return;
          }
        }
        if (!open && ![KeyCode_default.SHIFT].includes(e3.which)) {
          triggerOpen(true);
        } else if (!typing) {
          forwardKeyDown(e3);
        }
      },
      onFocus: function onFocus(e3) {
        setTyping(true);
        setFocused(true);
        if (_onFocus) {
          _onFocus(e3);
        }
      },
      onBlur: function onBlur(e3) {
        if (preventBlurRef.current || !isClickOutside(document.activeElement)) {
          preventBlurRef.current = false;
          return;
        }
        if (blurToCancel) {
          setTimeout(function() {
            var _document = document, activeElement = _document.activeElement;
            while (activeElement && activeElement.shadowRoot) {
              activeElement = activeElement.shadowRoot.activeElement;
            }
            if (isClickOutside(activeElement)) {
              onCancel();
            }
          }, 0);
        } else if (open) {
          triggerOpen(false);
          if (valueChangedRef.current) {
            onSubmit();
          }
        }
        setFocused(false);
        _onBlur === null || _onBlur === void 0 || _onBlur(e3);
      }
    };
    (0, import_react65.useEffect)(function() {
      valueChangedRef.current = false;
    }, [open]);
    (0, import_react65.useEffect)(function() {
      valueChangedRef.current = true;
    }, [value]);
    (0, import_react65.useEffect)(function() {
      return addGlobalMouseDownEvent(function(e3) {
        var target = getTargetFromEvent(e3);
        var clickedOutside = isClickOutside(target);
        if (open) {
          if (!clickedOutside) {
            preventBlurRef.current = true;
            raf_default(function() {
              preventBlurRef.current = false;
            });
          } else if (!changeOnBlur && !blurToCancel && (!focused || clickedOutside)) {
            triggerOpen(false);
          }
        }
      });
    });
    return [inputProps, {
      focused,
      typing
    }];
  }

  // node_modules/rc-picker/es/hooks/usePresets.js
  var React200 = __toESM(require_react());
  function usePresets(presets, legacyRanges) {
    return React200.useMemo(function() {
      if (presets) {
        return presets;
      }
      if (legacyRanges) {
        warning_default(false, "`ranges` is deprecated. Please use `presets` instead.");
        return Object.entries(legacyRanges).map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), label = _ref2[0], value = _ref2[1];
          return {
            label,
            value
          };
        });
      }
      return [];
    }, [presets, legacyRanges]);
  }

  // node_modules/rc-picker/es/hooks/useTextValueMapping.js
  var React201 = __toESM(require_react());
  function useTextValueMapping(_ref) {
    var valueTexts = _ref.valueTexts, onTextChange = _ref.onTextChange;
    var _React$useState = React201.useState(""), _React$useState2 = _slicedToArray(_React$useState, 2), text = _React$useState2[0], setInnerText = _React$useState2[1];
    var valueTextsRef = React201.useRef([]);
    valueTextsRef.current = valueTexts;
    function triggerTextChange(value) {
      setInnerText(value);
      onTextChange(value);
    }
    function resetText() {
      setInnerText(valueTextsRef.current[0]);
    }
    useLayoutEffect_default(function() {
      if (valueTexts.every(function(valText) {
        return valText !== text;
      })) {
        resetText();
      }
    }, [valueTexts.join("||")]);
    return [text, triggerTextChange, resetText];
  }

  // node_modules/rc-picker/es/PanelContext.js
  var React202 = __toESM(require_react());
  var PanelContext = /* @__PURE__ */ React202.createContext({});
  var PanelContext_default = PanelContext;

  // node_modules/rc-picker/es/PickerPanel.js
  var import_classnames59 = __toESM(require_classnames());
  var React230 = __toESM(require_react());

  // node_modules/rc-picker/es/hooks/useCellRender.js
  var import_react66 = __toESM(require_react());
  function useCellRender(_ref) {
    var cellRender = _ref.cellRender, monthCellRender = _ref.monthCellRender, dateRender = _ref.dateRender;
    var mergedCellRender = import_react66.default.useMemo(function() {
      if (cellRender)
        return cellRender;
      if (!monthCellRender && !dateRender)
        return void 0;
      return function(current2, info) {
        var date4 = current2;
        if (dateRender && info.type === "date") {
          return dateRender(date4, info.today);
        }
        if (monthCellRender && info.type === "month") {
          return monthCellRender(date4, info.locale);
        }
        return info.originNode;
      };
    }, [cellRender, monthCellRender, dateRender]);
    return mergedCellRender;
  }

  // node_modules/rc-picker/es/panels/DatePanel/index.js
  var import_classnames54 = __toESM(require_classnames());
  var React209 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/DatePanel/DateBody.js
  var React206 = __toESM(require_react());

  // node_modules/rc-picker/es/utils/miscUtil.js
  function leftPad(str, length2) {
    var fill = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "0";
    var current2 = String(str);
    while (current2.length < length2) {
      current2 = "".concat(fill).concat(str);
    }
    return current2;
  }
  var tuple = function tuple2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return args;
  };
  function toArray5(val) {
    if (val === null || val === void 0) {
      return [];
    }
    return Array.isArray(val) ? val : [val];
  }
  function getValue3(values, index2) {
    return values ? values[index2] : null;
  }
  function updateValues(values, value, index2) {
    var newValues = [getValue3(values, 0), getValue3(values, 1)];
    newValues[index2] = typeof value === "function" ? value(newValues[index2]) : value;
    if (!newValues[0] && !newValues[1]) {
      return null;
    }
    return newValues;
  }
  function executeValue(value) {
    return typeof value === "function" ? value() : value;
  }

  // node_modules/rc-picker/es/hooks/useCellClassName.js
  function useCellClassName(_ref) {
    var cellPrefixCls = _ref.cellPrefixCls, generateConfig2 = _ref.generateConfig, rangedValue = _ref.rangedValue, hoverRangedValue = _ref.hoverRangedValue, isInView = _ref.isInView, isSameCell = _ref.isSameCell, offsetCell = _ref.offsetCell, today = _ref.today, value = _ref.value;
    function getClassName(currentDate) {
      var _ref2;
      var prevDate = offsetCell(currentDate, -1);
      var nextDate = offsetCell(currentDate, 1);
      var rangeStart = getValue3(rangedValue, 0);
      var rangeEnd = getValue3(rangedValue, 1);
      var hoverStart = getValue3(hoverRangedValue, 0);
      var hoverEnd = getValue3(hoverRangedValue, 1);
      var isRangeHovered = isInRange(generateConfig2, hoverStart, hoverEnd, currentDate);
      function isRangeStart(date4) {
        return isSameCell(rangeStart, date4);
      }
      function isRangeEnd(date4) {
        return isSameCell(rangeEnd, date4);
      }
      var isHoverStart = isSameCell(hoverStart, currentDate);
      var isHoverEnd = isSameCell(hoverEnd, currentDate);
      var isHoverEdgeStart = (isRangeHovered || isHoverEnd) && (!isInView(prevDate) || isRangeEnd(prevDate));
      var isHoverEdgeEnd = (isRangeHovered || isHoverStart) && (!isInView(nextDate) || isRangeStart(nextDate));
      return _ref2 = {}, _defineProperty(_ref2, "".concat(cellPrefixCls, "-in-view"), isInView(currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-in-range"), isInRange(generateConfig2, rangeStart, rangeEnd, currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-start"), isRangeStart(currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-end"), isRangeEnd(currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-start-single"), isRangeStart(currentDate) && !rangeEnd), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-end-single"), isRangeEnd(currentDate) && !rangeStart), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-start-near-hover"), isRangeStart(currentDate) && (isSameCell(prevDate, hoverStart) || isInRange(generateConfig2, hoverStart, hoverEnd, prevDate))), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-end-near-hover"), isRangeEnd(currentDate) && (isSameCell(nextDate, hoverEnd) || isInRange(generateConfig2, hoverStart, hoverEnd, nextDate))), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover"), isRangeHovered), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-start"), isHoverStart), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-end"), isHoverEnd), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-start"), isHoverEdgeStart), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-end"), isHoverEdgeEnd), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-start-near-range"), isHoverEdgeStart && isSameCell(prevDate, rangeEnd)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-end-near-range"), isHoverEdgeEnd && isSameCell(nextDate, rangeStart)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-today"), isSameCell(today, currentDate)), _defineProperty(_ref2, "".concat(cellPrefixCls, "-selected"), isSameCell(value, currentDate)), _ref2;
    }
    return getClassName;
  }

  // node_modules/rc-picker/es/RangeContext.js
  var React204 = __toESM(require_react());
  var RangeContext = /* @__PURE__ */ React204.createContext({});
  var RangeContext_default = RangeContext;

  // node_modules/rc-picker/es/panels/PanelBody.js
  var import_classnames53 = __toESM(require_classnames());
  var React205 = __toESM(require_react());

  // node_modules/rc-picker/es/utils/timeUtil.js
  function setTime(generateConfig2, date4, hour, minute, second) {
    var nextTime = generateConfig2.setHour(date4, hour);
    nextTime = generateConfig2.setMinute(nextTime, minute);
    nextTime = generateConfig2.setSecond(nextTime, second);
    return nextTime;
  }
  function setDateTime(generateConfig2, date4, defaultDate) {
    if (!defaultDate) {
      return date4;
    }
    var newDate = date4;
    newDate = generateConfig2.setHour(newDate, generateConfig2.getHour(defaultDate));
    newDate = generateConfig2.setMinute(newDate, generateConfig2.getMinute(defaultDate));
    newDate = generateConfig2.setSecond(newDate, generateConfig2.getSecond(defaultDate));
    return newDate;
  }
  function getLowerBoundTime(hour, minute, second, hourStep, minuteStep, secondStep) {
    var lowerBoundHour = Math.floor(hour / hourStep) * hourStep;
    if (lowerBoundHour < hour) {
      return [lowerBoundHour, 60 - minuteStep, 60 - secondStep];
    }
    var lowerBoundMinute = Math.floor(minute / minuteStep) * minuteStep;
    if (lowerBoundMinute < minute) {
      return [lowerBoundHour, lowerBoundMinute, 60 - secondStep];
    }
    var lowerBoundSecond = Math.floor(second / secondStep) * secondStep;
    return [lowerBoundHour, lowerBoundMinute, lowerBoundSecond];
  }
  function getLastDay(generateConfig2, date4) {
    var year = generateConfig2.getYear(date4);
    var month = generateConfig2.getMonth(date4) + 1;
    var endDate = generateConfig2.getEndDate(generateConfig2.getFixedDate("".concat(year, "-").concat(month, "-01")));
    var lastDay = generateConfig2.getDate(endDate);
    var monthShow = month < 10 ? "0".concat(month) : "".concat(month);
    return "".concat(year, "-").concat(monthShow, "-").concat(lastDay);
  }

  // node_modules/rc-picker/es/panels/PanelBody.js
  function PanelBody(_ref) {
    var prefixCls = _ref.prefixCls, disabledDate = _ref.disabledDate, onSelect = _ref.onSelect, picker = _ref.picker, rowNum = _ref.rowNum, colNum = _ref.colNum, prefixColumn = _ref.prefixColumn, rowClassName = _ref.rowClassName, baseDate = _ref.baseDate, getCellClassName = _ref.getCellClassName, getCellText = _ref.getCellText, getCellNode = _ref.getCellNode, getCellDate = _ref.getCellDate, generateConfig2 = _ref.generateConfig, titleCell = _ref.titleCell, headerCells = _ref.headerCells;
    var _React$useContext = React205.useContext(PanelContext_default), onDateMouseEnter = _React$useContext.onDateMouseEnter, onDateMouseLeave = _React$useContext.onDateMouseLeave, mode = _React$useContext.mode;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var rows = [];
    for (var i = 0; i < rowNum; i += 1) {
      var row = [];
      var rowStartDate = void 0;
      var _loop = function _loop2() {
        var _objectSpread22;
        var offset3 = i * colNum + j;
        var currentDate = getCellDate(baseDate, offset3);
        var disabled = getCellDateDisabled({
          cellDate: currentDate,
          mode,
          disabledDate,
          generateConfig: generateConfig2
        });
        if (j === 0) {
          rowStartDate = currentDate;
          if (prefixColumn) {
            row.push(prefixColumn(rowStartDate));
          }
        }
        var title = titleCell && titleCell(currentDate);
        var inner = /* @__PURE__ */ React205.createElement("div", {
          className: "".concat(cellPrefixCls, "-inner")
        }, getCellText(currentDate));
        row.push(/* @__PURE__ */ React205.createElement("td", {
          key: j,
          title,
          className: (0, import_classnames53.default)(cellPrefixCls, _objectSpread2((_objectSpread22 = {}, _defineProperty(_objectSpread22, "".concat(cellPrefixCls, "-disabled"), disabled), _defineProperty(_objectSpread22, "".concat(cellPrefixCls, "-start"), getCellText(currentDate) === 1 || picker === "year" && Number(title) % 10 === 0), _defineProperty(_objectSpread22, "".concat(cellPrefixCls, "-end"), title === getLastDay(generateConfig2, currentDate) || picker === "year" && Number(title) % 10 === 9), _objectSpread22), getCellClassName(currentDate))),
          onClick: function onClick() {
            if (!disabled) {
              onSelect(currentDate);
            }
          },
          onMouseEnter: function onMouseEnter() {
            if (!disabled && onDateMouseEnter) {
              onDateMouseEnter(currentDate);
            }
          },
          onMouseLeave: function onMouseLeave() {
            if (!disabled && onDateMouseLeave) {
              onDateMouseLeave(currentDate);
            }
          }
        }, getCellNode ? getCellNode(currentDate, inner) : inner));
      };
      for (var j = 0; j < colNum; j += 1) {
        _loop();
      }
      rows.push(/* @__PURE__ */ React205.createElement("tr", {
        key: i,
        className: rowClassName && rowClassName(rowStartDate)
      }, row));
    }
    return /* @__PURE__ */ React205.createElement("div", {
      className: "".concat(prefixCls, "-body")
    }, /* @__PURE__ */ React205.createElement("table", {
      className: "".concat(prefixCls, "-content")
    }, headerCells && /* @__PURE__ */ React205.createElement("thead", null, /* @__PURE__ */ React205.createElement("tr", null, headerCells)), /* @__PURE__ */ React205.createElement("tbody", null, rows)));
  }

  // node_modules/rc-picker/es/panels/DatePanel/DateBody.js
  function DateBody(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, prefixColumn = props.prefixColumn, locale9 = props.locale, rowCount = props.rowCount, viewDate = props.viewDate, value = props.value, cellRender = props.cellRender, isSameCell = props.isSameCell;
    var _React$useContext = React206.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var baseDate = getWeekStartDate(locale9.locale, generateConfig2, viewDate);
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var weekFirstDay = generateConfig2.locale.getWeekFirstDay(locale9.locale);
    var today = generateConfig2.getNow();
    var headerCells = [];
    var weekDaysLocale = locale9.shortWeekDays || (generateConfig2.locale.getShortWeekDays ? generateConfig2.locale.getShortWeekDays(locale9.locale) : []);
    if (prefixColumn) {
      headerCells.push(/* @__PURE__ */ React206.createElement("th", {
        key: "empty",
        "aria-label": "empty cell"
      }));
    }
    for (var i = 0; i < WEEK_DAY_COUNT; i += 1) {
      headerCells.push(/* @__PURE__ */ React206.createElement("th", {
        key: i
      }, weekDaysLocale[(i + weekFirstDay) % WEEK_DAY_COUNT]));
    }
    var getCellClassName = useCellClassName({
      cellPrefixCls,
      today,
      value,
      generateConfig: generateConfig2,
      rangedValue: prefixColumn ? null : rangedValue,
      hoverRangedValue: prefixColumn ? null : hoverRangedValue,
      isSameCell: isSameCell || function(current2, target) {
        return isSameDate(generateConfig2, current2, target);
      },
      isInView: function isInView(date4) {
        return isSameMonth(generateConfig2, date4, viewDate);
      },
      offsetCell: function offsetCell(date4, offset3) {
        return generateConfig2.addDate(date4, offset3);
      }
    });
    var getCellNode = cellRender ? function(date4, wrapperNode) {
      return cellRender(date4, {
        originNode: wrapperNode,
        today,
        type: "date",
        locale: locale9
      });
    } : void 0;
    return /* @__PURE__ */ React206.createElement(PanelBody, _extends({}, props, {
      rowNum: rowCount,
      colNum: WEEK_DAY_COUNT,
      baseDate,
      getCellNode,
      getCellText: generateConfig2.getDate,
      getCellClassName,
      getCellDate: generateConfig2.addDate,
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale9,
          format: "YYYY-MM-DD",
          generateConfig: generateConfig2
        });
      },
      headerCells
    }));
  }
  var DateBody_default = DateBody;

  // node_modules/rc-picker/es/panels/DatePanel/DateHeader.js
  var React208 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/Header.js
  var React207 = __toESM(require_react());
  var HIDDEN_STYLE = {
    visibility: "hidden"
  };
  function Header(_ref) {
    var prefixCls = _ref.prefixCls, _ref$prevIcon = _ref.prevIcon, prevIcon = _ref$prevIcon === void 0 ? "\u2039" : _ref$prevIcon, _ref$nextIcon = _ref.nextIcon, nextIcon = _ref$nextIcon === void 0 ? "\u203A" : _ref$nextIcon, _ref$superPrevIcon = _ref.superPrevIcon, superPrevIcon = _ref$superPrevIcon === void 0 ? "\xAB" : _ref$superPrevIcon, _ref$superNextIcon = _ref.superNextIcon, superNextIcon = _ref$superNextIcon === void 0 ? "\xBB" : _ref$superNextIcon, onSuperPrev = _ref.onSuperPrev, onSuperNext = _ref.onSuperNext, onPrev = _ref.onPrev, onNext = _ref.onNext, children = _ref.children;
    var _React$useContext = React207.useContext(PanelContext_default), hideNextBtn = _React$useContext.hideNextBtn, hidePrevBtn = _React$useContext.hidePrevBtn;
    return /* @__PURE__ */ React207.createElement("div", {
      className: prefixCls
    }, onSuperPrev && /* @__PURE__ */ React207.createElement("button", {
      type: "button",
      onClick: onSuperPrev,
      tabIndex: -1,
      className: "".concat(prefixCls, "-super-prev-btn"),
      style: hidePrevBtn ? HIDDEN_STYLE : {}
    }, superPrevIcon), onPrev && /* @__PURE__ */ React207.createElement("button", {
      type: "button",
      onClick: onPrev,
      tabIndex: -1,
      className: "".concat(prefixCls, "-prev-btn"),
      style: hidePrevBtn ? HIDDEN_STYLE : {}
    }, prevIcon), /* @__PURE__ */ React207.createElement("div", {
      className: "".concat(prefixCls, "-view")
    }, children), onNext && /* @__PURE__ */ React207.createElement("button", {
      type: "button",
      onClick: onNext,
      tabIndex: -1,
      className: "".concat(prefixCls, "-next-btn"),
      style: hideNextBtn ? HIDDEN_STYLE : {}
    }, nextIcon), onSuperNext && /* @__PURE__ */ React207.createElement("button", {
      type: "button",
      onClick: onSuperNext,
      tabIndex: -1,
      className: "".concat(prefixCls, "-super-next-btn"),
      style: hideNextBtn ? HIDDEN_STYLE : {}
    }, superNextIcon));
  }
  var Header_default = Header;

  // node_modules/rc-picker/es/panels/DatePanel/DateHeader.js
  function DateHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale9 = props.locale, viewDate = props.viewDate, onNextMonth = props.onNextMonth, onPrevMonth = props.onPrevMonth, onNextYear = props.onNextYear, onPrevYear = props.onPrevYear, onYearClick = props.onYearClick, onMonthClick = props.onMonthClick;
    var _React$useContext = React208.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    var monthsLocale = locale9.shortMonths || (generateConfig2.locale.getShortMonths ? generateConfig2.locale.getShortMonths(locale9.locale) : []);
    var month = generateConfig2.getMonth(viewDate);
    var yearNode = /* @__PURE__ */ React208.createElement("button", {
      type: "button",
      key: "year",
      onClick: onYearClick,
      tabIndex: -1,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale9,
      format: locale9.yearFormat,
      generateConfig: generateConfig2
    }));
    var monthNode = /* @__PURE__ */ React208.createElement("button", {
      type: "button",
      key: "month",
      onClick: onMonthClick,
      tabIndex: -1,
      className: "".concat(prefixCls, "-month-btn")
    }, locale9.monthFormat ? formatValue(viewDate, {
      locale: locale9,
      format: locale9.monthFormat,
      generateConfig: generateConfig2
    }) : monthsLocale[month]);
    var monthYearNodes = locale9.monthBeforeYear ? [monthNode, yearNode] : [yearNode, monthNode];
    return /* @__PURE__ */ React208.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onPrev: onPrevMonth,
      onNext: onNextMonth,
      onSuperNext: onNextYear
    }), monthYearNodes);
  }
  var DateHeader_default = DateHeader;

  // node_modules/rc-picker/es/panels/DatePanel/index.js
  var DATE_ROW_COUNT = 6;
  function DatePanel(props) {
    var prefixCls = props.prefixCls, _props$panelName = props.panelName, panelName = _props$panelName === void 0 ? "date" : _props$panelName, keyboardConfig = props.keyboardConfig, active = props.active, operationRef = props.operationRef, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, onViewDateChange = props.onViewDateChange, onPanelChange = props.onPanelChange, _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-").concat(panelName, "-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown2(event) {
        return createKeyDownHandler(event, _objectSpread2({
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addDate(value || viewDate, diff), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addDate(value || viewDate, diff * WEEK_DAY_COUNT), "key");
          },
          onPageUpDown: function onPageUpDown(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff), "key");
          }
        }, keyboardConfig));
      }
    };
    var onYearChange = function onYearChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    var onMonthChange = function onMonthChange2(diff) {
      var newDate = generateConfig2.addMonth(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React209.createElement("div", {
      className: (0, import_classnames54.default)(panelPrefixCls, _defineProperty({}, "".concat(panelPrefixCls, "-active"), active))
    }, /* @__PURE__ */ React209.createElement(DateHeader_default, _extends({}, props, {
      prefixCls,
      value,
      viewDate,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onPrevMonth: function onPrevMonth() {
        onMonthChange(-1);
      },
      onNextMonth: function onNextMonth() {
        onMonthChange(1);
      },
      onMonthClick: function onMonthClick() {
        onPanelChange("month", viewDate);
      },
      onYearClick: function onYearClick() {
        onPanelChange("year", viewDate);
      }
    })), /* @__PURE__ */ React209.createElement(DateBody_default, _extends({}, props, {
      onSelect: function onSelect(date4) {
        return _onSelect(date4, "mouse");
      },
      prefixCls,
      value,
      viewDate,
      rowCount: DATE_ROW_COUNT
    })));
  }
  var DatePanel_default = DatePanel;

  // node_modules/rc-picker/es/panels/DatetimePanel/index.js
  var import_classnames57 = __toESM(require_classnames());
  var React214 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/TimePanel/index.js
  var import_classnames56 = __toESM(require_classnames());
  var React213 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/TimePanel/TimeBody.js
  var React211 = __toESM(require_react());

  // node_modules/rc-picker/es/hooks/useTimeSelection.js
  function useTimeSelection(_ref) {
    var value = _ref.value, generateConfig2 = _ref.generateConfig, disabledMinutes = _ref.disabledMinutes, disabledSeconds = _ref.disabledSeconds, minutes = _ref.minutes, seconds = _ref.seconds, use12Hours = _ref.use12Hours;
    var setTime2 = function setTime3(isNewPM, newHour, newMinute, newSecond) {
      var now2 = generateConfig2.getNow();
      var newDate = value || now2;
      var newFormattedHour = !use12Hours || !isNewPM ? newHour : newHour + 12;
      var mergedHour = newHour < 0 ? generateConfig2.getHour(now2) : newFormattedHour;
      var mergedMinute = newMinute < 0 ? generateConfig2.getMinute(now2) : newMinute;
      var mergedSecond = newSecond < 0 ? generateConfig2.getSecond(now2) : newSecond;
      var newDisabledMinutes = disabledMinutes && disabledMinutes(mergedHour);
      if (newDisabledMinutes !== null && newDisabledMinutes !== void 0 && newDisabledMinutes.includes(mergedMinute)) {
        var availableMinute = minutes.find(function(i) {
          return !newDisabledMinutes.includes(i.value);
        });
        if (availableMinute) {
          mergedMinute = availableMinute.value;
        } else {
          return null;
        }
      }
      var newDisabledSeconds = disabledSeconds && disabledSeconds(mergedHour, mergedMinute);
      if (newDisabledSeconds !== null && newDisabledSeconds !== void 0 && newDisabledSeconds.includes(mergedSecond)) {
        var availableSecond = seconds.find(function(i) {
          return !newDisabledSeconds.includes(i.value);
        });
        if (availableSecond) {
          mergedSecond = availableSecond.value;
        } else {
          return null;
        }
      }
      newDate = setTime(generateConfig2, newDate, mergedHour, mergedMinute, mergedSecond);
      return newDate;
    };
    return setTime2;
  }

  // node_modules/rc-picker/es/panels/TimePanel/TimeUnitColumn.js
  var React210 = __toESM(require_react());
  var import_react67 = __toESM(require_react());
  var import_classnames55 = __toESM(require_classnames());
  function TimeUnitColumn(props) {
    var prefixCls = props.prefixCls, units = props.units, onSelect = props.onSelect, value = props.value, active = props.active, hideDisabledOptions = props.hideDisabledOptions, info = props.info, type4 = props.type;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var _React$useContext = React210.useContext(PanelContext_default), open = _React$useContext.open;
    var ulRef = (0, import_react67.useRef)(null);
    var liRefs = (0, import_react67.useRef)(/* @__PURE__ */ new Map());
    var scrollRef = (0, import_react67.useRef)();
    (0, import_react67.useLayoutEffect)(function() {
      var li = liRefs.current.get(value);
      if (li && open !== false) {
        scrollTo2(ulRef.current, li.offsetTop, 120);
      }
    }, [value]);
    (0, import_react67.useLayoutEffect)(function() {
      if (open) {
        var li = liRefs.current.get(value);
        if (li) {
          scrollRef.current = waitElementReady(li, function() {
            scrollTo2(ulRef.current, li.offsetTop, 0);
          });
        }
      }
      return function() {
        var _scrollRef$current;
        (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 || _scrollRef$current.call(scrollRef);
      };
    }, [open]);
    return /* @__PURE__ */ React210.createElement("ul", {
      className: (0, import_classnames55.default)("".concat(prefixCls, "-column"), _defineProperty({}, "".concat(prefixCls, "-column-active"), active)),
      ref: ulRef,
      style: {
        position: "relative"
      }
    }, units.map(function(unit3) {
      var _classNames2;
      if (hideDisabledOptions && unit3.disabled) {
        return null;
      }
      return /* @__PURE__ */ React210.createElement("li", {
        key: unit3.value,
        ref: function ref(element) {
          liRefs.current.set(unit3.value, element);
        },
        className: (0, import_classnames55.default)(cellPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(cellPrefixCls, "-disabled"), unit3.disabled), _defineProperty(_classNames2, "".concat(cellPrefixCls, "-selected"), value === unit3.value), _classNames2)),
        onClick: function onClick() {
          if (unit3.disabled) {
            return;
          }
          onSelect(unit3.value);
        }
      }, info.cellRender ? info.cellRender(unit3.value, {
        today: info.today,
        locale: info.locale,
        originNode: /* @__PURE__ */ React210.createElement("div", {
          className: "".concat(cellPrefixCls, "-inner")
        }, unit3.label),
        type: "time",
        subType: type4
      }) : /* @__PURE__ */ React210.createElement("div", {
        className: "".concat(cellPrefixCls, "-inner")
      }, unit3.label));
    }));
  }
  var TimeUnitColumn_default = TimeUnitColumn;

  // node_modules/rc-picker/es/panels/TimePanel/TimeBody.js
  function shouldUnitsUpdate(prevUnits, nextUnits) {
    if (prevUnits.length !== nextUnits.length)
      return true;
    for (var i = 0; i < prevUnits.length; i += 1) {
      if (prevUnits[i].disabled !== nextUnits[i].disabled)
        return true;
    }
    return false;
  }
  function generateUnits(start2, end, step, disabledUnits) {
    var units = [];
    var integerStep = step >= 1 ? step | 0 : 1;
    for (var i = start2; i <= end; i += integerStep) {
      units.push({
        label: leftPad(i, 2),
        value: i,
        disabled: (disabledUnits || []).includes(i)
      });
    }
    return units;
  }
  function TimeBody(props) {
    var generateConfig2 = props.generateConfig, prefixCls = props.prefixCls, operationRef = props.operationRef, activeColumnIndex = props.activeColumnIndex, value = props.value, showHour = props.showHour, showMinute = props.showMinute, showSecond = props.showSecond, use12Hours = props.use12Hours, _props$hourStep = props.hourStep, hourStep = _props$hourStep === void 0 ? 1 : _props$hourStep, _props$minuteStep = props.minuteStep, minuteStep = _props$minuteStep === void 0 ? 1 : _props$minuteStep, _props$secondStep = props.secondStep, secondStep = _props$secondStep === void 0 ? 1 : _props$secondStep, disabledHours = props.disabledHours, disabledMinutes = props.disabledMinutes, disabledSeconds = props.disabledSeconds, disabledTime = props.disabledTime, hideDisabledOptions = props.hideDisabledOptions, onSelect = props.onSelect, cellRender = props.cellRender, locale9 = props.locale;
    var columns = [];
    var contentPrefixCls = "".concat(prefixCls, "-content");
    var columnPrefixCls = "".concat(prefixCls, "-time-panel");
    var isPM;
    var originHour = value ? generateConfig2.getHour(value) : -1;
    var hour = originHour;
    var minute = value ? generateConfig2.getMinute(value) : -1;
    var second = value ? generateConfig2.getSecond(value) : -1;
    var now2 = generateConfig2.getNow();
    var _React$useMemo = React211.useMemo(function() {
      if (disabledTime) {
        var disabledConfig = disabledTime(now2);
        return [disabledConfig.disabledHours, disabledConfig.disabledMinutes, disabledConfig.disabledSeconds];
      }
      return [disabledHours, disabledMinutes, disabledSeconds];
    }, [disabledHours, disabledMinutes, disabledSeconds, disabledTime, now2]), _React$useMemo2 = _slicedToArray(_React$useMemo, 3), mergedDisabledHours = _React$useMemo2[0], mergedDisabledMinutes = _React$useMemo2[1], mergedDisabledSeconds = _React$useMemo2[2];
    var rawHours = generateUnits(0, 23, hourStep, mergedDisabledHours && mergedDisabledHours());
    var memorizedRawHours = useMemo(function() {
      return rawHours;
    }, rawHours, shouldUnitsUpdate);
    if (use12Hours) {
      isPM = hour >= 12;
      hour %= 12;
    }
    var _React$useMemo3 = React211.useMemo(function() {
      if (!use12Hours) {
        return [false, false];
      }
      var AMPMDisabled = [true, true];
      memorizedRawHours.forEach(function(_ref) {
        var disabled = _ref.disabled, hourValue = _ref.value;
        if (disabled)
          return;
        if (hourValue >= 12) {
          AMPMDisabled[1] = false;
        } else {
          AMPMDisabled[0] = false;
        }
      });
      return AMPMDisabled;
    }, [use12Hours, memorizedRawHours]), _React$useMemo4 = _slicedToArray(_React$useMemo3, 2), AMDisabled = _React$useMemo4[0], PMDisabled = _React$useMemo4[1];
    var hours = React211.useMemo(function() {
      if (!use12Hours)
        return memorizedRawHours;
      return memorizedRawHours.filter(isPM ? function(hourMeta) {
        return hourMeta.value >= 12;
      } : function(hourMeta) {
        return hourMeta.value < 12;
      }).map(function(hourMeta) {
        var hourValue = hourMeta.value % 12;
        var hourLabel = hourValue === 0 ? "12" : leftPad(hourValue, 2);
        return _objectSpread2(_objectSpread2({}, hourMeta), {}, {
          label: hourLabel,
          value: hourValue
        });
      });
    }, [use12Hours, isPM, memorizedRawHours]);
    var minutes = generateUnits(0, 59, minuteStep, mergedDisabledMinutes && mergedDisabledMinutes(originHour));
    var seconds = generateUnits(0, 59, secondStep, mergedDisabledSeconds && mergedDisabledSeconds(originHour, minute));
    var setTime2 = useTimeSelection({
      value,
      generateConfig: generateConfig2,
      disabledMinutes: mergedDisabledMinutes,
      disabledSeconds: mergedDisabledSeconds,
      minutes,
      seconds,
      use12Hours
    });
    operationRef.current = {
      onUpDown: function onUpDown(diff) {
        var column2 = columns[activeColumnIndex];
        if (column2) {
          var valueIndex = column2.units.findIndex(function(unit3) {
            return unit3.value === column2.value;
          });
          var unitLen = column2.units.length;
          for (var i = 1; i < unitLen; i += 1) {
            var nextUnit = column2.units[(valueIndex + diff * i + unitLen) % unitLen];
            if (nextUnit.disabled !== true) {
              column2.onSelect(nextUnit.value);
              break;
            }
          }
        }
      }
    };
    function addColumnNode(condition, node2, columnValue, units, onColumnSelect) {
      if (condition !== false) {
        columns.push({
          node: /* @__PURE__ */ React211.cloneElement(node2, {
            prefixCls: columnPrefixCls,
            value: columnValue,
            active: activeColumnIndex === columns.length,
            onSelect: onColumnSelect,
            units,
            hideDisabledOptions
          }),
          onSelect: onColumnSelect,
          value: columnValue,
          units
        });
      }
    }
    addColumnNode(showHour, /* @__PURE__ */ React211.createElement(TimeUnitColumn_default, {
      key: "hour",
      type: "hour",
      info: {
        today: now2,
        locale: locale9,
        cellRender
      }
    }), hour, hours, function(num) {
      onSelect(setTime2(isPM, num, minute, second), "mouse");
    });
    addColumnNode(showMinute, /* @__PURE__ */ React211.createElement(TimeUnitColumn_default, {
      key: "minute",
      type: "minute",
      info: {
        today: now2,
        locale: locale9,
        cellRender
      }
    }), minute, minutes, function(num) {
      onSelect(setTime2(isPM, hour, num, second), "mouse");
    });
    addColumnNode(showSecond, /* @__PURE__ */ React211.createElement(TimeUnitColumn_default, {
      key: "second",
      type: "second",
      info: {
        today: now2,
        locale: locale9,
        cellRender
      }
    }), second, seconds, function(num) {
      onSelect(setTime2(isPM, hour, minute, num), "mouse");
    });
    var PMIndex = -1;
    if (typeof isPM === "boolean") {
      PMIndex = isPM ? 1 : 0;
    }
    addColumnNode(use12Hours === true, /* @__PURE__ */ React211.createElement(TimeUnitColumn_default, {
      key: "meridiem",
      type: "meridiem",
      info: {
        today: now2,
        locale: locale9,
        cellRender
      }
    }), PMIndex, [{
      label: "AM",
      value: 0,
      disabled: AMDisabled
    }, {
      label: "PM",
      value: 1,
      disabled: PMDisabled
    }], function(num) {
      onSelect(setTime2(!!num, hour, minute, second), "mouse");
    });
    return /* @__PURE__ */ React211.createElement("div", {
      className: contentPrefixCls
    }, columns.map(function(_ref2) {
      var node2 = _ref2.node;
      return node2;
    }));
  }
  var TimeBody_default = TimeBody;

  // node_modules/rc-picker/es/panels/TimePanel/TimeHeader.js
  var React212 = __toESM(require_react());
  function TimeHeader(props) {
    var _React$useContext = React212.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale9 = props.locale, value = props.value, format3 = props.format;
    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /* @__PURE__ */ React212.createElement(Header_default, {
      prefixCls: headerPrefixCls
    }, value ? formatValue(value, {
      locale: locale9,
      format: format3,
      generateConfig: generateConfig2
    }) : "\xA0");
  }
  var TimeHeader_default = TimeHeader;

  // node_modules/rc-picker/es/panels/TimePanel/index.js
  var countBoolean = function countBoolean2(boolList) {
    return boolList.filter(function(bool) {
      return bool !== false;
    }).length;
  };
  function TimePanel(props) {
    var generateConfig2 = props.generateConfig, _props$format = props.format, format3 = _props$format === void 0 ? "HH:mm:ss" : _props$format, prefixCls = props.prefixCls, active = props.active, operationRef = props.operationRef, showHour = props.showHour, showMinute = props.showMinute, showSecond = props.showSecond, _props$use12Hours = props.use12Hours, use12Hours = _props$use12Hours === void 0 ? false : _props$use12Hours, onSelect = props.onSelect, value = props.value;
    var panelPrefixCls = "".concat(prefixCls, "-time-panel");
    var bodyOperationRef = React213.useRef();
    var _React$useState = React213.useState(-1), _React$useState2 = _slicedToArray(_React$useState, 2), activeColumnIndex = _React$useState2[0], setActiveColumnIndex = _React$useState2[1];
    var columnsCount = countBoolean([showHour, showMinute, showSecond, use12Hours]);
    operationRef.current = {
      onKeyDown: function onKeyDown2(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            setActiveColumnIndex((activeColumnIndex + diff + columnsCount) % columnsCount);
          },
          onUpDown: function onUpDown(diff) {
            if (activeColumnIndex === -1) {
              setActiveColumnIndex(0);
            } else if (bodyOperationRef.current) {
              bodyOperationRef.current.onUpDown(diff);
            }
          },
          onEnter: function onEnter() {
            onSelect(value || generateConfig2.getNow(), "key");
            setActiveColumnIndex(-1);
          }
        });
      },
      onBlur: function onBlur() {
        setActiveColumnIndex(-1);
      }
    };
    return /* @__PURE__ */ React213.createElement("div", {
      className: (0, import_classnames56.default)(panelPrefixCls, _defineProperty({}, "".concat(panelPrefixCls, "-active"), active))
    }, /* @__PURE__ */ React213.createElement(TimeHeader_default, _extends({}, props, {
      format: format3,
      prefixCls
    })), /* @__PURE__ */ React213.createElement(TimeBody_default, _extends({}, props, {
      prefixCls,
      activeColumnIndex,
      operationRef: bodyOperationRef
    })));
  }
  var TimePanel_default = TimePanel;

  // node_modules/rc-picker/es/panels/DatetimePanel/index.js
  var ACTIVE_PANEL = tuple("date", "time");
  var findValidTime = function findValidTime2(refValue, disabledRange, maxValidTime) {
    var rangeSet = new Set(disabledRange);
    if (rangeSet.has(refValue)) {
      for (var i = 0; i <= maxValidTime; i++) {
        if (!rangeSet.has(i) && i >= refValue) {
          return i;
        }
      }
    }
    return refValue;
  };
  function DatetimePanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, generateConfig2 = props.generateConfig, value = props.value, defaultValue = props.defaultValue, disabledTime = props.disabledTime, showTime = props.showTime, onSelect = props.onSelect, cellRender = props.cellRender;
    var panelPrefixCls = "".concat(prefixCls, "-datetime-panel");
    var _React$useState = React214.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), activePanel = _React$useState2[0], setActivePanel = _React$useState2[1];
    var dateOperationRef = React214.useRef({});
    var timeOperationRef = React214.useRef({});
    var timeProps = _typeof(showTime) === "object" ? _objectSpread2({}, showTime) : {};
    function getNextActive(offset3) {
      var activeIndex = ACTIVE_PANEL.indexOf(activePanel) + offset3;
      var nextActivePanel = ACTIVE_PANEL[activeIndex] || null;
      return nextActivePanel;
    }
    var onBlur = function onBlur2(e3) {
      if (timeOperationRef.current.onBlur) {
        timeOperationRef.current.onBlur(e3);
      }
      setActivePanel(null);
    };
    operationRef.current = {
      onKeyDown: function onKeyDown2(event) {
        if (event.which === KeyCode_default.TAB) {
          var nextActivePanel = getNextActive(event.shiftKey ? -1 : 1);
          setActivePanel(nextActivePanel);
          if (nextActivePanel) {
            event.preventDefault();
          }
          return true;
        }
        if (activePanel) {
          var ref = activePanel === "date" ? dateOperationRef : timeOperationRef;
          if (ref.current && ref.current.onKeyDown) {
            ref.current.onKeyDown(event);
          }
          return true;
        }
        if ([KeyCode_default.LEFT, KeyCode_default.RIGHT, KeyCode_default.UP, KeyCode_default.DOWN].includes(event.which)) {
          setActivePanel("date");
          return true;
        }
        return false;
      },
      onBlur,
      onClose: onBlur
    };
    var onInternalSelect = function onInternalSelect2(date4, source) {
      var selectedDate = date4;
      if (source === "date") {
        var _disabledTimes$disabl, _disabledTimes$disabl2, _disabledTimes$disabl3;
        var _disabledTimes = (disabledTime === null || disabledTime === void 0 ? void 0 : disabledTime(value || timeProps.defaultValue)) || {};
        var validHour = findValidTime(generateConfig2.getHour(selectedDate), ((_disabledTimes$disabl = _disabledTimes.disabledHours) === null || _disabledTimes$disabl === void 0 ? void 0 : _disabledTimes$disabl.call(_disabledTimes)) || [-1], 23);
        var validMinute = findValidTime(generateConfig2.getMinute(selectedDate), ((_disabledTimes$disabl2 = _disabledTimes.disabledMinutes) === null || _disabledTimes$disabl2 === void 0 ? void 0 : _disabledTimes$disabl2.call(_disabledTimes, validHour)) || [-1], 59);
        var validSeconds = findValidTime(generateConfig2.getSecond(selectedDate), ((_disabledTimes$disabl3 = _disabledTimes.disabledSeconds) === null || _disabledTimes$disabl3 === void 0 ? void 0 : _disabledTimes$disabl3.call(_disabledTimes, validHour, validMinute)) || [-1], 59);
        selectedDate = generateConfig2.setHour(selectedDate, validHour);
        selectedDate = generateConfig2.setMinute(selectedDate, validMinute);
        selectedDate = generateConfig2.setSecond(selectedDate, validSeconds);
      } else if (source === "time" && !value && defaultValue) {
        selectedDate = generateConfig2.setYear(selectedDate, generateConfig2.getYear(defaultValue));
        selectedDate = generateConfig2.setMonth(selectedDate, generateConfig2.getMonth(defaultValue));
        selectedDate = generateConfig2.setDate(selectedDate, generateConfig2.getDate(defaultValue));
      }
      if (onSelect) {
        onSelect(selectedDate, "mouse");
      }
    };
    var disabledTimes = disabledTime ? disabledTime(value || null) : {};
    return /* @__PURE__ */ React214.createElement("div", {
      className: (0, import_classnames57.default)(panelPrefixCls, _defineProperty({}, "".concat(panelPrefixCls, "-active"), activePanel))
    }, /* @__PURE__ */ React214.createElement(DatePanel_default, _extends({}, props, {
      cellRender,
      operationRef: dateOperationRef,
      active: activePanel === "date",
      onSelect: function onSelect2(date4) {
        onInternalSelect(setDateTime(generateConfig2, date4, !value && _typeof(showTime) === "object" ? showTime.defaultValue : null), "date");
      }
    })), /* @__PURE__ */ React214.createElement(TimePanel_default, _extends({}, props, {
      cellRender: cellRender ? function(current2, info) {
        return cellRender(current2, _objectSpread2(_objectSpread2({}, info), {}, {
          type: "time"
        }));
      } : void 0,
      format: void 0
    }, timeProps, disabledTimes, {
      disabledTime: null,
      defaultValue: void 0,
      operationRef: timeOperationRef,
      active: activePanel === "time",
      onSelect: function onSelect2(date4) {
        onInternalSelect(date4, "time");
      }
    })));
  }
  var DatetimePanel_default = DatetimePanel;

  // node_modules/rc-picker/es/panels/DecadePanel/index.js
  var React217 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/DecadePanel/DecadeHeader.js
  var React215 = __toESM(require_react());
  function DecadeHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, viewDate = props.viewDate, onPrevDecades = props.onPrevDecades, onNextDecades = props.onNextDecades;
    var _React$useContext = React215.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    var yearNumber = generateConfig2.getYear(viewDate);
    var startYear = Math.floor(yearNumber / DECADE_DISTANCE_COUNT) * DECADE_DISTANCE_COUNT;
    var endYear = startYear + DECADE_DISTANCE_COUNT - 1;
    return /* @__PURE__ */ React215.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevDecades,
      onSuperNext: onNextDecades
    }), startYear, "-", endYear);
  }
  var DecadeHeader_default = DecadeHeader;

  // node_modules/rc-picker/es/panels/DecadePanel/DecadeBody.js
  var React216 = __toESM(require_react());
  var DECADE_COL_COUNT = 3;
  var DECADE_ROW_COUNT = 4;
  function DecadeBody(props) {
    var DECADE_UNIT_DIFF_DES = DECADE_UNIT_DIFF - 1;
    var prefixCls = props.prefixCls, viewDate = props.viewDate, generateConfig2 = props.generateConfig, cellRender = props.cellRender, locale9 = props.locale;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var yearNumber = generateConfig2.getYear(viewDate);
    var decadeYearNumber = Math.floor(yearNumber / DECADE_UNIT_DIFF) * DECADE_UNIT_DIFF;
    var startDecadeYear = Math.floor(yearNumber / DECADE_DISTANCE_COUNT) * DECADE_DISTANCE_COUNT;
    var endDecadeYear = startDecadeYear + DECADE_DISTANCE_COUNT - 1;
    var baseDecadeYear = generateConfig2.setYear(viewDate, startDecadeYear - Math.ceil((DECADE_COL_COUNT * DECADE_ROW_COUNT * DECADE_UNIT_DIFF - DECADE_DISTANCE_COUNT) / 2));
    var getCellClassName = function getCellClassName2(date4) {
      var _ref;
      var startDecadeNumber = generateConfig2.getYear(date4);
      var endDecadeNumber = startDecadeNumber + DECADE_UNIT_DIFF_DES;
      return _ref = {}, _defineProperty(_ref, "".concat(cellPrefixCls, "-in-view"), startDecadeYear <= startDecadeNumber && endDecadeNumber <= endDecadeYear), _defineProperty(_ref, "".concat(cellPrefixCls, "-selected"), startDecadeNumber === decadeYearNumber), _ref;
    };
    var getCellNode = cellRender ? function(date4, wrapperNode) {
      return cellRender(date4, {
        originNode: wrapperNode,
        today: generateConfig2.getNow(),
        type: "decade",
        locale: locale9
      });
    } : void 0;
    return /* @__PURE__ */ React216.createElement(PanelBody, _extends({}, props, {
      rowNum: DECADE_ROW_COUNT,
      colNum: DECADE_COL_COUNT,
      baseDate: baseDecadeYear,
      getCellNode,
      getCellText: function getCellText(date4) {
        var startDecadeNumber = generateConfig2.getYear(date4);
        return "".concat(startDecadeNumber, "-").concat(startDecadeNumber + DECADE_UNIT_DIFF_DES);
      },
      getCellClassName,
      getCellDate: function getCellDate(date4, offset3) {
        return generateConfig2.addYear(date4, offset3 * DECADE_UNIT_DIFF);
      }
    }));
  }
  var DecadeBody_default = DecadeBody;

  // node_modules/rc-picker/es/panels/DecadePanel/index.js
  function DecadePanel(props) {
    var prefixCls = props.prefixCls, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, viewDate = props.viewDate, operationRef = props.operationRef, onSelect = props.onSelect, onPanelChange = props.onPanelChange;
    var panelPrefixCls = "".concat(prefixCls, "-decade-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown2(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            onSelect(generateConfig2.addYear(viewDate, diff * DECADE_UNIT_DIFF), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            onSelect(generateConfig2.addYear(viewDate, diff * DECADE_DISTANCE_COUNT), "key");
          },
          onUpDown: function onUpDown(diff) {
            onSelect(generateConfig2.addYear(viewDate, diff * DECADE_UNIT_DIFF * DECADE_COL_COUNT), "key");
          },
          onEnter: function onEnter() {
            onPanelChange("year", viewDate);
          }
        });
      }
    };
    var onDecadesChange = function onDecadesChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff * DECADE_DISTANCE_COUNT);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    var onInternalSelect = function onInternalSelect2(date4) {
      onSelect(date4, "mouse");
      onPanelChange("year", date4);
    };
    return /* @__PURE__ */ React217.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React217.createElement(DecadeHeader_default, _extends({}, props, {
      prefixCls,
      onPrevDecades: function onPrevDecades() {
        onDecadesChange(-1);
      },
      onNextDecades: function onNextDecades() {
        onDecadesChange(1);
      }
    })), /* @__PURE__ */ React217.createElement(DecadeBody_default, _extends({}, props, {
      prefixCls,
      onSelect: onInternalSelect
    })));
  }
  var DecadePanel_default = DecadePanel;

  // node_modules/rc-picker/es/panels/MonthPanel/index.js
  var React220 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/MonthPanel/MonthHeader.js
  var React218 = __toESM(require_react());
  function MonthHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale9 = props.locale, viewDate = props.viewDate, onNextYear = props.onNextYear, onPrevYear = props.onPrevYear, onYearClick = props.onYearClick;
    var _React$useContext = React218.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /* @__PURE__ */ React218.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onSuperNext: onNextYear
    }), /* @__PURE__ */ React218.createElement("button", {
      type: "button",
      onClick: onYearClick,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale9,
      format: locale9.yearFormat,
      generateConfig: generateConfig2
    })));
  }
  var MonthHeader_default = MonthHeader;

  // node_modules/rc-picker/es/panels/MonthPanel/MonthBody.js
  var React219 = __toESM(require_react());
  var MONTH_COL_COUNT = 3;
  var MONTH_ROW_COUNT = 4;
  function MonthBody(props) {
    var prefixCls = props.prefixCls, locale9 = props.locale, value = props.value, viewDate = props.viewDate, generateConfig2 = props.generateConfig, cellRender = props.cellRender;
    var _React$useContext = React219.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var getCellClassName = useCellClassName({
      cellPrefixCls,
      value,
      generateConfig: generateConfig2,
      rangedValue,
      hoverRangedValue,
      isSameCell: function isSameCell(current2, target) {
        return isSameMonth(generateConfig2, current2, target);
      },
      isInView: function isInView() {
        return true;
      },
      offsetCell: function offsetCell(date4, offset3) {
        return generateConfig2.addMonth(date4, offset3);
      }
    });
    var monthsLocale = locale9.shortMonths || (generateConfig2.locale.getShortMonths ? generateConfig2.locale.getShortMonths(locale9.locale) : []);
    var baseMonth = generateConfig2.setMonth(viewDate, 0);
    var getCellNode = cellRender ? function(date4, wrapperNode) {
      return cellRender(date4, {
        originNode: wrapperNode,
        locale: locale9,
        today: generateConfig2.getNow(),
        type: "month"
      });
    } : void 0;
    return /* @__PURE__ */ React219.createElement(PanelBody, _extends({}, props, {
      rowNum: MONTH_ROW_COUNT,
      colNum: MONTH_COL_COUNT,
      baseDate: baseMonth,
      getCellNode,
      getCellText: function getCellText(date4) {
        return locale9.monthFormat ? formatValue(date4, {
          locale: locale9,
          format: locale9.monthFormat,
          generateConfig: generateConfig2
        }) : monthsLocale[generateConfig2.getMonth(date4)];
      },
      getCellClassName,
      getCellDate: generateConfig2.addMonth,
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale9,
          format: "YYYY-MM",
          generateConfig: generateConfig2
        });
      }
    }));
  }
  var MonthBody_default = MonthBody;

  // node_modules/rc-picker/es/panels/MonthPanel/index.js
  function MonthPanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, onPanelChange = props.onPanelChange, _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-month-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown2(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff * MONTH_COL_COUNT), "key");
          },
          onEnter: function onEnter() {
            onPanelChange("date", value || viewDate);
          }
        });
      }
    };
    var onYearChange = function onYearChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React220.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React220.createElement(MonthHeader_default, _extends({}, props, {
      prefixCls,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onYearClick: function onYearClick() {
        onPanelChange("year", viewDate);
      }
    })), /* @__PURE__ */ React220.createElement(MonthBody_default, _extends({}, props, {
      prefixCls,
      onSelect: function onSelect(date4) {
        _onSelect(date4, "mouse");
        onPanelChange("date", date4);
      }
    })));
  }
  var MonthPanel_default = MonthPanel;

  // node_modules/rc-picker/es/panels/QuarterPanel/index.js
  var React223 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/QuarterPanel/QuarterHeader.js
  var React221 = __toESM(require_react());
  function QuarterHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale9 = props.locale, viewDate = props.viewDate, onNextYear = props.onNextYear, onPrevYear = props.onPrevYear, onYearClick = props.onYearClick;
    var _React$useContext = React221.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /* @__PURE__ */ React221.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onSuperNext: onNextYear
    }), /* @__PURE__ */ React221.createElement("button", {
      type: "button",
      onClick: onYearClick,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale9,
      format: locale9.yearFormat,
      generateConfig: generateConfig2
    })));
  }
  var QuarterHeader_default = QuarterHeader;

  // node_modules/rc-picker/es/panels/QuarterPanel/QuarterBody.js
  var React222 = __toESM(require_react());
  var QUARTER_COL_COUNT = 4;
  var QUARTER_ROW_COUNT = 1;
  function QuarterBody(props) {
    var prefixCls = props.prefixCls, locale9 = props.locale, value = props.value, viewDate = props.viewDate, generateConfig2 = props.generateConfig, cellRender = props.cellRender;
    var _React$useContext = React222.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var getCellClassName = useCellClassName({
      cellPrefixCls,
      value,
      generateConfig: generateConfig2,
      rangedValue,
      hoverRangedValue,
      isSameCell: function isSameCell(current2, target) {
        return isSameQuarter(generateConfig2, current2, target);
      },
      isInView: function isInView() {
        return true;
      },
      offsetCell: function offsetCell(date4, offset3) {
        return generateConfig2.addMonth(date4, offset3 * 3);
      }
    });
    var baseQuarter = generateConfig2.setDate(generateConfig2.setMonth(viewDate, 0), 1);
    var getCellNode = cellRender ? function(date4, wrapperNode) {
      return cellRender(date4, {
        originNode: wrapperNode,
        locale: locale9,
        today: generateConfig2.getNow(),
        type: "quarter"
      });
    } : void 0;
    return /* @__PURE__ */ React222.createElement(PanelBody, _extends({}, props, {
      rowNum: QUARTER_ROW_COUNT,
      colNum: QUARTER_COL_COUNT,
      baseDate: baseQuarter,
      getCellNode,
      getCellText: function getCellText(date4) {
        return formatValue(date4, {
          locale: locale9,
          format: locale9.quarterFormat || "[Q]Q",
          generateConfig: generateConfig2
        });
      },
      getCellClassName,
      getCellDate: function getCellDate(date4, offset3) {
        return generateConfig2.addMonth(date4, offset3 * 3);
      },
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale9,
          format: "YYYY-[Q]Q",
          generateConfig: generateConfig2
        });
      }
    }));
  }
  var QuarterBody_default = QuarterBody;

  // node_modules/rc-picker/es/panels/QuarterPanel/index.js
  function QuarterPanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, onPanelChange = props.onPanelChange, _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-quarter-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown2(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addMonth(value || viewDate, diff * 3), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          }
        });
      }
    };
    var onYearChange = function onYearChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React223.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React223.createElement(QuarterHeader_default, _extends({}, props, {
      prefixCls,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onYearClick: function onYearClick() {
        onPanelChange("year", viewDate);
      }
    })), /* @__PURE__ */ React223.createElement(QuarterBody_default, _extends({}, props, {
      prefixCls,
      onSelect: function onSelect(date4) {
        _onSelect(date4, "mouse");
      }
    })));
  }
  var QuarterPanel_default = QuarterPanel;

  // node_modules/rc-picker/es/panels/WeekPanel/index.js
  var import_classnames58 = __toESM(require_classnames());
  var React224 = __toESM(require_react());
  function WeekPanel(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, locale9 = props.locale, value = props.value, disabledDate = props.disabledDate, onSelect = props.onSelect;
    var _React$useContext = React224.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var _React$useContext2 = React224.useContext(PanelContext_default), onDateMouseEnter = _React$useContext2.onDateMouseEnter, onDateMouseLeave = _React$useContext2.onDateMouseLeave;
    var rangeStart = (hoverRangedValue === null || hoverRangedValue === void 0 ? void 0 : hoverRangedValue[0]) || (rangedValue === null || rangedValue === void 0 ? void 0 : rangedValue[0]);
    var rangeEnd = (hoverRangedValue === null || hoverRangedValue === void 0 ? void 0 : hoverRangedValue[1]) || (rangedValue === null || rangedValue === void 0 ? void 0 : rangedValue[1]);
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var prefixColumn = function prefixColumn2(date4) {
      var disabled = getCellDateDisabled({
        cellDate: date4,
        mode: "week",
        disabledDate,
        generateConfig: generateConfig2
      });
      return /* @__PURE__ */ React224.createElement("td", {
        key: "week",
        className: (0, import_classnames58.default)(cellPrefixCls, "".concat(cellPrefixCls, "-week")),
        onClick: function onClick() {
          if (!disabled) {
            onSelect(date4, "mouse");
          }
        },
        onMouseEnter: function onMouseEnter() {
          if (!disabled && onDateMouseEnter) {
            onDateMouseEnter(date4);
          }
        },
        onMouseLeave: function onMouseLeave() {
          if (!disabled && onDateMouseLeave) {
            onDateMouseLeave(date4);
          }
        }
      }, /* @__PURE__ */ React224.createElement("div", {
        className: "".concat(cellPrefixCls, "-inner")
      }, generateConfig2.locale.getWeek(locale9.locale, date4)));
    };
    var rowPrefixCls = "".concat(prefixCls, "-week-panel-row");
    var rowClassName = function rowClassName2(date4) {
      var _classNames;
      var isRangeStart = isSameWeek(generateConfig2, locale9.locale, rangeStart, date4);
      var isRangeEnd = isSameWeek(generateConfig2, locale9.locale, rangeEnd, date4);
      return (0, import_classnames58.default)(rowPrefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(rowPrefixCls, "-selected"), !rangedValue && isSameWeek(generateConfig2, locale9.locale, value, date4)), _defineProperty(_classNames, "".concat(rowPrefixCls, "-range-start"), isRangeStart), _defineProperty(_classNames, "".concat(rowPrefixCls, "-range-end"), isRangeEnd), _defineProperty(_classNames, "".concat(rowPrefixCls, "-range-hover"), !isRangeStart && !isRangeEnd && isInRange(generateConfig2, rangeStart, rangeEnd, date4)), _classNames));
    };
    return /* @__PURE__ */ React224.createElement(DatePanel_default, _extends({}, props, {
      panelName: "week",
      prefixColumn,
      rowClassName,
      keyboardConfig: {
        onLeftRight: null
      },
      isSameCell: function isSameCell() {
        return false;
      }
    }));
  }
  var WeekPanel_default = WeekPanel;

  // node_modules/rc-picker/es/panels/YearPanel/index.js
  var React227 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/YearPanel/YearHeader.js
  var React225 = __toESM(require_react());

  // node_modules/rc-picker/es/panels/YearPanel/constant.js
  var YEAR_DECADE_COUNT = 10;

  // node_modules/rc-picker/es/panels/YearPanel/YearHeader.js
  function YearHeader(props) {
    var prefixCls = props.prefixCls, generateConfig2 = props.generateConfig, viewDate = props.viewDate, onPrevDecade = props.onPrevDecade, onNextDecade = props.onNextDecade, onDecadeClick = props.onDecadeClick;
    var _React$useContext = React225.useContext(PanelContext_default), hideHeader = _React$useContext.hideHeader;
    if (hideHeader) {
      return null;
    }
    var headerPrefixCls = "".concat(prefixCls, "-header");
    var yearNumber = generateConfig2.getYear(viewDate);
    var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;
    var endYear = startYear + YEAR_DECADE_COUNT - 1;
    return /* @__PURE__ */ React225.createElement(Header_default, _extends({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevDecade,
      onSuperNext: onNextDecade
    }), /* @__PURE__ */ React225.createElement("button", {
      type: "button",
      onClick: onDecadeClick,
      className: "".concat(prefixCls, "-decade-btn")
    }, startYear, "-", endYear));
  }
  var YearHeader_default = YearHeader;

  // node_modules/rc-picker/es/panels/YearPanel/YearBody.js
  var React226 = __toESM(require_react());
  var YEAR_COL_COUNT = 3;
  var YEAR_ROW_COUNT = 4;
  function YearBody(props) {
    var prefixCls = props.prefixCls, value = props.value, viewDate = props.viewDate, locale9 = props.locale, generateConfig2 = props.generateConfig, cellRender = props.cellRender;
    var _React$useContext = React226.useContext(RangeContext_default), rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var yearPrefixCls = "".concat(prefixCls, "-cell");
    var yearNumber = generateConfig2.getYear(viewDate);
    var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;
    var endYear = startYear + YEAR_DECADE_COUNT - 1;
    var baseYear = generateConfig2.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));
    var today = generateConfig2.getNow();
    var isInView = function isInView2(date4) {
      var currentYearNumber = generateConfig2.getYear(date4);
      return startYear <= currentYearNumber && currentYearNumber <= endYear;
    };
    var getCellClassName = useCellClassName({
      cellPrefixCls: yearPrefixCls,
      value,
      generateConfig: generateConfig2,
      rangedValue,
      hoverRangedValue,
      isSameCell: function isSameCell(current2, target) {
        return isSameYear(generateConfig2, current2, target);
      },
      isInView,
      offsetCell: function offsetCell(date4, offset3) {
        return generateConfig2.addYear(date4, offset3);
      }
    });
    var getCellNode = cellRender ? function(date4, wrapperNode) {
      return cellRender(date4, {
        originNode: wrapperNode,
        today,
        type: "year",
        locale: locale9
      });
    } : void 0;
    return /* @__PURE__ */ React226.createElement(PanelBody, _extends({}, props, {
      rowNum: YEAR_ROW_COUNT,
      colNum: YEAR_COL_COUNT,
      baseDate: baseYear,
      getCellNode,
      getCellText: generateConfig2.getYear,
      getCellClassName,
      getCellDate: generateConfig2.addYear,
      titleCell: function titleCell(date4) {
        return formatValue(date4, {
          locale: locale9,
          format: "YYYY",
          generateConfig: generateConfig2
        });
      }
    }));
  }
  var YearBody_default = YearBody;

  // node_modules/rc-picker/es/panels/YearPanel/index.js
  function YearPanel(props) {
    var prefixCls = props.prefixCls, operationRef = props.operationRef, onViewDateChange = props.onViewDateChange, generateConfig2 = props.generateConfig, value = props.value, viewDate = props.viewDate, sourceMode = props.sourceMode, _onSelect = props.onSelect, onPanelChange = props.onPanelChange;
    var panelPrefixCls = "".concat(prefixCls, "-year-panel");
    operationRef.current = {
      onKeyDown: function onKeyDown2(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff), "key");
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff * YEAR_DECADE_COUNT), "key");
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig2.addYear(value || viewDate, diff * YEAR_COL_COUNT), "key");
          },
          onEnter: function onEnter() {
            onPanelChange(sourceMode === "date" ? "date" : "month", value || viewDate);
          }
        });
      }
    };
    var onDecadeChange = function onDecadeChange2(diff) {
      var newDate = generateConfig2.addYear(viewDate, diff * 10);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };
    return /* @__PURE__ */ React227.createElement("div", {
      className: panelPrefixCls
    }, /* @__PURE__ */ React227.createElement(YearHeader_default, _extends({}, props, {
      prefixCls,
      onPrevDecade: function onPrevDecade() {
        onDecadeChange(-1);
      },
      onNextDecade: function onNextDecade() {
        onDecadeChange(1);
      },
      onDecadeClick: function onDecadeClick() {
        onPanelChange("decade", viewDate);
      }
    })), /* @__PURE__ */ React227.createElement(YearBody_default, _extends({}, props, {
      prefixCls,
      onSelect: function onSelect(date4) {
        onPanelChange(sourceMode === "date" ? "date" : "month", date4);
        _onSelect(date4, "mouse");
      }
    })));
  }
  var YearPanel_default = YearPanel;

  // node_modules/rc-picker/es/utils/getExtraFooter.js
  var React228 = __toESM(require_react());
  function getExtraFooter(prefixCls, mode, renderExtraFooter) {
    if (!renderExtraFooter) {
      return null;
    }
    return /* @__PURE__ */ React228.createElement("div", {
      className: "".concat(prefixCls, "-footer-extra")
    }, renderExtraFooter(mode));
  }

  // node_modules/rc-picker/es/utils/getRanges.js
  var React229 = __toESM(require_react());
  function getRanges(_ref) {
    var prefixCls = _ref.prefixCls, _ref$components = _ref.components, components = _ref$components === void 0 ? {} : _ref$components, needConfirmButton = _ref.needConfirmButton, onNow = _ref.onNow, onOk = _ref.onOk, okDisabled = _ref.okDisabled, showNow = _ref.showNow, locale9 = _ref.locale;
    var presetNode;
    var okNode;
    if (needConfirmButton) {
      var Button3 = components.button || "button";
      if (onNow && showNow !== false) {
        presetNode = /* @__PURE__ */ React229.createElement("li", {
          className: "".concat(prefixCls, "-now")
        }, /* @__PURE__ */ React229.createElement("a", {
          className: "".concat(prefixCls, "-now-btn"),
          onClick: onNow
        }, locale9.now));
      }
      okNode = needConfirmButton && /* @__PURE__ */ React229.createElement("li", {
        className: "".concat(prefixCls, "-ok")
      }, /* @__PURE__ */ React229.createElement(Button3, {
        disabled: okDisabled,
        onClick: onOk
      }, locale9.ok));
    }
    if (!presetNode && !okNode) {
      return null;
    }
    return /* @__PURE__ */ React229.createElement("ul", {
      className: "".concat(prefixCls, "-ranges")
    }, presetNode, okNode);
  }

  // node_modules/rc-picker/es/PickerPanel.js
  var CALENDAR_PANEL_MODE = ["date", "month"];
  function PickerPanel(props) {
    var _classNames;
    var _ref = props, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-picker" : _ref$prefixCls, className = _ref.className, style2 = _ref.style, locale9 = _ref.locale, generateConfig2 = _ref.generateConfig, value = _ref.value, defaultValue = _ref.defaultValue, pickerValue = _ref.pickerValue, defaultPickerValue = _ref.defaultPickerValue, disabledDate = _ref.disabledDate, mode = _ref.mode, _ref$picker = _ref.picker, picker = _ref$picker === void 0 ? "date" : _ref$picker, _ref$tabIndex = _ref.tabIndex, tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex, showNow = _ref.showNow, showTime = _ref.showTime, showToday = _ref.showToday, renderExtraFooter = _ref.renderExtraFooter, hideHeader = _ref.hideHeader, onSelect = _ref.onSelect, onChange = _ref.onChange, onPanelChange = _ref.onPanelChange, onMouseDown = _ref.onMouseDown, onPickerValueChange = _ref.onPickerValueChange, _onOk = _ref.onOk, components = _ref.components, direction = _ref.direction, _ref$hourStep = _ref.hourStep, hourStep = _ref$hourStep === void 0 ? 1 : _ref$hourStep, _ref$minuteStep = _ref.minuteStep, minuteStep = _ref$minuteStep === void 0 ? 1 : _ref$minuteStep, _ref$secondStep = _ref.secondStep, secondStep = _ref$secondStep === void 0 ? 1 : _ref$secondStep, dateRender = _ref.dateRender, monthCellRender = _ref.monthCellRender, cellRender = _ref.cellRender;
    var needConfirmButton = picker === "date" && !!showTime || picker === "time";
    var isHourStepValid = 24 % hourStep === 0;
    var isMinuteStepValid = 60 % minuteStep === 0;
    var isSecondStepValid = 60 % secondStep === 0;
    if (true) {
      warning_default(!value || generateConfig2.isValidate(value), "Invalidate date pass to `value`.");
      warning_default(!value || generateConfig2.isValidate(value), "Invalidate date pass to `defaultValue`.");
      warning_default(isHourStepValid, "`hourStep` ".concat(hourStep, " is invalid. It should be a factor of 24."));
      warning_default(isMinuteStepValid, "`minuteStep` ".concat(minuteStep, " is invalid. It should be a factor of 60."));
      warning_default(isSecondStepValid, "`secondStep` ".concat(secondStep, " is invalid. It should be a factor of 60."));
      warning_default(!defaultPickerValue, "'defaultPickerValue' is deprecated. Please use 'defaultValue' instead.");
      warning_default(!dateRender, "'dateRender' is deprecated. Please use 'cellRender' instead.");
      warning_default(!monthCellRender, "'monthCellRender' is deprecated. Please use 'cellRender' instead.");
    }
    var panelContext = React230.useContext(PanelContext_default);
    var operationRef = panelContext.operationRef, onContextSelect = panelContext.onSelect, hideRanges = panelContext.hideRanges, defaultOpenValue = panelContext.defaultOpenValue;
    var _React$useContext = React230.useContext(RangeContext_default), inRange = _React$useContext.inRange, panelPosition = _React$useContext.panelPosition, rangedValue = _React$useContext.rangedValue, hoverRangedValue = _React$useContext.hoverRangedValue;
    var panelRef = React230.useRef({});
    var initRef = React230.useRef(true);
    var _useMergedState = useMergedState(null, {
      value,
      defaultValue,
      postState: function postState(val) {
        if (!val && defaultOpenValue && picker === "time") {
          return defaultOpenValue;
        }
        return val;
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setInnerValue = _useMergedState2[1];
    var _useMergedState3 = useMergedState(null, {
      value: pickerValue,
      defaultValue: defaultPickerValue || mergedValue,
      postState: function postState(date4) {
        var now3 = generateConfig2.getNow();
        if (!date4) {
          return now3;
        }
        if (!mergedValue && showTime) {
          var defaultDateObject = _typeof(showTime) === "object" ? showTime.defaultValue : defaultValue;
          return setDateTime(generateConfig2, Array.isArray(date4) ? date4[0] : date4, defaultDateObject || now3);
        }
        return Array.isArray(date4) ? date4[0] : date4;
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), viewDate = _useMergedState4[0], setInnerViewDate = _useMergedState4[1];
    var setViewDate = function setViewDate2(date4) {
      setInnerViewDate(date4);
      if (onPickerValueChange) {
        onPickerValueChange(date4);
      }
    };
    var getInternalNextMode = function getInternalNextMode2(nextMode) {
      var getNextMode = PickerModeMap[picker];
      if (getNextMode) {
        return getNextMode(nextMode);
      }
      return nextMode;
    };
    var _useMergedState5 = useMergedState(function() {
      if (picker === "time") {
        return "time";
      }
      return getInternalNextMode("date");
    }, {
      value: mode
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedMode = _useMergedState6[0], setInnerMode = _useMergedState6[1];
    React230.useEffect(function() {
      setInnerMode(picker);
    }, [picker]);
    var _React$useState = React230.useState(function() {
      return mergedMode;
    }), _React$useState2 = _slicedToArray(_React$useState, 2), sourceMode = _React$useState2[0], setSourceMode = _React$useState2[1];
    var onInternalPanelChange = function onInternalPanelChange2(newMode, viewValue) {
      var nextMode = getInternalNextMode(newMode || mergedMode);
      setSourceMode(mergedMode);
      setInnerMode(nextMode);
      if (onPanelChange && (mergedMode !== nextMode || isEqual2(generateConfig2, viewDate, viewDate))) {
        onPanelChange(viewValue, nextMode);
      }
    };
    var triggerSelect = function triggerSelect2(date4, type4) {
      var forceTriggerSelect = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (mergedMode === picker || forceTriggerSelect) {
        setInnerValue(date4);
        if (onSelect) {
          onSelect(date4);
        }
        if (onContextSelect) {
          onContextSelect(date4, type4);
        }
        if (onChange && !isEqual2(generateConfig2, date4, mergedValue) && !(disabledDate !== null && disabledDate !== void 0 && disabledDate(date4))) {
          onChange(date4);
        }
      }
    };
    var isSelectable = function isSelectable2(key) {
      if (CALENDAR_PANEL_MODE.includes(mergedMode)) {
        var _date;
        var operationFnc;
        var isDateMode = mergedMode === "date";
        if (key === KeyCode_default.PAGE_UP || key === KeyCode_default.PAGE_DOWN) {
          operationFnc = isDateMode ? generateConfig2.addMonth : generateConfig2.addYear;
        } else {
          operationFnc = isDateMode ? generateConfig2.addDate : generateConfig2.addMonth;
        }
        switch (key) {
          case KeyCode_default.LEFT:
          case KeyCode_default.PAGE_UP:
            _date = operationFnc(viewDate, -1);
            break;
          case KeyCode_default.RIGHT:
          case KeyCode_default.PAGE_DOWN:
            _date = operationFnc(viewDate, 1);
            break;
          case KeyCode_default.UP:
          case KeyCode_default.DOWN:
            _date = operationFnc(viewDate, Number("".concat(key === KeyCode_default.UP ? "-" : "").concat(isDateMode ? WEEK_DAY_COUNT : MONTH_COL_COUNT)));
            break;
        }
        if (_date) {
          return !(disabledDate !== null && disabledDate !== void 0 && disabledDate(_date));
        }
      }
      return true;
    };
    var onInternalKeyDown = function onInternalKeyDown2(e3) {
      if (panelRef.current && panelRef.current.onKeyDown) {
        var selectable = true;
        var which = e3.which;
        if ([KeyCode_default.LEFT, KeyCode_default.RIGHT, KeyCode_default.UP, KeyCode_default.DOWN, KeyCode_default.PAGE_UP, KeyCode_default.PAGE_DOWN, KeyCode_default.ENTER].includes(which)) {
          e3.preventDefault();
          if (which !== KeyCode_default.ENTER && tabIndex === 0) {
            selectable = isSelectable(which);
          }
        }
        if (selectable) {
          return panelRef.current.onKeyDown(e3);
        }
      }
      {
        warning_default(false, "Panel not correct handle keyDown event. Please help to fire issue about this.");
        return false;
      }
    };
    var onInternalBlur = function onInternalBlur2(e3) {
      if (panelRef.current && panelRef.current.onBlur) {
        panelRef.current.onBlur(e3);
      }
    };
    if (operationRef && panelPosition !== "right") {
      operationRef.current = {
        onKeyDown: onInternalKeyDown,
        onClose: function onClose() {
          if (panelRef.current && panelRef.current.onClose) {
            panelRef.current.onClose();
          }
        }
      };
    }
    React230.useEffect(function() {
      if (value && !initRef.current) {
        setInnerViewDate(value);
      }
    }, [value]);
    React230.useEffect(function() {
      initRef.current = false;
    }, []);
    var panelNode;
    var mergedCellRender = useCellRender({
      cellRender,
      monthCellRender,
      dateRender
    });
    var pickerProps = _objectSpread2(_objectSpread2({}, props), {}, {
      cellRender: mergedCellRender,
      operationRef: panelRef,
      prefixCls,
      viewDate,
      value: mergedValue,
      onViewDateChange: setViewDate,
      sourceMode,
      onPanelChange: onInternalPanelChange,
      disabledDate
    });
    delete pickerProps.onChange;
    delete pickerProps.onSelect;
    switch (mergedMode) {
      case "decade":
        panelNode = /* @__PURE__ */ React230.createElement(DecadePanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "year":
        panelNode = /* @__PURE__ */ React230.createElement(YearPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "month":
        panelNode = /* @__PURE__ */ React230.createElement(MonthPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "quarter":
        panelNode = /* @__PURE__ */ React230.createElement(QuarterPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "week":
        panelNode = /* @__PURE__ */ React230.createElement(WeekPanel_default, _extends({}, pickerProps, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      case "time":
        delete pickerProps.showTime;
        panelNode = /* @__PURE__ */ React230.createElement(TimePanel_default, _extends({}, pickerProps, _typeof(showTime) === "object" ? showTime : null, {
          onSelect: function onSelect2(date4, type4) {
            setViewDate(date4);
            triggerSelect(date4, type4);
          }
        }));
        break;
      default:
        if (showTime) {
          panelNode = /* @__PURE__ */ React230.createElement(DatetimePanel_default, _extends({}, pickerProps, {
            onSelect: function onSelect2(date4, type4) {
              setViewDate(date4);
              triggerSelect(date4, type4);
            }
          }));
        } else {
          panelNode = /* @__PURE__ */ React230.createElement(DatePanel_default, _extends({}, pickerProps, {
            onSelect: function onSelect2(date4, type4) {
              setViewDate(date4);
              triggerSelect(date4, type4);
            }
          }));
        }
    }
    var extraFooter;
    var rangesNode;
    var onNow = function onNow2() {
      var now3 = generateConfig2.getNow();
      var lowerBoundTime = getLowerBoundTime(generateConfig2.getHour(now3), generateConfig2.getMinute(now3), generateConfig2.getSecond(now3), isHourStepValid ? hourStep : 1, isMinuteStepValid ? minuteStep : 1, isSecondStepValid ? secondStep : 1);
      var adjustedNow = setTime(
        generateConfig2,
        now3,
        lowerBoundTime[0],
        // hour
        lowerBoundTime[1],
        // minute
        lowerBoundTime[2]
        // second
      );
      triggerSelect(adjustedNow, "submit");
    };
    if (!hideRanges) {
      extraFooter = getExtraFooter(prefixCls, mergedMode, renderExtraFooter);
      if (showTime && mergedMode !== "date") {
        rangesNode = null;
      } else {
        rangesNode = getRanges({
          prefixCls,
          components,
          needConfirmButton,
          okDisabled: !mergedValue || disabledDate && disabledDate(mergedValue),
          locale: locale9,
          showNow,
          onNow: needConfirmButton && onNow,
          onOk: function onOk() {
            if (mergedValue) {
              triggerSelect(mergedValue, "submit", true);
              if (_onOk) {
                _onOk(mergedValue);
              }
            }
          }
        });
      }
    }
    var todayNode;
    if (showToday && mergedMode === "date" && picker === "date" && !showTime) {
      var now2 = generateConfig2.getNow();
      var todayCls = "".concat(prefixCls, "-today-btn");
      var disabled = disabledDate && disabledDate(now2);
      todayNode = /* @__PURE__ */ React230.createElement("a", {
        className: (0, import_classnames59.default)(todayCls, disabled && "".concat(todayCls, "-disabled")),
        "aria-disabled": disabled,
        onClick: function onClick() {
          if (!disabled) {
            triggerSelect(now2, "mouse", true);
          }
        }
      }, locale9.today);
    }
    return /* @__PURE__ */ React230.createElement(PanelContext_default.Provider, {
      value: _objectSpread2(_objectSpread2({}, panelContext), {}, {
        mode: mergedMode,
        hideHeader: "hideHeader" in props ? hideHeader : panelContext.hideHeader,
        hidePrevBtn: inRange && panelPosition === "right",
        hideNextBtn: inRange && panelPosition === "left"
      })
    }, /* @__PURE__ */ React230.createElement("div", {
      tabIndex,
      className: (0, import_classnames59.default)("".concat(prefixCls, "-panel"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-panel-has-range"), rangedValue && rangedValue[0] && rangedValue[1]), _defineProperty(_classNames, "".concat(prefixCls, "-panel-has-range-hover"), hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1]), _defineProperty(_classNames, "".concat(prefixCls, "-panel-rtl"), direction === "rtl"), _classNames)),
      style: style2,
      onKeyDown: onInternalKeyDown,
      onBlur: onInternalBlur,
      onMouseDown
    }, panelNode, extraFooter || rangesNode || todayNode ? /* @__PURE__ */ React230.createElement("div", {
      className: "".concat(prefixCls, "-footer")
    }, extraFooter, rangesNode, todayNode) : null));
  }
  var PickerPanel_default = PickerPanel;

  // node_modules/rc-picker/es/PickerTrigger.js
  var React231 = __toESM(require_react());
  var import_classnames60 = __toESM(require_classnames());
  var BUILT_IN_PLACEMENTS = {
    bottomLeft: {
      points: ["tl", "bl"],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    bottomRight: {
      points: ["tr", "br"],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    topLeft: {
      points: ["bl", "tl"],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    },
    topRight: {
      points: ["br", "tr"],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    }
  };
  function PickerTrigger(_ref) {
    var _classNames;
    var prefixCls = _ref.prefixCls, popupElement = _ref.popupElement, popupStyle = _ref.popupStyle, visible = _ref.visible, dropdownClassName = _ref.dropdownClassName, dropdownAlign = _ref.dropdownAlign, transitionName = _ref.transitionName, getPopupContainer = _ref.getPopupContainer, children = _ref.children, range3 = _ref.range, popupPlacement = _ref.popupPlacement, direction = _ref.direction;
    var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
    var getPopupPlacement = function getPopupPlacement2() {
      if (popupPlacement !== void 0) {
        return popupPlacement;
      }
      return direction === "rtl" ? "bottomRight" : "bottomLeft";
    };
    return /* @__PURE__ */ React231.createElement(es_default7, {
      showAction: [],
      hideAction: [],
      popupPlacement: getPopupPlacement(),
      builtinPlacements: BUILT_IN_PLACEMENTS,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: transitionName,
      popup: popupElement,
      popupAlign: dropdownAlign,
      popupVisible: visible,
      popupClassName: (0, import_classnames60.default)(dropdownClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(dropdownPrefixCls, "-range"), range3), _defineProperty(_classNames, "".concat(dropdownPrefixCls, "-rtl"), direction === "rtl"), _classNames)),
      popupStyle,
      getPopupContainer
    }, children);
  }
  var PickerTrigger_default = PickerTrigger;

  // node_modules/rc-picker/es/PresetPanel.js
  var React232 = __toESM(require_react());
  function PresetPanel(props) {
    var prefixCls = props.prefixCls, presets = props.presets, _onClick = props.onClick, onHover = props.onHover;
    if (!presets.length) {
      return null;
    }
    return /* @__PURE__ */ React232.createElement("div", {
      className: "".concat(prefixCls, "-presets")
    }, /* @__PURE__ */ React232.createElement("ul", null, presets.map(function(_ref, index2) {
      var label = _ref.label, value = _ref.value;
      return /* @__PURE__ */ React232.createElement("li", {
        key: index2,
        onClick: function onClick() {
          return _onClick === null || _onClick === void 0 ? void 0 : _onClick(executeValue(value));
        },
        onMouseEnter: function onMouseEnter() {
          return onHover === null || onHover === void 0 ? void 0 : onHover(executeValue(value));
        },
        onMouseLeave: function onMouseLeave() {
          return onHover === null || onHover === void 0 ? void 0 : onHover(null);
        }
      }, label);
    })));
  }

  // node_modules/rc-picker/es/utils/warnUtil.js
  function legacyPropsWarning(props) {
    var picker = props.picker, disabledHours = props.disabledHours, disabledMinutes = props.disabledMinutes, disabledSeconds = props.disabledSeconds;
    if (picker === "time" && (disabledHours || disabledMinutes || disabledSeconds)) {
      warning_default(false, "'disabledHours', 'disabledMinutes', 'disabledSeconds' will be removed in the next major version, please use 'disabledTime' instead.");
    }
  }

  // node_modules/rc-picker/es/utils/getClearIcon.js
  var import_react68 = __toESM(require_react());
  function getClearIcon(prefixCls, allowClear, clearIcon) {
    var mergedClearIcon = _typeof(allowClear) === "object" ? allowClear.clearIcon : clearIcon;
    return mergedClearIcon || /* @__PURE__ */ import_react68.default.createElement("span", {
      className: "".concat(prefixCls, "-clear-btn")
    });
  }

  // node_modules/rc-picker/es/Picker.js
  function InnerPicker(props) {
    var _classNames2;
    var _ref = props, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-picker" : _ref$prefixCls, id = _ref.id, name = _ref.name, tabIndex = _ref.tabIndex, style2 = _ref.style, className = _ref.className, dropdownClassName = _ref.dropdownClassName, dropdownAlign = _ref.dropdownAlign, popupStyle = _ref.popupStyle, transitionName = _ref.transitionName, generateConfig2 = _ref.generateConfig, locale9 = _ref.locale, inputReadOnly = _ref.inputReadOnly, allowClear = _ref.allowClear, autoFocus = _ref.autoFocus, showTime = _ref.showTime, _ref$picker = _ref.picker, picker = _ref$picker === void 0 ? "date" : _ref$picker, format3 = _ref.format, use12Hours = _ref.use12Hours, value = _ref.value, defaultValue = _ref.defaultValue, presets = _ref.presets, open = _ref.open, defaultOpen = _ref.defaultOpen, defaultOpenValue = _ref.defaultOpenValue, suffixIcon = _ref.suffixIcon, clearIcon = _ref.clearIcon, disabled = _ref.disabled, disabledDate = _ref.disabledDate, placeholder = _ref.placeholder, getPopupContainer = _ref.getPopupContainer, pickerRef = _ref.pickerRef, panelRender = _ref.panelRender, onChange = _ref.onChange, onOpenChange = _ref.onOpenChange, onFocus = _ref.onFocus, onBlur = _ref.onBlur, onMouseDown = _ref.onMouseDown, onMouseUp = _ref.onMouseUp, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave, onContextMenu = _ref.onContextMenu, onClick = _ref.onClick, _onKeyDown = _ref.onKeyDown, _onSelect = _ref.onSelect, direction = _ref.direction, _ref$autoComplete = _ref.autoComplete, autoComplete = _ref$autoComplete === void 0 ? "off" : _ref$autoComplete, inputRender = _ref.inputRender, changeOnBlur = _ref.changeOnBlur;
    var inputRef = React234.useRef(null);
    var needConfirmButton = picker === "date" && !!showTime || picker === "time";
    var presetList = usePresets(presets);
    if (true) {
      legacyPropsWarning(props);
    }
    var formatList = toArray5(getDefaultFormat(format3, picker, showTime, use12Hours));
    var panelDivRef = React234.useRef(null);
    var inputDivRef = React234.useRef(null);
    var containerRef = React234.useRef(null);
    var _useMergedState = useMergedState(null, {
      value,
      defaultValue
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setInnerValue = _useMergedState2[1];
    var _React$useState = React234.useState(mergedValue), _React$useState2 = _slicedToArray(_React$useState, 2), selectedValue = _React$useState2[0], setSelectedValue = _React$useState2[1];
    var operationRef = React234.useRef(null);
    var _useMergedState3 = useMergedState(false, {
      value: open,
      defaultValue: defaultOpen,
      postState: function postState(postOpen) {
        return disabled ? false : postOpen;
      },
      onChange: function onChange2(newOpen) {
        if (onOpenChange) {
          onOpenChange(newOpen);
        }
        if (!newOpen && operationRef.current && operationRef.current.onClose) {
          operationRef.current.onClose();
        }
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedOpen = _useMergedState4[0], triggerInnerOpen = _useMergedState4[1];
    var _useValueTexts = useValueTexts(selectedValue, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale9
    }), _useValueTexts2 = _slicedToArray(_useValueTexts, 2), valueTexts = _useValueTexts2[0], firstValueText = _useValueTexts2[1];
    var _useTextValueMapping = useTextValueMapping({
      valueTexts,
      onTextChange: function onTextChange(newText) {
        var inputDate = parseValue(newText, {
          locale: locale9,
          formatList,
          generateConfig: generateConfig2
        });
        if (inputDate && (!disabledDate || !disabledDate(inputDate))) {
          setSelectedValue(inputDate);
        }
      }
    }), _useTextValueMapping2 = _slicedToArray(_useTextValueMapping, 3), text = _useTextValueMapping2[0], triggerTextChange = _useTextValueMapping2[1], resetText = _useTextValueMapping2[2];
    var triggerChange = function triggerChange2(newValue) {
      setSelectedValue(newValue);
      setInnerValue(newValue);
      if (onChange && !isEqual2(generateConfig2, mergedValue, newValue)) {
        onChange(newValue, newValue ? formatValue(newValue, {
          generateConfig: generateConfig2,
          locale: locale9,
          format: formatList[0]
        }) : "");
      }
    };
    var triggerOpen = function triggerOpen2(newOpen) {
      if (disabled && newOpen) {
        return;
      }
      triggerInnerOpen(newOpen);
    };
    var forwardKeyDown = function forwardKeyDown2(e3) {
      if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {
        return operationRef.current.onKeyDown(e3);
      }
      {
        warning_default(false, "Picker not correct forward KeyDown operation. Please help to fire issue about this.");
        return false;
      }
    };
    var onInternalClick = function onInternalClick2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      onClick === null || onClick === void 0 || onClick.apply(void 0, args);
      if (inputRef.current) {
        inputRef.current.focus();
        triggerOpen(true);
      }
    };
    var onInternalBlur = function onInternalBlur2(e3) {
      if (changeOnBlur) {
        triggerChange(selectedValue);
      }
      onBlur === null || onBlur === void 0 || onBlur(e3);
    };
    var _usePickerInput = usePickerInput({
      blurToCancel: needConfirmButton,
      changeOnBlur,
      open: mergedOpen,
      value: text,
      triggerOpen,
      forwardKeyDown,
      isClickOutside: function isClickOutside(target) {
        return !elementsContains([panelDivRef.current, inputDivRef.current, containerRef.current], target);
      },
      onSubmit: function onSubmit() {
        if (
          // When user typing disabledDate with keyboard and enter, this value will be empty
          !selectedValue || // Normal disabled check
          disabledDate && disabledDate(selectedValue)
        ) {
          return false;
        }
        triggerChange(selectedValue);
        triggerOpen(false);
        resetText();
        return true;
      },
      onCancel: function onCancel() {
        triggerOpen(false);
        setSelectedValue(mergedValue);
        resetText();
      },
      onKeyDown: function onKeyDown2(e3, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 || _onKeyDown(e3, preventDefault);
      },
      onFocus,
      onBlur: onInternalBlur
    }), _usePickerInput2 = _slicedToArray(_usePickerInput, 2), inputProps = _usePickerInput2[0], _usePickerInput2$ = _usePickerInput2[1], focused = _usePickerInput2$.focused, typing = _usePickerInput2$.typing;
    React234.useEffect(function() {
      if (!mergedOpen) {
        setSelectedValue(mergedValue);
        if (!valueTexts.length || valueTexts[0] === "") {
          triggerTextChange("");
        } else if (firstValueText !== text) {
          resetText();
        }
      }
    }, [mergedOpen, valueTexts]);
    React234.useEffect(function() {
      if (!mergedOpen) {
        resetText();
      }
    }, [picker]);
    React234.useEffect(function() {
      setSelectedValue(mergedValue);
    }, [mergedValue]);
    if (pickerRef) {
      pickerRef.current = {
        focus: function focus() {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
        },
        blur: function blur() {
          var _inputRef$current2;
          (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.blur();
        }
      };
    }
    var _useHoverValue = useHoverValue(text, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale9
    }), _useHoverValue2 = _slicedToArray(_useHoverValue, 3), hoverValue = _useHoverValue2[0], onEnter = _useHoverValue2[1], onLeave = _useHoverValue2[2];
    var panelProps = _objectSpread2(_objectSpread2({}, props), {}, {
      className: void 0,
      style: void 0,
      pickerValue: void 0,
      onPickerValueChange: void 0,
      onChange: null
    });
    var panelNode = /* @__PURE__ */ React234.createElement("div", {
      className: "".concat(prefixCls, "-panel-layout")
    }, /* @__PURE__ */ React234.createElement(PresetPanel, {
      prefixCls,
      presets: presetList,
      onClick: function onClick2(nextValue) {
        triggerChange(nextValue);
        triggerOpen(false);
      }
    }), /* @__PURE__ */ React234.createElement(PickerPanel_default, _extends({}, panelProps, {
      generateConfig: generateConfig2,
      className: (0, import_classnames61.default)(_defineProperty({}, "".concat(prefixCls, "-panel-focused"), !typing)),
      value: selectedValue,
      locale: locale9,
      tabIndex: -1,
      onSelect: function onSelect(date4) {
        _onSelect === null || _onSelect === void 0 || _onSelect(date4);
        setSelectedValue(date4);
      },
      direction,
      onPanelChange: function onPanelChange(viewDate, mode) {
        var onPanelChange2 = props.onPanelChange;
        onLeave(true);
        onPanelChange2 === null || onPanelChange2 === void 0 || onPanelChange2(viewDate, mode);
      }
    })));
    if (panelRender) {
      panelNode = panelRender(panelNode);
    }
    var panel = /* @__PURE__ */ React234.createElement("div", {
      className: "".concat(prefixCls, "-panel-container"),
      ref: panelDivRef,
      onMouseDown: function onMouseDown2(e3) {
        e3.preventDefault();
      }
    }, panelNode);
    var suffixNode;
    if (suffixIcon) {
      suffixNode = /* @__PURE__ */ React234.createElement("span", {
        className: "".concat(prefixCls, "-suffix"),
        onMouseDown: function onMouseDown2(e3) {
          e3.preventDefault();
        }
      }, suffixIcon);
    }
    if (true) {
      warning_default(!props.clearIcon, "`clearIcon` will be removed in future. Please use `allowClear` instead.");
    }
    var mergedClearIcon = getClearIcon(prefixCls, allowClear, clearIcon);
    var clearNode = /* @__PURE__ */ React234.createElement("span", {
      onMouseDown: function onMouseDown2(e3) {
        e3.preventDefault();
        e3.stopPropagation();
      },
      onMouseUp: function onMouseUp2(e3) {
        e3.preventDefault();
        e3.stopPropagation();
        triggerChange(null);
        triggerOpen(false);
      },
      className: "".concat(prefixCls, "-clear"),
      role: "button"
    }, mergedClearIcon);
    var mergedAllowClear = !!allowClear && mergedValue && !disabled;
    var mergedInputProps = _objectSpread2(_objectSpread2(_objectSpread2({
      id,
      tabIndex,
      disabled,
      readOnly: inputReadOnly || typeof formatList[0] === "function" || !typing,
      value: hoverValue || text,
      onChange: function onChange2(e3) {
        triggerTextChange(e3.target.value);
      },
      autoFocus,
      placeholder,
      ref: inputRef,
      title: text
    }, inputProps), {}, {
      size: getInputSize(picker, formatList[0], generateConfig2),
      name
    }, pickAttrs(props, {
      aria: true,
      data: true
    })), {}, {
      autoComplete
    });
    var inputNode = inputRender ? inputRender(mergedInputProps) : /* @__PURE__ */ React234.createElement("input", mergedInputProps);
    if (true) {
      warning_default(!defaultOpenValue, "`defaultOpenValue` may confuse user for the current value status. Please use `defaultValue` instead.");
    }
    var onContextSelect = function onContextSelect2(date4, type4) {
      if (type4 === "submit" || type4 !== "key" && !needConfirmButton) {
        triggerChange(date4);
        triggerOpen(false);
      }
    };
    var popupPlacement = direction === "rtl" ? "bottomRight" : "bottomLeft";
    return /* @__PURE__ */ React234.createElement(PanelContext_default.Provider, {
      value: {
        operationRef,
        hideHeader: picker === "time",
        onSelect: onContextSelect,
        open: mergedOpen,
        defaultOpenValue,
        onDateMouseEnter: onEnter,
        onDateMouseLeave: onLeave
      }
    }, /* @__PURE__ */ React234.createElement(PickerTrigger_default, {
      visible: mergedOpen,
      popupElement: panel,
      popupStyle,
      prefixCls,
      dropdownClassName,
      dropdownAlign,
      getPopupContainer,
      transitionName,
      popupPlacement,
      direction
    }, /* @__PURE__ */ React234.createElement("div", {
      ref: containerRef,
      className: (0, import_classnames61.default)(prefixCls, className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(prefixCls, "-focused"), focused), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames2)),
      style: style2,
      onMouseDown,
      onMouseUp,
      onMouseEnter,
      onMouseLeave,
      onContextMenu,
      onClick: onInternalClick
    }, /* @__PURE__ */ React234.createElement("div", {
      className: (0, import_classnames61.default)("".concat(prefixCls, "-input"), _defineProperty({}, "".concat(prefixCls, "-input-placeholder"), !!hoverValue)),
      ref: inputDivRef
    }, inputNode, suffixNode, mergedAllowClear && clearNode))));
  }
  var Picker = /* @__PURE__ */ function(_React$Component) {
    _inherits(Picker2, _React$Component);
    var _super = _createSuper(Picker2);
    function Picker2() {
      var _this;
      _classCallCheck(this, Picker2);
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty(_assertThisInitialized(_this), "pickerRef", /* @__PURE__ */ React234.createRef());
      _defineProperty(_assertThisInitialized(_this), "focus", function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.focus();
        }
      });
      _defineProperty(_assertThisInitialized(_this), "blur", function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.blur();
        }
      });
      return _this;
    }
    _createClass(Picker2, [{
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ React234.createElement(InnerPicker, _extends({}, this.props, {
          pickerRef: this.pickerRef
        }));
      }
    }]);
    return Picker2;
  }(React234.Component);
  var Picker_default = Picker;

  // node_modules/rc-picker/es/RangePicker.js
  var import_classnames62 = __toESM(require_classnames());
  var React238 = __toESM(require_react());
  var import_react69 = __toESM(require_react());

  // node_modules/rc-picker/es/hooks/useRangeDisabled.js
  var React235 = __toESM(require_react());
  function useRangeDisabled(_ref, firstTimeOpen) {
    var picker = _ref.picker, locale9 = _ref.locale, selectedValue = _ref.selectedValue, disabledDate = _ref.disabledDate, disabled = _ref.disabled, generateConfig2 = _ref.generateConfig;
    var startDate = getValue3(selectedValue, 0);
    var endDate = getValue3(selectedValue, 1);
    function weekFirstDate(date4) {
      return generateConfig2.locale.getWeekFirstDate(locale9.locale, date4);
    }
    function monthNumber(date4) {
      var year = generateConfig2.getYear(date4);
      var month = generateConfig2.getMonth(date4);
      return year * 100 + month;
    }
    function quarterNumber(date4) {
      var year = generateConfig2.getYear(date4);
      var quarter = getQuarter(generateConfig2, date4);
      return year * 10 + quarter;
    }
    var disabledStartDate = React235.useCallback(function(date4) {
      if (disabled[0] || disabledDate && disabledDate(date4)) {
        return true;
      }
      if (disabled[1] && endDate) {
        return !isSameDate(generateConfig2, date4, endDate) && generateConfig2.isAfter(date4, endDate);
      }
      if (!firstTimeOpen && endDate) {
        switch (picker) {
          case "quarter":
            return quarterNumber(date4) > quarterNumber(endDate);
          case "month":
            return monthNumber(date4) > monthNumber(endDate);
          case "week":
            return weekFirstDate(date4) > weekFirstDate(endDate);
          default:
            return !isSameDate(generateConfig2, date4, endDate) && generateConfig2.isAfter(date4, endDate);
        }
      }
      return false;
    }, [disabledDate, disabled[1], endDate, firstTimeOpen]);
    var disabledEndDate = React235.useCallback(function(date4) {
      if (disabled[1] || disabledDate && disabledDate(date4)) {
        return true;
      }
      if (disabled[0] && startDate) {
        return !isSameDate(generateConfig2, date4, endDate) && generateConfig2.isAfter(startDate, date4);
      }
      if (!firstTimeOpen && startDate) {
        switch (picker) {
          case "quarter":
            return quarterNumber(date4) < quarterNumber(startDate);
          case "month":
            return monthNumber(date4) < monthNumber(startDate);
          case "week":
            return weekFirstDate(date4) < weekFirstDate(startDate);
          default:
            return !isSameDate(generateConfig2, date4, startDate) && generateConfig2.isAfter(startDate, date4);
        }
      }
      return false;
    }, [disabledDate, disabled[0], startDate, firstTimeOpen]);
    return [disabledStartDate, disabledEndDate];
  }

  // node_modules/rc-picker/es/hooks/useRangeOpen.js
  var React236 = __toESM(require_react());
  function useRangeOpen(defaultOpen, open, activePickerIndex, changeOnBlur, needConfirmButton, startInputRef, endInputRef, startSelectedValue, endSelectedValue, disabled, onOpenChange) {
    var _React$useState = React236.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), firstTimeOpen = _React$useState2[0], setFirstTimeOpen = _React$useState2[1];
    var _useMergedState = useMergedState(defaultOpen || false, {
      value: open
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), afferentOpen = _useMergedState2[0], setAfferentOpen = _useMergedState2[1];
    var _useMergedState3 = useMergedState(defaultOpen || false, {
      value: open,
      onChange: function onChange(nextOpen) {
        onOpenChange === null || onOpenChange === void 0 || onOpenChange(nextOpen);
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedOpen = _useMergedState4[0], setMergedOpen = _useMergedState4[1];
    var _useMergedState5 = useMergedState(0, {
      value: activePickerIndex
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedActivePickerIndex = _useMergedState6[0], setMergedActivePickerIndex = _useMergedState6[1];
    var _React$useState3 = React236.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), nextActiveIndex = _React$useState4[0], setNextActiveIndex = _React$useState4[1];
    React236.useEffect(function() {
      if (mergedOpen) {
        setFirstTimeOpen(true);
      }
    }, [mergedOpen]);
    var queryNextIndex = function queryNextIndex2(index2) {
      return index2 === 0 ? 1 : 0;
    };
    var triggerOpen = useEvent(function(nextOpen, index2, source) {
      if (index2 === false) {
        setMergedOpen(nextOpen);
      } else if (nextOpen) {
        setMergedActivePickerIndex(index2);
        setMergedOpen(nextOpen);
        var nextIndex = queryNextIndex(index2);
        if (!mergedOpen || // Also set next index if next is empty
        ![startSelectedValue, endSelectedValue][nextIndex]) {
          setNextActiveIndex(nextIndex);
        } else {
          setFirstTimeOpen(false);
          if (nextActiveIndex !== null) {
            setNextActiveIndex(null);
          }
        }
      } else if (source === "confirm" || source === "blur" && changeOnBlur) {
        var customNextActiveIndex = afferentOpen && !needConfirmButton ? queryNextIndex(index2) : nextActiveIndex;
        if (customNextActiveIndex !== null) {
          setFirstTimeOpen(false);
          setMergedActivePickerIndex(customNextActiveIndex);
        }
        setNextActiveIndex(null);
        if (customNextActiveIndex !== null && !disabled[customNextActiveIndex]) {
          raf_default(function() {
            var _ref$current;
            var ref = [startInputRef, endInputRef][customNextActiveIndex];
            (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
          });
        } else {
          setMergedOpen(false);
        }
      } else {
        setMergedOpen(false);
        setAfferentOpen(false);
      }
    });
    return [mergedOpen, mergedActivePickerIndex, firstTimeOpen, triggerOpen];
  }

  // node_modules/rc-picker/es/hooks/useRangeViewDates.js
  var React237 = __toESM(require_react());
  function getStartEndDistance(startDate, endDate, picker, generateConfig2) {
    var startNext = getClosingViewDate(startDate, picker, generateConfig2, 1);
    function getDistance(compareFunc) {
      if (compareFunc(startDate, endDate)) {
        return "same";
      }
      if (compareFunc(startNext, endDate)) {
        return "closing";
      }
      return "far";
    }
    switch (picker) {
      case "year":
        return getDistance(function(start2, end) {
          return isSameDecade(generateConfig2, start2, end);
        });
      case "quarter":
      case "month":
        return getDistance(function(start2, end) {
          return isSameYear(generateConfig2, start2, end);
        });
      default:
        return getDistance(function(start2, end) {
          return isSameMonth(generateConfig2, start2, end);
        });
    }
  }
  function getRangeViewDate(values, index2, picker, generateConfig2) {
    var startDate = getValue3(values, 0);
    var endDate = getValue3(values, 1);
    if (index2 === 0) {
      return startDate;
    }
    if (startDate && endDate) {
      var distance = getStartEndDistance(startDate, endDate, picker, generateConfig2);
      switch (distance) {
        case "same":
          return startDate;
        case "closing":
          return startDate;
        default:
          return getClosingViewDate(endDate, picker, generateConfig2, -1);
      }
    }
    return startDate;
  }
  function useRangeViewDates(_ref) {
    var values = _ref.values, picker = _ref.picker, defaultDates = _ref.defaultDates, generateConfig2 = _ref.generateConfig;
    var _React$useState = React237.useState(function() {
      return [getValue3(defaultDates, 0), getValue3(defaultDates, 1)];
    }), _React$useState2 = _slicedToArray(_React$useState, 2), defaultViewDates = _React$useState2[0], setDefaultViewDates = _React$useState2[1];
    var _React$useState3 = React237.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), viewDates = _React$useState4[0], setInternalViewDates = _React$useState4[1];
    var startDate = getValue3(values, 0);
    var endDate = getValue3(values, 1);
    function getViewDate(index2) {
      if (defaultViewDates[index2]) {
        return defaultViewDates[index2];
      }
      return getValue3(viewDates, index2) || getRangeViewDate(values, index2, picker, generateConfig2) || startDate || endDate || generateConfig2.getNow();
    }
    function setViewDate(viewDate, index2) {
      if (viewDate) {
        var newViewDates = updateValues(viewDates, viewDate, index2);
        setDefaultViewDates(
          // Should always be an array
          updateValues(defaultViewDates, null, index2) || [null, null]
        );
        var anotherIndex = (index2 + 1) % 2;
        if (!getValue3(values, anotherIndex)) {
          newViewDates = updateValues(newViewDates, viewDate, anotherIndex);
        }
        setInternalViewDates(newViewDates);
      } else if (startDate || endDate) {
        setInternalViewDates(null);
      }
    }
    return [getViewDate, setViewDate];
  }

  // node_modules/rc-picker/es/RangePicker.js
  function reorderValues(values, generateConfig2) {
    if (values && values[0] && values[1] && generateConfig2.isAfter(values[0], values[1])) {
      return [values[1], values[0]];
    }
    return values;
  }
  function canValueTrigger(value, index2, disabled, allowEmpty) {
    if (value) {
      return true;
    }
    if (allowEmpty && allowEmpty[index2]) {
      return true;
    }
    if (disabled[(index2 + 1) % 2]) {
      return true;
    }
    return false;
  }
  function InnerRangePicker(props) {
    var _classNames2, _classNames3, _classNames4;
    var _ref = props, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-picker" : _ref$prefixCls, id = _ref.id, style2 = _ref.style, className = _ref.className, popupStyle = _ref.popupStyle, dropdownClassName = _ref.dropdownClassName, transitionName = _ref.transitionName, dropdownAlign = _ref.dropdownAlign, getPopupContainer = _ref.getPopupContainer, generateConfig2 = _ref.generateConfig, locale9 = _ref.locale, placeholder = _ref.placeholder, autoFocus = _ref.autoFocus, disabled = _ref.disabled, format3 = _ref.format, _ref$picker = _ref.picker, picker = _ref$picker === void 0 ? "date" : _ref$picker, showTime = _ref.showTime, use12Hours = _ref.use12Hours, _ref$separator = _ref.separator, separator = _ref$separator === void 0 ? "~" : _ref$separator, value = _ref.value, defaultValue = _ref.defaultValue, defaultPickerValue = _ref.defaultPickerValue, open = _ref.open, defaultOpen = _ref.defaultOpen, disabledDate = _ref.disabledDate, _disabledTime = _ref.disabledTime, dateRender = _ref.dateRender, monthCellRender = _ref.monthCellRender, cellRender = _ref.cellRender, panelRender = _ref.panelRender, presets = _ref.presets, ranges = _ref.ranges, allowEmpty = _ref.allowEmpty, allowClear = _ref.allowClear, suffixIcon = _ref.suffixIcon, clearIcon = _ref.clearIcon, pickerRef = _ref.pickerRef, inputReadOnly = _ref.inputReadOnly, mode = _ref.mode, renderExtraFooter = _ref.renderExtraFooter, onChange = _ref.onChange, onOpenChange = _ref.onOpenChange, onPanelChange = _ref.onPanelChange, onCalendarChange = _ref.onCalendarChange, _onFocus = _ref.onFocus, onBlur = _ref.onBlur, onMouseDown = _ref.onMouseDown, onMouseUp = _ref.onMouseUp, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave, onClick = _ref.onClick, _onOk = _ref.onOk, _onKeyDown = _ref.onKeyDown, components = _ref.components, order = _ref.order, direction = _ref.direction, activePickerIndex = _ref.activePickerIndex, _ref$autoComplete = _ref.autoComplete, autoComplete = _ref$autoComplete === void 0 ? "off" : _ref$autoComplete, changeOnBlur = _ref.changeOnBlur;
    var needConfirmButton = picker === "date" && !!showTime || picker === "time";
    var containerRef = (0, import_react69.useRef)(null);
    var panelDivRef = (0, import_react69.useRef)(null);
    var startInputDivRef = (0, import_react69.useRef)(null);
    var endInputDivRef = (0, import_react69.useRef)(null);
    var separatorRef = (0, import_react69.useRef)(null);
    var startInputRef = (0, import_react69.useRef)(null);
    var endInputRef = (0, import_react69.useRef)(null);
    var arrowRef = (0, import_react69.useRef)(null);
    if (true) {
      legacyPropsWarning(props);
    }
    var formatList = toArray5(getDefaultFormat(format3, picker, showTime, use12Hours));
    var formatDateValue = function formatDateValue2(values, index2) {
      return values && values[index2] ? formatValue(values[index2], {
        generateConfig: generateConfig2,
        locale: locale9,
        format: formatList[0]
      }) : "";
    };
    var operationRef = (0, import_react69.useRef)(null);
    var mergedDisabled = React238.useMemo(function() {
      if (Array.isArray(disabled)) {
        return disabled;
      }
      return [disabled || false, disabled || false];
    }, [disabled]);
    var _useMergedState = useMergedState(null, {
      value,
      defaultValue,
      postState: function postState(values) {
        return picker === "time" && !order ? values : reorderValues(values, generateConfig2);
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setInnerValue = _useMergedState2[1];
    var _useRangeViewDates = useRangeViewDates({
      values: mergedValue,
      picker,
      defaultDates: defaultPickerValue,
      generateConfig: generateConfig2
    }), _useRangeViewDates2 = _slicedToArray(_useRangeViewDates, 2), getViewDate = _useRangeViewDates2[0], setViewDate = _useRangeViewDates2[1];
    var _useMergedState3 = useMergedState(mergedValue, {
      postState: function postState(values) {
        var postValues = values;
        if (mergedDisabled[0] && mergedDisabled[1]) {
          return postValues;
        }
        for (var i = 0; i < 2; i += 1) {
          if (mergedDisabled[i] && !postValues && !getValue3(postValues, i) && !getValue3(allowEmpty, i)) {
            postValues = updateValues(postValues, generateConfig2.getNow(), i);
          }
        }
        return postValues;
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), selectedValue = _useMergedState4[0], setSelectedValue = _useMergedState4[1];
    var _useMergedState5 = useMergedState([picker, picker], {
      value: mode
    }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedModes = _useMergedState6[0], setInnerModes = _useMergedState6[1];
    (0, import_react69.useEffect)(function() {
      setInnerModes([picker, picker]);
    }, [picker]);
    var triggerModesChange = function triggerModesChange2(modes, values) {
      setInnerModes(modes);
      if (onPanelChange) {
        onPanelChange(values, modes);
      }
    };
    var _useRangeOpen = useRangeOpen(defaultOpen, open, activePickerIndex, changeOnBlur, needConfirmButton, startInputRef, endInputRef, getValue3(selectedValue, 0), getValue3(selectedValue, 1), mergedDisabled, onOpenChange), _useRangeOpen2 = _slicedToArray(_useRangeOpen, 4), mergedOpen = _useRangeOpen2[0], mergedActivePickerIndex = _useRangeOpen2[1], firstTimeOpen = _useRangeOpen2[2], _triggerOpen = _useRangeOpen2[3];
    var startOpen = mergedOpen && mergedActivePickerIndex === 0;
    var endOpen = mergedOpen && mergedActivePickerIndex === 1;
    var _useRangeDisabled = useRangeDisabled({
      picker,
      selectedValue,
      locale: locale9,
      disabled: mergedDisabled,
      disabledDate,
      generateConfig: generateConfig2
    }, !mergedOpen || firstTimeOpen), _useRangeDisabled2 = _slicedToArray(_useRangeDisabled, 2), disabledStartDate = _useRangeDisabled2[0], disabledEndDate = _useRangeDisabled2[1];
    var _useState = (0, import_react69.useState)(0), _useState2 = _slicedToArray(_useState, 2), popupMinWidth = _useState2[0], setPopupMinWidth = _useState2[1];
    (0, import_react69.useEffect)(function() {
      if (!mergedOpen && containerRef.current) {
        setPopupMinWidth(containerRef.current.offsetWidth);
      }
    }, [mergedOpen]);
    function triggerOpenAndFocus(index2) {
      _triggerOpen(true, index2, "open");
      raf_default(function() {
        var _inputRef$current;
        var inputRef = [startInputRef, endInputRef][index2];
        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
      }, 0);
    }
    function triggerChange(newValue, sourceIndex, triggerCalendarChangeOnly) {
      var values = newValue;
      var startValue = getValue3(values, 0);
      var endValue = getValue3(values, 1);
      if (startValue && endValue && generateConfig2.isAfter(startValue, endValue)) {
        if (
          // WeekPicker only compare week
          picker === "week" && !isSameWeek(generateConfig2, locale9.locale, startValue, endValue) || // QuotaPicker only compare week
          picker === "quarter" && !isSameQuarter(generateConfig2, startValue, endValue) || // Other non-TimePicker compare date
          picker !== "week" && picker !== "quarter" && picker !== "time" && !isSameDate(generateConfig2, startValue, endValue)
        ) {
          if (sourceIndex === 0) {
            values = [startValue, null];
            endValue = null;
          } else {
            startValue = null;
            values = [null, endValue];
          }
        } else if (picker !== "time" || order !== false) {
          values = reorderValues(values, generateConfig2);
        }
      }
      setSelectedValue(values);
      var startStr2 = formatDateValue(values, 0);
      var endStr2 = formatDateValue(values, 1);
      if (onCalendarChange) {
        var _info = {
          range: sourceIndex === 0 ? "start" : "end"
        };
        onCalendarChange(values, [startStr2, endStr2], _info);
      }
      if (!triggerCalendarChangeOnly) {
        var canStartValueTrigger = canValueTrigger(startValue, 0, mergedDisabled, allowEmpty);
        var canEndValueTrigger = canValueTrigger(endValue, 1, mergedDisabled, allowEmpty);
        var canTrigger = values === null || canStartValueTrigger && canEndValueTrigger;
        if (canTrigger) {
          setInnerValue(values);
          if (onChange && (!isEqual2(generateConfig2, getValue3(mergedValue, 0), startValue) || !isEqual2(generateConfig2, getValue3(mergedValue, 1), endValue))) {
            onChange(values, [startStr2, endStr2]);
          }
        }
      }
    }
    var forwardKeyDown = function forwardKeyDown2(e3) {
      if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {
        return operationRef.current.onKeyDown(e3);
      }
      {
        warning_default(false, "Picker not correct forward KeyDown operation. Please help to fire issue about this.");
        return false;
      }
    };
    var sharedTextHooksProps = {
      formatList,
      generateConfig: generateConfig2,
      locale: locale9
    };
    var _useValueTexts = useValueTexts(getValue3(selectedValue, 0), sharedTextHooksProps), _useValueTexts2 = _slicedToArray(_useValueTexts, 2), startValueTexts = _useValueTexts2[0], firstStartValueText = _useValueTexts2[1];
    var _useValueTexts3 = useValueTexts(getValue3(selectedValue, 1), sharedTextHooksProps), _useValueTexts4 = _slicedToArray(_useValueTexts3, 2), endValueTexts = _useValueTexts4[0], firstEndValueText = _useValueTexts4[1];
    var _onTextChange = function onTextChange(newText, index2) {
      var inputDate = parseValue(newText, {
        locale: locale9,
        formatList,
        generateConfig: generateConfig2
      });
      var disabledFunc = index2 === 0 ? disabledStartDate : disabledEndDate;
      if (inputDate && !disabledFunc(inputDate)) {
        setSelectedValue(updateValues(selectedValue, inputDate, index2));
        setViewDate(inputDate, index2);
      }
    };
    var _useTextValueMapping = useTextValueMapping({
      valueTexts: startValueTexts,
      onTextChange: function onTextChange(newText) {
        return _onTextChange(newText, 0);
      }
    }), _useTextValueMapping2 = _slicedToArray(_useTextValueMapping, 3), startText = _useTextValueMapping2[0], triggerStartTextChange = _useTextValueMapping2[1], resetStartText = _useTextValueMapping2[2];
    var _useTextValueMapping3 = useTextValueMapping({
      valueTexts: endValueTexts,
      onTextChange: function onTextChange(newText) {
        return _onTextChange(newText, 1);
      }
    }), _useTextValueMapping4 = _slicedToArray(_useTextValueMapping3, 3), endText = _useTextValueMapping4[0], triggerEndTextChange = _useTextValueMapping4[1], resetEndText = _useTextValueMapping4[2];
    var _useState3 = (0, import_react69.useState)(null), _useState4 = _slicedToArray(_useState3, 2), rangeHoverValue = _useState4[0], setRangeHoverValue = _useState4[1];
    var _useState5 = (0, import_react69.useState)(null), _useState6 = _slicedToArray(_useState5, 2), hoverRangedValue = _useState6[0], setHoverRangedValue = _useState6[1];
    var _useHoverValue = useHoverValue(startText, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale9
    }), _useHoverValue2 = _slicedToArray(_useHoverValue, 3), startHoverValue = _useHoverValue2[0], onStartEnter = _useHoverValue2[1], onStartLeave = _useHoverValue2[2];
    var _useHoverValue3 = useHoverValue(endText, {
      formatList,
      generateConfig: generateConfig2,
      locale: locale9
    }), _useHoverValue4 = _slicedToArray(_useHoverValue3, 3), endHoverValue = _useHoverValue4[0], onEndEnter = _useHoverValue4[1], onEndLeave = _useHoverValue4[2];
    var onDateMouseEnter = function onDateMouseEnter2(date4) {
      setHoverRangedValue(updateValues(selectedValue, date4, mergedActivePickerIndex));
      if (mergedActivePickerIndex === 0) {
        onStartEnter(date4);
      } else {
        onEndEnter(date4);
      }
    };
    var onDateMouseLeave = function onDateMouseLeave2() {
      setHoverRangedValue(updateValues(selectedValue, null, mergedActivePickerIndex));
      if (mergedActivePickerIndex === 0) {
        onStartLeave();
      } else {
        onEndLeave();
      }
    };
    var _React$useState = React238.useState(mergedOpen), _React$useState2 = _slicedToArray(_React$useState, 2), delayOpen = _React$useState2[0], setDelayOpen = _React$useState2[1];
    React238.useEffect(function() {
      setDelayOpen(mergedOpen);
    }, [mergedOpen]);
    var onInternalBlur = function onInternalBlur2(e3) {
      if (delayOpen) {
        if (needConfirmButton) {
          var needTriggerIndex = mergedActivePickerIndex ? 0 : 1;
          var selectedIndexValue = getValue3(selectedValue, needTriggerIndex);
          if (selectedIndexValue) {
            triggerChange(selectedValue, needTriggerIndex, true);
          }
        } else if (changeOnBlur) {
          var _selectedIndexValue = getValue3(selectedValue, mergedActivePickerIndex);
          if (_selectedIndexValue) {
            triggerChange(selectedValue, mergedActivePickerIndex);
          }
        }
      }
      return onBlur === null || onBlur === void 0 ? void 0 : onBlur(e3);
    };
    var getSharedInputHookProps = function getSharedInputHookProps2(index2, resetText) {
      return {
        blurToCancel: !changeOnBlur && needConfirmButton,
        changeOnBlur,
        forwardKeyDown,
        onBlur: onInternalBlur,
        isClickOutside: function isClickOutside(target) {
          var elementsRefs = [startInputDivRef.current, endInputDivRef.current, containerRef.current];
          return !elementsContains([].concat(_toConsumableArray(needConfirmButton ? [elementsRefs[mergedActivePickerIndex]] : elementsRefs), [panelDivRef.current]), target);
        },
        onFocus: function onFocus(e3) {
          if (_onFocus) {
            _onFocus(e3);
          }
        },
        triggerOpen: function triggerOpen(newOpen) {
          if (newOpen) {
            _triggerOpen(newOpen, index2, "open");
          } else {
            _triggerOpen(
              newOpen,
              // Close directly if no selected value provided
              getValue3(selectedValue, index2) ? index2 : false,
              "blur"
            );
          }
        },
        onSubmit: function onSubmit() {
          if (
            // When user typing disabledDate with keyboard and enter, this value will be empty
            !selectedValue || // Normal disabled check
            disabledDate && disabledDate(selectedValue[index2])
          ) {
            return false;
          }
          triggerChange(selectedValue, index2);
          resetText();
          _triggerOpen(false, mergedActivePickerIndex, "confirm");
        },
        onCancel: function onCancel() {
          _triggerOpen(false, index2, "cancel");
          setSelectedValue(mergedValue);
          resetText();
        }
      };
    };
    var sharedPickerInput = {
      onKeyDown: function onKeyDown2(e3, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 || _onKeyDown(e3, preventDefault);
      }
    };
    var _usePickerInput = usePickerInput(_objectSpread2(_objectSpread2({}, getSharedInputHookProps(0, resetStartText)), {}, {
      open: startOpen,
      value: startText
    }, sharedPickerInput)), _usePickerInput2 = _slicedToArray(_usePickerInput, 2), startInputProps = _usePickerInput2[0], _usePickerInput2$ = _usePickerInput2[1], startFocused = _usePickerInput2$.focused, startTyping = _usePickerInput2$.typing;
    var _usePickerInput3 = usePickerInput(_objectSpread2(_objectSpread2({}, getSharedInputHookProps(1, resetEndText)), {}, {
      open: endOpen,
      value: endText
    }, sharedPickerInput)), _usePickerInput4 = _slicedToArray(_usePickerInput3, 2), endInputProps = _usePickerInput4[0], _usePickerInput4$ = _usePickerInput4[1], endFocused = _usePickerInput4$.focused, endTyping = _usePickerInput4$.typing;
    var onPickerClick = function onPickerClick2(e3) {
      if (onClick) {
        onClick(e3);
      }
      if (!mergedOpen && !startInputRef.current.contains(e3.target) && !endInputRef.current.contains(e3.target)) {
        if (!mergedDisabled[0]) {
          triggerOpenAndFocus(0);
        } else if (!mergedDisabled[1]) {
          triggerOpenAndFocus(1);
        }
      }
    };
    var onPickerMouseDown = function onPickerMouseDown2(e3) {
      if (onMouseDown) {
        onMouseDown(e3);
      }
      if (mergedOpen && (startFocused || endFocused) && !startInputRef.current.contains(e3.target) && !endInputRef.current.contains(e3.target)) {
        e3.preventDefault();
      }
    };
    var startStr = mergedValue && mergedValue[0] ? formatValue(mergedValue[0], {
      locale: locale9,
      format: "YYYYMMDDHHmmss",
      generateConfig: generateConfig2
    }) : "";
    var endStr = mergedValue && mergedValue[1] ? formatValue(mergedValue[1], {
      locale: locale9,
      format: "YYYYMMDDHHmmss",
      generateConfig: generateConfig2
    }) : "";
    (0, import_react69.useEffect)(function() {
      if (!mergedOpen) {
        setSelectedValue(mergedValue);
        if (!startValueTexts.length || startValueTexts[0] === "") {
          triggerStartTextChange("");
        } else if (firstStartValueText !== startText) {
          resetStartText();
        }
        if (!endValueTexts.length || endValueTexts[0] === "") {
          triggerEndTextChange("");
        } else if (firstEndValueText !== endText) {
          resetEndText();
        }
      }
    }, [mergedOpen, startValueTexts, endValueTexts]);
    (0, import_react69.useEffect)(function() {
      setSelectedValue(mergedValue);
    }, [startStr, endStr]);
    var mergedCellRender = useCellRender({
      cellRender,
      monthCellRender,
      dateRender
    });
    var panelDateRender = React238.useMemo(function() {
      if (!mergedCellRender)
        return void 0;
      return function(date4, info) {
        return mergedCellRender(date4, _objectSpread2(_objectSpread2({}, info), {}, {
          range: mergedActivePickerIndex ? "end" : "start"
        }));
      };
    }, [mergedActivePickerIndex, mergedCellRender]);
    if (true) {
      if (value && Array.isArray(disabled) && (getValue3(disabled, 0) && !getValue3(value, 0) || getValue3(disabled, 1) && !getValue3(value, 1))) {
        warning_default(false, "`disabled` should not set with empty `value`. You should set `allowEmpty` or `value` instead.");
      }
      warning_default(!dateRender, "'dateRender' is deprecated. Please use 'cellRender' instead.");
      warning_default(!monthCellRender, "'monthCellRender' is deprecated. Please use 'cellRender' instead.");
      warning_default(!clearIcon, "`clearIcon` will be removed in future. Please use `allowClear` instead.");
    }
    if (pickerRef) {
      pickerRef.current = {
        focus: function focus() {
          if (startInputRef.current) {
            startInputRef.current.focus();
          }
        },
        blur: function blur() {
          if (startInputRef.current) {
            startInputRef.current.blur();
          }
          if (endInputRef.current) {
            endInputRef.current.blur();
          }
        }
      };
    }
    var presetList = usePresets(presets, ranges);
    function renderPanel() {
      var panelPosition = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var panelProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var panelHoverRangedValue = null;
      if (mergedOpen && hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1] && generateConfig2.isAfter(hoverRangedValue[1], hoverRangedValue[0])) {
        panelHoverRangedValue = hoverRangedValue;
      }
      var panelShowTime = showTime;
      if (showTime && _typeof(showTime) === "object" && showTime.defaultValue) {
        var timeDefaultValues = showTime.defaultValue;
        panelShowTime = _objectSpread2(_objectSpread2({}, showTime), {}, {
          defaultValue: getValue3(timeDefaultValues, mergedActivePickerIndex) || void 0
        });
      }
      return /* @__PURE__ */ React238.createElement(RangeContext_default.Provider, {
        value: {
          inRange: true,
          panelPosition,
          rangedValue: rangeHoverValue || selectedValue,
          hoverRangedValue: panelHoverRangedValue
        }
      }, /* @__PURE__ */ React238.createElement(PickerPanel_default, _extends({}, props, panelProps, {
        cellRender: panelDateRender,
        showTime: panelShowTime,
        mode: mergedModes[mergedActivePickerIndex],
        generateConfig: generateConfig2,
        style: void 0,
        direction,
        disabledDate: mergedActivePickerIndex === 0 ? disabledStartDate : disabledEndDate,
        disabledTime: function disabledTime(date4) {
          if (_disabledTime) {
            return _disabledTime(date4, mergedActivePickerIndex === 0 ? "start" : "end");
          }
          return false;
        },
        className: (0, import_classnames62.default)(_defineProperty({}, "".concat(prefixCls, "-panel-focused"), mergedActivePickerIndex === 0 ? !startTyping : !endTyping)),
        value: getValue3(selectedValue, mergedActivePickerIndex),
        locale: locale9,
        tabIndex: -1,
        onPanelChange: function onPanelChange2(date4, newMode) {
          if (mergedActivePickerIndex === 0) {
            onStartLeave(true);
          }
          if (mergedActivePickerIndex === 1) {
            onEndLeave(true);
          }
          triggerModesChange(updateValues(mergedModes, newMode, mergedActivePickerIndex), updateValues(selectedValue, date4, mergedActivePickerIndex));
          var viewDate = date4;
          if (panelPosition === "right" && mergedModes[mergedActivePickerIndex] === newMode) {
            viewDate = getClosingViewDate(viewDate, newMode, generateConfig2, -1);
          }
          setViewDate(viewDate, mergedActivePickerIndex);
        },
        onOk: null,
        onSelect: void 0,
        onChange: void 0,
        defaultValue: mergedActivePickerIndex === 0 ? getValue3(selectedValue, 1) : getValue3(selectedValue, 0)
        // defaultPickerValue={undefined}
      })));
    }
    var arrowLeft = 0;
    var panelLeft = 0;
    if (mergedActivePickerIndex && startInputDivRef.current && separatorRef.current && panelDivRef.current && arrowRef.current) {
      arrowLeft = startInputDivRef.current.offsetWidth + separatorRef.current.offsetWidth;
      var arrowMarginLeft = arrowRef.current.offsetLeft > arrowLeft ? arrowRef.current.offsetLeft - arrowLeft : arrowRef.current.offsetLeft;
      var panelWidth = panelDivRef.current.offsetWidth;
      var arrowWidth = arrowRef.current.offsetWidth;
      if (panelWidth && arrowWidth && arrowLeft > panelWidth - arrowWidth - (direction === "rtl" ? 0 : arrowMarginLeft)) {
        panelLeft = arrowLeft;
      }
    }
    var arrowPositionStyle = direction === "rtl" ? {
      right: arrowLeft
    } : {
      left: arrowLeft
    };
    function renderPanels() {
      var panels;
      var extraNode = getExtraFooter(prefixCls, mergedModes[mergedActivePickerIndex], renderExtraFooter);
      var rangesNode = getRanges({
        prefixCls,
        components,
        needConfirmButton,
        okDisabled: !getValue3(selectedValue, mergedActivePickerIndex) || disabledDate && disabledDate(selectedValue[mergedActivePickerIndex]),
        locale: locale9,
        // rangeList,
        onOk: function onOk() {
          var selectedIndexValue = getValue3(selectedValue, mergedActivePickerIndex);
          if (selectedIndexValue) {
            triggerChange(selectedValue, mergedActivePickerIndex);
            _onOk === null || _onOk === void 0 || _onOk(selectedValue);
            _triggerOpen(false, mergedActivePickerIndex, "confirm");
          }
        }
      });
      if (picker !== "time" && !showTime) {
        var viewDate = getViewDate(mergedActivePickerIndex);
        var nextViewDate = getClosingViewDate(viewDate, picker, generateConfig2);
        var currentMode = mergedModes[mergedActivePickerIndex];
        var showDoublePanel = currentMode === picker;
        var leftPanel = renderPanel(showDoublePanel ? "left" : false, {
          pickerValue: viewDate,
          onPickerValueChange: function onPickerValueChange(newViewDate) {
            setViewDate(newViewDate, mergedActivePickerIndex);
          }
        });
        var rightPanel = renderPanel("right", {
          pickerValue: nextViewDate,
          onPickerValueChange: function onPickerValueChange(newViewDate) {
            setViewDate(getClosingViewDate(newViewDate, picker, generateConfig2, -1), mergedActivePickerIndex);
          }
        });
        if (direction === "rtl") {
          panels = /* @__PURE__ */ React238.createElement(React238.Fragment, null, rightPanel, showDoublePanel && leftPanel);
        } else {
          panels = /* @__PURE__ */ React238.createElement(React238.Fragment, null, leftPanel, showDoublePanel && rightPanel);
        }
      } else {
        panels = renderPanel();
      }
      var mergedNodes = /* @__PURE__ */ React238.createElement("div", {
        className: "".concat(prefixCls, "-panel-layout")
      }, /* @__PURE__ */ React238.createElement(PresetPanel, {
        prefixCls,
        presets: presetList,
        onClick: function onClick2(nextValue) {
          triggerChange(nextValue, null);
          _triggerOpen(false, mergedActivePickerIndex, "preset");
        },
        onHover: function onHover(hoverValue) {
          setRangeHoverValue(hoverValue);
        }
      }), /* @__PURE__ */ React238.createElement("div", null, /* @__PURE__ */ React238.createElement("div", {
        className: "".concat(prefixCls, "-panels")
      }, panels), (extraNode || rangesNode) && /* @__PURE__ */ React238.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, extraNode, rangesNode)));
      if (panelRender) {
        mergedNodes = panelRender(mergedNodes);
      }
      return /* @__PURE__ */ React238.createElement("div", {
        className: "".concat(prefixCls, "-panel-container"),
        style: {
          marginLeft: panelLeft
        },
        ref: panelDivRef,
        onMouseDown: function onMouseDown2(e3) {
          e3.preventDefault();
        }
      }, mergedNodes);
    }
    var rangePanel = /* @__PURE__ */ React238.createElement("div", {
      className: (0, import_classnames62.default)("".concat(prefixCls, "-range-wrapper"), "".concat(prefixCls, "-").concat(picker, "-range-wrapper")),
      style: {
        minWidth: popupMinWidth
      }
    }, /* @__PURE__ */ React238.createElement("div", {
      ref: arrowRef,
      className: "".concat(prefixCls, "-range-arrow"),
      style: arrowPositionStyle
    }), renderPanels());
    var suffixNode;
    if (suffixIcon) {
      suffixNode = /* @__PURE__ */ React238.createElement("span", {
        className: "".concat(prefixCls, "-suffix"),
        onMouseDown: function onMouseDown2(e3) {
          e3.preventDefault();
        }
      }, suffixIcon);
    }
    var mergedClearIcon = getClearIcon(prefixCls, allowClear, clearIcon);
    var clearNode = /* @__PURE__ */ React238.createElement("span", {
      onMouseDown: function onMouseDown2(e3) {
        e3.preventDefault();
        e3.stopPropagation();
      },
      onMouseUp: function onMouseUp2(e3) {
        e3.preventDefault();
        e3.stopPropagation();
        var values = mergedValue;
        if (!mergedDisabled[0]) {
          values = updateValues(values, null, 0);
        }
        if (!mergedDisabled[1]) {
          values = updateValues(values, null, 1);
        }
        triggerChange(values, null);
        _triggerOpen(false, mergedActivePickerIndex, "clear");
      },
      className: "".concat(prefixCls, "-clear"),
      role: "button"
    }, mergedClearIcon);
    var mergedAllowClear = allowClear && (getValue3(mergedValue, 0) && !mergedDisabled[0] || getValue3(mergedValue, 1) && !mergedDisabled[1]);
    var inputSharedProps = {
      size: getInputSize(picker, formatList[0], generateConfig2)
    };
    var activeBarLeft = 0;
    var activeBarWidth = 0;
    if (startInputDivRef.current && endInputDivRef.current && separatorRef.current) {
      if (mergedActivePickerIndex === 0) {
        activeBarWidth = startInputDivRef.current.offsetWidth;
      } else {
        activeBarLeft = arrowLeft;
        activeBarWidth = endInputDivRef.current.offsetWidth;
      }
    }
    var activeBarPositionStyle = direction === "rtl" ? {
      right: activeBarLeft
    } : {
      left: activeBarLeft
    };
    var onContextSelect = function onContextSelect2(date4, type4) {
      var values = updateValues(selectedValue, date4, mergedActivePickerIndex);
      if (type4 === "submit" || type4 !== "key" && !needConfirmButton) {
        triggerChange(values, mergedActivePickerIndex);
        if (mergedActivePickerIndex === 0) {
          onStartLeave();
        } else {
          onEndLeave();
        }
        var nextActivePickerIndex = mergedActivePickerIndex === 0 ? 1 : 0;
        if (mergedDisabled[nextActivePickerIndex]) {
          _triggerOpen(false, false, "confirm");
        } else {
          _triggerOpen(false, mergedActivePickerIndex, "confirm");
        }
      } else {
        setSelectedValue(values);
      }
    };
    return /* @__PURE__ */ React238.createElement(PanelContext_default.Provider, {
      value: {
        operationRef,
        hideHeader: picker === "time",
        onDateMouseEnter,
        onDateMouseLeave,
        hideRanges: true,
        onSelect: onContextSelect,
        open: mergedOpen
      }
    }, /* @__PURE__ */ React238.createElement(PickerTrigger_default, {
      visible: mergedOpen,
      popupElement: rangePanel,
      popupStyle,
      prefixCls,
      dropdownClassName,
      dropdownAlign,
      getPopupContainer,
      transitionName,
      range: true,
      direction
    }, /* @__PURE__ */ React238.createElement("div", _extends({
      ref: containerRef,
      className: (0, import_classnames62.default)(prefixCls, "".concat(prefixCls, "-range"), className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-disabled"), mergedDisabled[0] && mergedDisabled[1]), _defineProperty(_classNames2, "".concat(prefixCls, "-focused"), mergedActivePickerIndex === 0 ? startFocused : endFocused), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames2)),
      style: style2,
      onClick: onPickerClick,
      onMouseEnter,
      onMouseLeave,
      onMouseDown: onPickerMouseDown,
      onMouseUp
    }, pickAttrs(props, {
      aria: true,
      data: true
    })), /* @__PURE__ */ React238.createElement("div", {
      className: (0, import_classnames62.default)("".concat(prefixCls, "-input"), (_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-input-active"), mergedActivePickerIndex === 0), _defineProperty(_classNames3, "".concat(prefixCls, "-input-placeholder"), !!startHoverValue), _classNames3)),
      ref: startInputDivRef
    }, /* @__PURE__ */ React238.createElement("input", _extends({
      id,
      disabled: mergedDisabled[0],
      readOnly: inputReadOnly || typeof formatList[0] === "function" || !startTyping,
      value: startHoverValue || startText,
      onChange: function onChange2(e3) {
        triggerStartTextChange(e3.target.value);
      },
      autoFocus,
      placeholder: getValue3(placeholder, 0) || "",
      ref: startInputRef
    }, startInputProps, inputSharedProps, {
      autoComplete
    }))), /* @__PURE__ */ React238.createElement("div", {
      className: "".concat(prefixCls, "-range-separator"),
      ref: separatorRef
    }, separator), /* @__PURE__ */ React238.createElement("div", {
      className: (0, import_classnames62.default)("".concat(prefixCls, "-input"), (_classNames4 = {}, _defineProperty(_classNames4, "".concat(prefixCls, "-input-active"), mergedActivePickerIndex === 1), _defineProperty(_classNames4, "".concat(prefixCls, "-input-placeholder"), !!endHoverValue), _classNames4)),
      ref: endInputDivRef
    }, /* @__PURE__ */ React238.createElement("input", _extends({
      disabled: mergedDisabled[1],
      readOnly: inputReadOnly || typeof formatList[0] === "function" || !endTyping,
      value: endHoverValue || endText,
      onChange: function onChange2(e3) {
        triggerEndTextChange(e3.target.value);
      },
      placeholder: getValue3(placeholder, 1) || "",
      ref: endInputRef
    }, endInputProps, inputSharedProps, {
      autoComplete
    }))), /* @__PURE__ */ React238.createElement("div", {
      className: "".concat(prefixCls, "-active-bar"),
      style: _objectSpread2(_objectSpread2({}, activeBarPositionStyle), {}, {
        width: activeBarWidth,
        position: "absolute"
      })
    }), suffixNode, mergedAllowClear && clearNode)));
  }
  var RangePicker = /* @__PURE__ */ function(_React$Component) {
    _inherits(RangePicker2, _React$Component);
    var _super = _createSuper(RangePicker2);
    function RangePicker2() {
      var _this;
      _classCallCheck(this, RangePicker2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty(_assertThisInitialized(_this), "pickerRef", /* @__PURE__ */ React238.createRef());
      _defineProperty(_assertThisInitialized(_this), "focus", function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.focus();
        }
      });
      _defineProperty(_assertThisInitialized(_this), "blur", function() {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.blur();
        }
      });
      return _this;
    }
    _createClass(RangePicker2, [{
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ React238.createElement(InnerRangePicker, _extends({}, this.props, {
          pickerRef: this.pickerRef
        }));
      }
    }]);
    return RangePicker2;
  }(React238.Component);
  var RangePicker_default = RangePicker;

  // node_modules/rc-picker/es/index.js
  var es_default13 = Picker_default;

  // node_modules/antd/es/radio/group.js
  var React242 = __toESM(require_react());
  var import_classnames65 = __toESM(require_classnames());

  // node_modules/antd/es/radio/context.js
  var React239 = __toESM(require_react());
  var RadioGroupContext = /* @__PURE__ */ React239.createContext(null);
  var RadioGroupContextProvider = RadioGroupContext.Provider;
  var context_default3 = RadioGroupContext;
  var RadioOptionTypeContext = /* @__PURE__ */ React239.createContext(null);
  var RadioOptionTypeContextProvider = RadioOptionTypeContext.Provider;

  // node_modules/antd/es/radio/radio.js
  var React241 = __toESM(require_react());
  var import_classnames64 = __toESM(require_classnames());

  // node_modules/rc-checkbox/es/index.js
  var import_classnames63 = __toESM(require_classnames());
  var React240 = __toESM(require_react());
  var import_react70 = __toESM(require_react());
  var _excluded35 = ["prefixCls", "className", "style", "checked", "disabled", "defaultChecked", "type", "title", "onChange"];
  var Checkbox = /* @__PURE__ */ (0, import_react70.forwardRef)(function(props, ref) {
    var _classNames;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-checkbox" : _props$prefixCls, className = props.className, style2 = props.style, checked = props.checked, disabled = props.disabled, _props$defaultChecked = props.defaultChecked, defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked, _props$type = props.type, type4 = _props$type === void 0 ? "checkbox" : _props$type, title = props.title, onChange = props.onChange, inputProps = _objectWithoutProperties(props, _excluded35);
    var inputRef = (0, import_react70.useRef)(null);
    var _useMergedState = useMergedState(defaultChecked, {
      value: checked
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), rawValue = _useMergedState2[0], setRawValue = _useMergedState2[1];
    (0, import_react70.useImperativeHandle)(ref, function() {
      return {
        focus: function focus() {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
        },
        blur: function blur() {
          var _inputRef$current2;
          (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();
        },
        input: inputRef.current
      };
    });
    var classString = (0, import_classnames63.default)(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-checked"), rawValue), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
    var handleChange = function handleChange2(e3) {
      if (disabled) {
        return;
      }
      if (!("checked" in props)) {
        setRawValue(e3.target.checked);
      }
      onChange === null || onChange === void 0 ? void 0 : onChange({
        target: _objectSpread2(_objectSpread2({}, props), {}, {
          type: type4,
          checked: e3.target.checked
        }),
        stopPropagation: function stopPropagation() {
          e3.stopPropagation();
        },
        preventDefault: function preventDefault() {
          e3.preventDefault();
        },
        nativeEvent: e3.nativeEvent
      });
    };
    return /* @__PURE__ */ React240.createElement("span", {
      className: classString,
      title,
      style: style2
    }, /* @__PURE__ */ React240.createElement("input", _extends({}, inputProps, {
      className: "".concat(prefixCls, "-input"),
      ref: inputRef,
      onChange: handleChange,
      disabled,
      checked: !!rawValue,
      type: type4
    })), /* @__PURE__ */ React240.createElement("span", {
      className: "".concat(prefixCls, "-inner")
    }));
  });
  var es_default14 = Checkbox;

  // node_modules/antd/es/radio/style/index.js
  var getGroupRadioStyle = (token2) => {
    const {
      componentCls,
      antCls
    } = token2;
    const groupPrefixCls = `${componentCls}-group`;
    return {
      [groupPrefixCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        display: "inline-block",
        fontSize: 0,
        // RTL
        [`&${groupPrefixCls}-rtl`]: {
          direction: "rtl"
        },
        [`${antCls}-badge ${antCls}-badge-count`]: {
          zIndex: 1
        },
        [`> ${antCls}-badge:not(:first-child) > ${antCls}-button-wrapper`]: {
          borderInlineStart: "none"
        }
      })
    };
  };
  var getRadioBasicStyle = (token2) => {
    const {
      componentCls,
      wrapperMarginInlineEnd,
      colorPrimary,
      radioSize,
      motionDurationSlow,
      motionDurationMid,
      motionEaseInOutCirc,
      colorBgContainer,
      colorBorder,
      lineWidth,
      colorBgContainerDisabled,
      colorTextDisabled,
      paddingXS,
      dotColorDisabled,
      lineType,
      radioColor,
      radioBgColor,
      calc
    } = token2;
    const radioInnerPrefixCls = `${componentCls}-inner`;
    const dotPadding = 4;
    const radioDotDisabledSize = calc(radioSize).sub(calc(dotPadding).mul(2));
    const radioSizeCalc = calc(1).mul(radioSize).equal();
    return {
      [`${componentCls}-wrapper`]: Object.assign(Object.assign({}, resetComponent(token2)), {
        display: "inline-flex",
        alignItems: "baseline",
        marginInlineStart: 0,
        marginInlineEnd: wrapperMarginInlineEnd,
        cursor: "pointer",
        // RTL
        [`&${componentCls}-wrapper-rtl`]: {
          direction: "rtl"
        },
        "&-disabled": {
          cursor: "not-allowed",
          color: token2.colorTextDisabled
        },
        "&::after": {
          display: "inline-block",
          width: 0,
          overflow: "hidden",
          content: '"\\a0"'
        },
        // hashId 在 wrapper 上，只能铺平
        [`${componentCls}-checked::after`]: {
          position: "absolute",
          insetBlockStart: 0,
          insetInlineStart: 0,
          width: "100%",
          height: "100%",
          border: `${unit(lineWidth)} ${lineType} ${colorPrimary}`,
          borderRadius: "50%",
          visibility: "hidden",
          content: '""'
        },
        [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
          position: "relative",
          display: "inline-block",
          outline: "none",
          cursor: "pointer",
          alignSelf: "center",
          borderRadius: "50%"
        }),
        [`${componentCls}-wrapper:hover &,
        &:hover ${radioInnerPrefixCls}`]: {
          borderColor: colorPrimary
        },
        [`${componentCls}-input:focus-visible + ${radioInnerPrefixCls}`]: Object.assign({}, genFocusOutline(token2)),
        [`${componentCls}:hover::after, ${componentCls}-wrapper:hover &::after`]: {
          visibility: "visible"
        },
        [`${componentCls}-inner`]: {
          "&::after": {
            boxSizing: "border-box",
            position: "absolute",
            insetBlockStart: "50%",
            insetInlineStart: "50%",
            display: "block",
            width: radioSizeCalc,
            height: radioSizeCalc,
            marginBlockStart: calc(1).mul(radioSize).div(-2).equal(),
            marginInlineStart: calc(1).mul(radioSize).div(-2).equal(),
            backgroundColor: radioColor,
            borderBlockStart: 0,
            borderInlineStart: 0,
            borderRadius: radioSizeCalc,
            transform: "scale(0)",
            opacity: 0,
            transition: `all ${motionDurationSlow} ${motionEaseInOutCirc}`,
            content: '""'
          },
          boxSizing: "border-box",
          position: "relative",
          insetBlockStart: 0,
          insetInlineStart: 0,
          display: "block",
          width: radioSizeCalc,
          height: radioSizeCalc,
          backgroundColor: colorBgContainer,
          borderColor: colorBorder,
          borderStyle: "solid",
          borderWidth: lineWidth,
          borderRadius: "50%",
          transition: `all ${motionDurationMid}`
        },
        [`${componentCls}-input`]: {
          position: "absolute",
          inset: 0,
          zIndex: 1,
          cursor: "pointer",
          opacity: 0
        },
        // 选中状态
        [`${componentCls}-checked`]: {
          [radioInnerPrefixCls]: {
            borderColor: colorPrimary,
            backgroundColor: radioBgColor,
            "&::after": {
              transform: `scale(${token2.calc(token2.dotSize).div(radioSize).equal()})`,
              opacity: 1,
              transition: `all ${motionDurationSlow} ${motionEaseInOutCirc}`
            }
          }
        },
        [`${componentCls}-disabled`]: {
          cursor: "not-allowed",
          [radioInnerPrefixCls]: {
            backgroundColor: colorBgContainerDisabled,
            borderColor: colorBorder,
            cursor: "not-allowed",
            "&::after": {
              backgroundColor: dotColorDisabled
            }
          },
          [`${componentCls}-input`]: {
            cursor: "not-allowed"
          },
          [`${componentCls}-disabled + span`]: {
            color: colorTextDisabled,
            cursor: "not-allowed"
          },
          [`&${componentCls}-checked`]: {
            [radioInnerPrefixCls]: {
              "&::after": {
                transform: `scale(${calc(radioDotDisabledSize).div(radioSize).equal({
                  unit: false
                })})`
              }
            }
          }
        },
        [`span${componentCls} + *`]: {
          paddingInlineStart: paddingXS,
          paddingInlineEnd: paddingXS
        }
      })
    };
  };
  var getRadioButtonStyle = (token2) => {
    const {
      buttonColor,
      controlHeight,
      componentCls,
      lineWidth,
      lineType,
      colorBorder,
      motionDurationSlow,
      motionDurationMid,
      buttonPaddingInline,
      fontSize,
      buttonBg,
      fontSizeLG,
      controlHeightLG,
      controlHeightSM,
      paddingXS,
      borderRadius,
      borderRadiusSM,
      borderRadiusLG,
      buttonCheckedBg,
      buttonSolidCheckedColor,
      colorTextDisabled,
      colorBgContainerDisabled,
      buttonCheckedBgDisabled,
      buttonCheckedColorDisabled,
      colorPrimary,
      colorPrimaryHover,
      colorPrimaryActive,
      buttonSolidCheckedBg,
      buttonSolidCheckedHoverBg,
      buttonSolidCheckedActiveBg,
      calc
    } = token2;
    return {
      [`${componentCls}-button-wrapper`]: {
        position: "relative",
        display: "inline-block",
        height: controlHeight,
        margin: 0,
        paddingInline: buttonPaddingInline,
        paddingBlock: 0,
        color: buttonColor,
        fontSize,
        lineHeight: unit(calc(controlHeight).sub(calc(lineWidth).mul(2)).equal()),
        background: buttonBg,
        border: `${unit(lineWidth)} ${lineType} ${colorBorder}`,
        // strange align fix for chrome but works
        // https://gw.alipayobjects.com/zos/rmsportal/VFTfKXJuogBAXcvfAUWJ.gif
        borderBlockStartWidth: calc(lineWidth).add(0.02).equal(),
        borderInlineStartWidth: 0,
        borderInlineEndWidth: lineWidth,
        cursor: "pointer",
        transition: [`color ${motionDurationMid}`, `background ${motionDurationMid}`, `box-shadow ${motionDurationMid}`].join(","),
        a: {
          color: buttonColor
        },
        [`> ${componentCls}-button`]: {
          position: "absolute",
          insetBlockStart: 0,
          insetInlineStart: 0,
          zIndex: -1,
          width: "100%",
          height: "100%"
        },
        "&:not(:first-child)": {
          "&::before": {
            position: "absolute",
            insetBlockStart: calc(lineWidth).mul(-1).equal(),
            insetInlineStart: calc(lineWidth).mul(-1).equal(),
            display: "block",
            boxSizing: "content-box",
            width: 1,
            height: "100%",
            paddingBlock: lineWidth,
            paddingInline: 0,
            backgroundColor: colorBorder,
            transition: `background-color ${motionDurationSlow}`,
            content: '""'
          }
        },
        "&:first-child": {
          borderInlineStart: `${unit(lineWidth)} ${lineType} ${colorBorder}`,
          borderStartStartRadius: borderRadius,
          borderEndStartRadius: borderRadius
        },
        "&:last-child": {
          borderStartEndRadius: borderRadius,
          borderEndEndRadius: borderRadius
        },
        "&:first-child:last-child": {
          borderRadius
        },
        [`${componentCls}-group-large &`]: {
          height: controlHeightLG,
          fontSize: fontSizeLG,
          lineHeight: unit(calc(controlHeightLG).sub(calc(lineWidth).mul(2)).equal()),
          "&:first-child": {
            borderStartStartRadius: borderRadiusLG,
            borderEndStartRadius: borderRadiusLG
          },
          "&:last-child": {
            borderStartEndRadius: borderRadiusLG,
            borderEndEndRadius: borderRadiusLG
          }
        },
        [`${componentCls}-group-small &`]: {
          height: controlHeightSM,
          paddingInline: calc(paddingXS).sub(lineWidth).equal(),
          paddingBlock: 0,
          lineHeight: unit(calc(controlHeightSM).sub(calc(lineWidth).mul(2)).equal()),
          "&:first-child": {
            borderStartStartRadius: borderRadiusSM,
            borderEndStartRadius: borderRadiusSM
          },
          "&:last-child": {
            borderStartEndRadius: borderRadiusSM,
            borderEndEndRadius: borderRadiusSM
          }
        },
        "&:hover": {
          position: "relative",
          color: colorPrimary
        },
        "&:has(:focus-visible)": Object.assign({}, genFocusOutline(token2)),
        [`${componentCls}-inner, input[type='checkbox'], input[type='radio']`]: {
          width: 0,
          height: 0,
          opacity: 0,
          pointerEvents: "none"
        },
        [`&-checked:not(${componentCls}-button-wrapper-disabled)`]: {
          zIndex: 1,
          color: colorPrimary,
          background: buttonCheckedBg,
          borderColor: colorPrimary,
          "&::before": {
            backgroundColor: colorPrimary
          },
          "&:first-child": {
            borderColor: colorPrimary
          },
          "&:hover": {
            color: colorPrimaryHover,
            borderColor: colorPrimaryHover,
            "&::before": {
              backgroundColor: colorPrimaryHover
            }
          },
          "&:active": {
            color: colorPrimaryActive,
            borderColor: colorPrimaryActive,
            "&::before": {
              backgroundColor: colorPrimaryActive
            }
          }
        },
        [`${componentCls}-group-solid &-checked:not(${componentCls}-button-wrapper-disabled)`]: {
          color: buttonSolidCheckedColor,
          background: buttonSolidCheckedBg,
          borderColor: buttonSolidCheckedBg,
          "&:hover": {
            color: buttonSolidCheckedColor,
            background: buttonSolidCheckedHoverBg,
            borderColor: buttonSolidCheckedHoverBg
          },
          "&:active": {
            color: buttonSolidCheckedColor,
            background: buttonSolidCheckedActiveBg,
            borderColor: buttonSolidCheckedActiveBg
          }
        },
        "&-disabled": {
          color: colorTextDisabled,
          backgroundColor: colorBgContainerDisabled,
          borderColor: colorBorder,
          cursor: "not-allowed",
          "&:first-child, &:hover": {
            color: colorTextDisabled,
            backgroundColor: colorBgContainerDisabled,
            borderColor: colorBorder
          }
        },
        [`&-disabled${componentCls}-button-wrapper-checked`]: {
          color: buttonCheckedColorDisabled,
          backgroundColor: buttonCheckedBgDisabled,
          borderColor: colorBorder,
          boxShadow: "none"
        }
      }
    };
  };
  var prepareComponentToken7 = (token2) => {
    const {
      wireframe,
      padding,
      marginXS,
      lineWidth,
      fontSizeLG,
      colorText,
      colorBgContainer,
      colorTextDisabled,
      controlItemBgActiveDisabled,
      colorTextLightSolid,
      colorPrimary,
      colorPrimaryHover,
      colorPrimaryActive,
      colorWhite
    } = token2;
    const dotPadding = 4;
    const radioSize = fontSizeLG;
    const radioDotSize = wireframe ? radioSize - dotPadding * 2 : radioSize - (dotPadding + lineWidth) * 2;
    return {
      // Radio
      radioSize,
      dotSize: radioDotSize,
      dotColorDisabled: colorTextDisabled,
      // Radio buttons
      buttonSolidCheckedColor: colorTextLightSolid,
      buttonSolidCheckedBg: colorPrimary,
      buttonSolidCheckedHoverBg: colorPrimaryHover,
      buttonSolidCheckedActiveBg: colorPrimaryActive,
      buttonBg: colorBgContainer,
      buttonCheckedBg: colorBgContainer,
      buttonColor: colorText,
      buttonCheckedBgDisabled: controlItemBgActiveDisabled,
      buttonCheckedColorDisabled: colorTextDisabled,
      buttonPaddingInline: padding - lineWidth,
      wrapperMarginInlineEnd: marginXS,
      // internal
      radioColor: wireframe ? colorPrimary : colorWhite,
      radioBgColor: wireframe ? colorBgContainer : colorPrimary
    };
  };
  var style_default10 = genStyleHooks("Radio", (token2) => {
    const {
      controlOutline,
      controlOutlineWidth
    } = token2;
    const radioFocusShadow = `0 0 0 ${unit(controlOutlineWidth)} ${controlOutline}`;
    const radioButtonFocusShadow = radioFocusShadow;
    const radioToken = merge2(token2, {
      radioFocusShadow,
      radioButtonFocusShadow
    });
    return [getGroupRadioStyle(radioToken), getRadioBasicStyle(radioToken), getRadioButtonStyle(radioToken)];
  }, prepareComponentToken7, {
    unitless: {
      radioSize: true,
      dotSize: true
    }
  });

  // node_modules/antd/es/radio/radio.js
  var __rest18 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var InternalRadio = (props, ref) => {
    var _a, _b;
    const groupContext = React241.useContext(context_default3);
    const radioOptionTypeContext = React241.useContext(RadioOptionTypeContext);
    const {
      getPrefixCls,
      direction,
      radio
    } = React241.useContext(ConfigContext);
    const innerRef = React241.useRef(null);
    const mergedRef = composeRef(ref, innerRef);
    const {
      isFormItemInput
    } = React241.useContext(FormItemInputContext);
    if (true) {
      const warning8 = devUseWarning("Radio");
      true ? warning8(!("optionType" in props), "usage", "`optionType` is only support in Radio.Group.") : void 0;
    }
    const onChange = (e3) => {
      var _a2, _b2;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, e3);
      (_b2 = groupContext === null || groupContext === void 0 ? void 0 : groupContext.onChange) === null || _b2 === void 0 ? void 0 : _b2.call(groupContext, e3);
    };
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      children,
      style: style2,
      title
    } = props, restProps = __rest18(props, ["prefixCls", "className", "rootClassName", "children", "style", "title"]);
    const radioPrefixCls = getPrefixCls("radio", customizePrefixCls);
    const isButtonType = ((groupContext === null || groupContext === void 0 ? void 0 : groupContext.optionType) || radioOptionTypeContext) === "button";
    const prefixCls = isButtonType ? `${radioPrefixCls}-button` : radioPrefixCls;
    const rootCls = useCSSVarCls_default(radioPrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default10(radioPrefixCls, rootCls);
    const radioProps = Object.assign({}, restProps);
    const disabled = React241.useContext(DisabledContext_default);
    if (groupContext) {
      radioProps.name = groupContext.name;
      radioProps.onChange = onChange;
      radioProps.checked = props.value === groupContext.value;
      radioProps.disabled = (_a = radioProps.disabled) !== null && _a !== void 0 ? _a : groupContext.disabled;
    }
    radioProps.disabled = (_b = radioProps.disabled) !== null && _b !== void 0 ? _b : disabled;
    const wrapperClassString = (0, import_classnames64.default)(`${prefixCls}-wrapper`, {
      [`${prefixCls}-wrapper-checked`]: radioProps.checked,
      [`${prefixCls}-wrapper-disabled`]: radioProps.disabled,
      [`${prefixCls}-wrapper-rtl`]: direction === "rtl",
      [`${prefixCls}-wrapper-in-form-item`]: isFormItemInput
    }, radio === null || radio === void 0 ? void 0 : radio.className, className, rootClassName, hashId, cssVarCls, rootCls);
    return wrapCSSVar(/* @__PURE__ */ React241.createElement(wave_default, {
      component: "Radio",
      disabled: radioProps.disabled
    }, /* @__PURE__ */ React241.createElement("label", {
      className: wrapperClassString,
      style: Object.assign(Object.assign({}, radio === null || radio === void 0 ? void 0 : radio.style), style2),
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave,
      title
    }, /* @__PURE__ */ React241.createElement(es_default14, Object.assign({}, radioProps, {
      className: (0, import_classnames64.default)(radioProps.className, !isButtonType && TARGET_CLS),
      type: "radio",
      prefixCls,
      ref: mergedRef
    })), children !== void 0 ? /* @__PURE__ */ React241.createElement("span", null, children) : null)));
  };
  var Radio = /* @__PURE__ */ React241.forwardRef(InternalRadio);
  if (true) {
    Radio.displayName = "Radio";
  }
  var radio_default = Radio;

  // node_modules/antd/es/radio/group.js
  var RadioGroup = /* @__PURE__ */ React242.forwardRef((props, ref) => {
    const {
      getPrefixCls,
      direction
    } = React242.useContext(ConfigContext);
    const [value, setValue] = useMergedState(props.defaultValue, {
      value: props.value
    });
    const onRadioChange = (ev) => {
      const lastValue = value;
      const val = ev.target.value;
      if (!("value" in props)) {
        setValue(val);
      }
      const {
        onChange
      } = props;
      if (onChange && val !== lastValue) {
        onChange(ev);
      }
    };
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      options,
      buttonStyle = "outline",
      disabled,
      children,
      size: customizeSize,
      style: style2,
      id,
      onMouseEnter,
      onMouseLeave,
      onFocus,
      onBlur
    } = props;
    const prefixCls = getPrefixCls("radio", customizePrefixCls);
    const groupPrefixCls = `${prefixCls}-group`;
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default10(prefixCls, rootCls);
    let childrenToRender = children;
    if (options && options.length > 0) {
      childrenToRender = options.map((option) => {
        if (typeof option === "string" || typeof option === "number") {
          return /* @__PURE__ */ React242.createElement(radio_default, {
            key: option.toString(),
            prefixCls,
            disabled,
            value: option,
            checked: value === option
          }, option);
        }
        return /* @__PURE__ */ React242.createElement(radio_default, {
          key: `radio-group-value-options-${option.value}`,
          prefixCls,
          disabled: option.disabled || disabled,
          value: option.value,
          checked: value === option.value,
          title: option.title,
          style: option.style,
          id: option.id,
          required: option.required
        }, option.label);
      });
    }
    const mergedSize = useSize_default(customizeSize);
    const classString = (0, import_classnames65.default)(groupPrefixCls, `${groupPrefixCls}-${buttonStyle}`, {
      [`${groupPrefixCls}-${mergedSize}`]: mergedSize,
      [`${groupPrefixCls}-rtl`]: direction === "rtl"
    }, className, rootClassName, hashId, cssVarCls, rootCls);
    return wrapCSSVar(/* @__PURE__ */ React242.createElement("div", Object.assign({}, pickAttrs(props, {
      aria: true,
      data: true
    }), {
      className: classString,
      style: style2,
      onMouseEnter,
      onMouseLeave,
      onFocus,
      onBlur,
      id,
      ref
    }), /* @__PURE__ */ React242.createElement(RadioGroupContextProvider, {
      value: {
        onChange: onRadioChange,
        value,
        disabled: props.disabled,
        name: props.name,
        optionType: props.optionType
      }
    }, childrenToRender)));
  });
  var group_default2 = /* @__PURE__ */ React242.memo(RadioGroup);

  // node_modules/antd/es/radio/radioButton.js
  var React243 = __toESM(require_react());
  var __rest19 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var RadioButton = (props, ref) => {
    const {
      getPrefixCls
    } = React243.useContext(ConfigContext);
    const {
      prefixCls: customizePrefixCls
    } = props, radioProps = __rest19(props, ["prefixCls"]);
    const prefixCls = getPrefixCls("radio", customizePrefixCls);
    return /* @__PURE__ */ React243.createElement(RadioOptionTypeContextProvider, {
      value: "button"
    }, /* @__PURE__ */ React243.createElement(radio_default, Object.assign({
      prefixCls
    }, radioProps, {
      type: "radio",
      ref
    })));
  };
  var radioButton_default = /* @__PURE__ */ React243.forwardRef(RadioButton);

  // node_modules/antd/es/radio/index.js
  var Radio2 = radio_default;
  Radio2.Button = radioButton_default;
  Radio2.Group = group_default2;
  Radio2.__ANT_RADIO = true;
  var radio_default2 = Radio2;

  // node_modules/antd/es/input/style/token.js
  function initInputToken(token2) {
    return merge2(token2, {
      inputAffixPadding: token2.paddingXXS
    });
  }
  var initComponentToken = (token2) => {
    const {
      controlHeight,
      fontSize,
      lineHeight,
      lineWidth,
      controlHeightSM,
      controlHeightLG,
      fontSizeLG,
      lineHeightLG,
      paddingSM,
      controlPaddingHorizontalSM,
      controlPaddingHorizontal,
      colorFillAlter,
      colorPrimaryHover,
      colorPrimary,
      controlOutlineWidth,
      controlOutline,
      colorErrorOutline,
      colorWarningOutline,
      colorBgContainer
    } = token2;
    return {
      paddingBlock: Math.max(Math.round((controlHeight - fontSize * lineHeight) / 2 * 10) / 10 - lineWidth, 0),
      paddingBlockSM: Math.max(Math.round((controlHeightSM - fontSize * lineHeight) / 2 * 10) / 10 - lineWidth, 0),
      paddingBlockLG: Math.ceil((controlHeightLG - fontSizeLG * lineHeightLG) / 2 * 10) / 10 - lineWidth,
      paddingInline: paddingSM - lineWidth,
      paddingInlineSM: controlPaddingHorizontalSM - lineWidth,
      paddingInlineLG: controlPaddingHorizontal - lineWidth,
      addonBg: colorFillAlter,
      activeBorderColor: colorPrimary,
      hoverBorderColor: colorPrimaryHover,
      activeShadow: `0 0 0 ${controlOutlineWidth}px ${controlOutline}`,
      errorActiveShadow: `0 0 0 ${controlOutlineWidth}px ${colorErrorOutline}`,
      warningActiveShadow: `0 0 0 ${controlOutlineWidth}px ${colorWarningOutline}`,
      hoverBg: colorBgContainer,
      activeBg: colorBgContainer,
      inputFontSize: fontSize,
      inputFontSizeLG: fontSizeLG,
      inputFontSizeSM: fontSize
    };
  };

  // node_modules/antd/es/input/style/variants.js
  var genHoverStyle = (token2) => ({
    borderColor: token2.hoverBorderColor,
    backgroundColor: token2.hoverBg
  });
  var genDisabledStyle2 = (token2) => ({
    color: token2.colorTextDisabled,
    backgroundColor: token2.colorBgContainerDisabled,
    borderColor: token2.colorBorder,
    boxShadow: "none",
    cursor: "not-allowed",
    opacity: 1,
    "&:hover:not([disabled])": Object.assign({}, genHoverStyle(merge2(token2, {
      hoverBorderColor: token2.colorBorder,
      hoverBg: token2.colorBgContainerDisabled
    })))
  });
  var genBaseOutlinedStyle2 = (token2, options) => ({
    background: token2.colorBgContainer,
    borderWidth: token2.lineWidth,
    borderStyle: token2.lineType,
    borderColor: options.borderColor,
    "&:hover": {
      borderColor: options.hoverBorderColor,
      backgroundColor: token2.hoverBg
    },
    "&:focus, &:focus-within": {
      borderColor: options.activeBorderColor,
      boxShadow: options.activeShadow,
      outline: 0,
      backgroundColor: token2.activeBg
    }
  });
  var genOutlinedStatusStyle2 = (token2, options) => ({
    [`&${token2.componentCls}-status-${options.status}:not(${token2.componentCls}-disabled)`]: Object.assign(Object.assign({}, genBaseOutlinedStyle2(token2, options)), {
      [`${token2.componentCls}-prefix, ${token2.componentCls}-suffix`]: {
        color: options.affixColor
      }
    })
  });
  var genOutlinedStyle2 = (token2, extraStyles) => ({
    "&-outlined": Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, genBaseOutlinedStyle2(token2, {
      borderColor: token2.colorBorder,
      hoverBorderColor: token2.colorPrimaryHover,
      activeBorderColor: token2.colorPrimary,
      activeShadow: token2.activeShadow
    })), {
      [`&${token2.componentCls}-disabled, &[disabled]`]: Object.assign({}, genDisabledStyle2(token2))
    }), genOutlinedStatusStyle2(token2, {
      status: "error",
      borderColor: token2.colorError,
      hoverBorderColor: token2.colorErrorBorderHover,
      activeBorderColor: token2.colorError,
      activeShadow: token2.errorActiveShadow,
      affixColor: token2.colorError
    })), genOutlinedStatusStyle2(token2, {
      status: "warning",
      borderColor: token2.colorWarning,
      hoverBorderColor: token2.colorWarningBorderHover,
      activeBorderColor: token2.colorWarning,
      activeShadow: token2.warningActiveShadow,
      affixColor: token2.colorWarning
    })), extraStyles)
  });
  var genOutlinedGroupStatusStyle = (token2, options) => ({
    [`&${token2.componentCls}-group-wrapper-status-${options.status}`]: {
      [`${token2.componentCls}-group-addon`]: {
        borderColor: options.addonBorderColor,
        color: options.addonColor
      }
    }
  });
  var genOutlinedGroupStyle = (token2) => ({
    "&-outlined": Object.assign(Object.assign(Object.assign({
      [`${token2.componentCls}-group`]: {
        "&-addon": {
          background: token2.addonBg,
          border: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`
        },
        "&-addon:first-child": {
          borderInlineEnd: 0
        },
        "&-addon:last-child": {
          borderInlineStart: 0
        }
      }
    }, genOutlinedGroupStatusStyle(token2, {
      status: "error",
      addonBorderColor: token2.colorError,
      addonColor: token2.colorErrorText
    })), genOutlinedGroupStatusStyle(token2, {
      status: "warning",
      addonBorderColor: token2.colorWarning,
      addonColor: token2.colorWarningText
    })), {
      [`&${token2.componentCls}-group-wrapper-disabled`]: {
        [`${token2.componentCls}-group-addon`]: Object.assign({}, genDisabledStyle2(token2))
      }
    })
  });
  var genBorderlessStyle2 = (token2, extraStyles) => ({
    "&-borderless": Object.assign({
      background: "transparent",
      border: "none",
      "&:focus, &:focus-within": {
        outline: "none"
      },
      [`&${token2.componentCls}-disabled, &[disabled]`]: {
        color: token2.colorTextDisabled
      }
    }, extraStyles)
  });
  var genBaseFilledStyle2 = (token2, options) => ({
    background: options.bg,
    borderWidth: token2.lineWidth,
    borderStyle: token2.lineType,
    borderColor: "transparent",
    [`input&, & input, textarea&, & textarea`]: {
      color: options === null || options === void 0 ? void 0 : options.inputColor
    },
    "&:hover": {
      background: options.hoverBg
    },
    "&:focus, &:focus-within": {
      outline: 0,
      borderColor: options.activeBorderColor,
      backgroundColor: token2.activeBg
    }
  });
  var genFilledStatusStyle2 = (token2, options) => ({
    [`&${token2.componentCls}-status-${options.status}:not(${token2.componentCls}-disabled)`]: Object.assign(Object.assign({}, genBaseFilledStyle2(token2, options)), {
      [`${token2.componentCls}-prefix, ${token2.componentCls}-suffix`]: {
        color: options.affixColor
      }
    })
  });
  var genFilledStyle2 = (token2, extraStyles) => ({
    "&-filled": Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, genBaseFilledStyle2(token2, {
      bg: token2.colorFillTertiary,
      hoverBg: token2.colorFillSecondary,
      activeBorderColor: token2.colorPrimary
    })), {
      [`&${token2.componentCls}-disabled, &[disabled]`]: Object.assign({}, genDisabledStyle2(token2))
    }), genFilledStatusStyle2(token2, {
      status: "error",
      bg: token2.colorErrorBg,
      hoverBg: token2.colorErrorBgHover,
      activeBorderColor: token2.colorError,
      inputColor: token2.colorErrorText,
      affixColor: token2.colorError
    })), genFilledStatusStyle2(token2, {
      status: "warning",
      bg: token2.colorWarningBg,
      hoverBg: token2.colorWarningBgHover,
      activeBorderColor: token2.colorWarning,
      inputColor: token2.colorWarningText,
      affixColor: token2.colorWarning
    })), extraStyles)
  });
  var genFilledGroupStatusStyle = (token2, options) => ({
    [`&${token2.componentCls}-group-wrapper-status-${options.status}`]: {
      [`${token2.componentCls}-group-addon`]: {
        background: options.addonBg,
        color: options.addonColor
      }
    }
  });
  var genFilledGroupStyle = (token2) => ({
    "&-filled": Object.assign(Object.assign(Object.assign({
      [`${token2.componentCls}-group`]: {
        "&-addon": {
          background: token2.colorFillTertiary
        },
        [`${token2.componentCls}-filled:not(:focus):not(:focus-within)`]: {
          "&:not(:first-child)": {
            borderInlineStart: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorSplit}`
          },
          "&:not(:last-child)": {
            borderInlineEnd: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorSplit}`
          }
        }
      }
    }, genFilledGroupStatusStyle(token2, {
      status: "error",
      addonBg: token2.colorErrorBg,
      addonColor: token2.colorErrorText
    })), genFilledGroupStatusStyle(token2, {
      status: "warning",
      addonBg: token2.colorWarningBg,
      addonColor: token2.colorWarningText
    })), {
      [`&${token2.componentCls}-group-wrapper-disabled`]: {
        [`${token2.componentCls}-group`]: {
          "&-addon": {
            background: token2.colorFillTertiary,
            color: token2.colorTextDisabled
          },
          "&-addon:first-child": {
            borderInlineStart: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`,
            borderTop: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`,
            borderBottom: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`
          },
          "&-addon:last-child": {
            borderInlineEnd: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`,
            borderTop: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`,
            borderBottom: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`
          }
        }
      }
    })
  });

  // node_modules/antd/es/input/style/index.js
  var genPlaceholderStyle = (color) => ({
    // Firefox
    "&::-moz-placeholder": {
      opacity: 1
    },
    "&::placeholder": {
      color,
      userSelect: "none"
      // https://github.com/ant-design/ant-design/pull/32639
    },
    "&:placeholder-shown": {
      textOverflow: "ellipsis"
    }
  });
  var genInputLargeStyle = (token2) => {
    const {
      paddingBlockLG,
      lineHeightLG,
      borderRadiusLG,
      paddingInlineLG
    } = token2;
    return {
      padding: `${unit(paddingBlockLG)} ${unit(paddingInlineLG)}`,
      fontSize: token2.inputFontSizeLG,
      lineHeight: lineHeightLG,
      borderRadius: borderRadiusLG
    };
  };
  var genInputSmallStyle = (token2) => ({
    padding: `${unit(token2.paddingBlockSM)} ${unit(token2.paddingInlineSM)}`,
    fontSize: token2.inputFontSizeSM,
    borderRadius: token2.borderRadiusSM
  });
  var genBasicInputStyle = (token2) => Object.assign(Object.assign({
    position: "relative",
    display: "inline-block",
    width: "100%",
    minWidth: 0,
    padding: `${unit(token2.paddingBlock)} ${unit(token2.paddingInline)}`,
    color: token2.colorText,
    fontSize: token2.inputFontSize,
    lineHeight: token2.lineHeight,
    borderRadius: token2.borderRadius,
    transition: `all ${token2.motionDurationMid}`
  }, genPlaceholderStyle(token2.colorTextPlaceholder)), {
    // Reset height for `textarea`s
    "textarea&": {
      maxWidth: "100%",
      // prevent textarea resize from coming out of its container
      height: "auto",
      minHeight: token2.controlHeight,
      lineHeight: token2.lineHeight,
      verticalAlign: "bottom",
      transition: `all ${token2.motionDurationSlow}, height 0s`,
      resize: "vertical"
    },
    // Size
    "&-lg": Object.assign({}, genInputLargeStyle(token2)),
    "&-sm": Object.assign({}, genInputSmallStyle(token2)),
    // RTL
    "&-rtl": {
      direction: "rtl"
    },
    "&-textarea-rtl": {
      direction: "rtl"
    }
  });
  var genInputGroupStyle = (token2) => {
    const {
      componentCls,
      antCls
    } = token2;
    return {
      position: "relative",
      display: "table",
      width: "100%",
      borderCollapse: "separate",
      borderSpacing: 0,
      // Undo padding and float of grid classes
      [`&[class*='col-']`]: {
        paddingInlineEnd: token2.paddingXS,
        "&:last-child": {
          paddingInlineEnd: 0
        }
      },
      // Sizing options
      [`&-lg ${componentCls}, &-lg > ${componentCls}-group-addon`]: Object.assign({}, genInputLargeStyle(token2)),
      [`&-sm ${componentCls}, &-sm > ${componentCls}-group-addon`]: Object.assign({}, genInputSmallStyle(token2)),
      // Fix https://github.com/ant-design/ant-design/issues/5754
      [`&-lg ${antCls}-select-single ${antCls}-select-selector`]: {
        height: token2.controlHeightLG
      },
      [`&-sm ${antCls}-select-single ${antCls}-select-selector`]: {
        height: token2.controlHeightSM
      },
      [`> ${componentCls}`]: {
        display: "table-cell",
        "&:not(:first-child):not(:last-child)": {
          borderRadius: 0
        }
      },
      [`${componentCls}-group`]: {
        [`&-addon, &-wrap`]: {
          display: "table-cell",
          width: 1,
          whiteSpace: "nowrap",
          verticalAlign: "middle",
          "&:not(:first-child):not(:last-child)": {
            borderRadius: 0
          }
        },
        "&-wrap > *": {
          display: "block !important"
        },
        "&-addon": {
          position: "relative",
          padding: `0 ${unit(token2.paddingInline)}`,
          color: token2.colorText,
          fontWeight: "normal",
          fontSize: token2.inputFontSize,
          textAlign: "center",
          borderRadius: token2.borderRadius,
          transition: `all ${token2.motionDurationSlow}`,
          lineHeight: 1,
          // Reset Select's style in addon
          [`${antCls}-select`]: {
            margin: `${unit(token2.calc(token2.paddingBlock).add(1).mul(-1).equal())} ${unit(token2.calc(token2.paddingInline).mul(-1).equal())}`,
            [`&${antCls}-select-single:not(${antCls}-select-customize-input):not(${antCls}-pagination-size-changer)`]: {
              [`${antCls}-select-selector`]: {
                backgroundColor: "inherit",
                border: `${unit(token2.lineWidth)} ${token2.lineType} transparent`,
                boxShadow: "none"
              }
            },
            "&-open, &-focused": {
              [`${antCls}-select-selector`]: {
                color: token2.colorPrimary
              }
            }
          },
          // https://github.com/ant-design/ant-design/issues/31333
          [`${antCls}-cascader-picker`]: {
            margin: `-9px ${unit(token2.calc(token2.paddingInline).mul(-1).equal())}`,
            backgroundColor: "transparent",
            [`${antCls}-cascader-input`]: {
              textAlign: "start",
              border: 0,
              boxShadow: "none"
            }
          }
        }
      },
      [`${componentCls}`]: {
        width: "100%",
        marginBottom: 0,
        textAlign: "inherit",
        "&:focus": {
          zIndex: 1,
          // Fix https://gw.alipayobjects.com/zos/rmsportal/DHNpoqfMXSfrSnlZvhsJ.png
          borderInlineEndWidth: 1
        },
        "&:hover": {
          zIndex: 1,
          borderInlineEndWidth: 1,
          [`${componentCls}-search-with-button &`]: {
            zIndex: 0
          }
        }
      },
      // Reset rounded corners
      [`> ${componentCls}:first-child, ${componentCls}-group-addon:first-child`]: {
        borderStartEndRadius: 0,
        borderEndEndRadius: 0,
        // Reset Select's style in addon
        [`${antCls}-select ${antCls}-select-selector`]: {
          borderStartEndRadius: 0,
          borderEndEndRadius: 0
        }
      },
      [`> ${componentCls}-affix-wrapper`]: {
        [`&:not(:first-child) ${componentCls}`]: {
          borderStartStartRadius: 0,
          borderEndStartRadius: 0
        },
        [`&:not(:last-child) ${componentCls}`]: {
          borderStartEndRadius: 0,
          borderEndEndRadius: 0
        }
      },
      [`> ${componentCls}:last-child, ${componentCls}-group-addon:last-child`]: {
        borderStartStartRadius: 0,
        borderEndStartRadius: 0,
        // Reset Select's style in addon
        [`${antCls}-select ${antCls}-select-selector`]: {
          borderStartStartRadius: 0,
          borderEndStartRadius: 0
        }
      },
      [`${componentCls}-affix-wrapper`]: {
        "&:not(:last-child)": {
          borderStartEndRadius: 0,
          borderEndEndRadius: 0,
          [`${componentCls}-search &`]: {
            borderStartStartRadius: token2.borderRadius,
            borderEndStartRadius: token2.borderRadius
          }
        },
        [`&:not(:first-child), ${componentCls}-search &:not(:first-child)`]: {
          borderStartStartRadius: 0,
          borderEndStartRadius: 0
        }
      },
      [`&${componentCls}-group-compact`]: Object.assign(Object.assign({
        display: "block"
      }, clearFix()), {
        [`${componentCls}-group-addon, ${componentCls}-group-wrap, > ${componentCls}`]: {
          "&:not(:first-child):not(:last-child)": {
            borderInlineEndWidth: token2.lineWidth,
            "&:hover": {
              zIndex: 1
            },
            "&:focus": {
              zIndex: 1
            }
          }
        },
        "& > *": {
          display: "inline-block",
          float: "none",
          verticalAlign: "top",
          // https://github.com/ant-design/ant-design-pro/issues/139
          borderRadius: 0
        },
        [`
        & > ${componentCls}-affix-wrapper,
        & > ${componentCls}-number-affix-wrapper,
        & > ${antCls}-picker-range
      `]: {
          display: "inline-flex"
        },
        "& > *:not(:last-child)": {
          marginInlineEnd: token2.calc(token2.lineWidth).mul(-1).equal(),
          borderInlineEndWidth: token2.lineWidth
        },
        // Undo float for .ant-input-group .ant-input
        [`${componentCls}`]: {
          float: "none"
        },
        // reset border for Select, DatePicker, AutoComplete, Cascader, Mention, TimePicker, Input
        [`& > ${antCls}-select > ${antCls}-select-selector,
      & > ${antCls}-select-auto-complete ${componentCls},
      & > ${antCls}-cascader-picker ${componentCls},
      & > ${componentCls}-group-wrapper ${componentCls}`]: {
          borderInlineEndWidth: token2.lineWidth,
          borderRadius: 0,
          "&:hover": {
            zIndex: 1
          },
          "&:focus": {
            zIndex: 1
          }
        },
        [`& > ${antCls}-select-focused`]: {
          zIndex: 1
        },
        // update z-index for arrow icon
        [`& > ${antCls}-select > ${antCls}-select-arrow`]: {
          zIndex: 1
          // https://github.com/ant-design/ant-design/issues/20371
        },
        [`& > *:first-child,
      & > ${antCls}-select:first-child > ${antCls}-select-selector,
      & > ${antCls}-select-auto-complete:first-child ${componentCls},
      & > ${antCls}-cascader-picker:first-child ${componentCls}`]: {
          borderStartStartRadius: token2.borderRadius,
          borderEndStartRadius: token2.borderRadius
        },
        [`& > *:last-child,
      & > ${antCls}-select:last-child > ${antCls}-select-selector,
      & > ${antCls}-cascader-picker:last-child ${componentCls},
      & > ${antCls}-cascader-picker-focused:last-child ${componentCls}`]: {
          borderInlineEndWidth: token2.lineWidth,
          borderStartEndRadius: token2.borderRadius,
          borderEndEndRadius: token2.borderRadius
        },
        // https://github.com/ant-design/ant-design/issues/12493
        [`& > ${antCls}-select-auto-complete ${componentCls}`]: {
          verticalAlign: "top"
        },
        [`${componentCls}-group-wrapper + ${componentCls}-group-wrapper`]: {
          marginInlineStart: token2.calc(token2.lineWidth).mul(-1).equal(),
          [`${componentCls}-affix-wrapper`]: {
            borderRadius: 0
          }
        },
        [`${componentCls}-group-wrapper:not(:last-child)`]: {
          [`&${componentCls}-search > ${componentCls}-group`]: {
            [`& > ${componentCls}-group-addon > ${componentCls}-search-button`]: {
              borderRadius: 0
            },
            [`& > ${componentCls}`]: {
              borderStartStartRadius: token2.borderRadius,
              borderStartEndRadius: 0,
              borderEndEndRadius: 0,
              borderEndStartRadius: token2.borderRadius
            }
          }
        }
      })
    };
  };
  var genInputStyle = (token2) => {
    const {
      componentCls,
      controlHeightSM,
      lineWidth,
      calc
    } = token2;
    const FIXED_CHROME_COLOR_HEIGHT = 16;
    const colorSmallPadding = calc(controlHeightSM).sub(calc(lineWidth).mul(2)).sub(FIXED_CHROME_COLOR_HEIGHT).div(2).equal();
    return {
      [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), genBasicInputStyle(token2)), genOutlinedStyle2(token2)), genFilledStyle2(token2)), genBorderlessStyle2(token2)), {
        '&[type="color"]': {
          height: token2.controlHeight,
          [`&${componentCls}-lg`]: {
            height: token2.controlHeightLG
          },
          [`&${componentCls}-sm`]: {
            height: controlHeightSM,
            paddingTop: colorSmallPadding,
            paddingBottom: colorSmallPadding
          }
        },
        '&[type="search"]::-webkit-search-cancel-button, &[type="search"]::-webkit-search-decoration': {
          "-webkit-appearance": "none"
        }
      })
    };
  };
  var genAllowClearStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      // ========================= Input =========================
      [`${componentCls}-clear-icon`]: {
        margin: 0,
        color: token2.colorTextQuaternary,
        fontSize: token2.fontSizeIcon,
        verticalAlign: -1,
        // https://github.com/ant-design/ant-design/pull/18151
        // https://codesandbox.io/s/wizardly-sun-u10br
        cursor: "pointer",
        transition: `color ${token2.motionDurationSlow}`,
        "&:hover": {
          color: token2.colorTextTertiary
        },
        "&:active": {
          color: token2.colorText
        },
        "&-hidden": {
          visibility: "hidden"
        },
        "&-has-suffix": {
          margin: `0 ${unit(token2.inputAffixPadding)}`
        }
      }
    };
  };
  var genAffixStyle = (token2) => {
    const {
      componentCls,
      inputAffixPadding,
      colorTextDescription,
      motionDurationSlow,
      colorIcon,
      colorIconHover,
      iconCls
    } = token2;
    const affixCls = `${componentCls}-affix-wrapper`;
    return {
      [affixCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, genBasicInputStyle(token2)), {
        display: "inline-flex",
        [`&:not(${componentCls}-disabled):hover`]: {
          zIndex: 1,
          [`${componentCls}-search-with-button &`]: {
            zIndex: 0
          }
        },
        "&-focused, &:focus": {
          zIndex: 1
        },
        [`> input${componentCls}`]: {
          padding: 0,
          fontSize: "inherit",
          border: "none",
          borderRadius: 0,
          outline: "none",
          background: "transparent",
          color: "inherit",
          "&::-ms-reveal": {
            display: "none"
          },
          "&:focus": {
            boxShadow: "none !important"
          }
        },
        "&::before": {
          display: "inline-block",
          width: 0,
          visibility: "hidden",
          content: '"\\a0"'
        },
        [`${componentCls}`]: {
          "&-prefix, &-suffix": {
            display: "flex",
            flex: "none",
            alignItems: "center",
            "> *:not(:last-child)": {
              marginInlineEnd: token2.paddingXS
            }
          },
          "&-show-count-suffix": {
            color: colorTextDescription
          },
          "&-show-count-has-suffix": {
            marginInlineEnd: token2.paddingXXS
          },
          "&-prefix": {
            marginInlineEnd: inputAffixPadding
          },
          "&-suffix": {
            marginInlineStart: inputAffixPadding
          }
        }
      }), genAllowClearStyle(token2)), {
        // password
        [`${iconCls}${componentCls}-password-icon`]: {
          color: colorIcon,
          cursor: "pointer",
          transition: `all ${motionDurationSlow}`,
          "&:hover": {
            color: colorIconHover
          }
        }
      })
    };
  };
  var genGroupStyle2 = (token2) => {
    const {
      componentCls,
      borderRadiusLG,
      borderRadiusSM
    } = token2;
    return {
      [`${componentCls}-group`]: Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), genInputGroupStyle(token2)), {
        "&-rtl": {
          direction: "rtl"
        },
        "&-wrapper": Object.assign(Object.assign(Object.assign({
          display: "inline-block",
          width: "100%",
          textAlign: "start",
          verticalAlign: "top",
          "&-rtl": {
            direction: "rtl"
          },
          // Size
          "&-lg": {
            [`${componentCls}-group-addon`]: {
              borderRadius: borderRadiusLG,
              fontSize: token2.inputFontSizeLG
            }
          },
          "&-sm": {
            [`${componentCls}-group-addon`]: {
              borderRadius: borderRadiusSM
            }
          }
        }, genOutlinedGroupStyle(token2)), genFilledGroupStyle(token2)), {
          // '&-disabled': {
          //   [`${componentCls}-group-addon`]: {
          //     ...genDisabledStyle(token),
          //   },
          // },
          // Fix the issue of using icons in Space Compact mode
          // https://github.com/ant-design/ant-design/issues/42122
          [`&:not(${componentCls}-compact-first-item):not(${componentCls}-compact-last-item)${componentCls}-compact-item`]: {
            [`${componentCls}, ${componentCls}-group-addon`]: {
              borderRadius: 0
            }
          },
          [`&:not(${componentCls}-compact-last-item)${componentCls}-compact-first-item`]: {
            [`${componentCls}, ${componentCls}-group-addon`]: {
              borderStartEndRadius: 0,
              borderEndEndRadius: 0
            }
          },
          [`&:not(${componentCls}-compact-first-item)${componentCls}-compact-last-item`]: {
            [`${componentCls}, ${componentCls}-group-addon`]: {
              borderStartStartRadius: 0,
              borderEndStartRadius: 0
            }
          },
          // Fix the issue of input use show-count param in space compact mode
          // https://github.com/ant-design/ant-design/issues/46872
          [`&:not(${componentCls}-compact-last-item)${componentCls}-compact-item`]: {
            [`${componentCls}-affix-wrapper`]: {
              borderStartEndRadius: 0,
              borderEndEndRadius: 0
            }
          }
        })
      })
    };
  };
  var genSearchInputStyle = (token2) => {
    const {
      componentCls,
      antCls
    } = token2;
    const searchPrefixCls = `${componentCls}-search`;
    return {
      [searchPrefixCls]: {
        [`${componentCls}`]: {
          "&:hover, &:focus": {
            borderColor: token2.colorPrimaryHover,
            [`+ ${componentCls}-group-addon ${searchPrefixCls}-button:not(${antCls}-btn-primary)`]: {
              borderInlineStartColor: token2.colorPrimaryHover
            }
          }
        },
        [`${componentCls}-affix-wrapper`]: {
          borderRadius: 0
        },
        // fix slight height diff in Firefox:
        // https://ant.design/components/auto-complete-cn/#components-auto-complete-demo-certain-category
        [`${componentCls}-lg`]: {
          lineHeight: token2.calc(token2.lineHeightLG).sub(2e-4).equal({
            unit: false
          })
        },
        [`> ${componentCls}-group`]: {
          [`> ${componentCls}-group-addon:last-child`]: {
            insetInlineStart: -1,
            padding: 0,
            border: 0,
            [`${searchPrefixCls}-button`]: {
              // Fix https://github.com/ant-design/ant-design/issues/47150
              marginInlineEnd: -1,
              paddingTop: 0,
              paddingBottom: 0,
              borderStartStartRadius: 0,
              borderStartEndRadius: token2.borderRadius,
              borderEndEndRadius: token2.borderRadius,
              borderEndStartRadius: 0,
              boxShadow: "none"
            },
            [`${searchPrefixCls}-button:not(${antCls}-btn-primary)`]: {
              color: token2.colorTextDescription,
              "&:hover": {
                color: token2.colorPrimaryHover
              },
              "&:active": {
                color: token2.colorPrimaryActive
              },
              [`&${antCls}-btn-loading::before`]: {
                insetInlineStart: 0,
                insetInlineEnd: 0,
                insetBlockStart: 0,
                insetBlockEnd: 0
              }
            }
          }
        },
        [`${searchPrefixCls}-button`]: {
          height: token2.controlHeight,
          "&:hover, &:focus": {
            zIndex: 1
          }
        },
        [`&-large ${searchPrefixCls}-button`]: {
          height: token2.controlHeightLG
        },
        [`&-small ${searchPrefixCls}-button`]: {
          height: token2.controlHeightSM
        },
        "&-rtl": {
          direction: "rtl"
        },
        // ===================== Compact Item Customized Styles =====================
        [`&${componentCls}-compact-item`]: {
          [`&:not(${componentCls}-compact-last-item)`]: {
            [`${componentCls}-group-addon`]: {
              [`${componentCls}-search-button`]: {
                marginInlineEnd: token2.calc(token2.lineWidth).mul(-1).equal(),
                borderRadius: 0
              }
            }
          },
          [`&:not(${componentCls}-compact-first-item)`]: {
            [`${componentCls},${componentCls}-affix-wrapper`]: {
              borderRadius: 0
            }
          },
          [`> ${componentCls}-group-addon ${componentCls}-search-button,
        > ${componentCls},
        ${componentCls}-affix-wrapper`]: {
            "&:hover,&:focus,&:active": {
              zIndex: 2
            }
          },
          [`> ${componentCls}-affix-wrapper-focused`]: {
            zIndex: 2
          }
        }
      }
    };
  };
  var genTextAreaStyle = (token2) => {
    const {
      componentCls,
      paddingLG
    } = token2;
    const textareaPrefixCls = `${componentCls}-textarea`;
    return {
      [textareaPrefixCls]: {
        position: "relative",
        "&-show-count": {
          // https://github.com/ant-design/ant-design/issues/33049
          [`> ${componentCls}`]: {
            height: "100%"
          },
          [`${componentCls}-data-count`]: {
            position: "absolute",
            bottom: token2.calc(token2.fontSize).mul(token2.lineHeight).mul(-1).equal(),
            insetInlineEnd: 0,
            color: token2.colorTextDescription,
            whiteSpace: "nowrap",
            pointerEvents: "none"
          }
        },
        "&-allow-clear": {
          [`> ${componentCls}`]: {
            paddingInlineEnd: paddingLG
          }
        },
        [`&-affix-wrapper${textareaPrefixCls}-has-feedback`]: {
          [`${componentCls}`]: {
            paddingInlineEnd: paddingLG
          }
        },
        [`&-affix-wrapper${componentCls}-affix-wrapper`]: {
          padding: 0,
          [`> textarea${componentCls}`]: {
            fontSize: "inherit",
            border: "none",
            outline: "none",
            background: "transparent",
            "&:focus": {
              boxShadow: "none !important"
            }
          },
          [`${componentCls}-suffix`]: {
            margin: 0,
            "> *:not(:last-child)": {
              marginInline: 0
            },
            // Clear Icon
            [`${componentCls}-clear-icon`]: {
              position: "absolute",
              insetInlineEnd: token2.paddingXS,
              insetBlockStart: token2.paddingXS
            },
            // Feedback Icon
            [`${textareaPrefixCls}-suffix`]: {
              position: "absolute",
              top: 0,
              insetInlineEnd: token2.paddingInline,
              bottom: 0,
              zIndex: 1,
              display: "inline-flex",
              alignItems: "center",
              margin: "auto",
              pointerEvents: "none"
            }
          }
        }
      }
    };
  };
  var genRangeStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-out-of-range`]: {
        [`&, & input, & textarea, ${componentCls}-show-count-suffix, ${componentCls}-data-count`]: {
          color: token2.colorError
        }
      }
    };
  };
  var style_default11 = genStyleHooks("Input", (token2) => {
    const inputToken = merge2(token2, initInputToken(token2));
    return [
      genInputStyle(inputToken),
      genTextAreaStyle(inputToken),
      genAffixStyle(inputToken),
      genGroupStyle2(inputToken),
      genSearchInputStyle(inputToken),
      genRangeStyle(inputToken),
      // =====================================================
      // ==             Space Compact                       ==
      // =====================================================
      genCompactItemStyle(inputToken)
    ];
  }, initComponentToken);

  // node_modules/antd/es/date-picker/style/token.js
  var initPickerPanelToken = (token2) => {
    const {
      componentCls,
      controlHeightLG,
      paddingXXS,
      padding
    } = token2;
    return {
      pickerCellCls: `${componentCls}-cell`,
      pickerCellInnerCls: `${componentCls}-cell-inner`,
      pickerYearMonthCellWidth: token2.calc(controlHeightLG).mul(1.5).equal(),
      pickerQuarterPanelContentHeight: token2.calc(controlHeightLG).mul(1.4).equal(),
      pickerCellPaddingVertical: token2.calc(paddingXXS).add(token2.calc(paddingXXS).div(2)).equal(),
      pickerCellBorderGap: 2,
      // Magic for gap between cells
      pickerControlIconSize: 7,
      pickerControlIconMargin: 4,
      pickerControlIconBorderWidth: 1.5,
      pickerDatePanelPaddingHorizontal: token2.calc(padding).add(token2.calc(paddingXXS).div(2)).equal()
      // 18 in normal
    };
  };
  var initPanelComponentToken = (token2) => ({
    cellHoverBg: token2.controlItemBgHover,
    cellActiveWithRangeBg: token2.controlItemBgActive,
    cellHoverWithRangeBg: new TinyColor(token2.colorPrimary).lighten(35).toHexString(),
    cellRangeBorderColor: new TinyColor(token2.colorPrimary).lighten(20).toHexString(),
    cellBgDisabled: token2.colorBgContainerDisabled,
    timeColumnWidth: token2.controlHeightLG * 1.4,
    timeColumnHeight: 28 * 8,
    timeCellHeight: 28,
    cellWidth: token2.controlHeightSM * 1.5,
    cellHeight: token2.controlHeightSM,
    textHeight: token2.controlHeightLG,
    withoutTimeCellHeight: token2.controlHeightLG * 1.65
  });
  var prepareComponentToken8 = (token2) => Object.assign(Object.assign(Object.assign(Object.assign({}, initComponentToken(token2)), initPanelComponentToken(token2)), getArrowToken(token2)), {
    presetsWidth: 120,
    presetsMaxWidth: 200,
    zIndexPopup: token2.zIndexPopupBase + 50
  });

  // node_modules/antd/es/date-picker/style/variants.js
  var genVariantsStyle2 = (token2) => ({
    [token2.componentCls]: Object.assign(Object.assign(Object.assign({}, genOutlinedStyle2(token2)), genFilledStyle2(token2)), genBorderlessStyle2(token2))
  });
  var variants_default2 = genVariantsStyle2;

  // node_modules/antd/es/date-picker/style/index.js
  var genPickerPadding = (token2, inputHeight, fontHeight, paddingHorizontal) => {
    const height = token2.calc(fontHeight).add(2).equal();
    const paddingTop = token2.max(token2.calc(inputHeight).sub(height).div(2).equal(), 0);
    const paddingBottom = token2.max(token2.calc(inputHeight).sub(height).sub(paddingTop).equal(), 0);
    return {
      padding: `${unit(paddingTop)} ${unit(paddingHorizontal)} ${unit(paddingBottom)}`
    };
  };
  var genPickerCellInnerStyle = (token2) => {
    const {
      componentCls,
      pickerCellCls,
      pickerCellInnerCls,
      cellHeight,
      motionDurationSlow,
      borderRadiusSM,
      motionDurationMid,
      cellHoverBg,
      lineWidth,
      lineType,
      colorPrimary,
      cellActiveWithRangeBg,
      colorTextLightSolid,
      controlHeightSM,
      cellRangeBorderColor,
      pickerCellBorderGap,
      cellHoverWithRangeBg,
      cellWidth,
      colorTextDisabled,
      cellBgDisabled
    } = token2;
    return {
      "&::before": {
        position: "absolute",
        top: "50%",
        insetInlineStart: 0,
        insetInlineEnd: 0,
        zIndex: 1,
        height: cellHeight,
        transform: "translateY(-50%)",
        transition: `all ${motionDurationSlow}`,
        content: '""'
      },
      // >>> Default
      [pickerCellInnerCls]: {
        position: "relative",
        zIndex: 2,
        display: "inline-block",
        minWidth: cellHeight,
        height: cellHeight,
        lineHeight: unit(cellHeight),
        borderRadius: borderRadiusSM,
        transition: `background ${motionDurationMid}, border ${motionDurationMid}`
      },
      [`&-range-hover-start, &-range-hover-end`]: {
        [pickerCellInnerCls]: {
          borderStartEndRadius: 0,
          borderEndEndRadius: 0
        }
      },
      // >>> Hover
      [`&:hover:not(${pickerCellCls}-in-view),
    &:hover:not(${pickerCellCls}-selected):not(${pickerCellCls}-range-start):not(${pickerCellCls}-range-end):not(${pickerCellCls}-range-hover-start):not(${pickerCellCls}-range-hover-end)`]: {
        [pickerCellInnerCls]: {
          background: cellHoverBg
        }
      },
      // >>> Today
      [`&-in-view${pickerCellCls}-today ${pickerCellInnerCls}`]: {
        "&::before": {
          position: "absolute",
          top: 0,
          insetInlineEnd: 0,
          bottom: 0,
          insetInlineStart: 0,
          zIndex: 1,
          border: `${unit(lineWidth)} ${lineType} ${colorPrimary}`,
          borderRadius: borderRadiusSM,
          content: '""'
        }
      },
      // >>> In Range
      [`&-in-view${pickerCellCls}-in-range`]: {
        position: "relative",
        "&::before": {
          background: cellActiveWithRangeBg
        }
      },
      // >>> Selected
      [`&-in-view${pickerCellCls}-selected ${pickerCellInnerCls},
      &-in-view${pickerCellCls}-range-start ${pickerCellInnerCls},
      &-in-view${pickerCellCls}-range-end ${pickerCellInnerCls}`]: {
        color: colorTextLightSolid,
        background: colorPrimary
      },
      [`&-in-view${pickerCellCls}-range-start:not(${pickerCellCls}-range-start-single),
      &-in-view${pickerCellCls}-range-end:not(${pickerCellCls}-range-end-single)`]: {
        "&::before": {
          background: cellActiveWithRangeBg
        }
      },
      [`&-in-view${pickerCellCls}-range-start::before`]: {
        insetInlineStart: "50%"
      },
      [`&-in-view${pickerCellCls}-range-end::before`]: {
        insetInlineEnd: "50%"
      },
      // >>> Range Hover
      [`&-in-view${pickerCellCls}-range-hover-start:not(${pickerCellCls}-in-range):not(${pickerCellCls}-range-start):not(${pickerCellCls}-range-end),
      &-in-view${pickerCellCls}-range-hover-end:not(${pickerCellCls}-in-range):not(${pickerCellCls}-range-start):not(${pickerCellCls}-range-end),
      &-in-view${pickerCellCls}-range-hover-start${pickerCellCls}-range-start-single,
      &-in-view${pickerCellCls}-range-hover-start${pickerCellCls}-range-start${pickerCellCls}-range-end${pickerCellCls}-range-end-near-hover,
      &-in-view${pickerCellCls}-range-hover-end${pickerCellCls}-range-start${pickerCellCls}-range-end${pickerCellCls}-range-start-near-hover,
      &-in-view${pickerCellCls}-range-hover-end${pickerCellCls}-range-end-single,
      &-in-view${pickerCellCls}-range-hover:not(${pickerCellCls}-in-range)`]: {
        "&::after": {
          position: "absolute",
          top: "50%",
          zIndex: 0,
          height: controlHeightSM,
          borderTop: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
          borderBottom: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
          transform: "translateY(-50%)",
          transition: `all ${motionDurationSlow}`,
          content: '""'
        }
      },
      // Add space for stash
      [`&-range-hover-start::after,
      &-range-hover-end::after,
      &-range-hover::after`]: {
        insetInlineEnd: 0,
        insetInlineStart: pickerCellBorderGap
      },
      // Hover with in range
      [`&-in-view${pickerCellCls}-in-range${pickerCellCls}-range-hover::before,
      &-in-view${pickerCellCls}-in-range${pickerCellCls}-range-hover-start::before,
      &-in-view${pickerCellCls}-in-range${pickerCellCls}-range-hover-end::before,
      &-in-view${pickerCellCls}-range-start${pickerCellCls}-range-hover::before,
      &-in-view${pickerCellCls}-range-end${pickerCellCls}-range-hover::before,
      &-in-view${pickerCellCls}-range-start:not(${pickerCellCls}-range-start-single)${pickerCellCls}-range-hover-start::before,
      &-in-view${pickerCellCls}-range-end:not(${pickerCellCls}-range-end-single)${pickerCellCls}-range-hover-end::before,
      ${componentCls}-panel
      > :not(${componentCls}-date-panel)
      &-in-view${pickerCellCls}-in-range${pickerCellCls}-range-hover-start::before,
      ${componentCls}-panel
      > :not(${componentCls}-date-panel)
      &-in-view${pickerCellCls}-in-range${pickerCellCls}-range-hover-end::before`]: {
        background: cellHoverWithRangeBg
      },
      // range start border-radius
      [`&-in-view${pickerCellCls}-range-start:not(${pickerCellCls}-range-start-single):not(${pickerCellCls}-range-end) ${pickerCellInnerCls}`]: {
        borderStartStartRadius: borderRadiusSM,
        borderEndStartRadius: borderRadiusSM,
        borderStartEndRadius: 0,
        borderEndEndRadius: 0
      },
      // range end border-radius
      [`&-in-view${pickerCellCls}-range-end:not(${pickerCellCls}-range-end-single):not(${pickerCellCls}-range-start) ${pickerCellInnerCls}`]: {
        borderStartStartRadius: 0,
        borderEndStartRadius: 0,
        borderStartEndRadius: borderRadiusSM,
        borderEndEndRadius: borderRadiusSM
      },
      [`&-range-hover${pickerCellCls}-range-end::after`]: {
        insetInlineStart: "50%"
      },
      // Edge start
      [`tr > &-in-view${pickerCellCls}-range-hover:first-child::after,
      tr > &-in-view${pickerCellCls}-range-hover-end:first-child::after,
      &-in-view${pickerCellCls}-start${pickerCellCls}-range-hover-edge-start${pickerCellCls}-range-hover-edge-start-near-range::after,
      &-in-view${pickerCellCls}-range-hover-edge-start:not(${pickerCellCls}-range-hover-edge-start-near-range)::after,
      &-in-view${pickerCellCls}-range-hover-start::after`]: {
        insetInlineStart: token2.calc(cellWidth).sub(cellHeight).div(2).equal(),
        borderInlineStart: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
        borderStartStartRadius: borderRadiusSM,
        borderEndStartRadius: borderRadiusSM
      },
      // Edge end
      [`tr > &-in-view${pickerCellCls}-range-hover:last-child::after,
      tr > &-in-view${pickerCellCls}-range-hover-start:last-child::after,
      &-in-view${pickerCellCls}-end${pickerCellCls}-range-hover-edge-end${pickerCellCls}-range-hover-edge-end-near-range::after,
      &-in-view${pickerCellCls}-range-hover-edge-end:not(${pickerCellCls}-range-hover-edge-end-near-range)::after,
      &-in-view${pickerCellCls}-range-hover-end::after`]: {
        insetInlineEnd: token2.calc(cellWidth).sub(cellHeight).div(2).equal(),
        borderInlineEnd: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
        borderStartEndRadius: borderRadiusSM,
        borderEndEndRadius: borderRadiusSM
      },
      // >>> Disabled
      "&-disabled": {
        color: colorTextDisabled,
        pointerEvents: "none",
        [pickerCellInnerCls]: {
          background: "transparent"
        },
        "&::before": {
          background: cellBgDisabled
        }
      },
      [`&-disabled${pickerCellCls}-today ${pickerCellInnerCls}::before`]: {
        borderColor: colorTextDisabled
      }
    };
  };
  var genPanelStyle = (token2) => {
    const {
      componentCls,
      pickerCellCls,
      pickerCellInnerCls,
      pickerYearMonthCellWidth,
      pickerControlIconSize,
      cellWidth,
      paddingSM,
      paddingXS,
      paddingXXS,
      colorBgContainer,
      lineWidth,
      lineType,
      borderRadiusLG,
      colorPrimary,
      colorTextHeading,
      colorSplit,
      pickerControlIconBorderWidth,
      colorIcon,
      textHeight,
      motionDurationMid,
      colorIconHover,
      fontWeightStrong,
      cellHeight,
      pickerCellPaddingVertical,
      colorTextDisabled,
      colorText,
      fontSize,
      cellHoverWithRangeBg,
      motionDurationSlow,
      withoutTimeCellHeight,
      pickerQuarterPanelContentHeight,
      colorLink,
      colorLinkActive,
      colorLinkHover,
      cellRangeBorderColor,
      borderRadiusSM,
      colorTextLightSolid,
      cellHoverBg,
      timeColumnHeight,
      timeColumnWidth,
      timeCellHeight,
      controlItemBgActive,
      marginXXS,
      pickerDatePanelPaddingHorizontal,
      pickerControlIconMargin
    } = token2;
    const pickerPanelWidth = token2.calc(cellWidth).mul(7).add(token2.calc(pickerDatePanelPaddingHorizontal).mul(2)).equal();
    const commonHoverCellFixedDistance = token2.calc(pickerPanelWidth).sub(token2.calc(paddingXS).mul(2)).div(3).sub(token2.pickerYearMonthCellWidth).sub(paddingSM).equal();
    const quarterHoverCellFixedDistance = token2.calc(pickerPanelWidth).sub(token2.calc(paddingXS).mul(2)).div(4).sub(token2.pickerYearMonthCellWidth).equal();
    return {
      [componentCls]: {
        "&-panel": {
          display: "inline-flex",
          flexDirection: "column",
          textAlign: "center",
          background: colorBgContainer,
          border: `${unit(lineWidth)} ${lineType} ${colorSplit}`,
          borderRadius: borderRadiusLG,
          outline: "none",
          "&-focused": {
            borderColor: colorPrimary
          },
          "&-rtl": {
            direction: "rtl",
            [`${componentCls}-prev-icon,
              ${componentCls}-super-prev-icon`]: {
              transform: "rotate(45deg)"
            },
            [`${componentCls}-next-icon,
              ${componentCls}-super-next-icon`]: {
              transform: "rotate(-135deg)"
            }
          }
        },
        // ========================================================
        // =                     Shared Panel                     =
        // ========================================================
        [`&-decade-panel,
        &-year-panel,
        &-quarter-panel,
        &-month-panel,
        &-week-panel,
        &-date-panel,
        &-time-panel`]: {
          display: "flex",
          flexDirection: "column",
          width: pickerPanelWidth
        },
        // ======================= Header =======================
        "&-header": {
          display: "flex",
          padding: `0 ${unit(paddingXS)}`,
          color: colorTextHeading,
          borderBottom: `${unit(lineWidth)} ${lineType} ${colorSplit}`,
          "> *": {
            flex: "none"
          },
          button: {
            padding: 0,
            color: colorIcon,
            lineHeight: unit(textHeight),
            background: "transparent",
            border: 0,
            cursor: "pointer",
            transition: `color ${motionDurationMid}`,
            fontSize: "inherit"
          },
          "> button": {
            minWidth: "1.6em",
            fontSize,
            "&:hover": {
              color: colorIconHover
            }
          },
          "&-view": {
            flex: "auto",
            fontWeight: fontWeightStrong,
            lineHeight: unit(textHeight),
            button: {
              color: "inherit",
              fontWeight: "inherit",
              verticalAlign: "top",
              "&:not(:first-child)": {
                marginInlineStart: paddingXS
              },
              "&:hover": {
                color: colorPrimary
              }
            }
          }
        },
        // Arrow button
        [`&-prev-icon,
        &-next-icon,
        &-super-prev-icon,
        &-super-next-icon`]: {
          position: "relative",
          display: "inline-block",
          width: pickerControlIconSize,
          height: pickerControlIconSize,
          "&::before": {
            position: "absolute",
            top: 0,
            insetInlineStart: 0,
            display: "inline-block",
            width: pickerControlIconSize,
            height: pickerControlIconSize,
            border: `0 solid currentcolor`,
            borderBlockStartWidth: pickerControlIconBorderWidth,
            borderBlockEndWidth: 0,
            borderInlineStartWidth: pickerControlIconBorderWidth,
            borderInlineEndWidth: 0,
            content: '""'
          }
        },
        [`&-super-prev-icon,
        &-super-next-icon`]: {
          "&::after": {
            position: "absolute",
            top: pickerControlIconMargin,
            insetInlineStart: pickerControlIconMargin,
            display: "inline-block",
            width: pickerControlIconSize,
            height: pickerControlIconSize,
            border: "0 solid currentcolor",
            borderBlockStartWidth: pickerControlIconBorderWidth,
            borderBlockEndWidth: 0,
            borderInlineStartWidth: pickerControlIconBorderWidth,
            borderInlineEndWidth: 0,
            content: '""'
          }
        },
        [`&-prev-icon,
        &-super-prev-icon`]: {
          transform: "rotate(-45deg)"
        },
        [`&-next-icon,
        &-super-next-icon`]: {
          transform: "rotate(135deg)"
        },
        // ======================== Body ========================
        "&-content": {
          width: "100%",
          tableLayout: "fixed",
          borderCollapse: "collapse",
          "th, td": {
            position: "relative",
            minWidth: cellHeight,
            fontWeight: "normal"
          },
          th: {
            height: token2.calc(cellHeight).add(token2.calc(pickerCellPaddingVertical).mul(2)).equal(),
            color: colorText,
            verticalAlign: "middle"
          }
        },
        "&-cell": Object.assign({
          padding: `${unit(pickerCellPaddingVertical)} 0`,
          color: colorTextDisabled,
          cursor: "pointer",
          // In view
          "&-in-view": {
            color: colorText
          }
        }, genPickerCellInnerStyle(token2)),
        // DatePanel only
        [`&-date-panel ${componentCls}-cell-in-view${componentCls}-cell-in-range${componentCls}-cell-range-hover-start ${pickerCellInnerCls},
        &-date-panel ${componentCls}-cell-in-view${componentCls}-cell-in-range${componentCls}-cell-range-hover-end ${pickerCellInnerCls}`]: {
          "&::after": {
            position: "absolute",
            top: 0,
            bottom: 0,
            zIndex: -1,
            background: cellHoverWithRangeBg,
            transition: `all ${motionDurationSlow}`,
            content: '""'
          }
        },
        [`&-date-panel
        ${componentCls}-cell-in-view${componentCls}-cell-in-range${componentCls}-cell-range-hover-start
        ${pickerCellInnerCls}::after`]: {
          insetInlineEnd: token2.calc(cellWidth).sub(cellHeight).mul(-1).div(2).equal(),
          insetInlineStart: 0
        },
        [`&-date-panel ${componentCls}-cell-in-view${componentCls}-cell-in-range${componentCls}-cell-range-hover-end ${pickerCellInnerCls}::after`]: {
          insetInlineEnd: 0,
          insetInlineStart: token2.calc(cellWidth).sub(cellHeight).mul(-1).div(2).equal()
        },
        // Hover with range start & end
        [`&-range-hover${componentCls}-range-start::after`]: {
          insetInlineEnd: "50%"
        },
        [`&-decade-panel,
        &-year-panel,
        &-quarter-panel,
        &-month-panel`]: {
          [`${componentCls}-content`]: {
            height: token2.calc(withoutTimeCellHeight).mul(4).equal()
          },
          [pickerCellInnerCls]: {
            padding: `0 ${unit(paddingXS)}`
          }
        },
        "&-quarter-panel": {
          [`${componentCls}-content`]: {
            height: pickerQuarterPanelContentHeight
          },
          // Quarter Panel Special Style
          [`${componentCls}-cell-range-hover-start::after`]: {
            insetInlineStart: quarterHoverCellFixedDistance,
            borderInlineStart: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
            [`${componentCls}-panel-rtl &`]: {
              insetInlineEnd: quarterHoverCellFixedDistance,
              borderInlineEnd: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`
            }
          },
          [`${componentCls}-cell-range-hover-end::after`]: {
            insetInlineEnd: quarterHoverCellFixedDistance,
            borderInlineEnd: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
            [`${componentCls}-panel-rtl &`]: {
              insetInlineStart: quarterHoverCellFixedDistance,
              borderInlineStart: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`
            }
          }
        },
        // ======================== Footer ========================
        [`&-panel ${componentCls}-footer`]: {
          borderTop: `${unit(lineWidth)} ${lineType} ${colorSplit}`
        },
        "&-footer": {
          width: "min-content",
          minWidth: "100%",
          lineHeight: unit(token2.calc(textHeight).sub(token2.calc(lineWidth).mul(2)).equal()),
          textAlign: "center",
          "&-extra": {
            padding: `0 ${unit(paddingSM)}`,
            lineHeight: unit(token2.calc(textHeight).sub(token2.calc(lineWidth).mul(2)).equal()),
            textAlign: "start",
            "&:not(:last-child)": {
              borderBottom: `${unit(lineWidth)} ${lineType} ${colorSplit}`
            }
          }
        },
        "&-now": {
          textAlign: "start"
        },
        "&-today-btn": {
          color: colorLink,
          "&:hover": {
            color: colorLinkHover
          },
          "&:active": {
            color: colorLinkActive
          },
          [`&${componentCls}-today-btn-disabled`]: {
            color: colorTextDisabled,
            cursor: "not-allowed"
          }
        },
        // ========================================================
        // =                       Special                        =
        // ========================================================
        // ===================== Decade Panel =====================
        "&-decade-panel": {
          [pickerCellInnerCls]: {
            padding: `0 ${unit(token2.calc(paddingXS).div(2).equal())}`
          },
          [`${componentCls}-cell::before`]: {
            display: "none"
          }
        },
        // ============= Year & Quarter & Month Panel =============
        [`&-year-panel,
        &-quarter-panel,
        &-month-panel`]: {
          [`${componentCls}-body`]: {
            padding: `0 ${unit(paddingXS)}`
          },
          [pickerCellInnerCls]: {
            width: pickerYearMonthCellWidth
          },
          [`${componentCls}-cell-range-hover-start::after`]: {
            borderStartStartRadius: borderRadiusSM,
            borderEndStartRadius: borderRadiusSM,
            borderStartEndRadius: 0,
            borderEndEndRadius: 0,
            [`${componentCls}-panel-rtl &`]: {
              borderStartStartRadius: 0,
              borderEndStartRadius: 0,
              borderStartEndRadius: borderRadiusSM,
              borderEndEndRadius: borderRadiusSM
            }
          },
          [`${componentCls}-cell-range-hover-end::after`]: {
            borderStartStartRadius: 0,
            borderEndStartRadius: 0,
            borderStartEndRadius: borderRadiusSM,
            borderEndEndRadius: borderRadiusSM,
            [`${componentCls}-panel-rtl &`]: {
              borderStartStartRadius: borderRadiusSM,
              borderEndStartRadius: borderRadiusSM,
              borderStartEndRadius: 0,
              borderEndEndRadius: 0
            }
          }
        },
        [`&-year-panel,
        &-month-panel`]: {
          [`${componentCls}-cell-range-hover-start::after`]: {
            insetInlineStart: commonHoverCellFixedDistance,
            borderInlineStart: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
            [`${componentCls}-panel-rtl &`]: {
              insetInlineEnd: commonHoverCellFixedDistance,
              borderInlineEnd: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`
            }
          },
          [`${componentCls}-cell-range-hover-end::after`]: {
            insetInlineEnd: commonHoverCellFixedDistance,
            borderInlineEnd: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`,
            [`${componentCls}-panel-rtl &`]: {
              insetInlineStart: commonHoverCellFixedDistance,
              borderInlineStart: `${unit(lineWidth)} dashed ${cellRangeBorderColor}`
            }
          }
        },
        // ====================== Week Panel ======================
        "&-week-panel": {
          [`${componentCls}-body`]: {
            padding: `${unit(paddingXS)} ${unit(paddingSM)}`
          },
          // Clear cell style
          [`${componentCls}-cell`]: {
            [`&:hover ${pickerCellInnerCls},
            &-selected ${pickerCellInnerCls},
            ${pickerCellInnerCls}`]: {
              background: "transparent !important"
            }
          },
          "&-row": {
            td: {
              "&:before": {
                transition: `background ${motionDurationMid}`
              },
              "&:first-child:before": {
                borderStartStartRadius: borderRadiusSM,
                borderEndStartRadius: borderRadiusSM
              },
              "&:last-child:before": {
                borderStartEndRadius: borderRadiusSM,
                borderEndEndRadius: borderRadiusSM
              }
            },
            [`&:hover td`]: {
              "&:before": {
                background: cellHoverBg
              }
            },
            [`&-range-start td,
            &-range-end td,
            &-selected td`]: {
              // Rise priority to override hover style
              [`&${pickerCellCls}`]: {
                "&:before": {
                  background: colorPrimary
                },
                [`&${componentCls}-cell-week`]: {
                  color: new TinyColor(colorTextLightSolid).setAlpha(0.5).toHexString()
                },
                [pickerCellInnerCls]: {
                  color: colorTextLightSolid
                }
              }
            },
            [`&-range-hover td:before`]: {
              background: controlItemBgActive
            }
          }
        },
        // ====================== Date Panel ======================
        "&-date-panel": {
          [`${componentCls}-body`]: {
            padding: `${unit(paddingXS)} ${unit(pickerDatePanelPaddingHorizontal)}`
          },
          [`${componentCls}-content`]: {
            width: token2.calc(cellWidth).mul(7).equal(),
            th: {
              width: cellWidth,
              boxSizing: "border-box",
              padding: 0
            }
          }
        },
        // ==================== Datetime Panel ====================
        "&-datetime-panel": {
          display: "flex",
          [`${componentCls}-time-panel`]: {
            borderInlineStart: `${unit(lineWidth)} ${lineType} ${colorSplit}`
          },
          [`${componentCls}-date-panel,
          ${componentCls}-time-panel`]: {
            transition: `opacity ${motionDurationSlow}`
          },
          // Keyboard
          "&-active": {
            [`${componentCls}-date-panel,
            ${componentCls}-time-panel`]: {
              opacity: 0.3,
              "&-active": {
                opacity: 1
              }
            }
          }
        },
        // ====================== Time Panel ======================
        "&-time-panel": {
          width: "auto",
          minWidth: "auto",
          direction: "ltr",
          [`${componentCls}-content`]: {
            display: "flex",
            flex: "auto",
            height: timeColumnHeight
          },
          "&-column": {
            flex: "1 0 auto",
            width: timeColumnWidth,
            margin: `${unit(paddingXXS)} 0`,
            padding: 0,
            overflowY: "hidden",
            textAlign: "start",
            listStyle: "none",
            transition: `background ${motionDurationMid}`,
            overflowX: "hidden",
            "&::-webkit-scrollbar": {
              width: 8,
              backgroundColor: "transparent"
            },
            "&::-webkit-scrollbar-thumb": {
              backgroundColor: token2.colorTextTertiary,
              borderRadius: 4
            },
            // For Firefox
            "&": {
              scrollbarWidth: "thin",
              scrollbarColor: `${token2.colorTextTertiary} transparent`
            },
            "&::after": {
              display: "block",
              height: token2.calc(timeColumnHeight).sub(timeCellHeight).equal(),
              content: '""'
            },
            "&:not(:first-child)": {
              borderInlineStart: `${unit(lineWidth)} ${lineType} ${colorSplit}`
            },
            "&-active": {
              background: new TinyColor(controlItemBgActive).setAlpha(0.2).toHexString()
            },
            "&:hover": {
              overflowY: "auto"
            },
            "> li": {
              margin: 0,
              padding: 0,
              [`&${componentCls}-time-panel-cell`]: {
                marginInline: marginXXS,
                [`${componentCls}-time-panel-cell-inner`]: {
                  display: "block",
                  width: token2.calc(timeColumnWidth).sub(token2.calc(marginXXS).mul(2)).equal(),
                  height: timeCellHeight,
                  margin: 0,
                  paddingBlock: 0,
                  paddingInlineEnd: 0,
                  paddingInlineStart: token2.calc(timeColumnWidth).sub(timeCellHeight).div(2).equal(),
                  color: colorText,
                  lineHeight: unit(timeCellHeight),
                  borderRadius: borderRadiusSM,
                  cursor: "pointer",
                  transition: `background ${motionDurationMid}`,
                  "&:hover": {
                    background: cellHoverBg
                  }
                },
                "&-selected": {
                  [`${componentCls}-time-panel-cell-inner`]: {
                    background: controlItemBgActive
                  }
                },
                "&-disabled": {
                  [`${componentCls}-time-panel-cell-inner`]: {
                    color: colorTextDisabled,
                    background: "transparent",
                    cursor: "not-allowed"
                  }
                }
              }
            }
          }
        },
        // https://github.com/ant-design/ant-design/issues/39227
        [`&-datetime-panel ${componentCls}-time-panel-column:after`]: {
          height: token2.calc(timeColumnHeight).sub(timeCellHeight).add(token2.calc(paddingXXS).mul(2)).equal()
        }
      }
    };
  };
  var genPickerStatusStyle = (token2) => {
    const {
      componentCls,
      colorError,
      colorWarning
    } = token2;
    return {
      [`${componentCls}:not(${componentCls}-disabled):not([disabled])`]: {
        [`&${componentCls}-status-error`]: {
          [`${componentCls}-active-bar`]: {
            background: colorError
          }
        },
        [`&${componentCls}-status-warning`]: {
          [`${componentCls}-active-bar`]: {
            background: colorWarning
          }
        }
      }
    };
  };
  var genPickerStyle = (token2) => {
    const {
      componentCls,
      antCls,
      controlHeight,
      paddingInline,
      lineWidth,
      lineType,
      colorBorder,
      borderRadius,
      motionDurationMid,
      colorTextDisabled,
      colorTextPlaceholder,
      controlHeightLG,
      fontSizeLG,
      controlHeightSM,
      paddingInlineSM,
      paddingXS,
      marginXS,
      colorTextDescription,
      lineWidthBold,
      colorPrimary,
      motionDurationSlow,
      zIndexPopup,
      paddingXXS,
      paddingSM,
      textHeight,
      cellActiveWithRangeBg,
      colorPrimaryBorder,
      sizePopupArrow,
      colorBgElevated,
      borderRadiusLG,
      boxShadowSecondary,
      borderRadiusSM,
      colorSplit,
      cellHoverBg,
      presetsWidth,
      presetsMaxWidth,
      boxShadowPopoverArrow,
      fontHeight,
      fontHeightLG,
      lineHeightLG
    } = token2;
    return [
      {
        [componentCls]: Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), genPickerPadding(token2, controlHeight, fontHeight, paddingInline)), {
          position: "relative",
          display: "inline-flex",
          alignItems: "center",
          lineHeight: 1,
          borderRadius,
          transition: `border ${motionDurationMid}, box-shadow ${motionDurationMid}, background ${motionDurationMid}`,
          // ======================== Input =========================
          [`${componentCls}-input`]: {
            position: "relative",
            display: "inline-flex",
            alignItems: "center",
            width: "100%",
            "> input": Object.assign(Object.assign({
              position: "relative",
              display: "inline-block",
              width: "100%",
              color: "inherit",
              fontSize: token2.fontSize,
              lineHeight: token2.lineHeight,
              transition: `all ${motionDurationMid}`
            }, genPlaceholderStyle(colorTextPlaceholder)), {
              flex: "auto",
              // Fix Firefox flex not correct:
              // https://github.com/ant-design/ant-design/pull/20023#issuecomment-564389553
              minWidth: 1,
              height: "auto",
              padding: 0,
              background: "transparent",
              border: 0,
              fontFamily: "inherit",
              "&:focus": {
                boxShadow: "none",
                outline: 0
              },
              "&[disabled]": {
                background: "transparent",
                color: colorTextDisabled,
                cursor: "not-allowed"
              }
            }),
            "&:hover": {
              [`${componentCls}-clear`]: {
                opacity: 1
              },
              // Should use the following selector, but since `:has` has poor compatibility,
              // we use `:not(:last-child)` instead, which may cause some problems in some cases.
              // [`${componentCls}-suffix:has(+ ${componentCls}-clear)`]: {
              [`${componentCls}-suffix:not(:last-child)`]: {
                opacity: 0
              }
            },
            "&-placeholder": {
              "> input": {
                color: colorTextPlaceholder
              }
            }
          },
          // Size
          "&-large": Object.assign(Object.assign({}, genPickerPadding(token2, controlHeightLG, fontHeightLG, paddingInline)), {
            [`${componentCls}-input > input`]: {
              fontSize: fontSizeLG,
              lineHeight: lineHeightLG
            }
          }),
          "&-small": Object.assign({}, genPickerPadding(token2, controlHeightSM, fontHeight, paddingInlineSM)),
          [`${componentCls}-suffix`]: {
            display: "flex",
            flex: "none",
            alignSelf: "center",
            marginInlineStart: token2.calc(paddingXS).div(2).equal(),
            color: colorTextDisabled,
            lineHeight: 1,
            pointerEvents: "none",
            transition: `opacity ${motionDurationMid}, color ${motionDurationMid}`,
            "> *": {
              verticalAlign: "top",
              "&:not(:last-child)": {
                marginInlineEnd: marginXS
              }
            }
          },
          [`${componentCls}-clear`]: {
            position: "absolute",
            top: "50%",
            insetInlineEnd: 0,
            color: colorTextDisabled,
            lineHeight: 1,
            transform: "translateY(-50%)",
            cursor: "pointer",
            opacity: 0,
            transition: `opacity ${motionDurationMid}, color ${motionDurationMid}`,
            "> *": {
              verticalAlign: "top"
            },
            "&:hover": {
              color: colorTextDescription
            }
          },
          [`${componentCls}-separator`]: {
            position: "relative",
            display: "inline-block",
            width: "1em",
            height: fontSizeLG,
            color: colorTextDisabled,
            fontSize: fontSizeLG,
            verticalAlign: "top",
            cursor: "default",
            [`${componentCls}-focused &`]: {
              color: colorTextDescription
            },
            [`${componentCls}-range-separator &`]: {
              [`${componentCls}-disabled &`]: {
                cursor: "not-allowed"
              }
            }
          },
          // ======================== Range =========================
          "&-range": {
            position: "relative",
            display: "inline-flex",
            // Clear
            [`${componentCls}-clear`]: {
              insetInlineEnd: paddingInline
            },
            "&:hover": {
              [`${componentCls}-clear`]: {
                opacity: 1
              },
              // Should use the following selector, but since `:has` has poor compatibility,
              // we use `:not(:last-child)` instead, which may cause some problems in some cases.
              // [`${componentCls}-suffix:has(+ ${componentCls}-clear)`]: {
              [`${componentCls}-suffix:not(:last-child)`]: {
                opacity: 0
              }
            },
            // Active bar
            [`${componentCls}-active-bar`]: {
              bottom: token2.calc(lineWidth).mul(-1).equal(),
              height: lineWidthBold,
              marginInlineStart: paddingInline,
              background: colorPrimary,
              opacity: 0,
              transition: `all ${motionDurationSlow} ease-out`,
              pointerEvents: "none"
            },
            [`&${componentCls}-focused`]: {
              [`${componentCls}-active-bar`]: {
                opacity: 1
              }
            },
            [`${componentCls}-range-separator`]: {
              alignItems: "center",
              padding: `0 ${unit(paddingXS)}`,
              lineHeight: 1
            },
            [`&${componentCls}-small`]: {
              [`${componentCls}-clear`]: {
                insetInlineEnd: paddingInlineSM
              },
              [`${componentCls}-active-bar`]: {
                marginInlineStart: paddingInlineSM
              }
            }
          },
          // ======================= Dropdown =======================
          "&-dropdown": Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), genPanelStyle(token2)), {
            position: "absolute",
            // Fix incorrect position of picker popup
            // https://github.com/ant-design/ant-design/issues/35590
            top: -9999,
            left: {
              _skip_check_: true,
              value: -9999
            },
            zIndex: zIndexPopup,
            [`&${componentCls}-dropdown-hidden`]: {
              display: "none"
            },
            [`&${componentCls}-dropdown-placement-bottomLeft`]: {
              [`${componentCls}-range-arrow`]: {
                top: 0,
                display: "block",
                transform: "translateY(-100%)"
              }
            },
            [`&${componentCls}-dropdown-placement-topLeft`]: {
              [`${componentCls}-range-arrow`]: {
                bottom: 0,
                display: "block",
                transform: "translateY(100%) rotate(180deg)"
              }
            },
            [`&${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-dropdown-placement-topLeft,
          &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-dropdown-placement-topRight,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-dropdown-placement-topLeft,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-dropdown-placement-topRight`]: {
              animationName: slideDownIn
            },
            [`&${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-dropdown-placement-bottomLeft,
          &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-dropdown-placement-bottomRight,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-dropdown-placement-bottomLeft,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-dropdown-placement-bottomRight`]: {
              animationName: slideUpIn
            },
            [`&${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-dropdown-placement-topLeft,
          &${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-dropdown-placement-topRight`]: {
              animationName: slideDownOut
            },
            [`&${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-dropdown-placement-bottomLeft,
          &${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-dropdown-placement-bottomRight`]: {
              animationName: slideUpOut
            },
            // Time picker with additional style
            [`${componentCls}-panel > ${componentCls}-time-panel`]: {
              paddingTop: paddingXXS
            },
            // ======================== Ranges ========================
            [`${componentCls}-ranges`]: {
              marginBottom: 0,
              padding: `${unit(paddingXXS)} ${unit(paddingSM)}`,
              overflow: "hidden",
              lineHeight: unit(token2.calc(textHeight).sub(token2.calc(lineWidth).mul(2)).sub(token2.calc(paddingXS).div(2)).equal()),
              textAlign: "start",
              listStyle: "none",
              display: "flex",
              justifyContent: "space-between",
              "> li": {
                display: "inline-block"
              },
              // https://github.com/ant-design/ant-design/issues/23687
              [`${componentCls}-preset > ${antCls}-tag-blue`]: {
                color: colorPrimary,
                background: cellActiveWithRangeBg,
                borderColor: colorPrimaryBorder,
                cursor: "pointer"
              },
              [`${componentCls}-ok`]: {
                marginInlineStart: "auto"
              }
            },
            [`${componentCls}-range-wrapper`]: {
              display: "flex",
              position: "relative"
            },
            [`${componentCls}-range-arrow`]: Object.assign({
              position: "absolute",
              zIndex: 1,
              display: "none",
              marginInlineStart: token2.calc(paddingInline).mul(1.5).equal(),
              transition: `left ${motionDurationSlow} ease-out`
            }, genRoundedArrow(token2, colorBgElevated, boxShadowPopoverArrow)),
            [`${componentCls}-panel-container`]: {
              overflow: "hidden",
              verticalAlign: "top",
              background: colorBgElevated,
              borderRadius: borderRadiusLG,
              boxShadow: boxShadowSecondary,
              transition: `margin ${motionDurationSlow}`,
              // ======================== Layout ========================
              [`${componentCls}-panel-layout`]: {
                display: "flex",
                flexWrap: "nowrap",
                alignItems: "stretch"
              },
              // ======================== Preset ========================
              [`${componentCls}-presets`]: {
                display: "flex",
                flexDirection: "column",
                minWidth: presetsWidth,
                maxWidth: presetsMaxWidth,
                ul: {
                  height: 0,
                  flex: "auto",
                  listStyle: "none",
                  overflow: "auto",
                  margin: 0,
                  padding: paddingXS,
                  borderInlineEnd: `${unit(lineWidth)} ${lineType} ${colorSplit}`,
                  li: Object.assign(Object.assign({}, textEllipsis), {
                    borderRadius: borderRadiusSM,
                    paddingInline: paddingXS,
                    paddingBlock: token2.calc(controlHeightSM).sub(fontHeight).div(2).equal(),
                    cursor: "pointer",
                    transition: `all ${motionDurationSlow}`,
                    "+ li": {
                      marginTop: marginXS
                    },
                    "&:hover": {
                      background: cellHoverBg
                    }
                  })
                }
              },
              // ======================== Panels ========================
              [`${componentCls}-panels`]: {
                display: "inline-flex",
                flexWrap: "nowrap",
                direction: "ltr",
                [`${componentCls}-panel`]: {
                  borderWidth: `0 0 ${unit(lineWidth)}`
                },
                "&:last-child": {
                  [`${componentCls}-panel`]: {
                    borderWidth: 0
                  }
                }
              },
              [`${componentCls}-panel`]: {
                verticalAlign: "top",
                background: "transparent",
                borderRadius: 0,
                borderWidth: 0,
                [`${componentCls}-content,
            table`]: {
                  textAlign: "center"
                },
                "&-focused": {
                  borderColor: colorBorder
                }
              }
            }
          }),
          "&-dropdown-range": {
            padding: `${unit(token2.calc(sizePopupArrow).mul(2).div(3).equal())} 0`,
            "&-hidden": {
              display: "none"
            }
          },
          "&-rtl": {
            direction: "rtl",
            [`${componentCls}-separator`]: {
              transform: "rotate(180deg)"
            },
            [`${componentCls}-footer`]: {
              "&-extra": {
                direction: "rtl"
              }
            }
          }
        })
      },
      // Follow code may reuse in other components
      initSlideMotion(token2, "slide-up"),
      initSlideMotion(token2, "slide-down"),
      initMoveMotion(token2, "move-up"),
      initMoveMotion(token2, "move-down")
    ];
  };
  var style_default12 = genStyleHooks("DatePicker", (token2) => {
    const pickerToken = merge2(initInputToken(token2), initPickerPanelToken(token2));
    return [
      genPickerStyle(pickerToken),
      variants_default2(pickerToken),
      genPickerStatusStyle(pickerToken),
      // =====================================================
      // ==             Space Compact                       ==
      // =====================================================
      genCompactItemStyle(token2, {
        focusElCls: `${token2.componentCls}-focused`
      })
    ];
  }, prepareComponentToken8);

  // node_modules/antd/es/card/Card.js
  var React270 = __toESM(require_react());
  var import_classnames83 = __toESM(require_classnames());

  // node_modules/antd/es/skeleton/Skeleton.js
  var import_classnames74 = __toESM(require_classnames());
  var React253 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Avatar.js
  var import_classnames67 = __toESM(require_classnames());
  var React245 = __toESM(require_react());

  // node_modules/antd/es/skeleton/Element.js
  var import_classnames66 = __toESM(require_classnames());
  var React244 = __toESM(require_react());
  var Element2 = (props) => {
    const {
      prefixCls,
      className,
      style: style2,
      size,
      shape
    } = props;
    const sizeCls = (0, import_classnames66.default)({
      [`${prefixCls}-lg`]: size === "large",
      [`${prefixCls}-sm`]: size === "small"
    });
    const shapeCls = (0, import_classnames66.default)({
      [`${prefixCls}-circle`]: shape === "circle",
      [`${prefixCls}-square`]: shape === "square",
      [`${prefixCls}-round`]: shape === "round"
    });
    const sizeStyle = React244.useMemo(() => typeof size === "number" ? {
      width: size,
      height: size,
      lineHeight: `${size}px`
    } : {}, [size]);
    return /* @__PURE__ */ React244.createElement("span", {
      className: (0, import_classnames66.default)(prefixCls, sizeCls, shapeCls, className),
      style: Object.assign(Object.assign({}, sizeStyle), style2)
    });
  };
  var Element_default = Element2;

  // node_modules/antd/es/skeleton/style/index.js
  var skeletonClsLoading = new Keyframes_default(`ant-skeleton-loading`, {
    "0%": {
      backgroundPosition: "100% 50%"
    },
    "100%": {
      backgroundPosition: "0 50%"
    }
  });
  var genSkeletonElementCommonSize = (size) => ({
    height: size,
    lineHeight: unit(size)
  });
  var genSkeletonElementAvatarSize = (size) => Object.assign({
    width: size
  }, genSkeletonElementCommonSize(size));
  var genSkeletonColor = (token2) => ({
    background: token2.skeletonLoadingBackground,
    backgroundSize: "400% 100%",
    animationName: skeletonClsLoading,
    animationDuration: token2.skeletonLoadingMotionDuration,
    animationTimingFunction: "ease",
    animationIterationCount: "infinite"
  });
  var genSkeletonElementInputSize = (size, calc) => Object.assign({
    width: calc(size).mul(5).equal(),
    minWidth: calc(size).mul(5).equal()
  }, genSkeletonElementCommonSize(size));
  var genSkeletonElementAvatar = (token2) => {
    const {
      skeletonAvatarCls,
      gradientFromColor,
      controlHeight,
      controlHeightLG,
      controlHeightSM
    } = token2;
    return {
      [`${skeletonAvatarCls}`]: Object.assign({
        display: "inline-block",
        verticalAlign: "top",
        background: gradientFromColor
      }, genSkeletonElementAvatarSize(controlHeight)),
      [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {
        borderRadius: "50%"
      },
      [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),
      [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))
    };
  };
  var genSkeletonElementInput = (token2) => {
    const {
      controlHeight,
      borderRadiusSM,
      skeletonInputCls,
      controlHeightLG,
      controlHeightSM,
      gradientFromColor,
      calc
    } = token2;
    return {
      [`${skeletonInputCls}`]: Object.assign({
        display: "inline-block",
        verticalAlign: "top",
        background: gradientFromColor,
        borderRadius: borderRadiusSM
      }, genSkeletonElementInputSize(controlHeight, calc)),
      [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG, calc)),
      [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM, calc))
    };
  };
  var genSkeletonElementImageSize = (size) => Object.assign({
    width: size
  }, genSkeletonElementCommonSize(size));
  var genSkeletonElementImage = (token2) => {
    const {
      skeletonImageCls,
      imageSizeBase,
      gradientFromColor,
      borderRadiusSM,
      calc
    } = token2;
    return {
      [`${skeletonImageCls}`]: Object.assign(Object.assign({
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        verticalAlign: "top",
        background: gradientFromColor,
        borderRadius: borderRadiusSM
      }, genSkeletonElementImageSize(calc(imageSizeBase).mul(2).equal())), {
        [`${skeletonImageCls}-path`]: {
          fill: "#bfbfbf"
        },
        [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {
          maxWidth: calc(imageSizeBase).mul(4).equal(),
          maxHeight: calc(imageSizeBase).mul(4).equal()
        }),
        [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {
          borderRadius: "50%"
        }
      }),
      [`${skeletonImageCls}${skeletonImageCls}-circle`]: {
        borderRadius: "50%"
      }
    };
  };
  var genSkeletonElementButtonShape = (token2, size, buttonCls) => {
    const {
      skeletonButtonCls
    } = token2;
    return {
      [`${buttonCls}${skeletonButtonCls}-circle`]: {
        width: size,
        minWidth: size,
        borderRadius: "50%"
      },
      [`${buttonCls}${skeletonButtonCls}-round`]: {
        borderRadius: size
      }
    };
  };
  var genSkeletonElementButtonSize = (size, calc) => Object.assign({
    width: calc(size).mul(2).equal(),
    minWidth: calc(size).mul(2).equal()
  }, genSkeletonElementCommonSize(size));
  var genSkeletonElementButton = (token2) => {
    const {
      borderRadiusSM,
      skeletonButtonCls,
      controlHeight,
      controlHeightLG,
      controlHeightSM,
      gradientFromColor,
      calc
    } = token2;
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
      [`${skeletonButtonCls}`]: Object.assign({
        display: "inline-block",
        verticalAlign: "top",
        background: gradientFromColor,
        borderRadius: borderRadiusSM,
        width: calc(controlHeight).mul(2).equal(),
        minWidth: calc(controlHeight).mul(2).equal()
      }, genSkeletonElementButtonSize(controlHeight, calc))
    }, genSkeletonElementButtonShape(token2, controlHeight, skeletonButtonCls)), {
      [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG, calc))
    }), genSkeletonElementButtonShape(token2, controlHeightLG, `${skeletonButtonCls}-lg`)), {
      [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM, calc))
    }), genSkeletonElementButtonShape(token2, controlHeightSM, `${skeletonButtonCls}-sm`));
  };
  var genBaseStyle3 = (token2) => {
    const {
      componentCls,
      skeletonAvatarCls,
      skeletonTitleCls,
      skeletonParagraphCls,
      skeletonButtonCls,
      skeletonInputCls,
      skeletonImageCls,
      controlHeight,
      controlHeightLG,
      controlHeightSM,
      gradientFromColor,
      padding,
      marginSM,
      borderRadius,
      titleHeight,
      blockRadius,
      paragraphLiHeight,
      controlHeightXS,
      paragraphMarginTop
    } = token2;
    return {
      [`${componentCls}`]: {
        display: "table",
        width: "100%",
        [`${componentCls}-header`]: {
          display: "table-cell",
          paddingInlineEnd: padding,
          verticalAlign: "top",
          // Avatar
          [`${skeletonAvatarCls}`]: Object.assign({
            display: "inline-block",
            verticalAlign: "top",
            background: gradientFromColor
          }, genSkeletonElementAvatarSize(controlHeight)),
          [`${skeletonAvatarCls}-circle`]: {
            borderRadius: "50%"
          },
          [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),
          [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))
        },
        [`${componentCls}-content`]: {
          display: "table-cell",
          width: "100%",
          verticalAlign: "top",
          // Title
          [`${skeletonTitleCls}`]: {
            width: "100%",
            height: titleHeight,
            background: gradientFromColor,
            borderRadius: blockRadius,
            [`+ ${skeletonParagraphCls}`]: {
              marginBlockStart: controlHeightSM
            }
          },
          // paragraph
          [`${skeletonParagraphCls}`]: {
            padding: 0,
            "> li": {
              width: "100%",
              height: paragraphLiHeight,
              listStyle: "none",
              background: gradientFromColor,
              borderRadius: blockRadius,
              "+ li": {
                marginBlockStart: controlHeightXS
              }
            }
          },
          [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {
            width: "61%"
          }
        },
        [`&-round ${componentCls}-content`]: {
          [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {
            borderRadius
          }
        }
      },
      [`${componentCls}-with-avatar ${componentCls}-content`]: {
        // Title
        [`${skeletonTitleCls}`]: {
          marginBlockStart: marginSM,
          [`+ ${skeletonParagraphCls}`]: {
            marginBlockStart: paragraphMarginTop
          }
        }
      },
      // Skeleton element
      [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({
        display: "inline-block",
        width: "auto"
      }, genSkeletonElementButton(token2)), genSkeletonElementAvatar(token2)), genSkeletonElementInput(token2)), genSkeletonElementImage(token2)),
      // Skeleton Block Button, Input
      [`${componentCls}${componentCls}-block`]: {
        width: "100%",
        [`${skeletonButtonCls}`]: {
          width: "100%"
        },
        [`${skeletonInputCls}`]: {
          width: "100%"
        }
      },
      // With active animation
      [`${componentCls}${componentCls}-active`]: {
        [`
        ${skeletonTitleCls},
        ${skeletonParagraphCls} > li,
        ${skeletonAvatarCls},
        ${skeletonButtonCls},
        ${skeletonInputCls},
        ${skeletonImageCls}
      `]: Object.assign({}, genSkeletonColor(token2))
      }
    };
  };
  var prepareComponentToken9 = (token2) => {
    const {
      colorFillContent,
      colorFill
    } = token2;
    const gradientFromColor = colorFillContent;
    const gradientToColor = colorFill;
    return {
      color: gradientFromColor,
      colorGradientEnd: gradientToColor,
      gradientFromColor,
      gradientToColor,
      titleHeight: token2.controlHeight / 2,
      blockRadius: token2.borderRadiusSM,
      paragraphMarginTop: token2.marginLG + token2.marginXXS,
      paragraphLiHeight: token2.controlHeight / 2
    };
  };
  var style_default13 = genStyleHooks("Skeleton", (token2) => {
    const {
      componentCls,
      calc
    } = token2;
    const skeletonToken = merge2(token2, {
      skeletonAvatarCls: `${componentCls}-avatar`,
      skeletonTitleCls: `${componentCls}-title`,
      skeletonParagraphCls: `${componentCls}-paragraph`,
      skeletonButtonCls: `${componentCls}-button`,
      skeletonInputCls: `${componentCls}-input`,
      skeletonImageCls: `${componentCls}-image`,
      imageSizeBase: calc(token2.controlHeight).mul(1.5).equal(),
      borderRadius: 100,
      // Large number to make capsule shape
      skeletonLoadingBackground: `linear-gradient(90deg, ${token2.gradientFromColor} 25%, ${token2.gradientToColor} 37%, ${token2.gradientFromColor} 63%)`,
      skeletonLoadingMotionDuration: "1.4s"
    });
    return [genBaseStyle3(skeletonToken)];
  }, prepareComponentToken9, {
    deprecatedTokens: [["color", "gradientFromColor"], ["colorGradientEnd", "gradientToColor"]]
  });

  // node_modules/antd/es/skeleton/Avatar.js
  var SkeletonAvatar = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      active,
      shape = "circle",
      size = "default"
    } = props;
    const {
      getPrefixCls
    } = React245.useContext(ConfigContext);
    const prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default13(prefixCls);
    const otherProps = omit(props, ["prefixCls", "className"]);
    const cls = (0, import_classnames67.default)(prefixCls, `${prefixCls}-element`, {
      [`${prefixCls}-active`]: active
    }, className, rootClassName, hashId, cssVarCls);
    return wrapCSSVar(/* @__PURE__ */ React245.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React245.createElement(Element_default, Object.assign({
      prefixCls: `${prefixCls}-avatar`,
      shape,
      size
    }, otherProps))));
  };
  var Avatar_default = SkeletonAvatar;

  // node_modules/antd/es/skeleton/Button.js
  var import_classnames68 = __toESM(require_classnames());
  var React246 = __toESM(require_react());
  var SkeletonButton = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      active,
      block = false,
      size = "default"
    } = props;
    const {
      getPrefixCls
    } = React246.useContext(ConfigContext);
    const prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default13(prefixCls);
    const otherProps = omit(props, ["prefixCls"]);
    const cls = (0, import_classnames68.default)(prefixCls, `${prefixCls}-element`, {
      [`${prefixCls}-active`]: active,
      [`${prefixCls}-block`]: block
    }, className, rootClassName, hashId, cssVarCls);
    return wrapCSSVar(/* @__PURE__ */ React246.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React246.createElement(Element_default, Object.assign({
      prefixCls: `${prefixCls}-button`,
      size
    }, otherProps))));
  };
  var Button_default = SkeletonButton;

  // node_modules/antd/es/skeleton/Image.js
  var import_classnames69 = __toESM(require_classnames());
  var React247 = __toESM(require_react());
  var path = "M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z";
  var SkeletonImage = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      style: style2,
      active
    } = props;
    const {
      getPrefixCls
    } = React247.useContext(ConfigContext);
    const prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default13(prefixCls);
    const cls = (0, import_classnames69.default)(prefixCls, `${prefixCls}-element`, {
      [`${prefixCls}-active`]: active
    }, className, rootClassName, hashId, cssVarCls);
    return wrapCSSVar(/* @__PURE__ */ React247.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React247.createElement("div", {
      className: (0, import_classnames69.default)(`${prefixCls}-image`, className),
      style: style2
    }, /* @__PURE__ */ React247.createElement("svg", {
      viewBox: "0 0 1098 1024",
      xmlns: "http://www.w3.org/2000/svg",
      className: `${prefixCls}-image-svg`
    }, /* @__PURE__ */ React247.createElement("path", {
      d: path,
      className: `${prefixCls}-image-path`
    })))));
  };
  var Image_default = SkeletonImage;

  // node_modules/antd/es/skeleton/Input.js
  var import_classnames70 = __toESM(require_classnames());
  var React248 = __toESM(require_react());
  var SkeletonInput = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      active,
      block,
      size = "default"
    } = props;
    const {
      getPrefixCls
    } = React248.useContext(ConfigContext);
    const prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default13(prefixCls);
    const otherProps = omit(props, ["prefixCls"]);
    const cls = (0, import_classnames70.default)(prefixCls, `${prefixCls}-element`, {
      [`${prefixCls}-active`]: active,
      [`${prefixCls}-block`]: block
    }, className, rootClassName, hashId, cssVarCls);
    return wrapCSSVar(/* @__PURE__ */ React248.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React248.createElement(Element_default, Object.assign({
      prefixCls: `${prefixCls}-input`,
      size
    }, otherProps))));
  };
  var Input_default2 = SkeletonInput;

  // node_modules/@ant-design/icons/es/icons/DotChartOutlined.js
  var React249 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DotChartOutlined.js
  var DotChartOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM288 604a64 64 0 10128 0 64 64 0 10-128 0zm118-224a48 48 0 1096 0 48 48 0 10-96 0zm158 228a96 96 0 10192 0 96 96 0 10-192 0zm148-314a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "dot-chart", "theme": "outlined" };
  var DotChartOutlined_default = DotChartOutlined;

  // node_modules/@ant-design/icons/es/icons/DotChartOutlined.js
  var DotChartOutlined2 = function DotChartOutlined3(props, ref) {
    return /* @__PURE__ */ React249.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: DotChartOutlined_default
    }));
  };
  if (true) {
    DotChartOutlined2.displayName = "DotChartOutlined";
  }
  var DotChartOutlined_default2 = /* @__PURE__ */ React249.forwardRef(DotChartOutlined2);

  // node_modules/antd/es/skeleton/Node.js
  var import_classnames71 = __toESM(require_classnames());
  var React250 = __toESM(require_react());
  var SkeletonNode = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      style: style2,
      active,
      children
    } = props;
    const {
      getPrefixCls
    } = React250.useContext(ConfigContext);
    const prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default13(prefixCls);
    const cls = (0, import_classnames71.default)(prefixCls, `${prefixCls}-element`, {
      [`${prefixCls}-active`]: active
    }, hashId, className, rootClassName, cssVarCls);
    const content = children !== null && children !== void 0 ? children : /* @__PURE__ */ React250.createElement(DotChartOutlined_default2, null);
    return wrapCSSVar(/* @__PURE__ */ React250.createElement("div", {
      className: cls
    }, /* @__PURE__ */ React250.createElement("div", {
      className: (0, import_classnames71.default)(`${prefixCls}-image`, className),
      style: style2
    }, content)));
  };
  var Node_default = SkeletonNode;

  // node_modules/antd/es/skeleton/Paragraph.js
  var import_classnames72 = __toESM(require_classnames());
  var React251 = __toESM(require_react());
  var Paragraph = (props) => {
    const getWidth = (index2) => {
      const {
        width,
        rows: rows2 = 2
      } = props;
      if (Array.isArray(width)) {
        return width[index2];
      }
      if (rows2 - 1 === index2) {
        return width;
      }
      return void 0;
    };
    const {
      prefixCls,
      className,
      style: style2,
      rows
    } = props;
    const rowList = _toConsumableArray(Array(rows)).map((_, index2) => (
      // eslint-disable-next-line react/no-array-index-key
      /* @__PURE__ */ React251.createElement("li", {
        key: index2,
        style: {
          width: getWidth(index2)
        }
      })
    ));
    return /* @__PURE__ */ React251.createElement("ul", {
      className: (0, import_classnames72.default)(prefixCls, className),
      style: style2
    }, rowList);
  };
  var Paragraph_default = Paragraph;

  // node_modules/antd/es/skeleton/Title.js
  var import_classnames73 = __toESM(require_classnames());
  var React252 = __toESM(require_react());
  var Title = (_ref) => {
    let {
      prefixCls,
      className,
      width,
      style: style2
    } = _ref;
    return /* @__PURE__ */ React252.createElement("h3", {
      className: (0, import_classnames73.default)(prefixCls, className),
      style: Object.assign({
        width
      }, style2)
    });
  };
  var Title_default = Title;

  // node_modules/antd/es/skeleton/Skeleton.js
  function getComponentProps(prop) {
    if (prop && typeof prop === "object") {
      return prop;
    }
    return {};
  }
  function getAvatarBasicProps(hasTitle, hasParagraph) {
    if (hasTitle && !hasParagraph) {
      return {
        size: "large",
        shape: "square"
      };
    }
    return {
      size: "large",
      shape: "circle"
    };
  }
  function getTitleBasicProps(hasAvatar, hasParagraph) {
    if (!hasAvatar && hasParagraph) {
      return {
        width: "38%"
      };
    }
    if (hasAvatar && hasParagraph) {
      return {
        width: "50%"
      };
    }
    return {};
  }
  function getParagraphBasicProps(hasAvatar, hasTitle) {
    const basicProps = {};
    if (!hasAvatar || !hasTitle) {
      basicProps.width = "61%";
    }
    if (!hasAvatar && hasTitle) {
      basicProps.rows = 3;
    } else {
      basicProps.rows = 2;
    }
    return basicProps;
  }
  var Skeleton = (props) => {
    const {
      prefixCls: customizePrefixCls,
      loading,
      className,
      rootClassName,
      style: style2,
      children,
      avatar = false,
      title = true,
      paragraph = true,
      active,
      round
    } = props;
    const {
      getPrefixCls,
      direction,
      skeleton
    } = React253.useContext(ConfigContext);
    const prefixCls = getPrefixCls("skeleton", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default13(prefixCls);
    if (loading || !("loading" in props)) {
      const hasAvatar = !!avatar;
      const hasTitle = !!title;
      const hasParagraph = !!paragraph;
      let avatarNode;
      if (hasAvatar) {
        const avatarProps = Object.assign(Object.assign({
          prefixCls: `${prefixCls}-avatar`
        }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));
        avatarNode = /* @__PURE__ */ React253.createElement("div", {
          className: `${prefixCls}-header`
        }, /* @__PURE__ */ React253.createElement(Element_default, Object.assign({}, avatarProps)));
      }
      let contentNode;
      if (hasTitle || hasParagraph) {
        let $title;
        if (hasTitle) {
          const titleProps = Object.assign(Object.assign({
            prefixCls: `${prefixCls}-title`
          }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));
          $title = /* @__PURE__ */ React253.createElement(Title_default, Object.assign({}, titleProps));
        }
        let paragraphNode;
        if (hasParagraph) {
          const paragraphProps = Object.assign(Object.assign({
            prefixCls: `${prefixCls}-paragraph`
          }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));
          paragraphNode = /* @__PURE__ */ React253.createElement(Paragraph_default, Object.assign({}, paragraphProps));
        }
        contentNode = /* @__PURE__ */ React253.createElement("div", {
          className: `${prefixCls}-content`
        }, $title, paragraphNode);
      }
      const cls = (0, import_classnames74.default)(prefixCls, {
        [`${prefixCls}-with-avatar`]: hasAvatar,
        [`${prefixCls}-active`]: active,
        [`${prefixCls}-rtl`]: direction === "rtl",
        [`${prefixCls}-round`]: round
      }, skeleton === null || skeleton === void 0 ? void 0 : skeleton.className, className, rootClassName, hashId, cssVarCls);
      return wrapCSSVar(/* @__PURE__ */ React253.createElement("div", {
        className: cls,
        style: Object.assign(Object.assign({}, skeleton === null || skeleton === void 0 ? void 0 : skeleton.style), style2)
      }, avatarNode, contentNode));
    }
    return typeof children !== "undefined" ? children : null;
  };
  Skeleton.Button = Button_default;
  Skeleton.Avatar = Avatar_default;
  Skeleton.Input = Input_default2;
  Skeleton.Image = Image_default;
  Skeleton.Node = Node_default;
  if (true) {
    Skeleton.displayName = "Skeleton";
  }
  var Skeleton_default = Skeleton;

  // node_modules/antd/es/skeleton/index.js
  var skeleton_default = Skeleton_default;

  // node_modules/antd/es/tabs/index.js
  var React268 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/PlusOutlined.js
  var React254 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js
  var PlusOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z" } }, { "tag": "path", "attrs": { "d": "M192 474h672q8 0 8 8v60q0 8-8 8H160q-8 0-8-8v-60q0-8 8-8z" } }] }, "name": "plus", "theme": "outlined" };
  var PlusOutlined_default = PlusOutlined;

  // node_modules/@ant-design/icons/es/icons/PlusOutlined.js
  var PlusOutlined2 = function PlusOutlined3(props, ref) {
    return /* @__PURE__ */ React254.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: PlusOutlined_default
    }));
  };
  if (true) {
    PlusOutlined2.displayName = "PlusOutlined";
  }
  var PlusOutlined_default2 = /* @__PURE__ */ React254.forwardRef(PlusOutlined2);

  // node_modules/antd/es/tabs/index.js
  var import_classnames81 = __toESM(require_classnames());

  // node_modules/rc-tabs/es/Tabs.js
  var import_classnames80 = __toESM(require_classnames());
  var React266 = __toESM(require_react());
  var import_react79 = __toESM(require_react());

  // node_modules/rc-tabs/es/TabContext.js
  var import_react71 = __toESM(require_react());
  var TabContext_default = /* @__PURE__ */ (0, import_react71.createContext)(null);

  // node_modules/rc-tabs/es/TabNavList/Wrapper.js
  var React264 = __toESM(require_react());

  // node_modules/rc-tabs/es/TabNavList/index.js
  var import_classnames77 = __toESM(require_classnames());
  var React262 = __toESM(require_react());
  var import_react78 = __toESM(require_react());

  // node_modules/rc-tabs/es/hooks/useIndicator.js
  var import_react72 = __toESM(require_react());
  var useIndicator = function useIndicator2(options) {
    var activeTabOffset = options.activeTabOffset, horizontal = options.horizontal, rtl = options.rtl, _options$indicator = options.indicator, indicator = _options$indicator === void 0 ? {} : _options$indicator;
    var size = indicator.size, _indicator$align = indicator.align, align = _indicator$align === void 0 ? "center" : _indicator$align;
    var _useState = (0, import_react72.useState)(), _useState2 = _slicedToArray(_useState, 2), inkStyle = _useState2[0], setInkStyle = _useState2[1];
    var inkBarRafRef = (0, import_react72.useRef)();
    var getLength = import_react72.default.useCallback(function(origin) {
      if (typeof size === "function") {
        return size(origin);
      }
      if (typeof size === "number") {
        return size;
      }
      return origin;
    }, [size]);
    function cleanInkBarRaf() {
      raf_default.cancel(inkBarRafRef.current);
    }
    (0, import_react72.useEffect)(function() {
      var newInkStyle = {};
      if (activeTabOffset) {
        if (horizontal) {
          newInkStyle.width = getLength(activeTabOffset.width);
          var key = rtl ? "right" : "left";
          if (align === "start") {
            newInkStyle[key] = activeTabOffset[key];
          }
          if (align === "center") {
            newInkStyle[key] = activeTabOffset[key] + activeTabOffset.width / 2;
            newInkStyle.transform = rtl ? "translateX(50%)" : "translateX(-50%)";
          }
          if (align === "end") {
            newInkStyle[key] = activeTabOffset[key] + activeTabOffset.width;
            newInkStyle.transform = "translateX(-100%)";
          }
        } else {
          newInkStyle.height = getLength(activeTabOffset.height);
          if (align === "start") {
            newInkStyle.top = activeTabOffset.top;
          }
          if (align === "center") {
            newInkStyle.top = activeTabOffset.top + activeTabOffset.height / 2;
            newInkStyle.transform = "translateY(-50%)";
          }
          if (align === "end") {
            newInkStyle.top = activeTabOffset.top + activeTabOffset.height;
            newInkStyle.transform = "translateY(-100%)";
          }
        }
      }
      cleanInkBarRaf();
      inkBarRafRef.current = raf_default(function() {
        setInkStyle(newInkStyle);
      });
      return cleanInkBarRaf;
    }, [activeTabOffset, horizontal, rtl, align, getLength]);
    return {
      style: inkStyle
    };
  };
  var useIndicator_default = useIndicator;

  // node_modules/rc-tabs/es/hooks/useOffsets.js
  var import_react73 = __toESM(require_react());
  var DEFAULT_SIZE = {
    width: 0,
    height: 0,
    left: 0,
    top: 0
  };
  function useOffsets(tabs, tabSizes, holderScrollWidth) {
    return (0, import_react73.useMemo)(function() {
      var _tabs$;
      var map = /* @__PURE__ */ new Map();
      var lastOffset = tabSizes.get((_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key) || DEFAULT_SIZE;
      var rightOffset = lastOffset.left + lastOffset.width;
      for (var i = 0; i < tabs.length; i += 1) {
        var key = tabs[i].key;
        var data = tabSizes.get(key);
        if (!data) {
          var _tabs;
          data = tabSizes.get((_tabs = tabs[i - 1]) === null || _tabs === void 0 ? void 0 : _tabs.key) || DEFAULT_SIZE;
        }
        var entity = map.get(key) || _objectSpread2({}, data);
        entity.right = rightOffset - entity.left - entity.width;
        map.set(key, entity);
      }
      return map;
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_"), tabSizes, holderScrollWidth]);
  }

  // node_modules/rc-tabs/es/hooks/useSyncState.js
  var React256 = __toESM(require_react());
  function useSyncState(defaultState, onChange) {
    var stateRef = React256.useRef(defaultState);
    var _React$useState = React256.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), forceUpdate = _React$useState2[1];
    function setState(updater) {
      var newValue = typeof updater === "function" ? updater(stateRef.current) : updater;
      if (newValue !== stateRef.current) {
        onChange(newValue, stateRef.current);
      }
      stateRef.current = newValue;
      forceUpdate({});
    }
    return [stateRef.current, setState];
  }

  // node_modules/rc-tabs/es/hooks/useTouchMove.js
  var React257 = __toESM(require_react());
  var import_react74 = __toESM(require_react());
  var MIN_SWIPE_DISTANCE = 0.1;
  var STOP_SWIPE_DISTANCE = 0.01;
  var REFRESH_INTERVAL = 20;
  var SPEED_OFF_MULTIPLE = Math.pow(0.995, REFRESH_INTERVAL);
  function useTouchMove(ref, onOffset) {
    var _useState = (0, import_react74.useState)(), _useState2 = _slicedToArray(_useState, 2), touchPosition = _useState2[0], setTouchPosition = _useState2[1];
    var _useState3 = (0, import_react74.useState)(0), _useState4 = _slicedToArray(_useState3, 2), lastTimestamp = _useState4[0], setLastTimestamp = _useState4[1];
    var _useState5 = (0, import_react74.useState)(0), _useState6 = _slicedToArray(_useState5, 2), lastTimeDiff = _useState6[0], setLastTimeDiff = _useState6[1];
    var _useState7 = (0, import_react74.useState)(), _useState8 = _slicedToArray(_useState7, 2), lastOffset = _useState8[0], setLastOffset = _useState8[1];
    var motionRef = (0, import_react74.useRef)();
    function onTouchStart(e3) {
      var _e$touches$ = e3.touches[0], screenX = _e$touches$.screenX, screenY = _e$touches$.screenY;
      setTouchPosition({
        x: screenX,
        y: screenY
      });
      window.clearInterval(motionRef.current);
    }
    function onTouchMove(e3) {
      if (!touchPosition)
        return;
      e3.preventDefault();
      var _e$touches$2 = e3.touches[0], screenX = _e$touches$2.screenX, screenY = _e$touches$2.screenY;
      setTouchPosition({
        x: screenX,
        y: screenY
      });
      var offsetX = screenX - touchPosition.x;
      var offsetY = screenY - touchPosition.y;
      onOffset(offsetX, offsetY);
      var now2 = Date.now();
      setLastTimestamp(now2);
      setLastTimeDiff(now2 - lastTimestamp);
      setLastOffset({
        x: offsetX,
        y: offsetY
      });
    }
    function onTouchEnd() {
      if (!touchPosition)
        return;
      setTouchPosition(null);
      setLastOffset(null);
      if (lastOffset) {
        var distanceX = lastOffset.x / lastTimeDiff;
        var distanceY = lastOffset.y / lastTimeDiff;
        var absX = Math.abs(distanceX);
        var absY = Math.abs(distanceY);
        if (Math.max(absX, absY) < MIN_SWIPE_DISTANCE)
          return;
        var currentX = distanceX;
        var currentY = distanceY;
        motionRef.current = window.setInterval(function() {
          if (Math.abs(currentX) < STOP_SWIPE_DISTANCE && Math.abs(currentY) < STOP_SWIPE_DISTANCE) {
            window.clearInterval(motionRef.current);
            return;
          }
          currentX *= SPEED_OFF_MULTIPLE;
          currentY *= SPEED_OFF_MULTIPLE;
          onOffset(currentX * REFRESH_INTERVAL, currentY * REFRESH_INTERVAL);
        }, REFRESH_INTERVAL);
      }
    }
    var lastWheelDirectionRef = (0, import_react74.useRef)();
    function onWheel(e3) {
      var deltaX = e3.deltaX, deltaY = e3.deltaY;
      var mixed = 0;
      var absX = Math.abs(deltaX);
      var absY = Math.abs(deltaY);
      if (absX === absY) {
        mixed = lastWheelDirectionRef.current === "x" ? deltaX : deltaY;
      } else if (absX > absY) {
        mixed = deltaX;
        lastWheelDirectionRef.current = "x";
      } else {
        mixed = deltaY;
        lastWheelDirectionRef.current = "y";
      }
      if (onOffset(-mixed, -mixed)) {
        e3.preventDefault();
      }
    }
    var touchEventsRef = (0, import_react74.useRef)(null);
    touchEventsRef.current = {
      onTouchStart,
      onTouchMove,
      onTouchEnd,
      onWheel
    };
    React257.useEffect(function() {
      function onProxyTouchStart(e3) {
        touchEventsRef.current.onTouchStart(e3);
      }
      function onProxyTouchMove(e3) {
        touchEventsRef.current.onTouchMove(e3);
      }
      function onProxyTouchEnd(e3) {
        touchEventsRef.current.onTouchEnd(e3);
      }
      function onProxyWheel(e3) {
        touchEventsRef.current.onWheel(e3);
      }
      document.addEventListener("touchmove", onProxyTouchMove, {
        passive: false
      });
      document.addEventListener("touchend", onProxyTouchEnd, {
        passive: false
      });
      ref.current.addEventListener("touchstart", onProxyTouchStart, {
        passive: false
      });
      ref.current.addEventListener("wheel", onProxyWheel);
      return function() {
        document.removeEventListener("touchmove", onProxyTouchMove);
        document.removeEventListener("touchend", onProxyTouchEnd);
      };
    }, []);
  }

  // node_modules/rc-tabs/es/hooks/useUpdate.js
  var import_react75 = __toESM(require_react());
  function useUpdate(callback) {
    var _useState = (0, import_react75.useState)(0), _useState2 = _slicedToArray(_useState, 2), count = _useState2[0], setCount = _useState2[1];
    var effectRef = (0, import_react75.useRef)(0);
    var callbackRef = (0, import_react75.useRef)();
    callbackRef.current = callback;
    useLayoutUpdateEffect(function() {
      var _callbackRef$current;
      (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 || _callbackRef$current.call(callbackRef);
    }, [count]);
    return function() {
      if (effectRef.current !== count) {
        return;
      }
      effectRef.current += 1;
      setCount(effectRef.current);
    };
  }
  function useUpdateState(defaultState) {
    var batchRef = (0, import_react75.useRef)([]);
    var _useState3 = (0, import_react75.useState)({}), _useState4 = _slicedToArray(_useState3, 2), forceUpdate = _useState4[1];
    var state = (0, import_react75.useRef)(typeof defaultState === "function" ? defaultState() : defaultState);
    var flushUpdate = useUpdate(function() {
      var current2 = state.current;
      batchRef.current.forEach(function(callback) {
        current2 = callback(current2);
      });
      batchRef.current = [];
      state.current = current2;
      forceUpdate({});
    });
    function updater(callback) {
      batchRef.current.push(callback);
      flushUpdate();
    }
    return [state.current, updater];
  }

  // node_modules/rc-tabs/es/hooks/useVisibleRange.js
  var import_react76 = __toESM(require_react());
  var DEFAULT_SIZE2 = {
    width: 0,
    height: 0,
    left: 0,
    top: 0,
    right: 0
  };
  function useVisibleRange(tabOffsets, visibleTabContentValue, transform, tabContentSizeValue, addNodeSizeValue, operationNodeSizeValue, _ref) {
    var tabs = _ref.tabs, tabPosition = _ref.tabPosition, rtl = _ref.rtl;
    var charUnit;
    var position2;
    var transformSize;
    if (["top", "bottom"].includes(tabPosition)) {
      charUnit = "width";
      position2 = rtl ? "right" : "left";
      transformSize = Math.abs(transform);
    } else {
      charUnit = "height";
      position2 = "top";
      transformSize = -transform;
    }
    return (0, import_react76.useMemo)(function() {
      if (!tabs.length) {
        return [0, 0];
      }
      var len = tabs.length;
      var endIndex = len;
      for (var i = 0; i < len; i += 1) {
        var offset3 = tabOffsets.get(tabs[i].key) || DEFAULT_SIZE2;
        if (offset3[position2] + offset3[charUnit] > transformSize + visibleTabContentValue) {
          endIndex = i - 1;
          break;
        }
      }
      var startIndex = 0;
      for (var _i = len - 1; _i >= 0; _i -= 1) {
        var _offset = tabOffsets.get(tabs[_i].key) || DEFAULT_SIZE2;
        if (_offset[position2] < transformSize) {
          startIndex = _i + 1;
          break;
        }
      }
      return startIndex >= endIndex ? [0, 0] : [startIndex, endIndex];
    }, [tabOffsets, visibleTabContentValue, tabContentSizeValue, addNodeSizeValue, operationNodeSizeValue, transformSize, tabPosition, tabs.map(function(tab) {
      return tab.key;
    }).join("_"), rtl]);
  }

  // node_modules/rc-tabs/es/util.js
  function stringify3(obj) {
    var tgt;
    if (obj instanceof Map) {
      tgt = {};
      obj.forEach(function(v, k) {
        tgt[k] = v;
      });
    } else {
      tgt = obj;
    }
    return JSON.stringify(tgt);
  }
  var RC_TABS_DOUBLE_QUOTE = "TABS_DQ";
  function genDataNodeKey(key) {
    return String(key).replace(/"/g, RC_TABS_DOUBLE_QUOTE);
  }
  function getRemovable(closable, closeIcon, editable, disabled) {
    if (
      // Only editable tabs can be removed
      !editable || // Tabs cannot be removed when disabled
      disabled || // closable is false
      closable === false || // If closable is undefined, the remove button should be hidden when closeIcon is null or false
      closable === void 0 && (closeIcon === false || closeIcon === null)
    ) {
      return false;
    }
    return true;
  }

  // node_modules/rc-tabs/es/TabNavList/AddButton.js
  var React258 = __toESM(require_react());
  var AddButton = /* @__PURE__ */ React258.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, editable = props.editable, locale9 = props.locale, style2 = props.style;
    if (!editable || editable.showAdd === false) {
      return null;
    }
    return /* @__PURE__ */ React258.createElement("button", {
      ref,
      type: "button",
      className: "".concat(prefixCls, "-nav-add"),
      style: style2,
      "aria-label": (locale9 === null || locale9 === void 0 ? void 0 : locale9.addAriaLabel) || "Add tab",
      onClick: function onClick(event) {
        editable.onEdit("add", {
          event
        });
      }
    }, editable.addIcon || "+");
  });
  var AddButton_default = AddButton;

  // node_modules/rc-tabs/es/TabNavList/ExtraContent.js
  var React259 = __toESM(require_react());
  var ExtraContent = /* @__PURE__ */ React259.forwardRef(function(props, ref) {
    var position2 = props.position, prefixCls = props.prefixCls, extra = props.extra;
    if (!extra) {
      return null;
    }
    var content;
    var assertExtra = {};
    if (_typeof(extra) === "object" && !/* @__PURE__ */ React259.isValidElement(extra)) {
      assertExtra = extra;
    } else {
      assertExtra.right = extra;
    }
    if (position2 === "right") {
      content = assertExtra.right;
    }
    if (position2 === "left") {
      content = assertExtra.left;
    }
    return content ? /* @__PURE__ */ React259.createElement("div", {
      className: "".concat(prefixCls, "-extra-content"),
      ref
    }, content) : null;
  });
  if (true) {
    ExtraContent.displayName = "ExtraContent";
  }
  var ExtraContent_default = ExtraContent;

  // node_modules/rc-tabs/es/TabNavList/OperationNode.js
  var import_classnames75 = __toESM(require_classnames());
  var React260 = __toESM(require_react());
  var import_react77 = __toESM(require_react());
  var OperationNode = /* @__PURE__ */ React260.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, id = props.id, tabs = props.tabs, locale9 = props.locale, mobile = props.mobile, _props$moreIcon = props.moreIcon, moreIcon = _props$moreIcon === void 0 ? "More" : _props$moreIcon, moreTransitionName = props.moreTransitionName, style2 = props.style, className = props.className, editable = props.editable, tabBarGutter = props.tabBarGutter, rtl = props.rtl, removeAriaLabel = props.removeAriaLabel, onTabClick = props.onTabClick, getPopupContainer = props.getPopupContainer, popupClassName = props.popupClassName;
    var _useState = (0, import_react77.useState)(false), _useState2 = _slicedToArray(_useState, 2), open = _useState2[0], setOpen = _useState2[1];
    var _useState3 = (0, import_react77.useState)(null), _useState4 = _slicedToArray(_useState3, 2), selectedKey = _useState4[0], setSelectedKey = _useState4[1];
    var popupId = "".concat(id, "-more-popup");
    var dropdownPrefix = "".concat(prefixCls, "-dropdown");
    var selectedItemId = selectedKey !== null ? "".concat(popupId, "-").concat(selectedKey) : null;
    var dropdownAriaLabel = locale9 === null || locale9 === void 0 ? void 0 : locale9.dropdownAriaLabel;
    function onRemoveTab(event, key) {
      event.preventDefault();
      event.stopPropagation();
      editable.onEdit("remove", {
        key,
        event
      });
    }
    var menu = /* @__PURE__ */ React260.createElement(es_default12, {
      onClick: function onClick(_ref) {
        var key = _ref.key, domEvent = _ref.domEvent;
        onTabClick(key, domEvent);
        setOpen(false);
      },
      prefixCls: "".concat(dropdownPrefix, "-menu"),
      id: popupId,
      tabIndex: -1,
      role: "listbox",
      "aria-activedescendant": selectedItemId,
      selectedKeys: [selectedKey],
      "aria-label": dropdownAriaLabel !== void 0 ? dropdownAriaLabel : "expanded dropdown"
    }, tabs.map(function(tab) {
      var closable = tab.closable, disabled = tab.disabled, closeIcon = tab.closeIcon, key = tab.key, label = tab.label;
      var removable = getRemovable(closable, closeIcon, editable, disabled);
      return /* @__PURE__ */ React260.createElement(MenuItem_default, {
        key,
        id: "".concat(popupId, "-").concat(key),
        role: "option",
        "aria-controls": id && "".concat(id, "-panel-").concat(key),
        disabled
      }, /* @__PURE__ */ React260.createElement("span", null, label), removable && /* @__PURE__ */ React260.createElement("button", {
        type: "button",
        "aria-label": removeAriaLabel || "remove",
        tabIndex: 0,
        className: "".concat(dropdownPrefix, "-menu-item-remove"),
        onClick: function onClick(e3) {
          e3.stopPropagation();
          onRemoveTab(e3, key);
        }
      }, closeIcon || editable.removeIcon || "\xD7"));
    }));
    function selectOffset(offset3) {
      var enabledTabs = tabs.filter(function(tab2) {
        return !tab2.disabled;
      });
      var selectedIndex = enabledTabs.findIndex(function(tab2) {
        return tab2.key === selectedKey;
      }) || 0;
      var len = enabledTabs.length;
      for (var i = 0; i < len; i += 1) {
        selectedIndex = (selectedIndex + offset3 + len) % len;
        var tab = enabledTabs[selectedIndex];
        if (!tab.disabled) {
          setSelectedKey(tab.key);
          return;
        }
      }
    }
    function onKeyDown2(e3) {
      var which = e3.which;
      if (!open) {
        if ([KeyCode_default.DOWN, KeyCode_default.SPACE, KeyCode_default.ENTER].includes(which)) {
          setOpen(true);
          e3.preventDefault();
        }
        return;
      }
      switch (which) {
        case KeyCode_default.UP:
          selectOffset(-1);
          e3.preventDefault();
          break;
        case KeyCode_default.DOWN:
          selectOffset(1);
          e3.preventDefault();
          break;
        case KeyCode_default.ESC:
          setOpen(false);
          break;
        case KeyCode_default.SPACE:
        case KeyCode_default.ENTER:
          if (selectedKey !== null) {
            onTabClick(selectedKey, e3);
          }
          break;
      }
    }
    (0, import_react77.useEffect)(function() {
      var ele = document.getElementById(selectedItemId);
      if (ele && ele.scrollIntoView) {
        ele.scrollIntoView(false);
      }
    }, [selectedKey]);
    (0, import_react77.useEffect)(function() {
      if (!open) {
        setSelectedKey(null);
      }
    }, [open]);
    var moreStyle = _defineProperty({}, rtl ? "marginRight" : "marginLeft", tabBarGutter);
    if (!tabs.length) {
      moreStyle.visibility = "hidden";
      moreStyle.order = 1;
    }
    var overlayClassName = (0, import_classnames75.default)(_defineProperty({}, "".concat(dropdownPrefix, "-rtl"), rtl));
    var moreNode = mobile ? null : /* @__PURE__ */ React260.createElement(es_default11, {
      prefixCls: dropdownPrefix,
      overlay: menu,
      trigger: ["hover"],
      visible: tabs.length ? open : false,
      transitionName: moreTransitionName,
      onVisibleChange: setOpen,
      overlayClassName: (0, import_classnames75.default)(overlayClassName, popupClassName),
      mouseEnterDelay: 0.1,
      mouseLeaveDelay: 0.1,
      getPopupContainer
    }, /* @__PURE__ */ React260.createElement("button", {
      type: "button",
      className: "".concat(prefixCls, "-nav-more"),
      style: moreStyle,
      tabIndex: -1,
      "aria-hidden": "true",
      "aria-haspopup": "listbox",
      "aria-controls": popupId,
      id: "".concat(id, "-more"),
      "aria-expanded": open,
      onKeyDown: onKeyDown2
    }, moreIcon));
    return /* @__PURE__ */ React260.createElement("div", {
      className: (0, import_classnames75.default)("".concat(prefixCls, "-nav-operations"), className),
      style: style2,
      ref
    }, moreNode, /* @__PURE__ */ React260.createElement(AddButton_default, {
      prefixCls,
      locale: locale9,
      editable
    }));
  });
  var OperationNode_default = /* @__PURE__ */ React260.memo(OperationNode, function(_, next2) {
    return (
      // https://github.com/ant-design/ant-design/issues/32544
      // We'd better remove syntactic sugar in `rc-menu` since this has perf issue
      next2.tabMoving
    );
  });

  // node_modules/rc-tabs/es/TabNavList/TabNode.js
  var import_classnames76 = __toESM(require_classnames());
  var React261 = __toESM(require_react());
  var TabNode = function TabNode2(props) {
    var prefixCls = props.prefixCls, id = props.id, active = props.active, _props$tab = props.tab, key = _props$tab.key, label = _props$tab.label, disabled = _props$tab.disabled, closeIcon = _props$tab.closeIcon, icon = _props$tab.icon, closable = props.closable, renderWrapper = props.renderWrapper, removeAriaLabel = props.removeAriaLabel, editable = props.editable, onClick = props.onClick, onFocus = props.onFocus, style2 = props.style;
    var tabPrefix = "".concat(prefixCls, "-tab");
    var removable = getRemovable(closable, closeIcon, editable, disabled);
    function onInternalClick(e3) {
      if (disabled) {
        return;
      }
      onClick(e3);
    }
    function onRemoveTab(event) {
      event.preventDefault();
      event.stopPropagation();
      editable.onEdit("remove", {
        key,
        event
      });
    }
    var labelNode = React261.useMemo(function() {
      return icon && typeof label === "string" ? /* @__PURE__ */ React261.createElement("span", null, label) : label;
    }, [label, icon]);
    var node2 = /* @__PURE__ */ React261.createElement("div", {
      key,
      "data-node-key": genDataNodeKey(key),
      className: (0, import_classnames76.default)(tabPrefix, _defineProperty(_defineProperty(_defineProperty({}, "".concat(tabPrefix, "-with-remove"), removable), "".concat(tabPrefix, "-active"), active), "".concat(tabPrefix, "-disabled"), disabled)),
      style: style2,
      onClick: onInternalClick
    }, /* @__PURE__ */ React261.createElement("div", {
      role: "tab",
      "aria-selected": active,
      id: id && "".concat(id, "-tab-").concat(key),
      className: "".concat(tabPrefix, "-btn"),
      "aria-controls": id && "".concat(id, "-panel-").concat(key),
      "aria-disabled": disabled,
      tabIndex: disabled ? null : 0,
      onClick: function onClick2(e3) {
        e3.stopPropagation();
        onInternalClick(e3);
      },
      onKeyDown: function onKeyDown2(e3) {
        if ([KeyCode_default.SPACE, KeyCode_default.ENTER].includes(e3.which)) {
          e3.preventDefault();
          onInternalClick(e3);
        }
      },
      onFocus
    }, icon && /* @__PURE__ */ React261.createElement("span", {
      className: "".concat(tabPrefix, "-icon")
    }, icon), label && labelNode), removable && /* @__PURE__ */ React261.createElement("button", {
      type: "button",
      "aria-label": removeAriaLabel || "remove",
      tabIndex: 0,
      className: "".concat(tabPrefix, "-remove"),
      onClick: function onClick2(e3) {
        e3.stopPropagation();
        onRemoveTab(e3);
      }
    }, closeIcon || editable.removeIcon || "\xD7"));
    return renderWrapper ? renderWrapper(node2) : node2;
  };
  var TabNode_default = TabNode;

  // node_modules/rc-tabs/es/TabNavList/index.js
  var getTabSize = function getTabSize2(tab, containerRect) {
    var offsetWidth = tab.offsetWidth, offsetHeight = tab.offsetHeight, offsetTop = tab.offsetTop, offsetLeft = tab.offsetLeft;
    var _tab$getBoundingClien = tab.getBoundingClientRect(), width = _tab$getBoundingClien.width, height = _tab$getBoundingClien.height, x = _tab$getBoundingClien.x, y = _tab$getBoundingClien.y;
    if (Math.abs(width - offsetWidth) < 1) {
      return [width, height, x - containerRect.x, y - containerRect.y];
    }
    return [offsetWidth, offsetHeight, offsetLeft, offsetTop];
  };
  var getSize = function getSize2(refObj) {
    var _ref = refObj.current || {}, _ref$offsetWidth = _ref.offsetWidth, offsetWidth = _ref$offsetWidth === void 0 ? 0 : _ref$offsetWidth, _ref$offsetHeight = _ref.offsetHeight, offsetHeight = _ref$offsetHeight === void 0 ? 0 : _ref$offsetHeight;
    if (refObj.current) {
      var _refObj$current$getBo = refObj.current.getBoundingClientRect(), width = _refObj$current$getBo.width, height = _refObj$current$getBo.height;
      if (Math.abs(width - offsetWidth) < 1) {
        return [width, height];
      }
    }
    return [offsetWidth, offsetHeight];
  };
  var getUnitValue = function getUnitValue2(size, tabPositionTopOrBottom) {
    return size[tabPositionTopOrBottom ? 0 : 1];
  };
  var TabNavList = /* @__PURE__ */ React262.forwardRef(function(props, ref) {
    var className = props.className, style2 = props.style, id = props.id, animated = props.animated, activeKey = props.activeKey, rtl = props.rtl, extra = props.extra, editable = props.editable, locale9 = props.locale, tabPosition = props.tabPosition, tabBarGutter = props.tabBarGutter, children = props.children, onTabClick = props.onTabClick, onTabScroll = props.onTabScroll, indicator = props.indicator;
    var _React$useContext = React262.useContext(TabContext_default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var containerRef = (0, import_react78.useRef)(null);
    var extraLeftRef = (0, import_react78.useRef)(null);
    var extraRightRef = (0, import_react78.useRef)(null);
    var tabsWrapperRef = (0, import_react78.useRef)(null);
    var tabListRef = (0, import_react78.useRef)(null);
    var operationsRef = (0, import_react78.useRef)(null);
    var innerAddButtonRef = (0, import_react78.useRef)(null);
    var tabPositionTopOrBottom = tabPosition === "top" || tabPosition === "bottom";
    var _useSyncState = useSyncState(0, function(next2, prev2) {
      if (tabPositionTopOrBottom && onTabScroll) {
        onTabScroll({
          direction: next2 > prev2 ? "left" : "right"
        });
      }
    }), _useSyncState2 = _slicedToArray(_useSyncState, 2), transformLeft = _useSyncState2[0], setTransformLeft = _useSyncState2[1];
    var _useSyncState3 = useSyncState(0, function(next2, prev2) {
      if (!tabPositionTopOrBottom && onTabScroll) {
        onTabScroll({
          direction: next2 > prev2 ? "top" : "bottom"
        });
      }
    }), _useSyncState4 = _slicedToArray(_useSyncState3, 2), transformTop = _useSyncState4[0], setTransformTop = _useSyncState4[1];
    var _useState = (0, import_react78.useState)([0, 0]), _useState2 = _slicedToArray(_useState, 2), containerExcludeExtraSize = _useState2[0], setContainerExcludeExtraSize = _useState2[1];
    var _useState3 = (0, import_react78.useState)([0, 0]), _useState4 = _slicedToArray(_useState3, 2), tabContentSize = _useState4[0], setTabContentSize = _useState4[1];
    var _useState5 = (0, import_react78.useState)([0, 0]), _useState6 = _slicedToArray(_useState5, 2), addSize = _useState6[0], setAddSize = _useState6[1];
    var _useState7 = (0, import_react78.useState)([0, 0]), _useState8 = _slicedToArray(_useState7, 2), operationSize = _useState8[0], setOperationSize = _useState8[1];
    var _useUpdateState = useUpdateState(/* @__PURE__ */ new Map()), _useUpdateState2 = _slicedToArray(_useUpdateState, 2), tabSizes = _useUpdateState2[0], setTabSizes = _useUpdateState2[1];
    var tabOffsets = useOffsets(tabs, tabSizes, tabContentSize[0]);
    var containerExcludeExtraSizeValue = getUnitValue(containerExcludeExtraSize, tabPositionTopOrBottom);
    var tabContentSizeValue = getUnitValue(tabContentSize, tabPositionTopOrBottom);
    var addSizeValue = getUnitValue(addSize, tabPositionTopOrBottom);
    var operationSizeValue = getUnitValue(operationSize, tabPositionTopOrBottom);
    var needScroll = containerExcludeExtraSizeValue < tabContentSizeValue + addSizeValue;
    var visibleTabContentValue = needScroll ? containerExcludeExtraSizeValue - operationSizeValue : containerExcludeExtraSizeValue - addSizeValue;
    var operationsHiddenClassName = "".concat(prefixCls, "-nav-operations-hidden");
    var transformMin = 0;
    var transformMax = 0;
    if (!tabPositionTopOrBottom) {
      transformMin = Math.min(0, visibleTabContentValue - tabContentSizeValue);
      transformMax = 0;
    } else if (rtl) {
      transformMin = 0;
      transformMax = Math.max(0, tabContentSizeValue - visibleTabContentValue);
    } else {
      transformMin = Math.min(0, visibleTabContentValue - tabContentSizeValue);
      transformMax = 0;
    }
    function alignInRange(value) {
      if (value < transformMin) {
        return transformMin;
      }
      if (value > transformMax) {
        return transformMax;
      }
      return value;
    }
    var touchMovingRef = (0, import_react78.useRef)(null);
    var _useState9 = (0, import_react78.useState)(), _useState10 = _slicedToArray(_useState9, 2), lockAnimation = _useState10[0], setLockAnimation = _useState10[1];
    function doLockAnimation() {
      setLockAnimation(Date.now());
    }
    function clearTouchMoving() {
      if (touchMovingRef.current) {
        clearTimeout(touchMovingRef.current);
      }
    }
    useTouchMove(tabsWrapperRef, function(offsetX, offsetY) {
      function doMove(setState, offset3) {
        setState(function(value) {
          var newValue = alignInRange(value + offset3);
          return newValue;
        });
      }
      if (!needScroll) {
        return false;
      }
      if (tabPositionTopOrBottom) {
        doMove(setTransformLeft, offsetX);
      } else {
        doMove(setTransformTop, offsetY);
      }
      clearTouchMoving();
      doLockAnimation();
      return true;
    });
    (0, import_react78.useEffect)(function() {
      clearTouchMoving();
      if (lockAnimation) {
        touchMovingRef.current = setTimeout(function() {
          setLockAnimation(0);
        }, 100);
      }
      return clearTouchMoving;
    }, [lockAnimation]);
    var _useVisibleRange = useVisibleRange(
      tabOffsets,
      // Container
      visibleTabContentValue,
      // Transform
      tabPositionTopOrBottom ? transformLeft : transformTop,
      // Tabs
      tabContentSizeValue,
      // Add
      addSizeValue,
      // Operation
      operationSizeValue,
      _objectSpread2(_objectSpread2({}, props), {}, {
        tabs
      })
    ), _useVisibleRange2 = _slicedToArray(_useVisibleRange, 2), visibleStart = _useVisibleRange2[0], visibleEnd = _useVisibleRange2[1];
    var scrollToTab = useEvent(function() {
      var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : activeKey;
      var tabOffset = tabOffsets.get(key) || {
        width: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0
      };
      if (tabPositionTopOrBottom) {
        var newTransform = transformLeft;
        if (rtl) {
          if (tabOffset.right < transformLeft) {
            newTransform = tabOffset.right;
          } else if (tabOffset.right + tabOffset.width > transformLeft + visibleTabContentValue) {
            newTransform = tabOffset.right + tabOffset.width - visibleTabContentValue;
          }
        } else if (tabOffset.left < -transformLeft) {
          newTransform = -tabOffset.left;
        } else if (tabOffset.left + tabOffset.width > -transformLeft + visibleTabContentValue) {
          newTransform = -(tabOffset.left + tabOffset.width - visibleTabContentValue);
        }
        setTransformTop(0);
        setTransformLeft(alignInRange(newTransform));
      } else {
        var _newTransform = transformTop;
        if (tabOffset.top < -transformTop) {
          _newTransform = -tabOffset.top;
        } else if (tabOffset.top + tabOffset.height > -transformTop + visibleTabContentValue) {
          _newTransform = -(tabOffset.top + tabOffset.height - visibleTabContentValue);
        }
        setTransformLeft(0);
        setTransformTop(alignInRange(_newTransform));
      }
    });
    var tabNodeStyle = {};
    if (tabPosition === "top" || tabPosition === "bottom") {
      tabNodeStyle[rtl ? "marginRight" : "marginLeft"] = tabBarGutter;
    } else {
      tabNodeStyle.marginTop = tabBarGutter;
    }
    var tabNodes = tabs.map(function(tab, i) {
      var key = tab.key;
      return /* @__PURE__ */ React262.createElement(TabNode_default, {
        id,
        prefixCls,
        key,
        tab,
        style: i === 0 ? void 0 : tabNodeStyle,
        closable: tab.closable,
        editable,
        active: key === activeKey,
        renderWrapper: children,
        removeAriaLabel: locale9 === null || locale9 === void 0 ? void 0 : locale9.removeAriaLabel,
        onClick: function onClick(e3) {
          onTabClick(key, e3);
        },
        onFocus: function onFocus() {
          scrollToTab(key);
          doLockAnimation();
          if (!tabsWrapperRef.current) {
            return;
          }
          if (!rtl) {
            tabsWrapperRef.current.scrollLeft = 0;
          }
          tabsWrapperRef.current.scrollTop = 0;
        }
      });
    });
    var updateTabSizes = function updateTabSizes2() {
      return setTabSizes(function() {
        var _tabListRef$current;
        var newSizes = /* @__PURE__ */ new Map();
        var listRect = (_tabListRef$current = tabListRef.current) === null || _tabListRef$current === void 0 ? void 0 : _tabListRef$current.getBoundingClientRect();
        tabs.forEach(function(_ref2) {
          var _tabListRef$current2;
          var key = _ref2.key;
          var btnNode = (_tabListRef$current2 = tabListRef.current) === null || _tabListRef$current2 === void 0 ? void 0 : _tabListRef$current2.querySelector('[data-node-key="'.concat(genDataNodeKey(key), '"]'));
          if (btnNode) {
            var _getTabSize = getTabSize(btnNode, listRect), _getTabSize2 = _slicedToArray(_getTabSize, 4), width = _getTabSize2[0], height = _getTabSize2[1], left = _getTabSize2[2], top = _getTabSize2[3];
            newSizes.set(key, {
              width,
              height,
              left,
              top
            });
          }
        });
        return newSizes;
      });
    };
    (0, import_react78.useEffect)(function() {
      updateTabSizes();
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_")]);
    var onListHolderResize = useUpdate(function() {
      var containerSize = getSize(containerRef);
      var extraLeftSize = getSize(extraLeftRef);
      var extraRightSize = getSize(extraRightRef);
      setContainerExcludeExtraSize([containerSize[0] - extraLeftSize[0] - extraRightSize[0], containerSize[1] - extraLeftSize[1] - extraRightSize[1]]);
      var newAddSize = getSize(innerAddButtonRef);
      setAddSize(newAddSize);
      var newOperationSize = getSize(operationsRef);
      setOperationSize(newOperationSize);
      var tabContentFullSize = getSize(tabListRef);
      setTabContentSize([tabContentFullSize[0] - newAddSize[0], tabContentFullSize[1] - newAddSize[1]]);
      updateTabSizes();
    });
    var startHiddenTabs = tabs.slice(0, visibleStart);
    var endHiddenTabs = tabs.slice(visibleEnd + 1);
    var hiddenTabs = [].concat(_toConsumableArray(startHiddenTabs), _toConsumableArray(endHiddenTabs));
    var activeTabOffset = tabOffsets.get(activeKey);
    var _useIndicator = useIndicator_default({
      activeTabOffset,
      horizontal: tabPositionTopOrBottom,
      indicator,
      rtl
    }), indicatorStyle = _useIndicator.style;
    (0, import_react78.useEffect)(function() {
      scrollToTab();
    }, [activeKey, transformMin, transformMax, stringify3(activeTabOffset), stringify3(tabOffsets), tabPositionTopOrBottom]);
    (0, import_react78.useEffect)(function() {
      onListHolderResize();
    }, [rtl]);
    var hasDropdown = !!hiddenTabs.length;
    var wrapPrefix = "".concat(prefixCls, "-nav-wrap");
    var pingLeft;
    var pingRight;
    var pingTop;
    var pingBottom;
    if (tabPositionTopOrBottom) {
      if (rtl) {
        pingRight = transformLeft > 0;
        pingLeft = transformLeft !== transformMax;
      } else {
        pingLeft = transformLeft < 0;
        pingRight = transformLeft !== transformMin;
      }
    } else {
      pingTop = transformTop < 0;
      pingBottom = transformTop !== transformMin;
    }
    return /* @__PURE__ */ React262.createElement(es_default, {
      onResize: onListHolderResize
    }, /* @__PURE__ */ React262.createElement("div", {
      ref: useComposeRef(ref, containerRef),
      role: "tablist",
      className: (0, import_classnames77.default)("".concat(prefixCls, "-nav"), className),
      style: style2,
      onKeyDown: function onKeyDown2() {
        doLockAnimation();
      }
    }, /* @__PURE__ */ React262.createElement(ExtraContent_default, {
      ref: extraLeftRef,
      position: "left",
      extra,
      prefixCls
    }), /* @__PURE__ */ React262.createElement(es_default, {
      onResize: onListHolderResize
    }, /* @__PURE__ */ React262.createElement("div", {
      className: (0, import_classnames77.default)(wrapPrefix, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(wrapPrefix, "-ping-left"), pingLeft), "".concat(wrapPrefix, "-ping-right"), pingRight), "".concat(wrapPrefix, "-ping-top"), pingTop), "".concat(wrapPrefix, "-ping-bottom"), pingBottom)),
      ref: tabsWrapperRef
    }, /* @__PURE__ */ React262.createElement(es_default, {
      onResize: onListHolderResize
    }, /* @__PURE__ */ React262.createElement("div", {
      ref: tabListRef,
      className: "".concat(prefixCls, "-nav-list"),
      style: {
        transform: "translate(".concat(transformLeft, "px, ").concat(transformTop, "px)"),
        transition: lockAnimation ? "none" : void 0
      }
    }, tabNodes, /* @__PURE__ */ React262.createElement(AddButton_default, {
      ref: innerAddButtonRef,
      prefixCls,
      locale: locale9,
      editable,
      style: _objectSpread2(_objectSpread2({}, tabNodes.length === 0 ? void 0 : tabNodeStyle), {}, {
        visibility: hasDropdown ? "hidden" : null
      })
    }), /* @__PURE__ */ React262.createElement("div", {
      className: (0, import_classnames77.default)("".concat(prefixCls, "-ink-bar"), _defineProperty({}, "".concat(prefixCls, "-ink-bar-animated"), animated.inkBar)),
      style: indicatorStyle
    }))))), /* @__PURE__ */ React262.createElement(OperationNode_default, _extends({}, props, {
      removeAriaLabel: locale9 === null || locale9 === void 0 ? void 0 : locale9.removeAriaLabel,
      ref: operationsRef,
      prefixCls,
      tabs: hiddenTabs,
      className: !hasDropdown && operationsHiddenClassName,
      tabMoving: !!lockAnimation
    })), /* @__PURE__ */ React262.createElement(ExtraContent_default, {
      ref: extraRightRef,
      position: "right",
      extra,
      prefixCls
    })));
  });
  var TabNavList_default = TabNavList;

  // node_modules/rc-tabs/es/TabPanelList/TabPane.js
  var import_classnames78 = __toESM(require_classnames());
  var React263 = __toESM(require_react());
  var TabPane = /* @__PURE__ */ React263.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, className = props.className, style2 = props.style, id = props.id, active = props.active, tabKey = props.tabKey, children = props.children;
    return /* @__PURE__ */ React263.createElement("div", {
      id: id && "".concat(id, "-panel-").concat(tabKey),
      role: "tabpanel",
      tabIndex: active ? 0 : -1,
      "aria-labelledby": id && "".concat(id, "-tab-").concat(tabKey),
      "aria-hidden": !active,
      style: style2,
      className: (0, import_classnames78.default)(prefixCls, active && "".concat(prefixCls, "-active"), className),
      ref
    }, children);
  });
  if (true) {
    TabPane.displayName = "TabPane";
  }
  var TabPane_default = TabPane;

  // node_modules/rc-tabs/es/TabNavList/Wrapper.js
  var _excluded36 = ["renderTabBar"];
  var _excluded211 = ["label", "key"];
  var TabNavListWrapper = function TabNavListWrapper2(_ref) {
    var renderTabBar = _ref.renderTabBar, restProps = _objectWithoutProperties(_ref, _excluded36);
    var _React$useContext = React264.useContext(TabContext_default), tabs = _React$useContext.tabs;
    if (renderTabBar) {
      var tabNavBarProps = _objectSpread2(_objectSpread2({}, restProps), {}, {
        // Legacy support. We do not use this actually
        panes: tabs.map(function(_ref2) {
          var label = _ref2.label, key = _ref2.key, restTabProps = _objectWithoutProperties(_ref2, _excluded211);
          return /* @__PURE__ */ React264.createElement(TabPane_default, _extends({
            tab: label,
            key,
            tabKey: key
          }, restTabProps));
        })
      });
      return renderTabBar(tabNavBarProps, TabNavList_default);
    }
    return /* @__PURE__ */ React264.createElement(TabNavList_default, restProps);
  };
  if (true) {
    TabNavListWrapper.displayName = "TabNavListWrapper";
  }
  var Wrapper_default = TabNavListWrapper;

  // node_modules/rc-tabs/es/TabPanelList/index.js
  var import_classnames79 = __toESM(require_classnames());
  var React265 = __toESM(require_react());
  var _excluded37 = ["key", "forceRender", "style", "className", "destroyInactiveTabPane"];
  var TabPanelList = function TabPanelList2(props) {
    var id = props.id, activeKey = props.activeKey, animated = props.animated, tabPosition = props.tabPosition, destroyInactiveTabPane = props.destroyInactiveTabPane;
    var _React$useContext = React265.useContext(TabContext_default), prefixCls = _React$useContext.prefixCls, tabs = _React$useContext.tabs;
    var tabPaneAnimated = animated.tabPane;
    var tabPanePrefixCls = "".concat(prefixCls, "-tabpane");
    return /* @__PURE__ */ React265.createElement("div", {
      className: (0, import_classnames79.default)("".concat(prefixCls, "-content-holder"))
    }, /* @__PURE__ */ React265.createElement("div", {
      className: (0, import_classnames79.default)("".concat(prefixCls, "-content"), "".concat(prefixCls, "-content-").concat(tabPosition), _defineProperty({}, "".concat(prefixCls, "-content-animated"), tabPaneAnimated))
    }, tabs.map(function(item) {
      var key = item.key, forceRender = item.forceRender, paneStyle = item.style, paneClassName = item.className, itemDestroyInactiveTabPane = item.destroyInactiveTabPane, restTabProps = _objectWithoutProperties(item, _excluded37);
      var active = key === activeKey;
      return /* @__PURE__ */ React265.createElement(es_default2, _extends({
        key,
        visible: active,
        forceRender,
        removeOnLeave: !!(destroyInactiveTabPane || itemDestroyInactiveTabPane),
        leavedClassName: "".concat(tabPanePrefixCls, "-hidden")
      }, animated.tabPaneMotion), function(_ref, ref) {
        var motionStyle = _ref.style, motionClassName = _ref.className;
        return /* @__PURE__ */ React265.createElement(TabPane_default, _extends({}, restTabProps, {
          prefixCls: tabPanePrefixCls,
          id,
          tabKey: key,
          animated: tabPaneAnimated,
          active,
          style: _objectSpread2(_objectSpread2({}, paneStyle), motionStyle),
          className: (0, import_classnames79.default)(paneClassName, motionClassName),
          ref
        }));
      });
    })));
  };
  var TabPanelList_default = TabPanelList;

  // node_modules/rc-tabs/es/hooks/useAnimateConfig.js
  function useAnimateConfig() {
    var animated = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      inkBar: true,
      tabPane: false
    };
    var mergedAnimated;
    if (animated === false) {
      mergedAnimated = {
        inkBar: false,
        tabPane: false
      };
    } else if (animated === true) {
      mergedAnimated = {
        inkBar: true,
        tabPane: false
      };
    } else {
      mergedAnimated = _objectSpread2({
        inkBar: true
      }, _typeof(animated) === "object" ? animated : {});
    }
    if (mergedAnimated.tabPaneMotion && mergedAnimated.tabPane === void 0) {
      mergedAnimated.tabPane = true;
    }
    if (!mergedAnimated.tabPaneMotion && mergedAnimated.tabPane) {
      if (true) {
        warning_default(false, "`animated.tabPane` is true but `animated.tabPaneMotion` is not provided. Motion will not work.");
      }
      mergedAnimated.tabPane = false;
    }
    return mergedAnimated;
  }

  // node_modules/rc-tabs/es/Tabs.js
  var _excluded38 = ["id", "prefixCls", "className", "items", "direction", "activeKey", "defaultActiveKey", "editable", "animated", "tabPosition", "tabBarGutter", "tabBarStyle", "tabBarExtraContent", "locale", "moreIcon", "moreTransitionName", "destroyInactiveTabPane", "renderTabBar", "onChange", "onTabClick", "onTabScroll", "getPopupContainer", "popupClassName", "indicator"];
  var uuid7 = 0;
  var Tabs = /* @__PURE__ */ React266.forwardRef(function(props, ref) {
    var id = props.id, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-tabs" : _props$prefixCls, className = props.className, items = props.items, direction = props.direction, activeKey = props.activeKey, defaultActiveKey = props.defaultActiveKey, editable = props.editable, animated = props.animated, _props$tabPosition = props.tabPosition, tabPosition = _props$tabPosition === void 0 ? "top" : _props$tabPosition, tabBarGutter = props.tabBarGutter, tabBarStyle = props.tabBarStyle, tabBarExtraContent = props.tabBarExtraContent, locale9 = props.locale, moreIcon = props.moreIcon, moreTransitionName = props.moreTransitionName, destroyInactiveTabPane = props.destroyInactiveTabPane, renderTabBar = props.renderTabBar, onChange = props.onChange, onTabClick = props.onTabClick, onTabScroll = props.onTabScroll, getPopupContainer = props.getPopupContainer, popupClassName = props.popupClassName, indicator = props.indicator, restProps = _objectWithoutProperties(props, _excluded38);
    var tabs = React266.useMemo(function() {
      return (items || []).filter(function(item) {
        return item && _typeof(item) === "object" && "key" in item;
      });
    }, [items]);
    var rtl = direction === "rtl";
    var mergedAnimated = useAnimateConfig(animated);
    var _useState = (0, import_react79.useState)(false), _useState2 = _slicedToArray(_useState, 2), mobile = _useState2[0], setMobile = _useState2[1];
    (0, import_react79.useEffect)(function() {
      setMobile(isMobile_default());
    }, []);
    var _useMergedState = useMergedState(function() {
      var _tabs$;
      return (_tabs$ = tabs[0]) === null || _tabs$ === void 0 ? void 0 : _tabs$.key;
    }, {
      value: activeKey,
      defaultValue: defaultActiveKey
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedActiveKey = _useMergedState2[0], setMergedActiveKey = _useMergedState2[1];
    var _useState3 = (0, import_react79.useState)(function() {
      return tabs.findIndex(function(tab) {
        return tab.key === mergedActiveKey;
      });
    }), _useState4 = _slicedToArray(_useState3, 2), activeIndex = _useState4[0], setActiveIndex = _useState4[1];
    (0, import_react79.useEffect)(function() {
      var newActiveIndex = tabs.findIndex(function(tab) {
        return tab.key === mergedActiveKey;
      });
      if (newActiveIndex === -1) {
        var _tabs$newActiveIndex;
        newActiveIndex = Math.max(0, Math.min(activeIndex, tabs.length - 1));
        setMergedActiveKey((_tabs$newActiveIndex = tabs[newActiveIndex]) === null || _tabs$newActiveIndex === void 0 ? void 0 : _tabs$newActiveIndex.key);
      }
      setActiveIndex(newActiveIndex);
    }, [tabs.map(function(tab) {
      return tab.key;
    }).join("_"), mergedActiveKey, activeIndex]);
    var _useMergedState3 = useMergedState(null, {
      value: id
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedId = _useMergedState4[0], setMergedId = _useMergedState4[1];
    (0, import_react79.useEffect)(function() {
      if (!id) {
        setMergedId("rc-tabs-".concat(false ? "test" : uuid7));
        uuid7 += 1;
      }
    }, []);
    function onInternalTabClick(key, e3) {
      onTabClick === null || onTabClick === void 0 || onTabClick(key, e3);
      var isActiveChanged = key !== mergedActiveKey;
      setMergedActiveKey(key);
      if (isActiveChanged) {
        onChange === null || onChange === void 0 || onChange(key);
      }
    }
    var sharedProps = {
      id: mergedId,
      activeKey: mergedActiveKey,
      animated: mergedAnimated,
      tabPosition,
      rtl,
      mobile
    };
    var tabNavBarProps = _objectSpread2(_objectSpread2({}, sharedProps), {}, {
      editable,
      locale: locale9,
      moreIcon,
      moreTransitionName,
      tabBarGutter,
      onTabClick: onInternalTabClick,
      onTabScroll,
      extra: tabBarExtraContent,
      style: tabBarStyle,
      panes: null,
      getPopupContainer,
      popupClassName,
      indicator
    });
    return /* @__PURE__ */ React266.createElement(TabContext_default.Provider, {
      value: {
        tabs,
        prefixCls
      }
    }, /* @__PURE__ */ React266.createElement("div", _extends({
      ref,
      id,
      className: (0, import_classnames80.default)(prefixCls, "".concat(prefixCls, "-").concat(tabPosition), _defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-mobile"), mobile), "".concat(prefixCls, "-editable"), editable), "".concat(prefixCls, "-rtl"), rtl), className)
    }, restProps), /* @__PURE__ */ React266.createElement(Wrapper_default, _extends({}, tabNavBarProps, {
      renderTabBar
    })), /* @__PURE__ */ React266.createElement(TabPanelList_default, _extends({
      destroyInactiveTabPane
    }, sharedProps, {
      animated: mergedAnimated
    }))));
  });
  if (true) {
    Tabs.displayName = "Tabs";
  }
  var Tabs_default = Tabs;

  // node_modules/rc-tabs/es/index.js
  var es_default15 = Tabs_default;

  // node_modules/antd/es/tabs/hooks/useAnimateConfig.js
  var motion = {
    motionAppear: false,
    motionEnter: true,
    motionLeave: true
  };
  function useAnimateConfig2(prefixCls) {
    let animated = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      inkBar: true,
      tabPane: false
    };
    let mergedAnimated;
    if (animated === false) {
      mergedAnimated = {
        inkBar: false,
        tabPane: false
      };
    } else if (animated === true) {
      mergedAnimated = {
        inkBar: true,
        tabPane: true
      };
    } else {
      mergedAnimated = Object.assign({
        inkBar: true
      }, typeof animated === "object" ? animated : {});
    }
    if (mergedAnimated.tabPane) {
      mergedAnimated.tabPaneMotion = Object.assign(Object.assign({}, motion), {
        motionName: getTransitionName2(prefixCls, "switch")
      });
    }
    return mergedAnimated;
  }

  // node_modules/antd/es/tabs/hooks/useLegacyItems.js
  var React267 = __toESM(require_react());
  var __rest20 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function filter(items) {
    return items.filter((item) => item);
  }
  function useLegacyItems(items, children) {
    if (true) {
      const warning8 = devUseWarning("Tabs");
      warning8.deprecated(!children, "Tabs.TabPane", "items");
    }
    if (items) {
      return items;
    }
    const childrenItems = toArray(children).map((node2) => {
      if (/* @__PURE__ */ React267.isValidElement(node2)) {
        const {
          key,
          props
        } = node2;
        const _a = props || {}, {
          tab
        } = _a, restProps = __rest20(_a, ["tab"]);
        const item = Object.assign(Object.assign({
          key: String(key)
        }, restProps), {
          label: tab
        });
        return item;
      }
      return null;
    });
    return filter(childrenItems);
  }

  // node_modules/antd/es/tabs/style/motion.js
  var genMotionStyle = (token2) => {
    const {
      componentCls,
      motionDurationSlow
    } = token2;
    return [
      {
        [componentCls]: {
          [`${componentCls}-switch`]: {
            "&-appear, &-enter": {
              transition: "none",
              "&-start": {
                opacity: 0
              },
              "&-active": {
                opacity: 1,
                transition: `opacity ${motionDurationSlow}`
              }
            },
            "&-leave": {
              position: "absolute",
              transition: "none",
              inset: 0,
              "&-start": {
                opacity: 1
              },
              "&-active": {
                opacity: 0,
                transition: `opacity ${motionDurationSlow}`
              }
            }
          }
        }
      },
      // Follow code may reuse in other components
      [initSlideMotion(token2, "slide-up"), initSlideMotion(token2, "slide-down")]
    ];
  };
  var motion_default2 = genMotionStyle;

  // node_modules/antd/es/tabs/style/index.js
  var genCardStyle = (token2) => {
    const {
      componentCls,
      tabsCardPadding,
      cardBg,
      cardGutter,
      colorBorderSecondary,
      itemSelectedColor
    } = token2;
    return {
      [`${componentCls}-card`]: {
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          [`${componentCls}-tab`]: {
            margin: 0,
            padding: tabsCardPadding,
            background: cardBg,
            border: `${unit(token2.lineWidth)} ${token2.lineType} ${colorBorderSecondary}`,
            transition: `all ${token2.motionDurationSlow} ${token2.motionEaseInOut}`
          },
          [`${componentCls}-tab-active`]: {
            color: itemSelectedColor,
            background: token2.colorBgContainer
          },
          [`${componentCls}-ink-bar`]: {
            visibility: "hidden"
          }
        },
        // ========================== Top & Bottom ==========================
        [`&${componentCls}-top, &${componentCls}-bottom`]: {
          [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
            [`${componentCls}-tab + ${componentCls}-tab`]: {
              marginLeft: {
                _skip_check_: true,
                value: unit(cardGutter)
              }
            }
          }
        },
        [`&${componentCls}-top`]: {
          [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              borderRadius: `${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)} 0 0`
            },
            [`${componentCls}-tab-active`]: {
              borderBottomColor: token2.colorBgContainer
            }
          }
        },
        [`&${componentCls}-bottom`]: {
          [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              borderRadius: `0 0 ${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)}`
            },
            [`${componentCls}-tab-active`]: {
              borderTopColor: token2.colorBgContainer
            }
          }
        },
        // ========================== Left & Right ==========================
        [`&${componentCls}-left, &${componentCls}-right`]: {
          [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
            [`${componentCls}-tab + ${componentCls}-tab`]: {
              marginTop: unit(cardGutter)
            }
          }
        },
        [`&${componentCls}-left`]: {
          [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              borderRadius: {
                _skip_check_: true,
                value: `${unit(token2.borderRadiusLG)} 0 0 ${unit(token2.borderRadiusLG)}`
              }
            },
            [`${componentCls}-tab-active`]: {
              borderRightColor: {
                _skip_check_: true,
                value: token2.colorBgContainer
              }
            }
          }
        },
        [`&${componentCls}-right`]: {
          [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              borderRadius: {
                _skip_check_: true,
                value: `0 ${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)} 0`
              }
            },
            [`${componentCls}-tab-active`]: {
              borderLeftColor: {
                _skip_check_: true,
                value: token2.colorBgContainer
              }
            }
          }
        }
      }
    };
  };
  var genDropdownStyle = (token2) => {
    const {
      componentCls,
      itemHoverColor,
      dropdownEdgeChildVerticalPadding
    } = token2;
    return {
      [`${componentCls}-dropdown`]: Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "absolute",
        top: -9999,
        left: {
          _skip_check_: true,
          value: -9999
        },
        zIndex: token2.zIndexPopup,
        display: "block",
        "&-hidden": {
          display: "none"
        },
        [`${componentCls}-dropdown-menu`]: {
          maxHeight: token2.tabsDropdownHeight,
          margin: 0,
          padding: `${unit(dropdownEdgeChildVerticalPadding)} 0`,
          overflowX: "hidden",
          overflowY: "auto",
          textAlign: {
            _skip_check_: true,
            value: "left"
          },
          listStyleType: "none",
          backgroundColor: token2.colorBgContainer,
          backgroundClip: "padding-box",
          borderRadius: token2.borderRadiusLG,
          outline: "none",
          boxShadow: token2.boxShadowSecondary,
          "&-item": Object.assign(Object.assign({}, textEllipsis), {
            display: "flex",
            alignItems: "center",
            minWidth: token2.tabsDropdownWidth,
            margin: 0,
            padding: `${unit(token2.paddingXXS)} ${unit(token2.paddingSM)}`,
            color: token2.colorText,
            fontWeight: "normal",
            fontSize: token2.fontSize,
            lineHeight: token2.lineHeight,
            cursor: "pointer",
            transition: `all ${token2.motionDurationSlow}`,
            "> span": {
              flex: 1,
              whiteSpace: "nowrap"
            },
            "&-remove": {
              flex: "none",
              marginLeft: {
                _skip_check_: true,
                value: token2.marginSM
              },
              color: token2.colorTextDescription,
              fontSize: token2.fontSizeSM,
              background: "transparent",
              border: 0,
              cursor: "pointer",
              "&:hover": {
                color: itemHoverColor
              }
            },
            "&:hover": {
              background: token2.controlItemBgHover
            },
            "&-disabled": {
              "&, &:hover": {
                color: token2.colorTextDisabled,
                background: "transparent",
                cursor: "not-allowed"
              }
            }
          })
        }
      })
    };
  };
  var genPositionStyle = (token2) => {
    const {
      componentCls,
      margin,
      colorBorderSecondary,
      horizontalMargin,
      verticalItemPadding,
      verticalItemMargin,
      calc
    } = token2;
    return {
      // ========================== Top & Bottom ==========================
      [`${componentCls}-top, ${componentCls}-bottom`]: {
        flexDirection: "column",
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          margin: horizontalMargin,
          "&::before": {
            position: "absolute",
            right: {
              _skip_check_: true,
              value: 0
            },
            left: {
              _skip_check_: true,
              value: 0
            },
            borderBottom: `${unit(token2.lineWidth)} ${token2.lineType} ${colorBorderSecondary}`,
            content: "''"
          },
          [`${componentCls}-ink-bar`]: {
            height: token2.lineWidthBold,
            "&-animated": {
              transition: `width ${token2.motionDurationSlow}, left ${token2.motionDurationSlow},
            right ${token2.motionDurationSlow}`
            }
          },
          [`${componentCls}-nav-wrap`]: {
            "&::before, &::after": {
              top: 0,
              bottom: 0,
              width: token2.controlHeight
            },
            "&::before": {
              left: {
                _skip_check_: true,
                value: 0
              },
              boxShadow: token2.boxShadowTabsOverflowLeft
            },
            "&::after": {
              right: {
                _skip_check_: true,
                value: 0
              },
              boxShadow: token2.boxShadowTabsOverflowRight
            },
            [`&${componentCls}-nav-wrap-ping-left::before`]: {
              opacity: 1
            },
            [`&${componentCls}-nav-wrap-ping-right::after`]: {
              opacity: 1
            }
          }
        }
      },
      [`${componentCls}-top`]: {
        [`> ${componentCls}-nav,
        > div > ${componentCls}-nav`]: {
          "&::before": {
            bottom: 0
          },
          [`${componentCls}-ink-bar`]: {
            bottom: 0
          }
        }
      },
      [`${componentCls}-bottom`]: {
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          order: 1,
          marginTop: margin,
          marginBottom: 0,
          "&::before": {
            top: 0
          },
          [`${componentCls}-ink-bar`]: {
            top: 0
          }
        },
        [`> ${componentCls}-content-holder, > div > ${componentCls}-content-holder`]: {
          order: 0
        }
      },
      // ========================== Left & Right ==========================
      [`${componentCls}-left, ${componentCls}-right`]: {
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          flexDirection: "column",
          minWidth: calc(token2.controlHeight).mul(1.25).equal(),
          // >>>>>>>>>>> Tab
          [`${componentCls}-tab`]: {
            padding: verticalItemPadding,
            textAlign: "center"
          },
          [`${componentCls}-tab + ${componentCls}-tab`]: {
            margin: verticalItemMargin
          },
          // >>>>>>>>>>> Nav
          [`${componentCls}-nav-wrap`]: {
            flexDirection: "column",
            "&::before, &::after": {
              right: {
                _skip_check_: true,
                value: 0
              },
              left: {
                _skip_check_: true,
                value: 0
              },
              height: token2.controlHeight
            },
            "&::before": {
              top: 0,
              boxShadow: token2.boxShadowTabsOverflowTop
            },
            "&::after": {
              bottom: 0,
              boxShadow: token2.boxShadowTabsOverflowBottom
            },
            [`&${componentCls}-nav-wrap-ping-top::before`]: {
              opacity: 1
            },
            [`&${componentCls}-nav-wrap-ping-bottom::after`]: {
              opacity: 1
            }
          },
          // >>>>>>>>>>> Ink Bar
          [`${componentCls}-ink-bar`]: {
            width: token2.lineWidthBold,
            "&-animated": {
              transition: `height ${token2.motionDurationSlow}, top ${token2.motionDurationSlow}`
            }
          },
          [`${componentCls}-nav-list, ${componentCls}-nav-operations`]: {
            flex: "1 0 auto",
            // fix safari scroll problem
            flexDirection: "column"
          }
        }
      },
      [`${componentCls}-left`]: {
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          [`${componentCls}-ink-bar`]: {
            right: {
              _skip_check_: true,
              value: 0
            }
          }
        },
        [`> ${componentCls}-content-holder, > div > ${componentCls}-content-holder`]: {
          marginLeft: {
            _skip_check_: true,
            value: unit(calc(token2.lineWidth).mul(-1).equal())
          },
          borderLeft: {
            _skip_check_: true,
            value: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`
          },
          [`> ${componentCls}-content > ${componentCls}-tabpane`]: {
            paddingLeft: {
              _skip_check_: true,
              value: token2.paddingLG
            }
          }
        }
      },
      [`${componentCls}-right`]: {
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          order: 1,
          [`${componentCls}-ink-bar`]: {
            left: {
              _skip_check_: true,
              value: 0
            }
          }
        },
        [`> ${componentCls}-content-holder, > div > ${componentCls}-content-holder`]: {
          order: 0,
          marginRight: {
            _skip_check_: true,
            value: calc(token2.lineWidth).mul(-1).equal()
          },
          borderRight: {
            _skip_check_: true,
            value: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`
          },
          [`> ${componentCls}-content > ${componentCls}-tabpane`]: {
            paddingRight: {
              _skip_check_: true,
              value: token2.paddingLG
            }
          }
        }
      }
    };
  };
  var genSizeStyle3 = (token2) => {
    const {
      componentCls,
      cardPaddingSM,
      cardPaddingLG,
      horizontalItemPaddingSM,
      horizontalItemPaddingLG
    } = token2;
    return {
      [componentCls]: {
        "&-small": {
          [`> ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              padding: horizontalItemPaddingSM,
              fontSize: token2.titleFontSizeSM
            }
          }
        },
        "&-large": {
          [`> ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              padding: horizontalItemPaddingLG,
              fontSize: token2.titleFontSizeLG
            }
          }
        }
      },
      [`${componentCls}-card`]: {
        [`&${componentCls}-small`]: {
          [`> ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              padding: cardPaddingSM
            }
          },
          [`&${componentCls}-bottom`]: {
            [`> ${componentCls}-nav ${componentCls}-tab`]: {
              borderRadius: `0 0 ${unit(token2.borderRadius)} ${unit(token2.borderRadius)}`
            }
          },
          [`&${componentCls}-top`]: {
            [`> ${componentCls}-nav ${componentCls}-tab`]: {
              borderRadius: `${unit(token2.borderRadius)} ${unit(token2.borderRadius)} 0 0`
            }
          },
          [`&${componentCls}-right`]: {
            [`> ${componentCls}-nav ${componentCls}-tab`]: {
              borderRadius: {
                _skip_check_: true,
                value: `0 ${unit(token2.borderRadius)} ${unit(token2.borderRadius)} 0`
              }
            }
          },
          [`&${componentCls}-left`]: {
            [`> ${componentCls}-nav ${componentCls}-tab`]: {
              borderRadius: {
                _skip_check_: true,
                value: `${unit(token2.borderRadius)} 0 0 ${unit(token2.borderRadius)}`
              }
            }
          }
        },
        [`&${componentCls}-large`]: {
          [`> ${componentCls}-nav`]: {
            [`${componentCls}-tab`]: {
              padding: cardPaddingLG
            }
          }
        }
      }
    };
  };
  var genTabStyle = (token2) => {
    const {
      componentCls,
      itemActiveColor,
      itemHoverColor,
      iconCls,
      tabsHorizontalItemMargin,
      horizontalItemPadding,
      itemSelectedColor,
      itemColor
    } = token2;
    const tabCls = `${componentCls}-tab`;
    return {
      [tabCls]: {
        position: "relative",
        WebkitTouchCallout: "none",
        WebkitTapHighlightColor: "transparent",
        display: "inline-flex",
        alignItems: "center",
        padding: horizontalItemPadding,
        fontSize: token2.titleFontSize,
        background: "transparent",
        border: 0,
        outline: "none",
        cursor: "pointer",
        color: itemColor,
        "&-btn, &-remove": Object.assign({
          "&:focus:not(:focus-visible), &:active": {
            color: itemActiveColor
          }
        }, genFocusStyle(token2)),
        "&-btn": {
          outline: "none",
          transition: "all 0.3s",
          [`${tabCls}-icon:not(:last-child)`]: {
            marginInlineEnd: token2.marginSM
          }
        },
        "&-remove": {
          flex: "none",
          marginRight: {
            _skip_check_: true,
            value: token2.calc(token2.marginXXS).mul(-1).equal()
          },
          marginLeft: {
            _skip_check_: true,
            value: token2.marginXS
          },
          color: token2.colorTextDescription,
          fontSize: token2.fontSizeSM,
          background: "transparent",
          border: "none",
          outline: "none",
          cursor: "pointer",
          transition: `all ${token2.motionDurationSlow}`,
          "&:hover": {
            color: token2.colorTextHeading
          }
        },
        "&:hover": {
          color: itemHoverColor
        },
        [`&${tabCls}-active ${tabCls}-btn`]: {
          color: itemSelectedColor,
          textShadow: token2.tabsActiveTextShadow
        },
        [`&${tabCls}-disabled`]: {
          color: token2.colorTextDisabled,
          cursor: "not-allowed"
        },
        [`&${tabCls}-disabled ${tabCls}-btn, &${tabCls}-disabled ${componentCls}-remove`]: {
          "&:focus, &:active": {
            color: token2.colorTextDisabled
          }
        },
        [`& ${tabCls}-remove ${iconCls}`]: {
          margin: 0
        },
        [`${iconCls}:not(:last-child)`]: {
          marginRight: {
            _skip_check_: true,
            value: token2.marginSM
          }
        }
      },
      [`${tabCls} + ${tabCls}`]: {
        margin: {
          _skip_check_: true,
          value: tabsHorizontalItemMargin
        }
      }
    };
  };
  var genRtlStyle = (token2) => {
    const {
      componentCls,
      tabsHorizontalItemMarginRTL,
      iconCls,
      cardGutter,
      calc
    } = token2;
    const rtlCls = `${componentCls}-rtl`;
    return {
      [rtlCls]: {
        direction: "rtl",
        [`${componentCls}-nav`]: {
          [`${componentCls}-tab`]: {
            margin: {
              _skip_check_: true,
              value: tabsHorizontalItemMarginRTL
            },
            [`${componentCls}-tab:last-of-type`]: {
              marginLeft: {
                _skip_check_: true,
                value: 0
              }
            },
            [iconCls]: {
              marginRight: {
                _skip_check_: true,
                value: 0
              },
              marginLeft: {
                _skip_check_: true,
                value: unit(token2.marginSM)
              }
            },
            [`${componentCls}-tab-remove`]: {
              marginRight: {
                _skip_check_: true,
                value: unit(token2.marginXS)
              },
              marginLeft: {
                _skip_check_: true,
                value: unit(calc(token2.marginXXS).mul(-1).equal())
              },
              [iconCls]: {
                margin: 0
              }
            }
          }
        },
        [`&${componentCls}-left`]: {
          [`> ${componentCls}-nav`]: {
            order: 1
          },
          [`> ${componentCls}-content-holder`]: {
            order: 0
          }
        },
        [`&${componentCls}-right`]: {
          [`> ${componentCls}-nav`]: {
            order: 0
          },
          [`> ${componentCls}-content-holder`]: {
            order: 1
          }
        },
        // ====================== Card ======================
        [`&${componentCls}-card${componentCls}-top, &${componentCls}-card${componentCls}-bottom`]: {
          [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
            [`${componentCls}-tab + ${componentCls}-tab`]: {
              marginRight: {
                _skip_check_: true,
                value: cardGutter
              },
              marginLeft: {
                _skip_check_: true,
                value: 0
              }
            }
          }
        }
      },
      [`${componentCls}-dropdown-rtl`]: {
        direction: "rtl"
      },
      [`${componentCls}-menu-item`]: {
        [`${componentCls}-dropdown-rtl`]: {
          textAlign: {
            _skip_check_: true,
            value: "right"
          }
        }
      }
    };
  };
  var genTabsStyle = (token2) => {
    const {
      componentCls,
      tabsCardPadding,
      cardHeight,
      cardGutter,
      itemHoverColor,
      itemActiveColor,
      colorBorderSecondary
    } = token2;
    return {
      [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), {
        display: "flex",
        // ========================== Navigation ==========================
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          position: "relative",
          display: "flex",
          flex: "none",
          alignItems: "center",
          [`${componentCls}-nav-wrap`]: {
            position: "relative",
            display: "flex",
            flex: "auto",
            alignSelf: "stretch",
            overflow: "hidden",
            whiteSpace: "nowrap",
            transform: "translate(0)",
            // Fix chrome render bug
            // >>>>> Ping shadow
            "&::before, &::after": {
              position: "absolute",
              zIndex: 1,
              opacity: 0,
              transition: `opacity ${token2.motionDurationSlow}`,
              content: "''",
              pointerEvents: "none"
            }
          },
          [`${componentCls}-nav-list`]: {
            position: "relative",
            display: "flex",
            transition: `opacity ${token2.motionDurationSlow}`
          },
          // >>>>>>>> Operations
          [`${componentCls}-nav-operations`]: {
            display: "flex",
            alignSelf: "stretch"
          },
          [`${componentCls}-nav-operations-hidden`]: {
            position: "absolute",
            visibility: "hidden",
            pointerEvents: "none"
          },
          [`${componentCls}-nav-more`]: {
            position: "relative",
            padding: tabsCardPadding,
            background: "transparent",
            border: 0,
            color: token2.colorText,
            "&::after": {
              position: "absolute",
              right: {
                _skip_check_: true,
                value: 0
              },
              bottom: 0,
              left: {
                _skip_check_: true,
                value: 0
              },
              height: token2.calc(token2.controlHeightLG).div(8).equal(),
              transform: "translateY(100%)",
              content: "''"
            }
          },
          [`${componentCls}-nav-add`]: Object.assign({
            minWidth: cardHeight,
            minHeight: cardHeight,
            marginLeft: {
              _skip_check_: true,
              value: cardGutter
            },
            padding: `0 ${unit(token2.paddingXS)}`,
            background: "transparent",
            border: `${unit(token2.lineWidth)} ${token2.lineType} ${colorBorderSecondary}`,
            borderRadius: `${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)} 0 0`,
            outline: "none",
            cursor: "pointer",
            color: token2.colorText,
            transition: `all ${token2.motionDurationSlow} ${token2.motionEaseInOut}`,
            "&:hover": {
              color: itemHoverColor
            },
            "&:active, &:focus:not(:focus-visible)": {
              color: itemActiveColor
            }
          }, genFocusStyle(token2))
        },
        [`${componentCls}-extra-content`]: {
          flex: "none"
        },
        // ============================ InkBar ============================
        [`${componentCls}-ink-bar`]: {
          position: "absolute",
          background: token2.inkBarColor,
          pointerEvents: "none"
        }
      }), genTabStyle(token2)), {
        // =========================== TabPanes ===========================
        [`${componentCls}-content`]: {
          position: "relative",
          width: "100%"
        },
        [`${componentCls}-content-holder`]: {
          flex: "auto",
          minWidth: 0,
          minHeight: 0
        },
        [`${componentCls}-tabpane`]: {
          outline: "none",
          "&-hidden": {
            display: "none"
          }
        }
      }),
      [`${componentCls}-centered`]: {
        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {
          [`${componentCls}-nav-wrap`]: {
            [`&:not([class*='${componentCls}-nav-wrap-ping'])`]: {
              justifyContent: "center"
            }
          }
        }
      }
    };
  };
  var prepareComponentToken10 = (token2) => {
    const cardHeight = token2.controlHeightLG;
    return {
      zIndexPopup: token2.zIndexPopupBase + 50,
      cardBg: token2.colorFillAlter,
      cardHeight,
      // Initialize with empty string, because cardPadding will be calculated with cardHeight by default.
      cardPadding: `${(cardHeight - Math.round(token2.fontSize * token2.lineHeight)) / 2 - token2.lineWidth}px ${token2.padding}px`,
      cardPaddingSM: `${token2.paddingXXS * 1.5}px ${token2.padding}px`,
      cardPaddingLG: `${token2.paddingXS}px ${token2.padding}px ${token2.paddingXXS * 1.5}px`,
      titleFontSize: token2.fontSize,
      titleFontSizeLG: token2.fontSizeLG,
      titleFontSizeSM: token2.fontSize,
      inkBarColor: token2.colorPrimary,
      horizontalMargin: `0 0 ${token2.margin}px 0`,
      horizontalItemGutter: 32,
      // Fixed Value
      // Initialize with empty string, because horizontalItemMargin will be calculated with horizontalItemGutter by default.
      horizontalItemMargin: ``,
      horizontalItemMarginRTL: ``,
      horizontalItemPadding: `${token2.paddingSM}px 0`,
      horizontalItemPaddingSM: `${token2.paddingXS}px 0`,
      horizontalItemPaddingLG: `${token2.padding}px 0`,
      verticalItemPadding: `${token2.paddingXS}px ${token2.paddingLG}px`,
      verticalItemMargin: `${token2.margin}px 0 0 0`,
      itemColor: token2.colorText,
      itemSelectedColor: token2.colorPrimary,
      itemHoverColor: token2.colorPrimaryHover,
      itemActiveColor: token2.colorPrimaryActive,
      cardGutter: token2.marginXXS / 2
    };
  };
  var style_default14 = genStyleHooks("Tabs", (token2) => {
    const tabsToken = merge2(token2, {
      // `cardPadding` is empty by default, so we could calculate with dynamic `cardHeight`
      tabsCardPadding: token2.cardPadding,
      dropdownEdgeChildVerticalPadding: token2.paddingXXS,
      tabsActiveTextShadow: "0 0 0.25px currentcolor",
      tabsDropdownHeight: 200,
      tabsDropdownWidth: 120,
      tabsHorizontalItemMargin: `0 0 0 ${unit(token2.horizontalItemGutter)}`,
      tabsHorizontalItemMarginRTL: `0 0 0 ${unit(token2.horizontalItemGutter)}`
    });
    return [genSizeStyle3(tabsToken), genRtlStyle(tabsToken), genPositionStyle(tabsToken), genDropdownStyle(tabsToken), genCardStyle(tabsToken), genTabsStyle(tabsToken), motion_default2(tabsToken)];
  }, prepareComponentToken10);

  // node_modules/antd/es/tabs/TabPane.js
  var TabPane2 = () => null;
  if (true) {
    TabPane2.displayName = "DeprecatedTabPane";
  }
  var TabPane_default2 = TabPane2;

  // node_modules/antd/es/tabs/index.js
  var __rest21 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Tabs2 = (props) => {
    var _a, _b, _c, _d, _e, _f;
    const {
      type: type4,
      className,
      rootClassName,
      size: customSize,
      onEdit,
      hideAdd,
      centered,
      addIcon,
      popupClassName,
      children,
      items,
      animated,
      style: style2,
      indicatorSize,
      indicator
    } = props, otherProps = __rest21(props, ["type", "className", "rootClassName", "size", "onEdit", "hideAdd", "centered", "addIcon", "popupClassName", "children", "items", "animated", "style", "indicatorSize", "indicator"]);
    const {
      prefixCls: customizePrefixCls,
      moreIcon = /* @__PURE__ */ React268.createElement(EllipsisOutlined_default2, null)
    } = otherProps;
    const {
      direction,
      tabs,
      getPrefixCls,
      getPopupContainer
    } = React268.useContext(ConfigContext);
    const prefixCls = getPrefixCls("tabs", customizePrefixCls);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default14(prefixCls, rootCls);
    let editable;
    if (type4 === "editable-card") {
      editable = {
        onEdit: (editType, _ref) => {
          let {
            key,
            event
          } = _ref;
          onEdit === null || onEdit === void 0 ? void 0 : onEdit(editType === "add" ? event : key, editType);
        },
        removeIcon: /* @__PURE__ */ React268.createElement(CloseOutlined_default2, null),
        addIcon: addIcon || /* @__PURE__ */ React268.createElement(PlusOutlined_default2, null),
        showAdd: hideAdd !== true
      };
    }
    const rootPrefixCls = getPrefixCls();
    if (true) {
      const warning8 = devUseWarning("Tabs");
      true ? warning8(!("onPrevClick" in props) && !("onNextClick" in props), "breaking", "`onPrevClick` and `onNextClick` has been removed. Please use `onTabScroll` instead.") : void 0;
      true ? warning8(!(indicatorSize || (tabs === null || tabs === void 0 ? void 0 : tabs.indicatorSize)), "deprecated", "`indicatorSize` has been deprecated. Please use `indicator={{ size: ... }}` instead.") : void 0;
    }
    const size = useSize_default(customSize);
    const mergedItems = useLegacyItems(items, children);
    const mergedAnimated = useAnimateConfig2(prefixCls, animated);
    const mergedStyle = Object.assign(Object.assign({}, tabs === null || tabs === void 0 ? void 0 : tabs.style), style2);
    const mergedIndicator = {
      align: (_a = indicator === null || indicator === void 0 ? void 0 : indicator.align) !== null && _a !== void 0 ? _a : (_b = tabs === null || tabs === void 0 ? void 0 : tabs.indicator) === null || _b === void 0 ? void 0 : _b.align,
      size: (_f = (_d = (_c = indicator === null || indicator === void 0 ? void 0 : indicator.size) !== null && _c !== void 0 ? _c : indicatorSize) !== null && _d !== void 0 ? _d : (_e = tabs === null || tabs === void 0 ? void 0 : tabs.indicator) === null || _e === void 0 ? void 0 : _e.size) !== null && _f !== void 0 ? _f : tabs === null || tabs === void 0 ? void 0 : tabs.indicatorSize
    };
    return wrapCSSVar(/* @__PURE__ */ React268.createElement(es_default15, Object.assign({
      direction,
      getPopupContainer,
      moreTransitionName: `${rootPrefixCls}-slide-up`
    }, otherProps, {
      items: mergedItems,
      className: (0, import_classnames81.default)({
        [`${prefixCls}-${size}`]: size,
        [`${prefixCls}-card`]: ["card", "editable-card"].includes(type4),
        [`${prefixCls}-editable-card`]: type4 === "editable-card",
        [`${prefixCls}-centered`]: centered
      }, tabs === null || tabs === void 0 ? void 0 : tabs.className, className, rootClassName, hashId, cssVarCls, rootCls),
      popupClassName: (0, import_classnames81.default)(popupClassName, hashId, cssVarCls, rootCls),
      style: mergedStyle,
      editable,
      moreIcon,
      prefixCls,
      animated: mergedAnimated,
      indicator: mergedIndicator
    })));
  };
  Tabs2.TabPane = TabPane_default2;
  if (true) {
    Tabs2.displayName = "Tabs";
  }
  var tabs_default = Tabs2;

  // node_modules/antd/es/card/Grid.js
  var import_classnames82 = __toESM(require_classnames());
  var React269 = __toESM(require_react());
  var __rest22 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Grid = (_a) => {
    var {
      prefixCls,
      className,
      hoverable = true
    } = _a, props = __rest22(_a, ["prefixCls", "className", "hoverable"]);
    const {
      getPrefixCls
    } = React269.useContext(ConfigContext);
    const prefix = getPrefixCls("card", prefixCls);
    const classString = (0, import_classnames82.default)(`${prefix}-grid`, className, {
      [`${prefix}-grid-hoverable`]: hoverable
    });
    return /* @__PURE__ */ React269.createElement("div", Object.assign({}, props, {
      className: classString
    }));
  };
  var Grid_default = Grid;

  // node_modules/antd/es/card/style/index.js
  var genCardHeadStyle = (token2) => {
    const {
      antCls,
      componentCls,
      headerHeight,
      cardPaddingBase,
      tabsMarginBottom
    } = token2;
    return Object.assign(Object.assign({
      display: "flex",
      justifyContent: "center",
      flexDirection: "column",
      minHeight: headerHeight,
      marginBottom: -1,
      padding: `0 ${unit(cardPaddingBase)}`,
      color: token2.colorTextHeading,
      fontWeight: token2.fontWeightStrong,
      fontSize: token2.headerFontSize,
      background: token2.headerBg,
      borderBottom: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorderSecondary}`,
      borderRadius: `${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)} 0 0`
    }, clearFix()), {
      "&-wrapper": {
        width: "100%",
        display: "flex",
        alignItems: "center"
      },
      "&-title": Object.assign(Object.assign({
        display: "inline-block",
        flex: 1
      }, textEllipsis), {
        [`
          > ${componentCls}-typography,
          > ${componentCls}-typography-edit-content
        `]: {
          insetInlineStart: 0,
          marginTop: 0,
          marginBottom: 0
        }
      }),
      [`${antCls}-tabs-top`]: {
        clear: "both",
        marginBottom: tabsMarginBottom,
        color: token2.colorText,
        fontWeight: "normal",
        fontSize: token2.fontSize,
        "&-bar": {
          borderBottom: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorderSecondary}`
        }
      }
    });
  };
  var genCardGridStyle = (token2) => {
    const {
      cardPaddingBase,
      colorBorderSecondary,
      cardShadow,
      lineWidth
    } = token2;
    return {
      width: "33.33%",
      padding: cardPaddingBase,
      border: 0,
      borderRadius: 0,
      boxShadow: `
      ${unit(lineWidth)} 0 0 0 ${colorBorderSecondary},
      0 ${unit(lineWidth)} 0 0 ${colorBorderSecondary},
      ${unit(lineWidth)} ${unit(lineWidth)} 0 0 ${colorBorderSecondary},
      ${unit(lineWidth)} 0 0 0 ${colorBorderSecondary} inset,
      0 ${unit(lineWidth)} 0 0 ${colorBorderSecondary} inset;
    `,
      transition: `all ${token2.motionDurationMid}`,
      "&-hoverable:hover": {
        position: "relative",
        zIndex: 1,
        boxShadow: cardShadow
      }
    };
  };
  var genCardActionsStyle = (token2) => {
    const {
      componentCls,
      iconCls,
      actionsLiMargin,
      cardActionsIconSize,
      colorBorderSecondary,
      actionsBg
    } = token2;
    return Object.assign(Object.assign({
      margin: 0,
      padding: 0,
      listStyle: "none",
      background: actionsBg,
      borderTop: `${unit(token2.lineWidth)} ${token2.lineType} ${colorBorderSecondary}`,
      display: "flex",
      borderRadius: `0 0 ${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)}`
    }, clearFix()), {
      "& > li": {
        margin: actionsLiMargin,
        color: token2.colorTextDescription,
        textAlign: "center",
        "> span": {
          position: "relative",
          display: "block",
          minWidth: token2.calc(token2.cardActionsIconSize).mul(2).equal(),
          fontSize: token2.fontSize,
          lineHeight: token2.lineHeight,
          cursor: "pointer",
          "&:hover": {
            color: token2.colorPrimary,
            transition: `color ${token2.motionDurationMid}`
          },
          [`a:not(${componentCls}-btn), > ${iconCls}`]: {
            display: "inline-block",
            width: "100%",
            color: token2.colorTextDescription,
            lineHeight: unit(token2.fontHeight),
            transition: `color ${token2.motionDurationMid}`,
            "&:hover": {
              color: token2.colorPrimary
            }
          },
          [`> ${iconCls}`]: {
            fontSize: cardActionsIconSize,
            lineHeight: unit(token2.calc(cardActionsIconSize).mul(token2.lineHeight).equal())
          }
        },
        "&:not(:last-child)": {
          borderInlineEnd: `${unit(token2.lineWidth)} ${token2.lineType} ${colorBorderSecondary}`
        }
      }
    });
  };
  var genCardMetaStyle = (token2) => Object.assign(Object.assign({
    margin: `${unit(token2.calc(token2.marginXXS).mul(-1).equal())} 0`,
    display: "flex"
  }, clearFix()), {
    "&-avatar": {
      paddingInlineEnd: token2.padding
    },
    "&-detail": {
      overflow: "hidden",
      flex: 1,
      "> div:not(:last-child)": {
        marginBottom: token2.marginXS
      }
    },
    "&-title": Object.assign({
      color: token2.colorTextHeading,
      fontWeight: token2.fontWeightStrong,
      fontSize: token2.fontSizeLG
    }, textEllipsis),
    "&-description": {
      color: token2.colorTextDescription
    }
  });
  var genCardTypeInnerStyle = (token2) => {
    const {
      componentCls,
      cardPaddingBase,
      colorFillAlter
    } = token2;
    return {
      [`${componentCls}-head`]: {
        padding: `0 ${unit(cardPaddingBase)}`,
        background: colorFillAlter,
        "&-title": {
          fontSize: token2.fontSize
        }
      },
      [`${componentCls}-body`]: {
        padding: `${unit(token2.padding)} ${unit(cardPaddingBase)}`
      }
    };
  };
  var genCardLoadingStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      overflow: "hidden",
      [`${componentCls}-body`]: {
        userSelect: "none"
      }
    };
  };
  var genCardStyle2 = (token2) => {
    const {
      antCls,
      componentCls,
      cardShadow,
      cardHeadPadding,
      colorBorderSecondary,
      boxShadowTertiary,
      cardPaddingBase,
      extraColor
    } = token2;
    return {
      [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "relative",
        background: token2.colorBgContainer,
        borderRadius: token2.borderRadiusLG,
        [`&:not(${componentCls}-bordered)`]: {
          boxShadow: boxShadowTertiary
        },
        [`${componentCls}-head`]: genCardHeadStyle(token2),
        [`${componentCls}-extra`]: {
          // https://stackoverflow.com/a/22429853/3040605
          marginInlineStart: "auto",
          color: extraColor,
          fontWeight: "normal",
          fontSize: token2.fontSize
        },
        [`${componentCls}-body`]: Object.assign({
          padding: cardPaddingBase,
          borderRadius: ` 0 0 ${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)}`
        }, clearFix()),
        [`${componentCls}-grid`]: genCardGridStyle(token2),
        [`${componentCls}-cover`]: {
          "> *": {
            display: "block",
            width: "100%"
          },
          [`img, img + ${antCls}-image-mask`]: {
            borderRadius: `${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)} 0 0`
          }
        },
        [`${componentCls}-actions`]: genCardActionsStyle(token2),
        [`${componentCls}-meta`]: genCardMetaStyle(token2)
      }),
      [`${componentCls}-bordered`]: {
        border: `${unit(token2.lineWidth)} ${token2.lineType} ${colorBorderSecondary}`,
        [`${componentCls}-cover`]: {
          marginTop: -1,
          marginInlineStart: -1,
          marginInlineEnd: -1
        }
      },
      [`${componentCls}-hoverable`]: {
        cursor: "pointer",
        transition: `box-shadow ${token2.motionDurationMid}, border-color ${token2.motionDurationMid}`,
        "&:hover": {
          borderColor: "transparent",
          boxShadow: cardShadow
        }
      },
      [`${componentCls}-contain-grid`]: {
        borderRadius: `${unit(token2.borderRadiusLG)} ${unit(token2.borderRadiusLG)} 0 0 `,
        [`${componentCls}-body`]: {
          display: "flex",
          flexWrap: "wrap"
        },
        [`&:not(${componentCls}-loading) ${componentCls}-body`]: {
          marginBlockStart: token2.calc(token2.lineWidth).mul(-1).equal(),
          marginInlineStart: token2.calc(token2.lineWidth).mul(-1).equal(),
          padding: 0
        }
      },
      [`${componentCls}-contain-tabs`]: {
        [`> ${componentCls}-head`]: {
          minHeight: 0,
          [`${componentCls}-head-title, ${componentCls}-extra`]: {
            paddingTop: cardHeadPadding
          }
        }
      },
      [`${componentCls}-type-inner`]: genCardTypeInnerStyle(token2),
      [`${componentCls}-loading`]: genCardLoadingStyle(token2),
      [`${componentCls}-rtl`]: {
        direction: "rtl"
      }
    };
  };
  var genCardSizeStyle = (token2) => {
    const {
      componentCls,
      cardPaddingSM,
      headerHeightSM,
      headerFontSizeSM
    } = token2;
    return {
      [`${componentCls}-small`]: {
        [`> ${componentCls}-head`]: {
          minHeight: headerHeightSM,
          padding: `0 ${unit(cardPaddingSM)}`,
          fontSize: headerFontSizeSM,
          [`> ${componentCls}-head-wrapper`]: {
            [`> ${componentCls}-extra`]: {
              fontSize: token2.fontSize
            }
          }
        },
        [`> ${componentCls}-body`]: {
          padding: cardPaddingSM
        }
      },
      [`${componentCls}-small${componentCls}-contain-tabs`]: {
        [`> ${componentCls}-head`]: {
          [`${componentCls}-head-title, ${componentCls}-extra`]: {
            paddingTop: 0,
            display: "flex",
            alignItems: "center"
          }
        }
      }
    };
  };
  var prepareComponentToken11 = (token2) => ({
    headerBg: "transparent",
    headerFontSize: token2.fontSizeLG,
    headerFontSizeSM: token2.fontSize,
    headerHeight: token2.fontSizeLG * token2.lineHeightLG + token2.padding * 2,
    headerHeightSM: token2.fontSize * token2.lineHeight + token2.paddingXS * 2,
    actionsBg: token2.colorBgContainer,
    actionsLiMargin: `${token2.paddingSM}px 0`,
    tabsMarginBottom: -token2.padding - token2.lineWidth,
    extraColor: token2.colorText
  });
  var style_default15 = genStyleHooks("Card", (token2) => {
    const cardToken = merge2(token2, {
      cardShadow: token2.boxShadowCard,
      cardHeadPadding: token2.padding,
      cardPaddingBase: token2.paddingLG,
      cardActionsIconSize: token2.fontSize,
      cardPaddingSM: 12
      // Fixed padding.
    });
    return [
      // Style
      genCardStyle2(cardToken),
      // Size
      genCardSizeStyle(cardToken)
    ];
  }, prepareComponentToken11);

  // node_modules/antd/es/card/Card.js
  var __rest23 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var ActionNode = (props) => {
    const {
      prefixCls,
      actions = []
    } = props;
    return /* @__PURE__ */ React270.createElement("ul", {
      className: `${prefixCls}-actions`
    }, actions.map((action, index2) => {
      const key = `action-${index2}`;
      return /* @__PURE__ */ React270.createElement("li", {
        style: {
          width: `${100 / actions.length}%`
        },
        key
      }, /* @__PURE__ */ React270.createElement("span", null, action));
    }));
  };
  var Card = /* @__PURE__ */ React270.forwardRef((props, ref) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      style: style2,
      extra,
      headStyle = {},
      bodyStyle = {},
      title,
      loading,
      bordered = true,
      size: customizeSize,
      type: type4,
      cover,
      actions,
      tabList,
      children,
      activeTabKey,
      defaultActiveTabKey,
      tabBarExtraContent,
      hoverable,
      tabProps = {}
    } = props, others = __rest23(props, ["prefixCls", "className", "rootClassName", "style", "extra", "headStyle", "bodyStyle", "title", "loading", "bordered", "size", "type", "cover", "actions", "tabList", "children", "activeTabKey", "defaultActiveTabKey", "tabBarExtraContent", "hoverable", "tabProps"]);
    const {
      getPrefixCls,
      direction,
      card
    } = React270.useContext(ConfigContext);
    const onTabChange = (key) => {
      var _a;
      (_a = props.onTabChange) === null || _a === void 0 ? void 0 : _a.call(props, key);
    };
    const isContainGrid = React270.useMemo(() => {
      let containGrid = false;
      React270.Children.forEach(children, (element) => {
        if (element && element.type && element.type === Grid_default) {
          containGrid = true;
        }
      });
      return containGrid;
    }, [children]);
    const prefixCls = getPrefixCls("card", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default15(prefixCls);
    const loadingBlock = /* @__PURE__ */ React270.createElement(skeleton_default, {
      loading: true,
      active: true,
      paragraph: {
        rows: 4
      },
      title: false
    }, children);
    const hasActiveTabKey = activeTabKey !== void 0;
    const extraProps = Object.assign(Object.assign({}, tabProps), {
      [hasActiveTabKey ? "activeKey" : "defaultActiveKey"]: hasActiveTabKey ? activeTabKey : defaultActiveTabKey,
      tabBarExtraContent
    });
    let head;
    const mergedSize = useSize_default(customizeSize);
    const tabSize = !mergedSize || mergedSize === "default" ? "large" : mergedSize;
    const tabs = tabList ? /* @__PURE__ */ React270.createElement(tabs_default, Object.assign({
      size: tabSize
    }, extraProps, {
      className: `${prefixCls}-head-tabs`,
      onChange: onTabChange,
      items: tabList.map((_a) => {
        var {
          tab
        } = _a, item = __rest23(_a, ["tab"]);
        return Object.assign({
          label: tab
        }, item);
      })
    })) : null;
    if (title || extra || tabs) {
      head = /* @__PURE__ */ React270.createElement("div", {
        className: `${prefixCls}-head`,
        style: headStyle
      }, /* @__PURE__ */ React270.createElement("div", {
        className: `${prefixCls}-head-wrapper`
      }, title && /* @__PURE__ */ React270.createElement("div", {
        className: `${prefixCls}-head-title`
      }, title), extra && /* @__PURE__ */ React270.createElement("div", {
        className: `${prefixCls}-extra`
      }, extra)), tabs);
    }
    const coverDom = cover ? /* @__PURE__ */ React270.createElement("div", {
      className: `${prefixCls}-cover`
    }, cover) : null;
    const body = /* @__PURE__ */ React270.createElement("div", {
      className: `${prefixCls}-body`,
      style: bodyStyle
    }, loading ? loadingBlock : children);
    const actionDom = actions && actions.length ? /* @__PURE__ */ React270.createElement(ActionNode, {
      prefixCls,
      actions
    }) : null;
    const divProps = omit(others, ["onTabChange"]);
    const classString = (0, import_classnames83.default)(prefixCls, card === null || card === void 0 ? void 0 : card.className, {
      [`${prefixCls}-loading`]: loading,
      [`${prefixCls}-bordered`]: bordered,
      [`${prefixCls}-hoverable`]: hoverable,
      [`${prefixCls}-contain-grid`]: isContainGrid,
      [`${prefixCls}-contain-tabs`]: tabList && tabList.length,
      [`${prefixCls}-${mergedSize}`]: mergedSize,
      [`${prefixCls}-type-${type4}`]: !!type4,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, className, rootClassName, hashId, cssVarCls);
    const mergedStyle = Object.assign(Object.assign({}, card === null || card === void 0 ? void 0 : card.style), style2);
    return wrapCSSVar(/* @__PURE__ */ React270.createElement("div", Object.assign({
      ref
    }, divProps, {
      className: classString,
      style: mergedStyle
    }), head, coverDom, body, actionDom));
  });
  var Card_default = Card;

  // node_modules/antd/es/card/Meta.js
  var import_classnames84 = __toESM(require_classnames());
  var React271 = __toESM(require_react());
  var __rest24 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Meta = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      avatar,
      title,
      description
    } = props, others = __rest24(props, ["prefixCls", "className", "avatar", "title", "description"]);
    const {
      getPrefixCls
    } = React271.useContext(ConfigContext);
    const prefixCls = getPrefixCls("card", customizePrefixCls);
    const classString = (0, import_classnames84.default)(`${prefixCls}-meta`, className);
    const avatarDom = avatar ? /* @__PURE__ */ React271.createElement("div", {
      className: `${prefixCls}-meta-avatar`
    }, avatar) : null;
    const titleDom = title ? /* @__PURE__ */ React271.createElement("div", {
      className: `${prefixCls}-meta-title`
    }, title) : null;
    const descriptionDom = description ? /* @__PURE__ */ React271.createElement("div", {
      className: `${prefixCls}-meta-description`
    }, description) : null;
    const MetaDetail = titleDom || descriptionDom ? /* @__PURE__ */ React271.createElement("div", {
      className: `${prefixCls}-meta-detail`
    }, titleDom, descriptionDom) : null;
    return /* @__PURE__ */ React271.createElement("div", Object.assign({}, others, {
      className: classString
    }), avatarDom, MetaDetail);
  };
  var Meta_default = Meta;

  // node_modules/antd/es/card/index.js
  var Card2 = Card_default;
  Card2.Grid = Grid_default;
  Card2.Meta = Meta_default;
  if (true) {
    Card2.displayName = "Card";
  }
  var card_default = Card2;

  // node_modules/throttle-debounce/esm/index.js
  function throttle2(delay, callback, options) {
    var _ref = options || {}, _ref$noTrailing = _ref.noTrailing, noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing, _ref$noLeading = _ref.noLeading, noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading, _ref$debounceMode = _ref.debounceMode, debounceMode = _ref$debounceMode === void 0 ? void 0 : _ref$debounceMode;
    var timeoutID;
    var cancelled2 = false;
    var lastExec = 0;
    function clearExistingTimeout() {
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
    }
    function cancel(options2) {
      var _ref2 = options2 || {}, _ref2$upcomingOnly = _ref2.upcomingOnly, upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;
      clearExistingTimeout();
      cancelled2 = !upcomingOnly;
    }
    function wrapper() {
      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
        arguments_[_key] = arguments[_key];
      }
      var self2 = this;
      var elapsed = Date.now() - lastExec;
      if (cancelled2) {
        return;
      }
      function exec() {
        lastExec = Date.now();
        callback.apply(self2, arguments_);
      }
      function clear() {
        timeoutID = void 0;
      }
      if (!noLeading && debounceMode && !timeoutID) {
        exec();
      }
      clearExistingTimeout();
      if (debounceMode === void 0 && elapsed > delay) {
        if (noLeading) {
          lastExec = Date.now();
          if (!noTrailing) {
            timeoutID = setTimeout(debounceMode ? clear : exec, delay);
          }
        } else {
          exec();
        }
      } else if (noTrailing !== true) {
        timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
      }
    }
    wrapper.cancel = cancel;
    return wrapper;
  }
  function debounce(delay, callback, options) {
    var _ref = options || {}, _ref$atBegin = _ref.atBegin, atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;
    return throttle2(delay, callback, {
      debounceMode: atBegin !== false
    });
  }

  // node_modules/rc-tree/es/utils/keyUtil.js
  function getEntity(keyEntities, key) {
    return keyEntities[key];
  }

  // node_modules/rc-tree/es/utils/treeUtil.js
  var _excluded39 = ["children"];
  function getPosition(level, index2) {
    return "".concat(level, "-").concat(index2);
  }
  function isTreeNode(node2) {
    return node2 && node2.type && node2.type.isTreeNode;
  }
  function getKey2(key, pos) {
    if (key !== null && key !== void 0) {
      return key;
    }
    return pos;
  }
  function fillFieldNames2(fieldNames) {
    var _ref = fieldNames || {}, title = _ref.title, _title = _ref._title, key = _ref.key, children = _ref.children;
    var mergedTitle = title || "title";
    return {
      title: mergedTitle,
      _title: _title || [mergedTitle],
      key: key || "key",
      children: children || "children"
    };
  }
  function warningWithoutKey(treeData, fieldNames) {
    var keys2 = /* @__PURE__ */ new Map();
    function dig(list) {
      var path2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (list || []).forEach(function(treeNode) {
        var key = treeNode[fieldNames.key];
        var children = treeNode[fieldNames.children];
        warning_default(key !== null && key !== void 0, "Tree node must have a certain key: [".concat(path2).concat(key, "]"));
        var recordKey = String(key);
        warning_default(!keys2.has(recordKey) || key === null || key === void 0, "Same 'key' exist in the Tree: ".concat(recordKey));
        keys2.set(recordKey, true);
        dig(children, "".concat(path2).concat(recordKey, " > "));
      });
    }
    dig(treeData);
  }
  function convertTreeToData(rootNodes) {
    function dig(node2) {
      var treeNodes = toArray(node2);
      return treeNodes.map(function(treeNode) {
        if (!isTreeNode(treeNode)) {
          warning_default(!treeNode, "Tree/TreeNode can only accept TreeNode as children.");
          return null;
        }
        var key = treeNode.key;
        var _treeNode$props = treeNode.props, children = _treeNode$props.children, rest = _objectWithoutProperties(_treeNode$props, _excluded39);
        var dataNode = _objectSpread2({
          key
        }, rest);
        var parsedChildren = dig(children);
        if (parsedChildren.length) {
          dataNode.children = parsedChildren;
        }
        return dataNode;
      }).filter(function(dataNode) {
        return dataNode;
      });
    }
    return dig(rootNodes);
  }
  function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {
    var _fillFieldNames = fillFieldNames2(fieldNames), fieldTitles = _fillFieldNames._title, fieldKey = _fillFieldNames.key, fieldChildren = _fillFieldNames.children;
    var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);
    var flattenList = [];
    function dig(list) {
      var parent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return list.map(function(treeNode, index2) {
        var pos = getPosition(parent ? parent.pos : "0", index2);
        var mergedKey = getKey2(treeNode[fieldKey], pos);
        var mergedTitle;
        for (var i = 0; i < fieldTitles.length; i += 1) {
          var fieldTitle = fieldTitles[i];
          if (treeNode[fieldTitle] !== void 0) {
            mergedTitle = treeNode[fieldTitle];
            break;
          }
        }
        var flattenNode = _objectSpread2(_objectSpread2({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {
          title: mergedTitle,
          key: mergedKey,
          parent,
          pos,
          children: null,
          data: treeNode,
          isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index2 === 0]),
          isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index2 === list.length - 1])
        });
        flattenList.push(flattenNode);
        if (expandedKeys === true || expandedKeySet.has(mergedKey)) {
          flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);
        } else {
          flattenNode.children = [];
        }
        return flattenNode;
      });
    }
    dig(treeNodeList);
    return flattenList;
  }
  function traverseDataNodes(dataNodes, callback, config) {
    var mergedConfig = {};
    if (_typeof(config) === "object") {
      mergedConfig = config;
    } else {
      mergedConfig = {
        externalGetKey: config
      };
    }
    mergedConfig = mergedConfig || {};
    var _mergedConfig = mergedConfig, childrenPropName = _mergedConfig.childrenPropName, externalGetKey = _mergedConfig.externalGetKey, fieldNames = _mergedConfig.fieldNames;
    var _fillFieldNames2 = fillFieldNames2(fieldNames), fieldKey = _fillFieldNames2.key, fieldChildren = _fillFieldNames2.children;
    var mergeChildrenPropName = childrenPropName || fieldChildren;
    var syntheticGetKey;
    if (externalGetKey) {
      if (typeof externalGetKey === "string") {
        syntheticGetKey = function syntheticGetKey2(node2) {
          return node2[externalGetKey];
        };
      } else if (typeof externalGetKey === "function") {
        syntheticGetKey = function syntheticGetKey2(node2) {
          return externalGetKey(node2);
        };
      }
    } else {
      syntheticGetKey = function syntheticGetKey2(node2, pos) {
        return getKey2(node2[fieldKey], pos);
      };
    }
    function processNode(node2, index2, parent, pathNodes) {
      var children = node2 ? node2[mergeChildrenPropName] : dataNodes;
      var pos = node2 ? getPosition(parent.pos, index2) : "0";
      var connectNodes = node2 ? [].concat(_toConsumableArray(pathNodes), [node2]) : [];
      if (node2) {
        var key = syntheticGetKey(node2, pos);
        var _data = {
          node: node2,
          index: index2,
          pos,
          key,
          parentPos: parent.node ? parent.pos : null,
          level: parent.level + 1,
          nodes: connectNodes
        };
        callback(_data);
      }
      if (children) {
        children.forEach(function(subNode, subIndex) {
          processNode(subNode, subIndex, {
            node: node2,
            pos,
            level: parent ? parent.level + 1 : -1
          }, connectNodes);
        });
      }
    }
    processNode(null);
  }
  function convertDataToEntities(dataNodes) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, initWrapper = _ref2.initWrapper, processEntity = _ref2.processEntity, onProcessFinished = _ref2.onProcessFinished, externalGetKey = _ref2.externalGetKey, childrenPropName = _ref2.childrenPropName, fieldNames = _ref2.fieldNames;
    var legacyExternalGetKey = arguments.length > 2 ? arguments[2] : void 0;
    var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;
    var posEntities = {};
    var keyEntities = {};
    var wrapper = {
      posEntities,
      keyEntities
    };
    if (initWrapper) {
      wrapper = initWrapper(wrapper) || wrapper;
    }
    traverseDataNodes(dataNodes, function(item) {
      var node2 = item.node, index2 = item.index, pos = item.pos, key = item.key, parentPos = item.parentPos, level = item.level, nodes = item.nodes;
      var entity = {
        node: node2,
        nodes,
        index: index2,
        key,
        pos,
        level
      };
      var mergedKey = getKey2(key, pos);
      posEntities[pos] = entity;
      keyEntities[mergedKey] = entity;
      entity.parent = posEntities[parentPos];
      if (entity.parent) {
        entity.parent.children = entity.parent.children || [];
        entity.parent.children.push(entity);
      }
      if (processEntity) {
        processEntity(entity, wrapper);
      }
    }, {
      externalGetKey: mergedExternalGetKey,
      childrenPropName,
      fieldNames
    });
    if (onProcessFinished) {
      onProcessFinished(wrapper);
    }
    return wrapper;
  }
  function getTreeNodeProps(key, _ref3) {
    var expandedKeys = _ref3.expandedKeys, selectedKeys = _ref3.selectedKeys, loadedKeys = _ref3.loadedKeys, loadingKeys = _ref3.loadingKeys, checkedKeys = _ref3.checkedKeys, halfCheckedKeys = _ref3.halfCheckedKeys, dragOverNodeKey = _ref3.dragOverNodeKey, dropPosition = _ref3.dropPosition, keyEntities = _ref3.keyEntities;
    var entity = getEntity(keyEntities, key);
    var treeNodeProps = {
      eventKey: key,
      expanded: expandedKeys.indexOf(key) !== -1,
      selected: selectedKeys.indexOf(key) !== -1,
      loaded: loadedKeys.indexOf(key) !== -1,
      loading: loadingKeys.indexOf(key) !== -1,
      checked: checkedKeys.indexOf(key) !== -1,
      halfChecked: halfCheckedKeys.indexOf(key) !== -1,
      pos: String(entity ? entity.pos : ""),
      // [Legacy] Drag props
      // Since the interaction of drag is changed, the semantic of the props are
      // not accuracy, I think it should be finally removed
      dragOver: dragOverNodeKey === key && dropPosition === 0,
      dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,
      dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1
    };
    return treeNodeProps;
  }
  function convertNodePropsToEventData(props) {
    var data = props.data, expanded = props.expanded, selected = props.selected, checked = props.checked, loaded = props.loaded, loading = props.loading, halfChecked = props.halfChecked, dragOver = props.dragOver, dragOverGapTop = props.dragOverGapTop, dragOverGapBottom = props.dragOverGapBottom, pos = props.pos, active = props.active, eventKey = props.eventKey;
    var eventData = _objectSpread2(_objectSpread2({}, data), {}, {
      expanded,
      selected,
      checked,
      loaded,
      loading,
      halfChecked,
      dragOver,
      dragOverGapTop,
      dragOverGapBottom,
      pos,
      active,
      key: eventKey
    });
    if (!("props" in eventData)) {
      Object.defineProperty(eventData, "props", {
        get: function get2() {
          warning_default(false, "Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.");
          return props;
        }
      });
    }
    return eventData;
  }

  // node_modules/rc-tree/es/utils/conductUtil.js
  function removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {
    var filteredKeys = /* @__PURE__ */ new Set();
    halfCheckedKeys.forEach(function(key) {
      if (!checkedKeys.has(key)) {
        filteredKeys.add(key);
      }
    });
    return filteredKeys;
  }
  function isCheckDisabled(node2) {
    var _ref = node2 || {}, disabled = _ref.disabled, disableCheckbox = _ref.disableCheckbox, checkable = _ref.checkable;
    return !!(disabled || disableCheckbox) || checkable === false;
  }
  function fillConductCheck(keys2, levelEntities, maxLevel, syntheticGetCheckDisabled) {
    var checkedKeys = new Set(keys2);
    var halfCheckedKeys = /* @__PURE__ */ new Set();
    for (var level = 0; level <= maxLevel; level += 1) {
      var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
      entities.forEach(function(entity) {
        var key = entity.key, node2 = entity.node, _entity$children = entity.children, children = _entity$children === void 0 ? [] : _entity$children;
        if (checkedKeys.has(key) && !syntheticGetCheckDisabled(node2)) {
          children.filter(function(childEntity) {
            return !syntheticGetCheckDisabled(childEntity.node);
          }).forEach(function(childEntity) {
            checkedKeys.add(childEntity.key);
          });
        }
      });
    }
    var visitedKeys = /* @__PURE__ */ new Set();
    for (var _level = maxLevel; _level >= 0; _level -= 1) {
      var _entities = levelEntities.get(_level) || /* @__PURE__ */ new Set();
      _entities.forEach(function(entity) {
        var parent = entity.parent, node2 = entity.node;
        if (syntheticGetCheckDisabled(node2) || !entity.parent || visitedKeys.has(entity.parent.key)) {
          return;
        }
        if (syntheticGetCheckDisabled(entity.parent.node)) {
          visitedKeys.add(parent.key);
          return;
        }
        var allChecked = true;
        var partialChecked = false;
        (parent.children || []).filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(_ref2) {
          var key = _ref2.key;
          var checked = checkedKeys.has(key);
          if (allChecked && !checked) {
            allChecked = false;
          }
          if (!partialChecked && (checked || halfCheckedKeys.has(key))) {
            partialChecked = true;
          }
        });
        if (allChecked) {
          checkedKeys.add(parent.key);
        }
        if (partialChecked) {
          halfCheckedKeys.add(parent.key);
        }
        visitedKeys.add(parent.key);
      });
    }
    return {
      checkedKeys: Array.from(checkedKeys),
      halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
    };
  }
  function cleanConductCheck(keys2, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {
    var checkedKeys = new Set(keys2);
    var halfCheckedKeys = new Set(halfKeys);
    for (var level = 0; level <= maxLevel; level += 1) {
      var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
      entities.forEach(function(entity) {
        var key = entity.key, node2 = entity.node, _entity$children2 = entity.children, children = _entity$children2 === void 0 ? [] : _entity$children2;
        if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !syntheticGetCheckDisabled(node2)) {
          children.filter(function(childEntity) {
            return !syntheticGetCheckDisabled(childEntity.node);
          }).forEach(function(childEntity) {
            checkedKeys.delete(childEntity.key);
          });
        }
      });
    }
    halfCheckedKeys = /* @__PURE__ */ new Set();
    var visitedKeys = /* @__PURE__ */ new Set();
    for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {
      var _entities2 = levelEntities.get(_level2) || /* @__PURE__ */ new Set();
      _entities2.forEach(function(entity) {
        var parent = entity.parent, node2 = entity.node;
        if (syntheticGetCheckDisabled(node2) || !entity.parent || visitedKeys.has(entity.parent.key)) {
          return;
        }
        if (syntheticGetCheckDisabled(entity.parent.node)) {
          visitedKeys.add(parent.key);
          return;
        }
        var allChecked = true;
        var partialChecked = false;
        (parent.children || []).filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(_ref3) {
          var key = _ref3.key;
          var checked = checkedKeys.has(key);
          if (allChecked && !checked) {
            allChecked = false;
          }
          if (!partialChecked && (checked || halfCheckedKeys.has(key))) {
            partialChecked = true;
          }
        });
        if (!allChecked) {
          checkedKeys.delete(parent.key);
        }
        if (partialChecked) {
          halfCheckedKeys.add(parent.key);
        }
        visitedKeys.add(parent.key);
      });
    }
    return {
      checkedKeys: Array.from(checkedKeys),
      halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
    };
  }
  function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {
    var warningMissKeys = [];
    var syntheticGetCheckDisabled;
    if (getCheckDisabled) {
      syntheticGetCheckDisabled = getCheckDisabled;
    } else {
      syntheticGetCheckDisabled = isCheckDisabled;
    }
    var keys2 = new Set(keyList.filter(function(key) {
      var hasEntity = !!getEntity(keyEntities, key);
      if (!hasEntity) {
        warningMissKeys.push(key);
      }
      return hasEntity;
    }));
    var levelEntities = /* @__PURE__ */ new Map();
    var maxLevel = 0;
    Object.keys(keyEntities).forEach(function(key) {
      var entity = keyEntities[key];
      var level = entity.level;
      var levelSet = levelEntities.get(level);
      if (!levelSet) {
        levelSet = /* @__PURE__ */ new Set();
        levelEntities.set(level, levelSet);
      }
      levelSet.add(entity);
      maxLevel = Math.max(maxLevel, level);
    });
    warning_default(!warningMissKeys.length, "Tree missing follow keys: ".concat(warningMissKeys.slice(0, 100).map(function(key) {
      return "'".concat(key, "'");
    }).join(", ")));
    var result;
    if (checked === true) {
      result = fillConductCheck(keys2, levelEntities, maxLevel, syntheticGetCheckDisabled);
    } else {
      result = cleanConductCheck(keys2, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);
    }
    return result;
  }

  // node_modules/antd/es/checkbox/style/index.js
  var genCheckboxStyle = (token2) => {
    const {
      checkboxCls
    } = token2;
    const wrapperCls = `${checkboxCls}-wrapper`;
    return [
      // ===================== Basic =====================
      {
        // Group
        [`${checkboxCls}-group`]: Object.assign(Object.assign({}, resetComponent(token2)), {
          display: "inline-flex",
          flexWrap: "wrap",
          columnGap: token2.marginXS,
          // Group > Grid
          [`> ${token2.antCls}-row`]: {
            flex: 1
          }
        }),
        // Wrapper
        [wrapperCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
          display: "inline-flex",
          alignItems: "baseline",
          cursor: "pointer",
          // Fix checkbox & radio in flex align #30260
          "&:after": {
            display: "inline-block",
            width: 0,
            overflow: "hidden",
            content: "'\\a0'"
          },
          // Checkbox near checkbox
          [`& + ${wrapperCls}`]: {
            marginInlineStart: 0
          },
          [`&${wrapperCls}-in-form-item`]: {
            'input[type="checkbox"]': {
              width: 14,
              // FIXME: magic
              height: 14
              // FIXME: magic
            }
          }
        }),
        // Wrapper > Checkbox
        [checkboxCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
          position: "relative",
          whiteSpace: "nowrap",
          lineHeight: 1,
          cursor: "pointer",
          borderRadius: token2.borderRadiusSM,
          // To make alignment right when `controlHeight` is changed
          // Ref: https://github.com/ant-design/ant-design/issues/41564
          alignSelf: "center",
          // Wrapper > Checkbox > input
          [`${checkboxCls}-input`]: {
            position: "absolute",
            // Since baseline align will get additional space offset,
            // we need to move input to top to make it align with text.
            // Ref: https://github.com/ant-design/ant-design/issues/38926#issuecomment-1486137799
            inset: 0,
            zIndex: 1,
            cursor: "pointer",
            opacity: 0,
            margin: 0,
            [`&:focus-visible + ${checkboxCls}-inner`]: Object.assign({}, genFocusOutline(token2))
          },
          // Wrapper > Checkbox > inner
          [`${checkboxCls}-inner`]: {
            boxSizing: "border-box",
            display: "block",
            width: token2.checkboxSize,
            height: token2.checkboxSize,
            direction: "ltr",
            backgroundColor: token2.colorBgContainer,
            border: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`,
            borderRadius: token2.borderRadiusSM,
            borderCollapse: "separate",
            transition: `all ${token2.motionDurationSlow}`,
            "&:after": {
              boxSizing: "border-box",
              position: "absolute",
              top: "50%",
              insetInlineStart: "25%",
              display: "table",
              width: token2.calc(token2.checkboxSize).div(14).mul(5).equal(),
              height: token2.calc(token2.checkboxSize).div(14).mul(8).equal(),
              border: `${unit(token2.lineWidthBold)} solid ${token2.colorWhite}`,
              borderTop: 0,
              borderInlineStart: 0,
              transform: "rotate(45deg) scale(0) translate(-50%,-50%)",
              opacity: 0,
              content: '""',
              transition: `all ${token2.motionDurationFast} ${token2.motionEaseInBack}, opacity ${token2.motionDurationFast}`
            }
          },
          // Wrapper > Checkbox + Text
          "& + span": {
            paddingInlineStart: token2.paddingXS,
            paddingInlineEnd: token2.paddingXS
          }
        })
      },
      // ===================== Hover =====================
      {
        // Wrapper & Wrapper > Checkbox
        [`
        ${wrapperCls}:not(${wrapperCls}-disabled),
        ${checkboxCls}:not(${checkboxCls}-disabled)
      `]: {
          [`&:hover ${checkboxCls}-inner`]: {
            borderColor: token2.colorPrimary
          }
        },
        [`${wrapperCls}:not(${wrapperCls}-disabled)`]: {
          [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled) ${checkboxCls}-inner`]: {
            backgroundColor: token2.colorPrimaryHover,
            borderColor: "transparent"
          },
          [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled):after`]: {
            borderColor: token2.colorPrimaryHover
          }
        }
      },
      // ==================== Checked ====================
      {
        // Wrapper > Checkbox
        [`${checkboxCls}-checked`]: {
          [`${checkboxCls}-inner`]: {
            backgroundColor: token2.colorPrimary,
            borderColor: token2.colorPrimary,
            "&:after": {
              opacity: 1,
              transform: "rotate(45deg) scale(1) translate(-50%,-50%)",
              transition: `all ${token2.motionDurationMid} ${token2.motionEaseOutBack} ${token2.motionDurationFast}`
            }
          }
        },
        [`
        ${wrapperCls}-checked:not(${wrapperCls}-disabled),
        ${checkboxCls}-checked:not(${checkboxCls}-disabled)
      `]: {
          [`&:hover ${checkboxCls}-inner`]: {
            backgroundColor: token2.colorPrimaryHover,
            borderColor: "transparent"
          }
        }
      },
      // ================= Indeterminate =================
      {
        [checkboxCls]: {
          "&-indeterminate": {
            // Wrapper > Checkbox > inner
            [`${checkboxCls}-inner`]: {
              backgroundColor: token2.colorBgContainer,
              borderColor: token2.colorBorder,
              "&:after": {
                top: "50%",
                insetInlineStart: "50%",
                width: token2.calc(token2.fontSizeLG).div(2).equal(),
                height: token2.calc(token2.fontSizeLG).div(2).equal(),
                backgroundColor: token2.colorPrimary,
                border: 0,
                transform: "translate(-50%, -50%) scale(1)",
                opacity: 1,
                content: '""'
              }
            }
          }
        }
      },
      // ==================== Disable ====================
      {
        // Wrapper
        [`${wrapperCls}-disabled`]: {
          cursor: "not-allowed"
        },
        // Wrapper > Checkbox
        [`${checkboxCls}-disabled`]: {
          // Wrapper > Checkbox > input
          [`&, ${checkboxCls}-input`]: {
            cursor: "not-allowed",
            // Disabled for native input to enable Tooltip event handler
            // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-1365075901
            pointerEvents: "none"
          },
          // Wrapper > Checkbox > inner
          [`${checkboxCls}-inner`]: {
            background: token2.colorBgContainerDisabled,
            borderColor: token2.colorBorder,
            "&:after": {
              borderColor: token2.colorTextDisabled
            }
          },
          "&:after": {
            display: "none"
          },
          "& + span": {
            color: token2.colorTextDisabled
          },
          [`&${checkboxCls}-indeterminate ${checkboxCls}-inner::after`]: {
            background: token2.colorTextDisabled
          }
        }
      }
    ];
  };
  function getStyle2(prefixCls, token2) {
    const checkboxToken = merge2(token2, {
      checkboxCls: `.${prefixCls}`,
      checkboxSize: token2.controlInteractiveSize
    });
    return [genCheckboxStyle(checkboxToken)];
  }
  var style_default16 = genStyleHooks("Checkbox", (token2, _ref) => {
    let {
      prefixCls
    } = _ref;
    return [getStyle2(prefixCls, token2)];
  });

  // node_modules/antd/es/checkbox/Checkbox.js
  var React273 = __toESM(require_react());
  var import_classnames85 = __toESM(require_classnames());

  // node_modules/antd/es/checkbox/GroupContext.js
  var import_react80 = __toESM(require_react());
  var GroupContext = /* @__PURE__ */ import_react80.default.createContext(null);
  var GroupContext_default = GroupContext;

  // node_modules/antd/es/checkbox/Checkbox.js
  var __rest25 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var InternalCheckbox = (props, ref) => {
    var _a;
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      children,
      indeterminate = false,
      style: style2,
      onMouseEnter,
      onMouseLeave,
      skipGroup = false,
      disabled
    } = props, restProps = __rest25(props, ["prefixCls", "className", "rootClassName", "children", "indeterminate", "style", "onMouseEnter", "onMouseLeave", "skipGroup", "disabled"]);
    const {
      getPrefixCls,
      direction,
      checkbox
    } = React273.useContext(ConfigContext);
    const checkboxGroup = React273.useContext(GroupContext_default);
    const {
      isFormItemInput
    } = React273.useContext(FormItemInputContext);
    const contextDisabled = React273.useContext(DisabledContext_default);
    const mergedDisabled = (_a = (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.disabled) || disabled) !== null && _a !== void 0 ? _a : contextDisabled;
    const prevValue = React273.useRef(restProps.value);
    if (true) {
      const warning8 = devUseWarning("Checkbox");
      true ? warning8("checked" in restProps || !!checkboxGroup || !("value" in restProps), "usage", "`value` is not a valid prop, do you mean `checked`?") : void 0;
    }
    React273.useEffect(() => {
      checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
    }, []);
    React273.useEffect(() => {
      if (skipGroup) {
        return;
      }
      if (restProps.value !== prevValue.current) {
        checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(prevValue.current);
        checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
        prevValue.current = restProps.value;
      }
      return () => checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(restProps.value);
    }, [restProps.value]);
    const prefixCls = getPrefixCls("checkbox", customizePrefixCls);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default16(prefixCls, rootCls);
    const checkboxProps = Object.assign({}, restProps);
    if (checkboxGroup && !skipGroup) {
      checkboxProps.onChange = function() {
        if (restProps.onChange) {
          restProps.onChange.apply(restProps, arguments);
        }
        if (checkboxGroup.toggleOption) {
          checkboxGroup.toggleOption({
            label: children,
            value: restProps.value
          });
        }
      };
      checkboxProps.name = checkboxGroup.name;
      checkboxProps.checked = checkboxGroup.value.includes(restProps.value);
    }
    const classString = (0, import_classnames85.default)(`${prefixCls}-wrapper`, {
      [`${prefixCls}-rtl`]: direction === "rtl",
      [`${prefixCls}-wrapper-checked`]: checkboxProps.checked,
      [`${prefixCls}-wrapper-disabled`]: mergedDisabled,
      [`${prefixCls}-wrapper-in-form-item`]: isFormItemInput
    }, checkbox === null || checkbox === void 0 ? void 0 : checkbox.className, className, rootClassName, cssVarCls, rootCls, hashId);
    const checkboxClass = (0, import_classnames85.default)({
      [`${prefixCls}-indeterminate`]: indeterminate
    }, TARGET_CLS, hashId);
    const ariaChecked = indeterminate ? "mixed" : void 0;
    return wrapCSSVar(/* @__PURE__ */ React273.createElement(wave_default, {
      component: "Checkbox",
      disabled: mergedDisabled
    }, /* @__PURE__ */ React273.createElement("label", {
      className: classString,
      style: Object.assign(Object.assign({}, checkbox === null || checkbox === void 0 ? void 0 : checkbox.style), style2),
      onMouseEnter,
      onMouseLeave
    }, /* @__PURE__ */ React273.createElement(es_default14, Object.assign({
      "aria-checked": ariaChecked
    }, checkboxProps, {
      prefixCls,
      className: checkboxClass,
      disabled: mergedDisabled,
      ref
    })), children !== void 0 && /* @__PURE__ */ React273.createElement("span", null, children))));
  };
  var Checkbox2 = /* @__PURE__ */ React273.forwardRef(InternalCheckbox);
  if (true) {
    Checkbox2.displayName = "Checkbox";
  }
  var Checkbox_default = Checkbox2;

  // node_modules/antd/es/checkbox/Group.js
  var React274 = __toESM(require_react());
  var import_classnames86 = __toESM(require_classnames());
  var __rest26 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var CheckboxGroup = /* @__PURE__ */ React274.forwardRef((props, ref) => {
    const {
      defaultValue,
      children,
      options = [],
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      style: style2,
      onChange
    } = props, restProps = __rest26(props, ["defaultValue", "children", "options", "prefixCls", "className", "rootClassName", "style", "onChange"]);
    const {
      getPrefixCls,
      direction
    } = React274.useContext(ConfigContext);
    const [value, setValue] = React274.useState(restProps.value || defaultValue || []);
    const [registeredValues, setRegisteredValues] = React274.useState([]);
    React274.useEffect(() => {
      if ("value" in restProps) {
        setValue(restProps.value || []);
      }
    }, [restProps.value]);
    const memoOptions = React274.useMemo(() => options.map((option) => {
      if (typeof option === "string" || typeof option === "number") {
        return {
          label: option,
          value: option
        };
      }
      return option;
    }), [options]);
    const cancelValue = (val) => {
      setRegisteredValues((prevValues) => prevValues.filter((v) => v !== val));
    };
    const registerValue = (val) => {
      setRegisteredValues((prevValues) => [].concat(_toConsumableArray(prevValues), [val]));
    };
    const toggleOption = (option) => {
      const optionIndex = value.indexOf(option.value);
      const newValue = _toConsumableArray(value);
      if (optionIndex === -1) {
        newValue.push(option.value);
      } else {
        newValue.splice(optionIndex, 1);
      }
      if (!("value" in restProps)) {
        setValue(newValue);
      }
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue.filter((val) => registeredValues.includes(val)).sort((a, b) => {
        const indexA = memoOptions.findIndex((opt) => opt.value === a);
        const indexB = memoOptions.findIndex((opt) => opt.value === b);
        return indexA - indexB;
      }));
    };
    const prefixCls = getPrefixCls("checkbox", customizePrefixCls);
    const groupPrefixCls = `${prefixCls}-group`;
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default16(prefixCls, rootCls);
    const domProps = omit(restProps, ["value", "disabled"]);
    const childrenNode = options.length ? memoOptions.map((option) => /* @__PURE__ */ React274.createElement(Checkbox_default, {
      prefixCls,
      key: option.value.toString(),
      disabled: "disabled" in option ? option.disabled : restProps.disabled,
      value: option.value,
      checked: value.includes(option.value),
      onChange: option.onChange,
      className: `${groupPrefixCls}-item`,
      style: option.style,
      title: option.title,
      id: option.id,
      required: option.required
    }, option.label)) : children;
    const context = {
      toggleOption,
      value,
      disabled: restProps.disabled,
      name: restProps.name,
      // https://github.com/ant-design/ant-design/issues/16376
      registerValue,
      cancelValue
    };
    const classString = (0, import_classnames86.default)(groupPrefixCls, {
      [`${groupPrefixCls}-rtl`]: direction === "rtl"
    }, className, rootClassName, cssVarCls, rootCls, hashId);
    return wrapCSSVar(/* @__PURE__ */ React274.createElement("div", Object.assign({
      className: classString,
      style: style2
    }, domProps, {
      ref
    }), /* @__PURE__ */ React274.createElement(GroupContext_default.Provider, {
      value: context
    }, childrenNode)));
  });
  var Group_default = CheckboxGroup;

  // node_modules/antd/es/checkbox/index.js
  var Checkbox3 = Checkbox_default;
  Checkbox3.Group = Group_default;
  Checkbox3.__ANT_CHECKBOX = true;
  if (true) {
    Checkbox3.displayName = "Checkbox";
  }
  var checkbox_default = Checkbox3;

  // node_modules/antd/es/grid/col.js
  var React275 = __toESM(require_react());
  var import_classnames87 = __toESM(require_classnames());

  // node_modules/antd/es/grid/RowContext.js
  var import_react81 = __toESM(require_react());
  var RowContext = /* @__PURE__ */ (0, import_react81.createContext)({});
  var RowContext_default = RowContext;

  // node_modules/antd/es/grid/style/index.js
  var genGridRowStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      // Grid system
      [componentCls]: {
        display: "flex",
        flexFlow: "row wrap",
        minWidth: 0,
        "&::before, &::after": {
          display: "flex"
        },
        "&-no-wrap": {
          flexWrap: "nowrap"
        },
        // The origin of the X-axis
        "&-start": {
          justifyContent: "flex-start"
        },
        // The center of the X-axis
        "&-center": {
          justifyContent: "center"
        },
        // The opposite of the X-axis
        "&-end": {
          justifyContent: "flex-end"
        },
        "&-space-between": {
          justifyContent: "space-between"
        },
        "&-space-around": {
          justifyContent: "space-around"
        },
        "&-space-evenly": {
          justifyContent: "space-evenly"
        },
        // Align at the top
        "&-top": {
          alignItems: "flex-start"
        },
        // Align at the center
        "&-middle": {
          alignItems: "center"
        },
        "&-bottom": {
          alignItems: "flex-end"
        }
      }
    };
  };
  var genGridColStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      // Grid system
      [componentCls]: {
        position: "relative",
        maxWidth: "100%",
        // Prevent columns from collapsing when empty
        minHeight: 1
      }
    };
  };
  var genLoopGridColumnsStyle = (token2, sizeCls) => {
    const {
      componentCls,
      gridColumns
    } = token2;
    const gridColumnsStyle = {};
    for (let i = gridColumns; i >= 0; i--) {
      if (i === 0) {
        gridColumnsStyle[`${componentCls}${sizeCls}-${i}`] = {
          display: "none"
        };
        gridColumnsStyle[`${componentCls}-push-${i}`] = {
          insetInlineStart: "auto"
        };
        gridColumnsStyle[`${componentCls}-pull-${i}`] = {
          insetInlineEnd: "auto"
        };
        gridColumnsStyle[`${componentCls}${sizeCls}-push-${i}`] = {
          insetInlineStart: "auto"
        };
        gridColumnsStyle[`${componentCls}${sizeCls}-pull-${i}`] = {
          insetInlineEnd: "auto"
        };
        gridColumnsStyle[`${componentCls}${sizeCls}-offset-${i}`] = {
          marginInlineStart: 0
        };
        gridColumnsStyle[`${componentCls}${sizeCls}-order-${i}`] = {
          order: 0
        };
      } else {
        gridColumnsStyle[`${componentCls}${sizeCls}-${i}`] = [
          // https://github.com/ant-design/ant-design/issues/44456
          // Form set `display: flex` on Col which will override `display: block`.
          // Let's get it from css variable to support override.
          {
            ["--ant-display"]: "block",
            // Fallback to display if variable not support
            display: "block"
          },
          {
            display: "var(--ant-display)",
            flex: `0 0 ${i / gridColumns * 100}%`,
            maxWidth: `${i / gridColumns * 100}%`
          }
        ];
        gridColumnsStyle[`${componentCls}${sizeCls}-push-${i}`] = {
          insetInlineStart: `${i / gridColumns * 100}%`
        };
        gridColumnsStyle[`${componentCls}${sizeCls}-pull-${i}`] = {
          insetInlineEnd: `${i / gridColumns * 100}%`
        };
        gridColumnsStyle[`${componentCls}${sizeCls}-offset-${i}`] = {
          marginInlineStart: `${i / gridColumns * 100}%`
        };
        gridColumnsStyle[`${componentCls}${sizeCls}-order-${i}`] = {
          order: i
        };
      }
    }
    return gridColumnsStyle;
  };
  var genGridStyle = (token2, sizeCls) => genLoopGridColumnsStyle(token2, sizeCls);
  var genGridMediaStyle = (token2, screenSize, sizeCls) => ({
    [`@media (min-width: ${unit(screenSize)})`]: Object.assign({}, genGridStyle(token2, sizeCls))
  });
  var prepareRowComponentToken = () => ({});
  var prepareColComponentToken = () => ({});
  var useRowStyle = genStyleHooks("Grid", genGridRowStyle, prepareRowComponentToken);
  var useColStyle = genStyleHooks("Grid", (token2) => {
    const gridToken = merge2(token2, {
      gridColumns: 24
      // Row is divided into 24 parts in Grid
    });
    const gridMediaSizesMap = {
      "-sm": gridToken.screenSMMin,
      "-md": gridToken.screenMDMin,
      "-lg": gridToken.screenLGMin,
      "-xl": gridToken.screenXLMin,
      "-xxl": gridToken.screenXXLMin
    };
    return [genGridColStyle(gridToken), genGridStyle(gridToken, ""), genGridStyle(gridToken, "-xs"), Object.keys(gridMediaSizesMap).map((key) => genGridMediaStyle(gridToken, gridMediaSizesMap[key], key)).reduce((pre, cur) => Object.assign(Object.assign({}, pre), cur), {})];
  }, prepareColComponentToken);

  // node_modules/antd/es/grid/col.js
  var __rest27 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function parseFlex(flex) {
    if (typeof flex === "number") {
      return `${flex} ${flex} auto`;
    }
    if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
      return `0 0 ${flex}`;
    }
    return flex;
  }
  var sizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
  var Col = /* @__PURE__ */ React275.forwardRef((props, ref) => {
    const {
      getPrefixCls,
      direction
    } = React275.useContext(ConfigContext);
    const {
      gutter,
      wrap
    } = React275.useContext(RowContext_default);
    const {
      prefixCls: customizePrefixCls,
      span,
      order,
      offset: offset3,
      push,
      pull,
      className,
      children,
      flex,
      style: style2
    } = props, others = __rest27(props, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children", "flex", "style"]);
    const prefixCls = getPrefixCls("col", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = useColStyle(prefixCls);
    let sizeClassObj = {};
    sizes.forEach((size) => {
      let sizeProps = {};
      const propSize = props[size];
      if (typeof propSize === "number") {
        sizeProps.span = propSize;
      } else if (typeof propSize === "object") {
        sizeProps = propSize || {};
      }
      delete others[size];
      sizeClassObj = Object.assign(Object.assign({}, sizeClassObj), {
        [`${prefixCls}-${size}-${sizeProps.span}`]: sizeProps.span !== void 0,
        [`${prefixCls}-${size}-order-${sizeProps.order}`]: sizeProps.order || sizeProps.order === 0,
        [`${prefixCls}-${size}-offset-${sizeProps.offset}`]: sizeProps.offset || sizeProps.offset === 0,
        [`${prefixCls}-${size}-push-${sizeProps.push}`]: sizeProps.push || sizeProps.push === 0,
        [`${prefixCls}-${size}-pull-${sizeProps.pull}`]: sizeProps.pull || sizeProps.pull === 0,
        [`${prefixCls}-${size}-flex-${sizeProps.flex}`]: sizeProps.flex || sizeProps.flex === "auto",
        [`${prefixCls}-rtl`]: direction === "rtl"
      });
    });
    const classes = (0, import_classnames87.default)(prefixCls, {
      [`${prefixCls}-${span}`]: span !== void 0,
      [`${prefixCls}-order-${order}`]: order,
      [`${prefixCls}-offset-${offset3}`]: offset3,
      [`${prefixCls}-push-${push}`]: push,
      [`${prefixCls}-pull-${pull}`]: pull
    }, className, sizeClassObj, hashId, cssVarCls);
    const mergedStyle = {};
    if (gutter && gutter[0] > 0) {
      const horizontalGutter = gutter[0] / 2;
      mergedStyle.paddingLeft = horizontalGutter;
      mergedStyle.paddingRight = horizontalGutter;
    }
    if (flex) {
      mergedStyle.flex = parseFlex(flex);
      if (wrap === false && !mergedStyle.minWidth) {
        mergedStyle.minWidth = 0;
      }
    }
    return wrapCSSVar(/* @__PURE__ */ React275.createElement("div", Object.assign({}, others, {
      style: Object.assign(Object.assign({}, mergedStyle), style2),
      className: classes,
      ref
    }), children));
  });
  if (true) {
    Col.displayName = "Col";
  }
  var col_default = Col;

  // node_modules/antd/es/grid/row.js
  var React276 = __toESM(require_react());
  var import_classnames88 = __toESM(require_classnames());
  var __rest28 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function useMergePropByScreen(oriProp, screen) {
    const [prop, setProp] = React276.useState(typeof oriProp === "string" ? oriProp : "");
    const calcMergeAlignOrJustify = () => {
      if (typeof oriProp === "string") {
        setProp(oriProp);
      }
      if (typeof oriProp !== "object") {
        return;
      }
      for (let i = 0; i < responsiveArray.length; i++) {
        const breakpoint = responsiveArray[i];
        if (!screen[breakpoint]) {
          continue;
        }
        const curVal = oriProp[breakpoint];
        if (curVal !== void 0) {
          setProp(curVal);
          return;
        }
      }
    };
    React276.useEffect(() => {
      calcMergeAlignOrJustify();
    }, [JSON.stringify(oriProp), screen]);
    return prop;
  }
  var Row = /* @__PURE__ */ React276.forwardRef((props, ref) => {
    const {
      prefixCls: customizePrefixCls,
      justify,
      align,
      className,
      style: style2,
      children,
      gutter = 0,
      wrap
    } = props, others = __rest28(props, ["prefixCls", "justify", "align", "className", "style", "children", "gutter", "wrap"]);
    const {
      getPrefixCls,
      direction
    } = React276.useContext(ConfigContext);
    const [screens, setScreens] = React276.useState({
      xs: true,
      sm: true,
      md: true,
      lg: true,
      xl: true,
      xxl: true
    });
    const [curScreens, setCurScreens] = React276.useState({
      xs: false,
      sm: false,
      md: false,
      lg: false,
      xl: false,
      xxl: false
    });
    const mergeAlign = useMergePropByScreen(align, curScreens);
    const mergeJustify = useMergePropByScreen(justify, curScreens);
    const gutterRef = React276.useRef(gutter);
    const responsiveObserver = useResponsiveObserver();
    React276.useEffect(() => {
      const token2 = responsiveObserver.subscribe((screen) => {
        setCurScreens(screen);
        const currentGutter = gutterRef.current || 0;
        if (!Array.isArray(currentGutter) && typeof currentGutter === "object" || Array.isArray(currentGutter) && (typeof currentGutter[0] === "object" || typeof currentGutter[1] === "object")) {
          setScreens(screen);
        }
      });
      return () => responsiveObserver.unsubscribe(token2);
    }, []);
    const getGutter = () => {
      const results = [void 0, void 0];
      const normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, void 0];
      normalizedGutter.forEach((g, index2) => {
        if (typeof g === "object") {
          for (let i = 0; i < responsiveArray.length; i++) {
            const breakpoint = responsiveArray[i];
            if (screens[breakpoint] && g[breakpoint] !== void 0) {
              results[index2] = g[breakpoint];
              break;
            }
          }
        } else {
          results[index2] = g;
        }
      });
      return results;
    };
    const prefixCls = getPrefixCls("row", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = useRowStyle(prefixCls);
    const gutters = getGutter();
    const classes = (0, import_classnames88.default)(prefixCls, {
      [`${prefixCls}-no-wrap`]: wrap === false,
      [`${prefixCls}-${mergeJustify}`]: mergeJustify,
      [`${prefixCls}-${mergeAlign}`]: mergeAlign,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, className, hashId, cssVarCls);
    const rowStyle = {};
    const horizontalGutter = gutters[0] != null && gutters[0] > 0 ? gutters[0] / -2 : void 0;
    if (horizontalGutter) {
      rowStyle.marginLeft = horizontalGutter;
      rowStyle.marginRight = horizontalGutter;
    }
    [, rowStyle.rowGap] = gutters;
    const [gutterH, gutterV] = gutters;
    const rowContext = React276.useMemo(() => ({
      gutter: [gutterH, gutterV],
      wrap
    }), [gutterH, gutterV, wrap]);
    return wrapCSSVar(/* @__PURE__ */ React276.createElement(RowContext_default.Provider, {
      value: rowContext
    }, /* @__PURE__ */ React276.createElement("div", Object.assign({}, others, {
      className: classes,
      style: Object.assign(Object.assign({}, rowStyle), style2),
      ref
    }), children)));
  });
  if (true) {
    Row.displayName = "Row";
  }
  var row_default = Row;

  // node_modules/antd/es/col/index.js
  var col_default2 = col_default;

  // node_modules/antd/es/divider/index.js
  var React277 = __toESM(require_react());
  var import_classnames89 = __toESM(require_classnames());

  // node_modules/antd/es/divider/style/index.js
  var genSharedDividerStyle = (token2) => {
    const {
      componentCls,
      sizePaddingEdgeHorizontal,
      colorSplit,
      lineWidth,
      textPaddingInline,
      orientationMargin,
      verticalMarginInline
    } = token2;
    return {
      [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        borderBlockStart: `${unit(lineWidth)} solid ${colorSplit}`,
        // vertical
        "&-vertical": {
          position: "relative",
          top: "-0.06em",
          display: "inline-block",
          height: "0.9em",
          marginInline: verticalMarginInline,
          marginBlock: 0,
          verticalAlign: "middle",
          borderTop: 0,
          borderInlineStart: `${unit(lineWidth)} solid ${colorSplit}`
        },
        "&-horizontal": {
          display: "flex",
          clear: "both",
          width: "100%",
          minWidth: "100%",
          // Fix https://github.com/ant-design/ant-design/issues/10914
          margin: `${unit(token2.dividerHorizontalGutterMargin)} 0`
        },
        [`&-horizontal${componentCls}-with-text`]: {
          display: "flex",
          alignItems: "center",
          margin: `${unit(token2.dividerHorizontalWithTextGutterMargin)} 0`,
          color: token2.colorTextHeading,
          fontWeight: 500,
          fontSize: token2.fontSizeLG,
          whiteSpace: "nowrap",
          textAlign: "center",
          borderBlockStart: `0 ${colorSplit}`,
          "&::before, &::after": {
            position: "relative",
            width: "50%",
            borderBlockStart: `${unit(lineWidth)} solid transparent`,
            // Chrome not accept `inherit` in `border-top`
            borderBlockStartColor: "inherit",
            borderBlockEnd: 0,
            transform: "translateY(50%)",
            content: "''"
          }
        },
        [`&-horizontal${componentCls}-with-text-left`]: {
          "&::before": {
            width: `calc(${orientationMargin} * 100%)`
          },
          "&::after": {
            width: `calc(100% - ${orientationMargin} * 100%)`
          }
        },
        [`&-horizontal${componentCls}-with-text-right`]: {
          "&::before": {
            width: `calc(100% - ${orientationMargin} * 100%)`
          },
          "&::after": {
            width: `calc(${orientationMargin} * 100%)`
          }
        },
        [`${componentCls}-inner-text`]: {
          display: "inline-block",
          paddingBlock: 0,
          paddingInline: textPaddingInline
        },
        "&-dashed": {
          background: "none",
          borderColor: colorSplit,
          borderStyle: "dashed",
          borderWidth: `${unit(lineWidth)} 0 0`
        },
        [`&-horizontal${componentCls}-with-text${componentCls}-dashed`]: {
          "&::before, &::after": {
            borderStyle: "dashed none none"
          }
        },
        [`&-vertical${componentCls}-dashed`]: {
          borderInlineStartWidth: lineWidth,
          borderInlineEnd: 0,
          borderBlockStart: 0,
          borderBlockEnd: 0
        },
        [`&-plain${componentCls}-with-text`]: {
          color: token2.colorText,
          fontWeight: "normal",
          fontSize: token2.fontSize
        },
        [`&-horizontal${componentCls}-with-text-left${componentCls}-no-default-orientation-margin-left`]: {
          "&::before": {
            width: 0
          },
          "&::after": {
            width: "100%"
          },
          [`${componentCls}-inner-text`]: {
            paddingInlineStart: sizePaddingEdgeHorizontal
          }
        },
        [`&-horizontal${componentCls}-with-text-right${componentCls}-no-default-orientation-margin-right`]: {
          "&::before": {
            width: "100%"
          },
          "&::after": {
            width: 0
          },
          [`${componentCls}-inner-text`]: {
            paddingInlineEnd: sizePaddingEdgeHorizontal
          }
        }
      })
    };
  };
  var prepareComponentToken12 = (token2) => ({
    textPaddingInline: "1em",
    orientationMargin: 0.05,
    verticalMarginInline: token2.marginXS
  });
  var style_default17 = genStyleHooks("Divider", (token2) => {
    const dividerToken = merge2(token2, {
      dividerHorizontalWithTextGutterMargin: token2.margin,
      dividerHorizontalGutterMargin: token2.marginLG,
      sizePaddingEdgeHorizontal: 0
    });
    return [genSharedDividerStyle(dividerToken)];
  }, prepareComponentToken12, {
    unitless: {
      orientationMargin: true
    }
  });

  // node_modules/antd/es/divider/index.js
  var __rest29 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Divider2 = (props) => {
    const {
      getPrefixCls,
      direction,
      divider
    } = React277.useContext(ConfigContext);
    const {
      prefixCls: customizePrefixCls,
      type: type4 = "horizontal",
      orientation = "center",
      orientationMargin,
      className,
      rootClassName,
      children,
      dashed,
      plain,
      style: style2
    } = props, restProps = __rest29(props, ["prefixCls", "type", "orientation", "orientationMargin", "className", "rootClassName", "children", "dashed", "plain", "style"]);
    const prefixCls = getPrefixCls("divider", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default17(prefixCls);
    const orientationPrefix = orientation.length > 0 ? `-${orientation}` : orientation;
    const hasChildren = !!children;
    const hasCustomMarginLeft = orientation === "left" && orientationMargin != null;
    const hasCustomMarginRight = orientation === "right" && orientationMargin != null;
    const classString = (0, import_classnames89.default)(prefixCls, divider === null || divider === void 0 ? void 0 : divider.className, hashId, cssVarCls, `${prefixCls}-${type4}`, {
      [`${prefixCls}-with-text`]: hasChildren,
      [`${prefixCls}-with-text${orientationPrefix}`]: hasChildren,
      [`${prefixCls}-dashed`]: !!dashed,
      [`${prefixCls}-plain`]: !!plain,
      [`${prefixCls}-rtl`]: direction === "rtl",
      [`${prefixCls}-no-default-orientation-margin-left`]: hasCustomMarginLeft,
      [`${prefixCls}-no-default-orientation-margin-right`]: hasCustomMarginRight
    }, className, rootClassName);
    const memoizedOrientationMargin = React277.useMemo(() => {
      if (typeof orientationMargin === "number") {
        return orientationMargin;
      }
      if (/^\d+$/.test(orientationMargin)) {
        return Number(orientationMargin);
      }
      return orientationMargin;
    }, [orientationMargin]);
    const innerStyle = Object.assign(Object.assign({}, hasCustomMarginLeft && {
      marginLeft: memoizedOrientationMargin
    }), hasCustomMarginRight && {
      marginRight: memoizedOrientationMargin
    });
    if (true) {
      const warning8 = devUseWarning("Divider");
      true ? warning8(!children || type4 !== "vertical", "usage", "`children` not working in `vertical` mode.") : void 0;
    }
    return wrapCSSVar(/* @__PURE__ */ React277.createElement("div", Object.assign({
      className: classString,
      style: Object.assign(Object.assign({}, divider === null || divider === void 0 ? void 0 : divider.style), style2)
    }, restProps, {
      role: "separator"
    }), children && type4 !== "vertical" && /* @__PURE__ */ React277.createElement("span", {
      className: `${prefixCls}-inner-text`,
      style: innerStyle
    }, children)));
  };
  if (true) {
    Divider2.displayName = "Divider";
  }
  var divider_default = Divider2;

  // node_modules/rc-input/es/BaseInput.js
  var import_classnames90 = __toESM(require_classnames());
  var import_react82 = __toESM(require_react());

  // node_modules/rc-input/es/utils/commonUtils.js
  function hasAddon(props) {
    return !!(props.addonBefore || props.addonAfter);
  }
  function hasPrefixSuffix(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
  }
  function resolveOnChange(target, e3, onChange, targetValue) {
    if (!onChange) {
      return;
    }
    var event = e3;
    if (e3.type === "click") {
      var currentTarget = target.cloneNode(true);
      event = Object.create(e3, {
        target: {
          value: currentTarget
        },
        currentTarget: {
          value: currentTarget
        }
      });
      currentTarget.value = "";
      onChange(event);
      return;
    }
    if (target.type !== "file" && targetValue !== void 0) {
      var _currentTarget = target.cloneNode(true);
      event = Object.create(e3, {
        target: {
          value: _currentTarget
        },
        currentTarget: {
          value: _currentTarget
        }
      });
      _currentTarget.value = targetValue;
      onChange(event);
      return;
    }
    onChange(event);
  }
  function triggerFocus(element, option) {
    if (!element)
      return;
    element.focus(option);
    var _ref = option || {}, cursor = _ref.cursor;
    if (cursor) {
      var len = element.value.length;
      switch (cursor) {
        case "start":
          element.setSelectionRange(0, 0);
          break;
        case "end":
          element.setSelectionRange(len, len);
          break;
        default:
          element.setSelectionRange(0, len);
      }
    }
  }

  // node_modules/rc-input/es/BaseInput.js
  var BaseInput = function BaseInput2(props) {
    var _element$props, _element$props2;
    var inputEl = props.inputElement, children = props.children, prefixCls = props.prefixCls, prefix = props.prefix, suffix = props.suffix, addonBefore = props.addonBefore, addonAfter = props.addonAfter, className = props.className, style2 = props.style, disabled = props.disabled, readOnly = props.readOnly, focused = props.focused, triggerFocus3 = props.triggerFocus, allowClear = props.allowClear, value = props.value, handleReset = props.handleReset, hidden = props.hidden, classes = props.classes, classNames139 = props.classNames, dataAttrs = props.dataAttrs, styles = props.styles, components = props.components;
    var inputElement = children !== null && children !== void 0 ? children : inputEl;
    var AffixWrapperComponent = (components === null || components === void 0 ? void 0 : components.affixWrapper) || "span";
    var GroupWrapperComponent = (components === null || components === void 0 ? void 0 : components.groupWrapper) || "span";
    var WrapperComponent = (components === null || components === void 0 ? void 0 : components.wrapper) || "span";
    var GroupAddonComponent = (components === null || components === void 0 ? void 0 : components.groupAddon) || "span";
    var containerRef = (0, import_react82.useRef)(null);
    var onInputClick = function onInputClick2(e3) {
      var _containerRef$current;
      if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e3.target)) {
        triggerFocus3 === null || triggerFocus3 === void 0 || triggerFocus3();
      }
    };
    var hasAffix = hasPrefixSuffix(props);
    var element = /* @__PURE__ */ (0, import_react82.cloneElement)(inputElement, {
      value,
      className: (0, import_classnames90.default)(inputElement.props.className, !hasAffix && (classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.variant)) || null
    });
    if (hasAffix) {
      var _clsx2;
      var clearIcon = null;
      if (allowClear) {
        var _clsx;
        var needClear = !disabled && !readOnly && value;
        var clearIconCls = "".concat(prefixCls, "-clear-icon");
        var iconNode = _typeof(allowClear) === "object" && allowClear !== null && allowClear !== void 0 && allowClear.clearIcon ? allowClear.clearIcon : "\u2716";
        clearIcon = /* @__PURE__ */ import_react82.default.createElement("span", {
          onClick: handleReset,
          onMouseDown: function onMouseDown(e3) {
            return e3.preventDefault();
          },
          className: (0, import_classnames90.default)(clearIconCls, (_clsx = {}, _defineProperty(_clsx, "".concat(clearIconCls, "-hidden"), !needClear), _defineProperty(_clsx, "".concat(clearIconCls, "-has-suffix"), !!suffix), _clsx)),
          role: "button",
          tabIndex: -1
        }, iconNode);
      }
      var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");
      var affixWrapperCls = (0, import_classnames90.default)(affixWrapperPrefixCls, (_clsx2 = {}, _defineProperty(_clsx2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_clsx2, "".concat(affixWrapperPrefixCls, "-disabled"), disabled), _defineProperty(_clsx2, "".concat(affixWrapperPrefixCls, "-focused"), focused), _defineProperty(_clsx2, "".concat(affixWrapperPrefixCls, "-readonly"), readOnly), _defineProperty(_clsx2, "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), _clsx2), classes === null || classes === void 0 ? void 0 : classes.affixWrapper, classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.affixWrapper, classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.variant);
      var suffixNode = (suffix || allowClear) && /* @__PURE__ */ import_react82.default.createElement("span", {
        className: (0, import_classnames90.default)("".concat(prefixCls, "-suffix"), classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.suffix),
        style: styles === null || styles === void 0 ? void 0 : styles.suffix
      }, clearIcon, suffix);
      element = /* @__PURE__ */ import_react82.default.createElement(AffixWrapperComponent, _extends({
        className: affixWrapperCls,
        style: styles === null || styles === void 0 ? void 0 : styles.affixWrapper,
        onClick: onInputClick
      }, dataAttrs === null || dataAttrs === void 0 ? void 0 : dataAttrs.affixWrapper, {
        ref: containerRef
      }), prefix && /* @__PURE__ */ import_react82.default.createElement("span", {
        className: (0, import_classnames90.default)("".concat(prefixCls, "-prefix"), classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.prefix),
        style: styles === null || styles === void 0 ? void 0 : styles.prefix
      }, prefix), element, suffixNode);
    }
    if (hasAddon(props)) {
      var wrapperCls = "".concat(prefixCls, "-group");
      var addonCls = "".concat(wrapperCls, "-addon");
      var groupWrapperCls = "".concat(wrapperCls, "-wrapper");
      var mergedWrapperClassName = (0, import_classnames90.default)("".concat(prefixCls, "-wrapper"), wrapperCls, classes === null || classes === void 0 ? void 0 : classes.wrapper, classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.wrapper);
      var mergedGroupClassName = (0, import_classnames90.default)(groupWrapperCls, _defineProperty({}, "".concat(groupWrapperCls, "-disabled"), disabled), classes === null || classes === void 0 ? void 0 : classes.group, classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.groupWrapper);
      element = /* @__PURE__ */ import_react82.default.createElement(GroupWrapperComponent, {
        className: mergedGroupClassName
      }, /* @__PURE__ */ import_react82.default.createElement(WrapperComponent, {
        className: mergedWrapperClassName
      }, addonBefore && /* @__PURE__ */ import_react82.default.createElement(GroupAddonComponent, {
        className: addonCls
      }, addonBefore), element, addonAfter && /* @__PURE__ */ import_react82.default.createElement(GroupAddonComponent, {
        className: addonCls
      }, addonAfter)));
    }
    return /* @__PURE__ */ import_react82.default.cloneElement(element, {
      className: (0, import_classnames90.default)((_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.className, className) || null,
      style: _objectSpread2(_objectSpread2({}, (_element$props2 = element.props) === null || _element$props2 === void 0 ? void 0 : _element$props2.style), style2),
      hidden
    });
  };
  var BaseInput_default = BaseInput;

  // node_modules/rc-input/es/Input.js
  var import_classnames91 = __toESM(require_classnames());
  var import_react83 = __toESM(require_react());

  // node_modules/rc-input/es/hooks/useCount.js
  var React279 = __toESM(require_react());
  var _excluded40 = ["show"];
  function useCount(count, showCount) {
    return React279.useMemo(function() {
      var mergedConfig = {};
      if (showCount) {
        mergedConfig.show = _typeof(showCount) === "object" && showCount.formatter ? showCount.formatter : !!showCount;
      }
      mergedConfig = _objectSpread2(_objectSpread2({}, mergedConfig), count);
      var _ref = mergedConfig, show = _ref.show, rest = _objectWithoutProperties(_ref, _excluded40);
      return _objectSpread2(_objectSpread2({}, rest), {}, {
        show: !!show,
        showFormatter: typeof show === "function" ? show : void 0,
        strategy: rest.strategy || function(value) {
          return value.length;
        }
      });
    }, [count, showCount]);
  }

  // node_modules/rc-input/es/Input.js
  var _excluded41 = ["autoComplete", "onChange", "onFocus", "onBlur", "onPressEnter", "onKeyDown", "prefixCls", "disabled", "htmlSize", "className", "maxLength", "suffix", "showCount", "count", "type", "classes", "classNames", "styles", "onCompositionStart", "onCompositionEnd"];
  var Input3 = /* @__PURE__ */ (0, import_react83.forwardRef)(function(props, ref) {
    var autoComplete = props.autoComplete, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, onPressEnter = props.onPressEnter, onKeyDown2 = props.onKeyDown, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-input" : _props$prefixCls, disabled = props.disabled, htmlSize = props.htmlSize, className = props.className, maxLength = props.maxLength, suffix = props.suffix, showCount = props.showCount, count = props.count, _props$type = props.type, type4 = _props$type === void 0 ? "text" : _props$type, classes = props.classes, classNames139 = props.classNames, styles = props.styles, _onCompositionStart = props.onCompositionStart, onCompositionEnd = props.onCompositionEnd, rest = _objectWithoutProperties(props, _excluded41);
    var _useState = (0, import_react83.useState)(false), _useState2 = _slicedToArray(_useState, 2), focused = _useState2[0], setFocused = _useState2[1];
    var compositionRef = (0, import_react83.useRef)(false);
    var inputRef = (0, import_react83.useRef)(null);
    var focus = function focus2(option) {
      if (inputRef.current) {
        triggerFocus(inputRef.current, option);
      }
    };
    var _useMergedState = useMergedState(props.defaultValue, {
      value: props.value
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
    var formatValue2 = value === void 0 || value === null ? "" : String(value);
    var _useState3 = (0, import_react83.useState)(null), _useState4 = _slicedToArray(_useState3, 2), selection = _useState4[0], setSelection = _useState4[1];
    var countConfig = useCount(count, showCount);
    var mergedMax = countConfig.max || maxLength;
    var valueLength = countConfig.strategy(formatValue2);
    var isOutOfRange = !!mergedMax && valueLength > mergedMax;
    (0, import_react83.useImperativeHandle)(ref, function() {
      return {
        focus,
        blur: function blur() {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.blur();
        },
        setSelectionRange: function setSelectionRange(start2, end, direction) {
          var _inputRef$current2;
          (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.setSelectionRange(start2, end, direction);
        },
        select: function select() {
          var _inputRef$current3;
          (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 || _inputRef$current3.select();
        },
        input: inputRef.current
      };
    });
    (0, import_react83.useEffect)(function() {
      setFocused(function(prev2) {
        return prev2 && disabled ? false : prev2;
      });
    }, [disabled]);
    var triggerChange = function triggerChange2(e3, currentValue, info) {
      var cutValue = currentValue;
      if (!compositionRef.current && countConfig.exceedFormatter && countConfig.max && countConfig.strategy(currentValue) > countConfig.max) {
        cutValue = countConfig.exceedFormatter(currentValue, {
          max: countConfig.max
        });
        if (currentValue !== cutValue) {
          var _inputRef$current4, _inputRef$current5;
          setSelection([((_inputRef$current4 = inputRef.current) === null || _inputRef$current4 === void 0 ? void 0 : _inputRef$current4.selectionStart) || 0, ((_inputRef$current5 = inputRef.current) === null || _inputRef$current5 === void 0 ? void 0 : _inputRef$current5.selectionEnd) || 0]);
        }
      } else if (info.source === "compositionEnd") {
        return;
      }
      setValue(cutValue);
      if (inputRef.current) {
        resolveOnChange(inputRef.current, e3, onChange, cutValue);
      }
    };
    (0, import_react83.useEffect)(function() {
      if (selection) {
        var _inputRef$current6;
        (_inputRef$current6 = inputRef.current) === null || _inputRef$current6 === void 0 || _inputRef$current6.setSelectionRange.apply(_inputRef$current6, _toConsumableArray(selection));
      }
    }, [selection]);
    var onInternalChange = function onInternalChange2(e3) {
      triggerChange(e3, e3.target.value, {
        source: "change"
      });
    };
    var onInternalCompositionEnd = function onInternalCompositionEnd2(e3) {
      compositionRef.current = false;
      triggerChange(e3, e3.currentTarget.value, {
        source: "compositionEnd"
      });
      onCompositionEnd === null || onCompositionEnd === void 0 || onCompositionEnd(e3);
    };
    var handleKeyDown = function handleKeyDown2(e3) {
      if (onPressEnter && e3.key === "Enter") {
        onPressEnter(e3);
      }
      onKeyDown2 === null || onKeyDown2 === void 0 || onKeyDown2(e3);
    };
    var handleFocus = function handleFocus2(e3) {
      setFocused(true);
      onFocus === null || onFocus === void 0 || onFocus(e3);
    };
    var handleBlur = function handleBlur2(e3) {
      setFocused(false);
      onBlur === null || onBlur === void 0 || onBlur(e3);
    };
    var handleReset = function handleReset2(e3) {
      setValue("");
      focus();
      if (inputRef.current) {
        resolveOnChange(inputRef.current, e3, onChange);
      }
    };
    var outOfRangeCls = isOutOfRange && "".concat(prefixCls, "-out-of-range");
    var getInputElement = function getInputElement2() {
      var otherProps = omit(props, [
        "prefixCls",
        "onPressEnter",
        "addonBefore",
        "addonAfter",
        "prefix",
        "suffix",
        "allowClear",
        // Input elements must be either controlled or uncontrolled,
        // specify either the value prop, or the defaultValue prop, but not both.
        "defaultValue",
        "showCount",
        "count",
        "classes",
        "htmlSize",
        "styles",
        "classNames"
      ]);
      return /* @__PURE__ */ import_react83.default.createElement("input", _extends({
        autoComplete
      }, otherProps, {
        onChange: onInternalChange,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onKeyDown: handleKeyDown,
        className: (0, import_classnames91.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.input),
        style: styles === null || styles === void 0 ? void 0 : styles.input,
        ref: inputRef,
        size: htmlSize,
        type: type4,
        onCompositionStart: function onCompositionStart(e3) {
          compositionRef.current = true;
          _onCompositionStart === null || _onCompositionStart === void 0 || _onCompositionStart(e3);
        },
        onCompositionEnd: onInternalCompositionEnd
      }));
    };
    var getSuffix = function getSuffix2() {
      var hasMaxLength = Number(mergedMax) > 0;
      if (suffix || countConfig.show) {
        var dataCount = countConfig.showFormatter ? countConfig.showFormatter({
          value: formatValue2,
          count: valueLength,
          maxLength: mergedMax
        }) : "".concat(valueLength).concat(hasMaxLength ? " / ".concat(mergedMax) : "");
        return /* @__PURE__ */ import_react83.default.createElement(import_react83.default.Fragment, null, countConfig.show && /* @__PURE__ */ import_react83.default.createElement("span", {
          className: (0, import_classnames91.default)("".concat(prefixCls, "-show-count-suffix"), _defineProperty({}, "".concat(prefixCls, "-show-count-has-suffix"), !!suffix), classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.count),
          style: _objectSpread2({}, styles === null || styles === void 0 ? void 0 : styles.count)
        }, dataCount), suffix);
      }
      return null;
    };
    return /* @__PURE__ */ import_react83.default.createElement(BaseInput_default, _extends({}, rest, {
      prefixCls,
      className: (0, import_classnames91.default)(className, outOfRangeCls),
      handleReset,
      value: formatValue2,
      focused,
      triggerFocus: focus,
      suffix: getSuffix(),
      disabled,
      classes,
      classNames: classNames139,
      styles
    }), getInputElement());
  });
  var Input_default3 = Input3;

  // node_modules/rc-input/es/index.js
  var es_default16 = Input_default3;

  // node_modules/antd/es/input/Group.js
  var React281 = __toESM(require_react());
  var import_react84 = __toESM(require_react());
  var import_classnames92 = __toESM(require_classnames());
  var Group = (props) => {
    const {
      getPrefixCls,
      direction
    } = (0, import_react84.useContext)(ConfigContext);
    const {
      prefixCls: customizePrefixCls,
      className
    } = props;
    const prefixCls = getPrefixCls("input-group", customizePrefixCls);
    const inputPrefixCls = getPrefixCls("input");
    const [wrapCSSVar, hashId] = style_default11(inputPrefixCls);
    const cls = (0, import_classnames92.default)(prefixCls, {
      [`${prefixCls}-lg`]: props.size === "large",
      [`${prefixCls}-sm`]: props.size === "small",
      [`${prefixCls}-compact`]: props.compact,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, hashId, className);
    const formItemContext = (0, import_react84.useContext)(FormItemInputContext);
    const groupFormItemContext = (0, import_react84.useMemo)(() => Object.assign(Object.assign({}, formItemContext), {
      isFormItemInput: false
    }), [formItemContext]);
    if (true) {
      const warning8 = devUseWarning("Input.Group");
      warning8.deprecated(false, "Input.Group", "Space.Compact");
    }
    return wrapCSSVar(/* @__PURE__ */ React281.createElement("span", {
      className: cls,
      style: props.style,
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave,
      onFocus: props.onFocus,
      onBlur: props.onBlur
    }, /* @__PURE__ */ React281.createElement(FormItemInputContext.Provider, {
      value: groupFormItemContext
    }, props.children)));
  };
  var Group_default2 = Group;

  // node_modules/antd/es/input/Input.js
  var import_react87 = __toESM(require_react());
  var import_classnames93 = __toESM(require_classnames());

  // node_modules/antd/es/input/hooks/useRemovePasswordTimeout.js
  var import_react85 = __toESM(require_react());
  function useRemovePasswordTimeout(inputRef, triggerOnMount) {
    const removePasswordTimeoutRef = (0, import_react85.useRef)([]);
    const removePasswordTimeout = () => {
      removePasswordTimeoutRef.current.push(setTimeout(() => {
        var _a, _b, _c, _d;
        if (((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) && ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.input.getAttribute("type")) === "password" && ((_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.input.hasAttribute("value"))) {
          (_d = inputRef.current) === null || _d === void 0 ? void 0 : _d.input.removeAttribute("value");
        }
      }));
    };
    (0, import_react85.useEffect)(() => {
      if (triggerOnMount) {
        removePasswordTimeout();
      }
      return () => removePasswordTimeoutRef.current.forEach((timer) => {
        if (timer) {
          clearTimeout(timer);
        }
      });
    }, []);
    return removePasswordTimeout;
  }

  // node_modules/antd/es/input/utils.js
  function hasPrefixSuffix2(props) {
    return !!(props.prefix || props.suffix || props.allowClear || props.showCount);
  }

  // node_modules/antd/es/_util/getAllowClear.js
  var import_react86 = __toESM(require_react());
  var getAllowClear = (allowClear) => {
    let mergedAllowClear;
    if (typeof allowClear === "object" && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon)) {
      mergedAllowClear = allowClear;
    } else if (allowClear) {
      mergedAllowClear = {
        clearIcon: /* @__PURE__ */ import_react86.default.createElement(CloseCircleFilled_default2, null)
      };
    }
    return mergedAllowClear;
  };
  var getAllowClear_default = getAllowClear;

  // node_modules/antd/es/input/Input.js
  var __rest30 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function triggerFocus2(element, option) {
    if (!element) {
      return;
    }
    element.focus(option);
    const {
      cursor
    } = option || {};
    if (cursor) {
      const len = element.value.length;
      switch (cursor) {
        case "start":
          element.setSelectionRange(0, 0);
          break;
        case "end":
          element.setSelectionRange(len, len);
          break;
        default:
          element.setSelectionRange(0, len);
          break;
      }
    }
  }
  var Input4 = /* @__PURE__ */ (0, import_react87.forwardRef)((props, ref) => {
    var _a;
    const {
      prefixCls: customizePrefixCls,
      bordered = true,
      status: customStatus,
      size: customSize,
      disabled: customDisabled,
      onBlur,
      onFocus,
      suffix,
      allowClear,
      addonAfter,
      addonBefore,
      className,
      style: style2,
      styles,
      rootClassName,
      onChange,
      classNames: classes,
      variant: customVariant
    } = props, rest = __rest30(props, ["prefixCls", "bordered", "status", "size", "disabled", "onBlur", "onFocus", "suffix", "allowClear", "addonAfter", "addonBefore", "className", "style", "styles", "rootClassName", "onChange", "classNames", "variant"]);
    if (true) {
      const {
        deprecated
      } = devUseWarning("Input");
      deprecated(!("bordered" in props), "bordered", "variant");
    }
    const {
      getPrefixCls,
      direction,
      input
    } = import_react87.default.useContext(ConfigContext);
    const prefixCls = getPrefixCls("input", customizePrefixCls);
    const inputRef = (0, import_react87.useRef)(null);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default11(prefixCls, rootCls);
    const {
      compactSize,
      compactItemClassnames
    } = useCompactItemContext(prefixCls, direction);
    const mergedSize = useSize_default((ctx) => {
      var _a2;
      return (_a2 = customSize !== null && customSize !== void 0 ? customSize : compactSize) !== null && _a2 !== void 0 ? _a2 : ctx;
    });
    const disabled = import_react87.default.useContext(DisabledContext_default);
    const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    const {
      status: contextStatus,
      hasFeedback,
      feedbackIcon
    } = (0, import_react87.useContext)(FormItemInputContext);
    const mergedStatus = getMergedStatus(contextStatus, customStatus);
    const inputHasPrefixSuffix = hasPrefixSuffix2(props) || !!hasFeedback;
    const prevHasPrefixSuffix = (0, import_react87.useRef)(inputHasPrefixSuffix);
    if (true) {
      const warning8 = devUseWarning("Input");
      (0, import_react87.useEffect)(() => {
        var _a2;
        if (inputHasPrefixSuffix && !prevHasPrefixSuffix.current) {
          true ? warning8(document.activeElement === ((_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.input), "usage", `When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ`) : void 0;
        }
        prevHasPrefixSuffix.current = inputHasPrefixSuffix;
      }, [inputHasPrefixSuffix]);
    }
    const removePasswordTimeout = useRemovePasswordTimeout(inputRef, true);
    const handleBlur = (e3) => {
      removePasswordTimeout();
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e3);
    };
    const handleFocus = (e3) => {
      removePasswordTimeout();
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(e3);
    };
    const handleChange = (e3) => {
      removePasswordTimeout();
      onChange === null || onChange === void 0 ? void 0 : onChange(e3);
    };
    const suffixNode = (hasFeedback || suffix) && /* @__PURE__ */ import_react87.default.createElement(import_react87.default.Fragment, null, suffix, hasFeedback && feedbackIcon);
    const mergedAllowClear = getAllowClear_default(allowClear);
    const [variant, enableVariantCls] = useVariants_default(customVariant, bordered);
    return wrapCSSVar(/* @__PURE__ */ import_react87.default.createElement(es_default16, Object.assign({
      ref: composeRef(ref, inputRef),
      prefixCls,
      autoComplete: input === null || input === void 0 ? void 0 : input.autoComplete
    }, rest, {
      disabled: mergedDisabled,
      onBlur: handleBlur,
      onFocus: handleFocus,
      style: Object.assign(Object.assign({}, input === null || input === void 0 ? void 0 : input.style), style2),
      styles: Object.assign(Object.assign({}, input === null || input === void 0 ? void 0 : input.styles), styles),
      suffix: suffixNode,
      allowClear: mergedAllowClear,
      className: (0, import_classnames93.default)(className, rootClassName, cssVarCls, rootCls, compactItemClassnames, input === null || input === void 0 ? void 0 : input.className),
      onChange: handleChange,
      addonAfter: addonAfter && /* @__PURE__ */ import_react87.default.createElement(NoCompactStyle, null, /* @__PURE__ */ import_react87.default.createElement(NoFormStyle, {
        override: true,
        status: true
      }, addonAfter)),
      addonBefore: addonBefore && /* @__PURE__ */ import_react87.default.createElement(NoCompactStyle, null, /* @__PURE__ */ import_react87.default.createElement(NoFormStyle, {
        override: true,
        status: true
      }, addonBefore)),
      classNames: Object.assign(Object.assign(Object.assign({}, classes), input === null || input === void 0 ? void 0 : input.classNames), {
        input: (0, import_classnames93.default)({
          [`${prefixCls}-sm`]: mergedSize === "small",
          [`${prefixCls}-lg`]: mergedSize === "large",
          [`${prefixCls}-rtl`]: direction === "rtl"
        }, classes === null || classes === void 0 ? void 0 : classes.input, (_a = input === null || input === void 0 ? void 0 : input.classNames) === null || _a === void 0 ? void 0 : _a.input, hashId),
        variant: (0, import_classnames93.default)({
          [`${prefixCls}-${variant}`]: enableVariantCls
        }, getStatusClassNames(prefixCls, mergedStatus)),
        affixWrapper: (0, import_classnames93.default)({
          [`${prefixCls}-affix-wrapper-sm`]: mergedSize === "small",
          [`${prefixCls}-affix-wrapper-lg`]: mergedSize === "large",
          [`${prefixCls}-affix-wrapper-rtl`]: direction === "rtl"
        }, hashId),
        wrapper: (0, import_classnames93.default)({
          [`${prefixCls}-group-rtl`]: direction === "rtl"
        }, hashId),
        groupWrapper: (0, import_classnames93.default)({
          [`${prefixCls}-group-wrapper-sm`]: mergedSize === "small",
          [`${prefixCls}-group-wrapper-lg`]: mergedSize === "large",
          [`${prefixCls}-group-wrapper-rtl`]: direction === "rtl",
          [`${prefixCls}-group-wrapper-${variant}`]: enableVariantCls
        }, getStatusClassNames(`${prefixCls}-group-wrapper`, mergedStatus, hasFeedback), hashId)
      })
    })));
  });
  var Input_default4 = Input4;

  // node_modules/antd/es/input/Password.js
  var React286 = __toESM(require_react());
  var import_react88 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/EyeInvisibleOutlined.js
  var React284 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EyeInvisibleOutlined.js
  var EyeInvisibleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z" } }, { "tag": "path", "attrs": { "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z" } }] }, "name": "eye-invisible", "theme": "outlined" };
  var EyeInvisibleOutlined_default = EyeInvisibleOutlined;

  // node_modules/@ant-design/icons/es/icons/EyeInvisibleOutlined.js
  var EyeInvisibleOutlined2 = function EyeInvisibleOutlined3(props, ref) {
    return /* @__PURE__ */ React284.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: EyeInvisibleOutlined_default
    }));
  };
  if (true) {
    EyeInvisibleOutlined2.displayName = "EyeInvisibleOutlined";
  }
  var EyeInvisibleOutlined_default2 = /* @__PURE__ */ React284.forwardRef(EyeInvisibleOutlined2);

  // node_modules/@ant-design/icons/es/icons/EyeOutlined.js
  var React285 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EyeOutlined.js
  var EyeOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z" } }] }, "name": "eye", "theme": "outlined" };
  var EyeOutlined_default = EyeOutlined;

  // node_modules/@ant-design/icons/es/icons/EyeOutlined.js
  var EyeOutlined2 = function EyeOutlined3(props, ref) {
    return /* @__PURE__ */ React285.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: EyeOutlined_default
    }));
  };
  if (true) {
    EyeOutlined2.displayName = "EyeOutlined";
  }
  var EyeOutlined_default2 = /* @__PURE__ */ React285.forwardRef(EyeOutlined2);

  // node_modules/antd/es/input/Password.js
  var import_classnames94 = __toESM(require_classnames());
  var __rest31 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var defaultIconRender = (visible) => visible ? /* @__PURE__ */ React286.createElement(EyeOutlined_default2, null) : /* @__PURE__ */ React286.createElement(EyeInvisibleOutlined_default2, null);
  var actionMap = {
    click: "onClick",
    hover: "onMouseOver"
  };
  var Password = /* @__PURE__ */ React286.forwardRef((props, ref) => {
    const {
      visibilityToggle = true
    } = props;
    const visibilityControlled = typeof visibilityToggle === "object" && visibilityToggle.visible !== void 0;
    const [visible, setVisible] = (0, import_react88.useState)(() => visibilityControlled ? visibilityToggle.visible : false);
    const inputRef = (0, import_react88.useRef)(null);
    React286.useEffect(() => {
      if (visibilityControlled) {
        setVisible(visibilityToggle.visible);
      }
    }, [visibilityControlled, visibilityToggle]);
    const removePasswordTimeout = useRemovePasswordTimeout(inputRef);
    const onVisibleChange = () => {
      const {
        disabled
      } = props;
      if (disabled) {
        return;
      }
      if (visible) {
        removePasswordTimeout();
      }
      setVisible((prevState) => {
        var _a;
        const newState = !prevState;
        if (typeof visibilityToggle === "object") {
          (_a = visibilityToggle.onVisibleChange) === null || _a === void 0 ? void 0 : _a.call(visibilityToggle, newState);
        }
        return newState;
      });
    };
    const getIcon2 = (prefixCls2) => {
      const {
        action = "click",
        iconRender = defaultIconRender
      } = props;
      const iconTrigger = actionMap[action] || "";
      const icon = iconRender(visible);
      const iconProps = {
        [iconTrigger]: onVisibleChange,
        className: `${prefixCls2}-icon`,
        key: "passwordIcon",
        onMouseDown: (e3) => {
          e3.preventDefault();
        },
        onMouseUp: (e3) => {
          e3.preventDefault();
        }
      };
      return /* @__PURE__ */ React286.cloneElement(/* @__PURE__ */ React286.isValidElement(icon) ? icon : /* @__PURE__ */ React286.createElement("span", null, icon), iconProps);
    };
    const {
      className,
      prefixCls: customizePrefixCls,
      inputPrefixCls: customizeInputPrefixCls,
      size
    } = props, restProps = __rest31(props, ["className", "prefixCls", "inputPrefixCls", "size"]);
    const {
      getPrefixCls
    } = React286.useContext(ConfigContext);
    const inputPrefixCls = getPrefixCls("input", customizeInputPrefixCls);
    const prefixCls = getPrefixCls("input-password", customizePrefixCls);
    const suffixIcon = visibilityToggle && getIcon2(prefixCls);
    const inputClassName = (0, import_classnames94.default)(prefixCls, className, {
      [`${prefixCls}-${size}`]: !!size
    });
    const omittedProps = Object.assign(Object.assign({}, omit(restProps, ["suffix", "iconRender", "visibilityToggle"])), {
      type: visible ? "text" : "password",
      className: inputClassName,
      prefixCls: inputPrefixCls,
      suffix: suffixIcon
    });
    if (size) {
      omittedProps.size = size;
    }
    return /* @__PURE__ */ React286.createElement(Input_default4, Object.assign({
      ref: composeRef(ref, inputRef)
    }, omittedProps));
  });
  if (true) {
    Password.displayName = "Input.Password";
  }
  var Password_default = Password;

  // node_modules/antd/es/input/Search.js
  var React287 = __toESM(require_react());
  var import_classnames95 = __toESM(require_classnames());
  var __rest32 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Search = /* @__PURE__ */ React287.forwardRef((props, ref) => {
    const {
      prefixCls: customizePrefixCls,
      inputPrefixCls: customizeInputPrefixCls,
      className,
      size: customizeSize,
      suffix,
      enterButton = false,
      addonAfter,
      loading,
      disabled,
      onSearch: customOnSearch,
      onChange: customOnChange,
      onCompositionStart,
      onCompositionEnd
    } = props, restProps = __rest32(props, ["prefixCls", "inputPrefixCls", "className", "size", "suffix", "enterButton", "addonAfter", "loading", "disabled", "onSearch", "onChange", "onCompositionStart", "onCompositionEnd"]);
    const {
      getPrefixCls,
      direction
    } = React287.useContext(ConfigContext);
    const composedRef = React287.useRef(false);
    const prefixCls = getPrefixCls("input-search", customizePrefixCls);
    const inputPrefixCls = getPrefixCls("input", customizeInputPrefixCls);
    const {
      compactSize
    } = useCompactItemContext(prefixCls, direction);
    const size = useSize_default((ctx) => {
      var _a;
      return (_a = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a !== void 0 ? _a : ctx;
    });
    const inputRef = React287.useRef(null);
    const onChange = (e3) => {
      if (e3 && e3.target && e3.type === "click" && customOnSearch) {
        customOnSearch(e3.target.value, e3, {
          source: "clear"
        });
      }
      if (customOnChange) {
        customOnChange(e3);
      }
    };
    const onMouseDown = (e3) => {
      var _a;
      if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) {
        e3.preventDefault();
      }
    };
    const onSearch = (e3) => {
      var _a, _b;
      if (customOnSearch) {
        customOnSearch((_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input) === null || _b === void 0 ? void 0 : _b.value, e3, {
          source: "input"
        });
      }
    };
    const onPressEnter = (e3) => {
      if (composedRef.current || loading) {
        return;
      }
      onSearch(e3);
    };
    const searchIcon = typeof enterButton === "boolean" ? /* @__PURE__ */ React287.createElement(SearchOutlined_default2, null) : null;
    const btnClassName = `${prefixCls}-button`;
    let button;
    const enterButtonAsElement = enterButton || {};
    const isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;
    if (isAntdButton || enterButtonAsElement.type === "button") {
      button = cloneElement4(enterButtonAsElement, Object.assign({
        onMouseDown,
        onClick: (e3) => {
          var _a, _b;
          (_b = (_a = enterButtonAsElement === null || enterButtonAsElement === void 0 ? void 0 : enterButtonAsElement.props) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e3);
          onSearch(e3);
        },
        key: "enterButton"
      }, isAntdButton ? {
        className: btnClassName,
        size
      } : {}));
    } else {
      button = /* @__PURE__ */ React287.createElement(button_default2, {
        className: btnClassName,
        type: enterButton ? "primary" : void 0,
        size,
        disabled,
        key: "enterButton",
        onMouseDown,
        onClick: onSearch,
        loading,
        icon: searchIcon
      }, enterButton);
    }
    if (addonAfter) {
      button = [button, cloneElement4(addonAfter, {
        key: "addonAfter"
      })];
    }
    const cls = (0, import_classnames95.default)(prefixCls, {
      [`${prefixCls}-rtl`]: direction === "rtl",
      [`${prefixCls}-${size}`]: !!size,
      [`${prefixCls}-with-button`]: !!enterButton
    }, className);
    const handleOnCompositionStart = (e3) => {
      composedRef.current = true;
      onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(e3);
    };
    const handleOnCompositionEnd = (e3) => {
      composedRef.current = false;
      onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(e3);
    };
    return /* @__PURE__ */ React287.createElement(Input_default4, Object.assign({
      ref: composeRef(inputRef, ref),
      onPressEnter
    }, restProps, {
      size,
      onCompositionStart: handleOnCompositionStart,
      onCompositionEnd: handleOnCompositionEnd,
      prefixCls: inputPrefixCls,
      addonAfter: button,
      suffix,
      onChange,
      className: cls,
      disabled
    }));
  });
  if (true) {
    Search.displayName = "Search";
  }
  var Search_default = Search;

  // node_modules/antd/es/input/TextArea.js
  var React290 = __toESM(require_react());
  var import_react90 = __toESM(require_react());
  var import_classnames98 = __toESM(require_classnames());

  // node_modules/rc-textarea/es/TextArea.js
  var import_classnames97 = __toESM(require_classnames());
  var import_react89 = __toESM(require_react());

  // node_modules/rc-textarea/es/ResizableTextArea.js
  var import_classnames96 = __toESM(require_classnames());
  var React288 = __toESM(require_react());

  // node_modules/rc-textarea/es/calculateNodeHeight.js
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n  pointer-events: none !important;\n";
  var SIZING_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing", "word-break", "white-space"];
  var computedStyleCache = {};
  var hiddenTextarea;
  function calculateNodeStyling(node2) {
    var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var nodeRef = node2.getAttribute("id") || node2.getAttribute("data-reactid") || node2.getAttribute("name");
    if (useCache && computedStyleCache[nodeRef]) {
      return computedStyleCache[nodeRef];
    }
    var style2 = window.getComputedStyle(node2);
    var boxSizing = style2.getPropertyValue("box-sizing") || style2.getPropertyValue("-moz-box-sizing") || style2.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style2.getPropertyValue("padding-bottom")) + parseFloat(style2.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style2.getPropertyValue("border-bottom-width")) + parseFloat(style2.getPropertyValue("border-top-width"));
    var sizingStyle = SIZING_STYLE.map(function(name) {
      return "".concat(name, ":").concat(style2.getPropertyValue(name));
    }).join(";");
    var nodeInfo = {
      sizingStyle,
      paddingSize,
      borderSize,
      boxSizing
    };
    if (useCache && nodeRef) {
      computedStyleCache[nodeRef] = nodeInfo;
    }
    return nodeInfo;
  }
  function calculateAutoSizeStyle(uiTextNode) {
    var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var minRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var maxRows = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      hiddenTextarea.setAttribute("tab-index", "-1");
      hiddenTextarea.setAttribute("aria-hidden", "true");
      document.body.appendChild(hiddenTextarea);
    }
    if (uiTextNode.getAttribute("wrap")) {
      hiddenTextarea.setAttribute("wrap", uiTextNode.getAttribute("wrap"));
    } else {
      hiddenTextarea.removeAttribute("wrap");
    }
    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;
    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || "";
    var minHeight = void 0;
    var maxHeight = void 0;
    var overflowY;
    var height = hiddenTextarea.scrollHeight;
    if (boxSizing === "border-box") {
      height += borderSize;
    } else if (boxSizing === "content-box") {
      height -= paddingSize;
    }
    if (minRows !== null || maxRows !== null) {
      hiddenTextarea.value = " ";
      var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
      if (minRows !== null) {
        minHeight = singleRowHeight * minRows;
        if (boxSizing === "border-box") {
          minHeight = minHeight + paddingSize + borderSize;
        }
        height = Math.max(minHeight, height);
      }
      if (maxRows !== null) {
        maxHeight = singleRowHeight * maxRows;
        if (boxSizing === "border-box") {
          maxHeight = maxHeight + paddingSize + borderSize;
        }
        overflowY = height > maxHeight ? "" : "hidden";
        height = Math.min(maxHeight, height);
      }
    }
    var style2 = {
      height,
      overflowY,
      resize: "none"
    };
    if (minHeight) {
      style2.minHeight = minHeight;
    }
    if (maxHeight) {
      style2.maxHeight = maxHeight;
    }
    return style2;
  }

  // node_modules/rc-textarea/es/ResizableTextArea.js
  var _excluded42 = ["prefixCls", "onPressEnter", "defaultValue", "value", "autoSize", "onResize", "className", "style", "disabled", "onChange", "onInternalAutoSize"];
  var RESIZE_START = 0;
  var RESIZE_MEASURING = 1;
  var RESIZE_STABLE = 2;
  var ResizableTextArea = /* @__PURE__ */ React288.forwardRef(function(props, ref) {
    var _ref = props, prefixCls = _ref.prefixCls, onPressEnter = _ref.onPressEnter, defaultValue = _ref.defaultValue, value = _ref.value, autoSize = _ref.autoSize, onResize2 = _ref.onResize, className = _ref.className, style2 = _ref.style, disabled = _ref.disabled, onChange = _ref.onChange, onInternalAutoSize = _ref.onInternalAutoSize, restProps = _objectWithoutProperties(_ref, _excluded42);
    var _useMergedState = useMergedState(defaultValue, {
      value,
      postState: function postState(val) {
        return val !== null && val !== void 0 ? val : "";
      }
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setMergedValue = _useMergedState2[1];
    var onInternalChange = function onInternalChange2(event) {
      setMergedValue(event.target.value);
      onChange === null || onChange === void 0 || onChange(event);
    };
    var textareaRef = React288.useRef();
    React288.useImperativeHandle(ref, function() {
      return {
        textArea: textareaRef.current
      };
    });
    var _React$useMemo = React288.useMemo(function() {
      if (autoSize && _typeof(autoSize) === "object") {
        return [autoSize.minRows, autoSize.maxRows];
      }
      return [];
    }, [autoSize]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), minRows = _React$useMemo2[0], maxRows = _React$useMemo2[1];
    var needAutoSize = !!autoSize;
    var fixFirefoxAutoScroll = function fixFirefoxAutoScroll2() {
      try {
        if (document.activeElement === textareaRef.current) {
          var _textareaRef$current = textareaRef.current, selectionStart = _textareaRef$current.selectionStart, selectionEnd = _textareaRef$current.selectionEnd, scrollTop = _textareaRef$current.scrollTop;
          textareaRef.current.setSelectionRange(selectionStart, selectionEnd);
          textareaRef.current.scrollTop = scrollTop;
        }
      } catch (e3) {
      }
    };
    var _React$useState = React288.useState(RESIZE_STABLE), _React$useState2 = _slicedToArray(_React$useState, 2), resizeState = _React$useState2[0], setResizeState = _React$useState2[1];
    var _React$useState3 = React288.useState(), _React$useState4 = _slicedToArray(_React$useState3, 2), autoSizeStyle = _React$useState4[0], setAutoSizeStyle = _React$useState4[1];
    var startResize = function startResize2() {
      setResizeState(RESIZE_START);
      if (false) {
        onInternalAutoSize === null || onInternalAutoSize === void 0 || onInternalAutoSize();
      }
    };
    useLayoutEffect_default(function() {
      if (needAutoSize) {
        startResize();
      }
    }, [value, minRows, maxRows, needAutoSize]);
    useLayoutEffect_default(function() {
      if (resizeState === RESIZE_START) {
        setResizeState(RESIZE_MEASURING);
      } else if (resizeState === RESIZE_MEASURING) {
        var textareaStyles = calculateAutoSizeStyle(textareaRef.current, false, minRows, maxRows);
        setResizeState(RESIZE_STABLE);
        setAutoSizeStyle(textareaStyles);
      } else {
        fixFirefoxAutoScroll();
      }
    }, [resizeState]);
    var resizeRafRef = React288.useRef();
    var cleanRaf = function cleanRaf2() {
      raf_default.cancel(resizeRafRef.current);
    };
    var onInternalResize = function onInternalResize2(size) {
      if (resizeState === RESIZE_STABLE) {
        onResize2 === null || onResize2 === void 0 || onResize2(size);
        if (autoSize) {
          cleanRaf();
          resizeRafRef.current = raf_default(function() {
            startResize();
          });
        }
      }
    };
    React288.useEffect(function() {
      return cleanRaf;
    }, []);
    var mergedAutoSizeStyle = needAutoSize ? autoSizeStyle : null;
    var mergedStyle = _objectSpread2(_objectSpread2({}, style2), mergedAutoSizeStyle);
    if (resizeState === RESIZE_START || resizeState === RESIZE_MEASURING) {
      mergedStyle.overflowY = "hidden";
      mergedStyle.overflowX = "hidden";
    }
    return /* @__PURE__ */ React288.createElement(es_default, {
      onResize: onInternalResize,
      disabled: !(autoSize || onResize2)
    }, /* @__PURE__ */ React288.createElement("textarea", _extends({}, restProps, {
      ref: textareaRef,
      style: mergedStyle,
      className: (0, import_classnames96.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled)),
      disabled,
      value: mergedValue,
      onChange: onInternalChange
    })));
  });
  var ResizableTextArea_default = ResizableTextArea;

  // node_modules/rc-textarea/es/TextArea.js
  var _excluded43 = ["defaultValue", "value", "onFocus", "onBlur", "onChange", "allowClear", "maxLength", "onCompositionStart", "onCompositionEnd", "suffix", "prefixCls", "showCount", "count", "className", "style", "disabled", "hidden", "classNames", "styles", "onResize"];
  var TextArea = /* @__PURE__ */ import_react89.default.forwardRef(function(_ref, ref) {
    var _countConfig$max, _clsx;
    var defaultValue = _ref.defaultValue, customValue = _ref.value, onFocus = _ref.onFocus, onBlur = _ref.onBlur, onChange = _ref.onChange, allowClear = _ref.allowClear, maxLength = _ref.maxLength, onCompositionStart = _ref.onCompositionStart, onCompositionEnd = _ref.onCompositionEnd, suffix = _ref.suffix, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-textarea" : _ref$prefixCls, showCount = _ref.showCount, count = _ref.count, className = _ref.className, style2 = _ref.style, disabled = _ref.disabled, hidden = _ref.hidden, classNames139 = _ref.classNames, styles = _ref.styles, onResize2 = _ref.onResize, rest = _objectWithoutProperties(_ref, _excluded43);
    var _useMergedState = useMergedState(defaultValue, {
      value: customValue,
      defaultValue
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
    var formatValue2 = value === void 0 || value === null ? "" : String(value);
    var _React$useState = import_react89.default.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), focused = _React$useState2[0], setFocused = _React$useState2[1];
    var compositionRef = import_react89.default.useRef(false);
    var _React$useState3 = import_react89.default.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), textareaResized = _React$useState4[0], setTextareaResized = _React$useState4[1];
    var resizableTextAreaRef = (0, import_react89.useRef)(null);
    var getTextArea = function getTextArea2() {
      var _resizableTextAreaRef;
      return (_resizableTextAreaRef = resizableTextAreaRef.current) === null || _resizableTextAreaRef === void 0 ? void 0 : _resizableTextAreaRef.textArea;
    };
    var focus = function focus2() {
      getTextArea().focus();
    };
    (0, import_react89.useImperativeHandle)(ref, function() {
      return {
        resizableTextArea: resizableTextAreaRef.current,
        focus,
        blur: function blur() {
          getTextArea().blur();
        }
      };
    });
    (0, import_react89.useEffect)(function() {
      setFocused(function(prev2) {
        return !disabled && prev2;
      });
    }, [disabled]);
    var _React$useState5 = import_react89.default.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), selection = _React$useState6[0], setSelection = _React$useState6[1];
    import_react89.default.useEffect(function() {
      if (selection) {
        var _getTextArea;
        (_getTextArea = getTextArea()).setSelectionRange.apply(_getTextArea, _toConsumableArray(selection));
      }
    }, [selection]);
    var countConfig = useCount(count, showCount);
    var mergedMax = (_countConfig$max = countConfig.max) !== null && _countConfig$max !== void 0 ? _countConfig$max : maxLength;
    var hasMaxLength = Number(mergedMax) > 0;
    var valueLength = countConfig.strategy(formatValue2);
    var isOutOfRange = !!mergedMax && valueLength > mergedMax;
    var triggerChange = function triggerChange2(e3, currentValue) {
      var cutValue = currentValue;
      if (!compositionRef.current && countConfig.exceedFormatter && countConfig.max && countConfig.strategy(currentValue) > countConfig.max) {
        cutValue = countConfig.exceedFormatter(currentValue, {
          max: countConfig.max
        });
        if (currentValue !== cutValue) {
          setSelection([getTextArea().selectionStart || 0, getTextArea().selectionEnd || 0]);
        }
      }
      setValue(cutValue);
      resolveOnChange(e3.currentTarget, e3, onChange, cutValue);
    };
    var onInternalCompositionStart = function onInternalCompositionStart2(e3) {
      compositionRef.current = true;
      onCompositionStart === null || onCompositionStart === void 0 || onCompositionStart(e3);
    };
    var onInternalCompositionEnd = function onInternalCompositionEnd2(e3) {
      compositionRef.current = false;
      triggerChange(e3, e3.currentTarget.value);
      onCompositionEnd === null || onCompositionEnd === void 0 || onCompositionEnd(e3);
    };
    var onInternalChange = function onInternalChange2(e3) {
      triggerChange(e3, e3.target.value);
    };
    var handleKeyDown = function handleKeyDown2(e3) {
      var onPressEnter = rest.onPressEnter, onKeyDown2 = rest.onKeyDown;
      if (e3.key === "Enter" && onPressEnter) {
        onPressEnter(e3);
      }
      onKeyDown2 === null || onKeyDown2 === void 0 || onKeyDown2(e3);
    };
    var handleFocus = function handleFocus2(e3) {
      setFocused(true);
      onFocus === null || onFocus === void 0 || onFocus(e3);
    };
    var handleBlur = function handleBlur2(e3) {
      setFocused(false);
      onBlur === null || onBlur === void 0 || onBlur(e3);
    };
    var handleReset = function handleReset2(e3) {
      setValue("");
      focus();
      resolveOnChange(getTextArea(), e3, onChange);
    };
    var suffixNode = suffix;
    var dataCount;
    if (countConfig.show) {
      if (countConfig.showFormatter) {
        dataCount = countConfig.showFormatter({
          value: formatValue2,
          count: valueLength,
          maxLength: mergedMax
        });
      } else {
        dataCount = "".concat(valueLength).concat(hasMaxLength ? " / ".concat(mergedMax) : "");
      }
      suffixNode = /* @__PURE__ */ import_react89.default.createElement(import_react89.default.Fragment, null, suffixNode, /* @__PURE__ */ import_react89.default.createElement("span", {
        className: (0, import_classnames97.default)("".concat(prefixCls, "-data-count"), classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.count),
        style: styles === null || styles === void 0 ? void 0 : styles.count
      }, dataCount));
    }
    var handleResize = function handleResize2(size) {
      var _getTextArea2;
      onResize2 === null || onResize2 === void 0 || onResize2(size);
      if ((_getTextArea2 = getTextArea()) !== null && _getTextArea2 !== void 0 && _getTextArea2.style.height) {
        setTextareaResized(true);
      }
    };
    var isPureTextArea = !rest.autoSize && !showCount && !allowClear;
    return /* @__PURE__ */ import_react89.default.createElement(BaseInput_default, {
      value: formatValue2,
      allowClear,
      handleReset,
      suffix: suffixNode,
      prefixCls,
      classNames: _objectSpread2(_objectSpread2({}, classNames139), {}, {
        affixWrapper: (0, import_classnames97.default)(classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.affixWrapper, (_clsx = {}, _defineProperty(_clsx, "".concat(prefixCls, "-show-count"), showCount), _defineProperty(_clsx, "".concat(prefixCls, "-textarea-allow-clear"), allowClear), _clsx))
      }),
      disabled,
      focused,
      className: (0, import_classnames97.default)(className, isOutOfRange && "".concat(prefixCls, "-out-of-range")),
      style: _objectSpread2(_objectSpread2({}, style2), textareaResized && !isPureTextArea ? {
        height: "auto"
      } : {}),
      dataAttrs: {
        affixWrapper: {
          "data-count": typeof dataCount === "string" ? dataCount : void 0
        }
      },
      hidden
    }, /* @__PURE__ */ import_react89.default.createElement(ResizableTextArea_default, _extends({}, rest, {
      maxLength,
      onKeyDown: handleKeyDown,
      onChange: onInternalChange,
      onFocus: handleFocus,
      onBlur: handleBlur,
      onCompositionStart: onInternalCompositionStart,
      onCompositionEnd: onInternalCompositionEnd,
      className: (0, import_classnames97.default)(classNames139 === null || classNames139 === void 0 ? void 0 : classNames139.textarea),
      style: _objectSpread2(_objectSpread2({}, styles === null || styles === void 0 ? void 0 : styles.textarea), {}, {
        resize: style2 === null || style2 === void 0 ? void 0 : style2.resize
      }),
      disabled,
      prefixCls,
      onResize: handleResize,
      ref: resizableTextAreaRef
    })));
  });
  var TextArea_default = TextArea;

  // node_modules/rc-textarea/es/index.js
  var es_default17 = TextArea_default;

  // node_modules/antd/es/input/TextArea.js
  var __rest33 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var TextArea2 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, ref) => {
    var _a;
    const {
      prefixCls: customizePrefixCls,
      bordered = true,
      size: customizeSize,
      disabled: customDisabled,
      status: customStatus,
      allowClear,
      classNames: classes,
      rootClassName,
      className,
      variant: customVariant
    } = props, rest = __rest33(props, ["prefixCls", "bordered", "size", "disabled", "status", "allowClear", "classNames", "rootClassName", "className", "variant"]);
    if (true) {
      const {
        deprecated
      } = devUseWarning("TextArea");
      deprecated(!("bordered" in props), "bordered", "variant");
    }
    const {
      getPrefixCls,
      direction
    } = React290.useContext(ConfigContext);
    const mergedSize = useSize_default(customizeSize);
    const disabled = React290.useContext(DisabledContext_default);
    const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
    const {
      status: contextStatus,
      hasFeedback,
      feedbackIcon
    } = React290.useContext(FormItemInputContext);
    const mergedStatus = getMergedStatus(contextStatus, customStatus);
    const innerRef = React290.useRef(null);
    React290.useImperativeHandle(ref, () => {
      var _a2;
      return {
        resizableTextArea: (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.resizableTextArea,
        focus: (option) => {
          var _a3, _b;
          triggerFocus2((_b = (_a3 = innerRef.current) === null || _a3 === void 0 ? void 0 : _a3.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, option);
        },
        blur: () => {
          var _a3;
          return (_a3 = innerRef.current) === null || _a3 === void 0 ? void 0 : _a3.blur();
        }
      };
    });
    const prefixCls = getPrefixCls("input", customizePrefixCls);
    let mergedAllowClear;
    if (typeof allowClear === "object" && (allowClear === null || allowClear === void 0 ? void 0 : allowClear.clearIcon)) {
      mergedAllowClear = allowClear;
    } else if (allowClear) {
      mergedAllowClear = {
        clearIcon: /* @__PURE__ */ React290.createElement(CloseCircleFilled_default2, null)
      };
    }
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default11(prefixCls, rootCls);
    const [variant, enableVariantCls] = useVariants_default(customVariant, bordered);
    return wrapCSSVar(/* @__PURE__ */ React290.createElement(es_default17, Object.assign({}, rest, {
      disabled: mergedDisabled,
      allowClear: mergedAllowClear,
      className: (0, import_classnames98.default)(cssVarCls, rootCls, className, rootClassName),
      classNames: Object.assign(Object.assign({}, classes), {
        textarea: (0, import_classnames98.default)({
          [`${prefixCls}-sm`]: mergedSize === "small",
          [`${prefixCls}-lg`]: mergedSize === "large"
        }, hashId, classes === null || classes === void 0 ? void 0 : classes.textarea),
        variant: (0, import_classnames98.default)({
          [`${prefixCls}-${variant}`]: enableVariantCls
        }, getStatusClassNames(prefixCls, mergedStatus)),
        affixWrapper: (0, import_classnames98.default)(`${prefixCls}-textarea-affix-wrapper`, {
          [`${prefixCls}-affix-wrapper-rtl`]: direction === "rtl",
          [`${prefixCls}-affix-wrapper-sm`]: mergedSize === "small",
          [`${prefixCls}-affix-wrapper-lg`]: mergedSize === "large",
          [`${prefixCls}-textarea-show-count`]: props.showCount || ((_a = props.count) === null || _a === void 0 ? void 0 : _a.show)
        }, hashId)
      }),
      prefixCls,
      suffix: hasFeedback && /* @__PURE__ */ React290.createElement("span", {
        className: `${prefixCls}-textarea-suffix`
      }, feedbackIcon),
      ref: innerRef
    })));
  });
  var TextArea_default2 = TextArea2;

  // node_modules/antd/es/input/index.js
  var Input5 = Input_default4;
  if (true) {
    Input5.displayName = "Input";
  }
  Input5.Group = Group_default2;
  Input5.Search = Search_default;
  Input5.TextArea = TextArea_default2;
  Input5.Password = Password_default;
  var input_default = Input5;

  // node_modules/antd/es/date-picker/generatePicker/generateRangePicker.js
  var React295 = __toESM(require_react());
  var import_react91 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/CalendarOutlined.js
  var React291 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CalendarOutlined.js
  var CalendarOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z" } }] }, "name": "calendar", "theme": "outlined" };
  var CalendarOutlined_default = CalendarOutlined;

  // node_modules/@ant-design/icons/es/icons/CalendarOutlined.js
  var CalendarOutlined2 = function CalendarOutlined3(props, ref) {
    return /* @__PURE__ */ React291.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CalendarOutlined_default
    }));
  };
  if (true) {
    CalendarOutlined2.displayName = "CalendarOutlined";
  }
  var CalendarOutlined_default2 = /* @__PURE__ */ React291.forwardRef(CalendarOutlined2);

  // node_modules/@ant-design/icons/es/icons/ClockCircleOutlined.js
  var React292 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/ClockCircleOutlined.js
  var ClockCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z" } }] }, "name": "clock-circle", "theme": "outlined" };
  var ClockCircleOutlined_default = ClockCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/ClockCircleOutlined.js
  var ClockCircleOutlined2 = function ClockCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React292.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: ClockCircleOutlined_default
    }));
  };
  if (true) {
    ClockCircleOutlined2.displayName = "ClockCircleOutlined";
  }
  var ClockCircleOutlined_default2 = /* @__PURE__ */ React292.forwardRef(ClockCircleOutlined2);

  // node_modules/@ant-design/icons/es/icons/SwapRightOutlined.js
  var React293 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/SwapRightOutlined.js
  var SwapRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z" } }] }, "name": "swap-right", "theme": "outlined" };
  var SwapRightOutlined_default = SwapRightOutlined;

  // node_modules/@ant-design/icons/es/icons/SwapRightOutlined.js
  var SwapRightOutlined2 = function SwapRightOutlined3(props, ref) {
    return /* @__PURE__ */ React293.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: SwapRightOutlined_default
    }));
  };
  if (true) {
    SwapRightOutlined2.displayName = "SwapRightOutlined";
  }
  var SwapRightOutlined_default2 = /* @__PURE__ */ React293.forwardRef(SwapRightOutlined2);

  // node_modules/antd/es/date-picker/generatePicker/generateRangePicker.js
  var import_classnames99 = __toESM(require_classnames());

  // node_modules/antd/es/date-picker/util.js
  function getPlaceholder(locale9, picker, customizePlaceholder) {
    if (customizePlaceholder !== void 0) {
      return customizePlaceholder;
    }
    if (picker === "year" && locale9.lang.yearPlaceholder) {
      return locale9.lang.yearPlaceholder;
    }
    if (picker === "quarter" && locale9.lang.quarterPlaceholder) {
      return locale9.lang.quarterPlaceholder;
    }
    if (picker === "month" && locale9.lang.monthPlaceholder) {
      return locale9.lang.monthPlaceholder;
    }
    if (picker === "week" && locale9.lang.weekPlaceholder) {
      return locale9.lang.weekPlaceholder;
    }
    if (picker === "time" && locale9.timePickerLocale.placeholder) {
      return locale9.timePickerLocale.placeholder;
    }
    return locale9.lang.placeholder;
  }
  function getRangePlaceholder(locale9, picker, customizePlaceholder) {
    if (customizePlaceholder !== void 0) {
      return customizePlaceholder;
    }
    if (picker === "year" && locale9.lang.yearPlaceholder) {
      return locale9.lang.rangeYearPlaceholder;
    }
    if (picker === "quarter" && locale9.lang.quarterPlaceholder) {
      return locale9.lang.rangeQuarterPlaceholder;
    }
    if (picker === "month" && locale9.lang.monthPlaceholder) {
      return locale9.lang.rangeMonthPlaceholder;
    }
    if (picker === "week" && locale9.lang.weekPlaceholder) {
      return locale9.lang.rangeWeekPlaceholder;
    }
    if (picker === "time" && locale9.timePickerLocale.placeholder) {
      return locale9.timePickerLocale.rangePlaceholder;
    }
    return locale9.lang.rangePlaceholder;
  }
  function transPlacement2DropdownAlign(direction, placement) {
    const overflow = {
      adjustX: 1,
      adjustY: 1
    };
    switch (placement) {
      case "bottomLeft": {
        return {
          points: ["tl", "bl"],
          offset: [0, 4],
          overflow
        };
      }
      case "bottomRight": {
        return {
          points: ["tr", "br"],
          offset: [0, 4],
          overflow
        };
      }
      case "topLeft": {
        return {
          points: ["bl", "tl"],
          offset: [0, -4],
          overflow
        };
      }
      case "topRight": {
        return {
          points: ["br", "tr"],
          offset: [0, -4],
          overflow
        };
      }
      default: {
        return {
          points: direction === "rtl" ? ["tr", "br"] : ["tl", "bl"],
          offset: [0, 4],
          overflow
        };
      }
    }
  }
  function toArray6(list) {
    if (!list) {
      return [];
    }
    return Array.isArray(list) ? list : [list];
  }
  function getTimeProps(props) {
    const {
      format: format3,
      picker,
      showHour,
      showMinute,
      showSecond,
      use12Hours
    } = props;
    const firstFormat = toArray6(format3)[0];
    const showTimeObj = Object.assign({}, props);
    if (format3 && Array.isArray(format3)) {
      showTimeObj.format = firstFormat;
    }
    if (firstFormat && typeof firstFormat === "string") {
      if (!firstFormat.includes("s") && showSecond === void 0) {
        showTimeObj.showSecond = false;
      }
      if (!firstFormat.includes("m") && showMinute === void 0) {
        showTimeObj.showMinute = false;
      }
      if (!firstFormat.includes("H") && !firstFormat.includes("h") && !firstFormat.includes("K") && !firstFormat.includes("k") && showHour === void 0) {
        showTimeObj.showHour = false;
      }
      if ((firstFormat.includes("a") || firstFormat.includes("A")) && use12Hours === void 0) {
        showTimeObj.use12Hours = true;
      }
    }
    if (picker === "time") {
      return showTimeObj;
    }
    if (typeof firstFormat === "function") {
      delete showTimeObj.format;
    }
    return {
      showTime: showTimeObj
    };
  }
  function mergeAllowClear(allowClear, clearIcon, defaultClearIcon) {
    if (allowClear === false) {
      return false;
    }
    const defaults = {
      clearIcon: clearIcon !== null && clearIcon !== void 0 ? clearIcon : defaultClearIcon
    };
    return typeof allowClear === "object" ? Object.assign(Object.assign({}, defaults), allowClear) : defaults;
  }

  // node_modules/antd/es/date-picker/PickerButton.js
  var React294 = __toESM(require_react());
  function PickerButton(props) {
    return /* @__PURE__ */ React294.createElement(button_default2, Object.assign({
      size: "small",
      type: "primary"
    }, props));
  }

  // node_modules/antd/es/date-picker/generatePicker/Components.js
  var Components = {
    button: PickerButton
  };
  var Components_default = Components;

  // node_modules/antd/es/date-picker/generatePicker/generateRangePicker.js
  var __rest34 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function generateRangePicker(generateConfig2) {
    const RangePicker2 = /* @__PURE__ */ (0, import_react91.forwardRef)((props, ref) => {
      var _a;
      const {
        prefixCls: customizePrefixCls,
        getPopupContainer: customGetPopupContainer,
        className,
        style: style2,
        placement,
        size: customizeSize,
        disabled: customDisabled,
        bordered = true,
        placeholder,
        popupClassName,
        dropdownClassName,
        status: customStatus,
        clearIcon,
        allowClear,
        rootClassName,
        variant: customVariant
      } = props, restProps = __rest34(props, ["prefixCls", "getPopupContainer", "className", "style", "placement", "size", "disabled", "bordered", "placeholder", "popupClassName", "dropdownClassName", "status", "clearIcon", "allowClear", "rootClassName", "variant"]);
      const innerRef = React295.useRef(null);
      const {
        getPrefixCls,
        direction,
        getPopupContainer,
        rangePicker
      } = (0, import_react91.useContext)(ConfigContext);
      const prefixCls = getPrefixCls("picker", customizePrefixCls);
      const {
        compactSize,
        compactItemClassnames
      } = useCompactItemContext(prefixCls, direction);
      const {
        format: format3,
        showTime,
        picker
      } = props;
      const rootPrefixCls = getPrefixCls();
      const [variant, enableVariantCls] = useVariants_default(customVariant, bordered);
      const rootCls = useCSSVarCls_default(prefixCls);
      const [wrapCSSVar, hashId, cssVarCls] = style_default12(prefixCls, rootCls);
      const additionalOverrideProps = Object.assign(Object.assign({}, showTime ? getTimeProps(Object.assign({
        format: format3,
        picker
      }, showTime)) : {}), picker === "time" ? getTimeProps(Object.assign(Object.assign({
        format: format3
      }, props), {
        picker
      })) : {});
      if (true) {
        const warning8 = devUseWarning("DatePicker.RangePicker");
        warning8.deprecated(!dropdownClassName, "dropdownClassName", "popupClassName");
        warning8.deprecated(!("bordered" in props), "bordered", "variant");
      }
      const mergedSize = useSize_default((ctx) => {
        var _a2;
        return (_a2 = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a2 !== void 0 ? _a2 : ctx;
      });
      const disabled = React295.useContext(DisabledContext_default);
      const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
      const formItemContext = (0, import_react91.useContext)(FormItemInputContext);
      const {
        hasFeedback,
        status: contextStatus,
        feedbackIcon
      } = formItemContext;
      const suffixNode = /* @__PURE__ */ React295.createElement(React295.Fragment, null, picker === "time" ? /* @__PURE__ */ React295.createElement(ClockCircleOutlined_default2, null) : /* @__PURE__ */ React295.createElement(CalendarOutlined_default2, null), hasFeedback && feedbackIcon);
      (0, import_react91.useImperativeHandle)(ref, () => ({
        focus: () => {
          var _a2;
          return (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        },
        blur: () => {
          var _a2;
          return (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.blur();
        }
      }));
      const [contextLocale] = useLocale_default("Calendar", en_US_default4);
      const locale9 = Object.assign(Object.assign({}, contextLocale), props.locale);
      const [zIndex] = useZIndex("DatePicker", (_a = props.popupStyle) === null || _a === void 0 ? void 0 : _a.zIndex);
      return wrapCSSVar(/* @__PURE__ */ React295.createElement(NoCompactStyle, null, /* @__PURE__ */ React295.createElement(RangePicker_default, Object.assign({
        separator: /* @__PURE__ */ React295.createElement("span", {
          "aria-label": "to",
          className: `${prefixCls}-separator`
        }, /* @__PURE__ */ React295.createElement(SwapRightOutlined_default2, null)),
        disabled: mergedDisabled,
        ref: innerRef,
        dropdownAlign: transPlacement2DropdownAlign(direction, placement),
        placeholder: getRangePlaceholder(locale9, picker, placeholder),
        suffixIcon: suffixNode,
        prevIcon: /* @__PURE__ */ React295.createElement("span", {
          className: `${prefixCls}-prev-icon`
        }),
        nextIcon: /* @__PURE__ */ React295.createElement("span", {
          className: `${prefixCls}-next-icon`
        }),
        superPrevIcon: /* @__PURE__ */ React295.createElement("span", {
          className: `${prefixCls}-super-prev-icon`
        }),
        superNextIcon: /* @__PURE__ */ React295.createElement("span", {
          className: `${prefixCls}-super-next-icon`
        }),
        transitionName: `${rootPrefixCls}-slide-up`
      }, restProps, additionalOverrideProps, {
        className: (0, import_classnames99.default)({
          [`${prefixCls}-${mergedSize}`]: mergedSize,
          [`${prefixCls}-${variant}`]: enableVariantCls
        }, getStatusClassNames(prefixCls, getMergedStatus(contextStatus, customStatus), hasFeedback), hashId, compactItemClassnames, className, rangePicker === null || rangePicker === void 0 ? void 0 : rangePicker.className, cssVarCls, rootCls, rootClassName),
        style: Object.assign(Object.assign({}, rangePicker === null || rangePicker === void 0 ? void 0 : rangePicker.style), style2),
        locale: locale9.lang,
        prefixCls,
        getPopupContainer: customGetPopupContainer || getPopupContainer,
        generateConfig: generateConfig2,
        components: Components_default,
        direction,
        dropdownClassName: (0, import_classnames99.default)(hashId, popupClassName || dropdownClassName, cssVarCls, rootCls, rootClassName),
        popupStyle: Object.assign(Object.assign({}, props.popupStyle), {
          zIndex
        }),
        allowClear: mergeAllowClear(allowClear, clearIcon, /* @__PURE__ */ React295.createElement(CloseCircleFilled_default2, null))
      }))));
    });
    if (true) {
      RangePicker2.displayName = "RangePicker";
    }
    return RangePicker2;
  }

  // node_modules/antd/es/date-picker/generatePicker/generateSinglePicker.js
  var React296 = __toESM(require_react());
  var import_react92 = __toESM(require_react());
  var import_classnames100 = __toESM(require_classnames());
  var __rest35 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function generatePicker(generateConfig2) {
    function getPicker(picker, displayName) {
      const consumerName = displayName === "TimePicker" ? "timePicker" : "datePicker";
      const Picker2 = /* @__PURE__ */ (0, import_react92.forwardRef)((props, ref) => {
        var _a;
        const {
          prefixCls: customizePrefixCls,
          getPopupContainer: customizeGetPopupContainer,
          style: style2,
          className,
          rootClassName,
          size: customizeSize,
          bordered,
          placement,
          placeholder,
          popupClassName,
          dropdownClassName,
          disabled: customDisabled,
          status: customStatus,
          clearIcon,
          allowClear,
          variant: customVariant
        } = props, restProps = __rest35(props, ["prefixCls", "getPopupContainer", "style", "className", "rootClassName", "size", "bordered", "placement", "placeholder", "popupClassName", "dropdownClassName", "disabled", "status", "clearIcon", "allowClear", "variant"]);
        const {
          getPrefixCls,
          direction,
          getPopupContainer,
          // Consume different styles according to different names
          [consumerName]: consumerStyle
        } = (0, import_react92.useContext)(ConfigContext);
        const prefixCls = getPrefixCls("picker", customizePrefixCls);
        const {
          compactSize,
          compactItemClassnames
        } = useCompactItemContext(prefixCls, direction);
        const innerRef = React296.useRef(null);
        const {
          format: format3,
          showTime
        } = props;
        const [variant, enableVariantCls] = useVariants_default(customVariant, bordered);
        const rootCls = useCSSVarCls_default(prefixCls);
        const [wrapCSSVar, hashId, cssVarCls] = style_default12(prefixCls, rootCls);
        (0, import_react92.useImperativeHandle)(ref, () => ({
          focus: () => {
            var _a2;
            return (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
          },
          blur: () => {
            var _a2;
            return (_a2 = innerRef.current) === null || _a2 === void 0 ? void 0 : _a2.blur();
          }
        }));
        const additionalProps = {
          showToday: true
        };
        let additionalOverrideProps = {};
        if (picker) {
          additionalOverrideProps.picker = picker;
        }
        const mergedPicker = picker || props.picker;
        additionalOverrideProps = Object.assign(Object.assign(Object.assign({}, additionalOverrideProps), showTime ? getTimeProps(Object.assign({
          format: format3,
          picker: mergedPicker
        }, showTime)) : {}), mergedPicker === "time" ? getTimeProps(Object.assign(Object.assign({
          format: format3
        }, props), {
          picker: mergedPicker
        })) : {});
        const rootPrefixCls = getPrefixCls();
        if (true) {
          const warning8 = devUseWarning(displayName || "DatePicker");
          true ? warning8(picker !== "quarter", "deprecated", `DatePicker.${displayName} is legacy usage. Please use DatePicker[picker='${picker}'] directly.`) : void 0;
          warning8.deprecated(!dropdownClassName, "dropdownClassName", "popupClassName");
          warning8.deprecated(!("bordered" in props), "bordered", "variant");
        }
        const mergedSize = useSize_default((ctx) => {
          var _a2;
          return (_a2 = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a2 !== void 0 ? _a2 : ctx;
        });
        const disabled = React296.useContext(DisabledContext_default);
        const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
        const formItemContext = (0, import_react92.useContext)(FormItemInputContext);
        const {
          hasFeedback,
          status: contextStatus,
          feedbackIcon
        } = formItemContext;
        const suffixNode = /* @__PURE__ */ React296.createElement(React296.Fragment, null, mergedPicker === "time" ? /* @__PURE__ */ React296.createElement(ClockCircleOutlined_default2, null) : /* @__PURE__ */ React296.createElement(CalendarOutlined_default2, null), hasFeedback && feedbackIcon);
        const [contextLocale] = useLocale_default("DatePicker", en_US_default4);
        const locale9 = Object.assign(Object.assign({}, contextLocale), props.locale);
        const [zIndex] = useZIndex("DatePicker", (_a = props.popupStyle) === null || _a === void 0 ? void 0 : _a.zIndex);
        return wrapCSSVar(/* @__PURE__ */ React296.createElement(NoCompactStyle, null, /* @__PURE__ */ React296.createElement(es_default13, Object.assign({
          ref: innerRef,
          placeholder: getPlaceholder(locale9, mergedPicker, placeholder),
          suffixIcon: suffixNode,
          dropdownAlign: transPlacement2DropdownAlign(direction, placement),
          prevIcon: /* @__PURE__ */ React296.createElement("span", {
            className: `${prefixCls}-prev-icon`
          }),
          nextIcon: /* @__PURE__ */ React296.createElement("span", {
            className: `${prefixCls}-next-icon`
          }),
          superPrevIcon: /* @__PURE__ */ React296.createElement("span", {
            className: `${prefixCls}-super-prev-icon`
          }),
          superNextIcon: /* @__PURE__ */ React296.createElement("span", {
            className: `${prefixCls}-super-next-icon`
          }),
          transitionName: `${rootPrefixCls}-slide-up`
        }, additionalProps, restProps, additionalOverrideProps, {
          locale: locale9.lang,
          className: (0, import_classnames100.default)({
            [`${prefixCls}-${mergedSize}`]: mergedSize,
            [`${prefixCls}-${variant}`]: enableVariantCls
          }, getStatusClassNames(prefixCls, getMergedStatus(contextStatus, customStatus), hasFeedback), hashId, compactItemClassnames, consumerStyle === null || consumerStyle === void 0 ? void 0 : consumerStyle.className, className, cssVarCls, rootCls, rootClassName),
          style: Object.assign(Object.assign({}, consumerStyle === null || consumerStyle === void 0 ? void 0 : consumerStyle.style), style2),
          prefixCls,
          getPopupContainer: customizeGetPopupContainer || getPopupContainer,
          generateConfig: generateConfig2,
          components: Components_default,
          direction,
          disabled: mergedDisabled,
          dropdownClassName: (0, import_classnames100.default)(hashId, cssVarCls, rootCls, rootClassName, popupClassName || dropdownClassName),
          popupStyle: Object.assign(Object.assign({}, props.popupStyle), {
            zIndex
          }),
          allowClear: mergeAllowClear(allowClear, clearIcon, /* @__PURE__ */ React296.createElement(CloseCircleFilled_default2, null))
        }))));
      });
      if (displayName) {
        Picker2.displayName = displayName;
      }
      return Picker2;
    }
    const DatePicker2 = getPicker();
    const WeekPicker = getPicker("week", "WeekPicker");
    const MonthPicker = getPicker("month", "MonthPicker");
    const YearPicker = getPicker("year", "YearPicker");
    const TimePicker = getPicker("time", "TimePicker");
    const QuarterPicker = getPicker("quarter", "QuarterPicker");
    return {
      DatePicker: DatePicker2,
      WeekPicker,
      MonthPicker,
      YearPicker,
      TimePicker,
      QuarterPicker
    };
  }

  // node_modules/antd/es/date-picker/generatePicker/index.js
  function generatePicker2(generateConfig2) {
    const {
      DatePicker: DatePicker2,
      WeekPicker,
      MonthPicker,
      YearPicker,
      TimePicker,
      QuarterPicker
    } = generatePicker(generateConfig2);
    const RangePicker2 = generateRangePicker(generateConfig2);
    const MergedDatePicker = DatePicker2;
    MergedDatePicker.WeekPicker = WeekPicker;
    MergedDatePicker.MonthPicker = MonthPicker;
    MergedDatePicker.YearPicker = YearPicker;
    MergedDatePicker.RangePicker = RangePicker2;
    MergedDatePicker.TimePicker = TimePicker;
    MergedDatePicker.QuarterPicker = QuarterPicker;
    if (true) {
      MergedDatePicker.displayName = "DatePicker";
    }
    return MergedDatePicker;
  }
  var generatePicker_default = generatePicker2;

  // node_modules/antd/es/date-picker/index.js
  var DatePicker = generatePicker_default(dayjs_default);
  function postPureProps2(props) {
    const dropdownAlign = transPlacement2DropdownAlign(props.direction, props.placement);
    dropdownAlign.overflow.adjustY = false;
    dropdownAlign.overflow.adjustX = false;
    return Object.assign(Object.assign({}, props), {
      dropdownAlign
    });
  }
  var PurePanel4 = PurePanel_default(DatePicker, "picker", null, postPureProps2);
  DatePicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel4;
  var PureRangePanel = PurePanel_default(DatePicker.RangePicker, "picker", null, postPureProps2);
  DatePicker._InternalRangePanelDoNotUseOrYouWillBeFired = PureRangePanel;
  DatePicker.generatePicker = generatePicker_default;
  var date_picker_default = DatePicker;

  // node_modules/antd/es/dropdown/dropdown-button.js
  var import_classnames102 = __toESM(require_classnames());
  var React300 = __toESM(require_react());

  // node_modules/antd/es/space/index.js
  var React299 = __toESM(require_react());
  var import_classnames101 = __toESM(require_classnames());

  // node_modules/antd/es/_util/gapSize.js
  function isPresetSize(size) {
    return ["small", "middle", "large"].includes(size);
  }
  function isValidGapNumber(size) {
    if (!size) {
      return false;
    }
    return typeof size === "number" && !Number.isNaN(size);
  }

  // node_modules/antd/es/space/context.js
  var import_react93 = __toESM(require_react());
  var SpaceContext = /* @__PURE__ */ import_react93.default.createContext({
    latestIndex: 0
  });
  var SpaceContextProvider = SpaceContext.Provider;

  // node_modules/antd/es/space/Item.js
  var React298 = __toESM(require_react());
  var Item3 = (_ref) => {
    let {
      className,
      index: index2,
      children,
      split,
      style: style2
    } = _ref;
    const {
      latestIndex
    } = React298.useContext(SpaceContext);
    if (children === null || children === void 0) {
      return null;
    }
    return /* @__PURE__ */ React298.createElement(React298.Fragment, null, /* @__PURE__ */ React298.createElement("div", {
      className,
      style: style2
    }, children), index2 < latestIndex && split && /* @__PURE__ */ React298.createElement("span", {
      className: `${className}-split`
    }, split));
  };
  var Item_default2 = Item3;

  // node_modules/antd/es/space/index.js
  var __rest36 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Space = /* @__PURE__ */ React299.forwardRef((props, ref) => {
    var _a, _b;
    const {
      getPrefixCls,
      space,
      direction: directionConfig
    } = React299.useContext(ConfigContext);
    const {
      size = (space === null || space === void 0 ? void 0 : space.size) || "small",
      align,
      className,
      rootClassName,
      children,
      direction = "horizontal",
      prefixCls: customizePrefixCls,
      split,
      style: style2,
      wrap = false,
      classNames: customClassNames,
      styles
    } = props, otherProps = __rest36(props, ["size", "align", "className", "rootClassName", "children", "direction", "prefixCls", "split", "style", "wrap", "classNames", "styles"]);
    const [horizontalSize, verticalSize] = Array.isArray(size) ? size : [size, size];
    const isPresetVerticalSize = isPresetSize(verticalSize);
    const isPresetHorizontalSize = isPresetSize(horizontalSize);
    const isValidVerticalSize = isValidGapNumber(verticalSize);
    const isValidHorizontalSize = isValidGapNumber(horizontalSize);
    const childNodes = toArray(children, {
      keepEmpty: true
    });
    const mergedAlign = align === void 0 && direction === "horizontal" ? "center" : align;
    const prefixCls = getPrefixCls("space", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default2(prefixCls);
    const cls = (0, import_classnames101.default)(prefixCls, space === null || space === void 0 ? void 0 : space.className, hashId, `${prefixCls}-${direction}`, {
      [`${prefixCls}-rtl`]: directionConfig === "rtl",
      [`${prefixCls}-align-${mergedAlign}`]: mergedAlign,
      [`${prefixCls}-gap-row-${verticalSize}`]: isPresetVerticalSize,
      [`${prefixCls}-gap-col-${horizontalSize}`]: isPresetHorizontalSize
    }, className, rootClassName, cssVarCls);
    const itemClassName = (0, import_classnames101.default)(`${prefixCls}-item`, (_a = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.item) !== null && _a !== void 0 ? _a : (_b = space === null || space === void 0 ? void 0 : space.classNames) === null || _b === void 0 ? void 0 : _b.item);
    let latestIndex = 0;
    const nodes = childNodes.map((child, i) => {
      var _a2, _b2;
      if (child !== null && child !== void 0) {
        latestIndex = i;
      }
      const key = child && child.key || `${itemClassName}-${i}`;
      return /* @__PURE__ */ React299.createElement(Item_default2, {
        className: itemClassName,
        key,
        index: i,
        split,
        style: (_a2 = styles === null || styles === void 0 ? void 0 : styles.item) !== null && _a2 !== void 0 ? _a2 : (_b2 = space === null || space === void 0 ? void 0 : space.styles) === null || _b2 === void 0 ? void 0 : _b2.item
      }, child);
    });
    const spaceContext = React299.useMemo(() => ({
      latestIndex
    }), [latestIndex]);
    if (childNodes.length === 0) {
      return null;
    }
    const gapStyle = {};
    if (wrap) {
      gapStyle.flexWrap = "wrap";
    }
    if (!isPresetHorizontalSize && isValidHorizontalSize) {
      gapStyle.columnGap = horizontalSize;
    }
    if (!isPresetVerticalSize && isValidVerticalSize) {
      gapStyle.rowGap = verticalSize;
    }
    return wrapCSSVar(/* @__PURE__ */ React299.createElement("div", Object.assign({
      ref,
      className: cls,
      style: Object.assign(Object.assign(Object.assign({}, gapStyle), space === null || space === void 0 ? void 0 : space.style), style2)
    }, otherProps), /* @__PURE__ */ React299.createElement(SpaceContextProvider, {
      value: spaceContext
    }, nodes)));
  });
  if (true) {
    Space.displayName = "Space";
  }
  var CompoundedSpace = Space;
  CompoundedSpace.Compact = Compact_default;
  var space_default = CompoundedSpace;

  // node_modules/antd/es/dropdown/dropdown-button.js
  var __rest37 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var DropdownButton = (props) => {
    const {
      getPopupContainer: getContextPopupContainer,
      getPrefixCls,
      direction
    } = React300.useContext(ConfigContext);
    const {
      prefixCls: customizePrefixCls,
      type: type4 = "default",
      danger,
      disabled,
      loading,
      onClick,
      htmlType,
      children,
      className,
      menu,
      arrow,
      autoFocus,
      overlay,
      trigger,
      align,
      open,
      onOpenChange,
      placement,
      getPopupContainer,
      href,
      icon = /* @__PURE__ */ React300.createElement(EllipsisOutlined_default2, null),
      title,
      buttonsRender = (buttons) => buttons,
      mouseEnterDelay,
      mouseLeaveDelay,
      overlayClassName,
      overlayStyle,
      destroyPopupOnHide,
      dropdownRender
    } = props, restProps = __rest37(props, ["prefixCls", "type", "danger", "disabled", "loading", "onClick", "htmlType", "children", "className", "menu", "arrow", "autoFocus", "overlay", "trigger", "align", "open", "onOpenChange", "placement", "getPopupContainer", "href", "icon", "title", "buttonsRender", "mouseEnterDelay", "mouseLeaveDelay", "overlayClassName", "overlayStyle", "destroyPopupOnHide", "dropdownRender"]);
    const prefixCls = getPrefixCls("dropdown", customizePrefixCls);
    const buttonPrefixCls = `${prefixCls}-button`;
    const dropdownProps = {
      menu,
      arrow,
      autoFocus,
      align,
      disabled,
      trigger: disabled ? [] : trigger,
      onOpenChange,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      mouseEnterDelay,
      mouseLeaveDelay,
      overlayClassName,
      overlayStyle,
      destroyPopupOnHide,
      dropdownRender
    };
    const {
      compactSize,
      compactItemClassnames
    } = useCompactItemContext(prefixCls, direction);
    const classes = (0, import_classnames102.default)(buttonPrefixCls, compactItemClassnames, className);
    if ("overlay" in props) {
      dropdownProps.overlay = overlay;
    }
    if ("open" in props) {
      dropdownProps.open = open;
    }
    if ("placement" in props) {
      dropdownProps.placement = placement;
    } else {
      dropdownProps.placement = direction === "rtl" ? "bottomLeft" : "bottomRight";
    }
    const leftButton = /* @__PURE__ */ React300.createElement(button_default2, {
      type: type4,
      danger,
      disabled,
      loading,
      onClick,
      htmlType,
      href,
      title
    }, children);
    const rightButton = /* @__PURE__ */ React300.createElement(button_default2, {
      type: type4,
      danger,
      icon
    });
    const [leftButtonToRender, rightButtonToRender] = buttonsRender([leftButton, rightButton]);
    return /* @__PURE__ */ React300.createElement(space_default.Compact, Object.assign({
      className: classes,
      size: compactSize,
      block: true
    }, restProps), leftButtonToRender, /* @__PURE__ */ React300.createElement(dropdown_default2, Object.assign({}, dropdownProps), rightButtonToRender));
  };
  DropdownButton.__ANT_BUTTON = true;
  var dropdown_button_default = DropdownButton;

  // node_modules/antd/es/dropdown/index.js
  var Dropdown3 = dropdown_default2;
  Dropdown3.Button = dropdown_button_default;
  var dropdown_default3 = Dropdown3;

  // node_modules/antd/es/form/ErrorList.js
  var import_classnames103 = __toESM(require_classnames());
  var React302 = __toESM(require_react());
  var import_react94 = __toESM(require_react());

  // node_modules/antd/es/form/hooks/useDebounce.js
  var React301 = __toESM(require_react());
  function useDebounce(value) {
    const [cacheValue, setCacheValue] = React301.useState(value);
    React301.useEffect(() => {
      const timeout = setTimeout(() => {
        setCacheValue(value);
      }, value.length ? 0 : 10);
      return () => {
        clearTimeout(timeout);
      };
    }, [value]);
    return cacheValue;
  }

  // node_modules/antd/es/form/style/explain.js
  var genFormValidateMotionStyle = (token2) => {
    const {
      componentCls
    } = token2;
    const helpCls = `${componentCls}-show-help`;
    const helpItemCls = `${componentCls}-show-help-item`;
    return {
      [helpCls]: {
        // Explain holder
        transition: `opacity ${token2.motionDurationSlow} ${token2.motionEaseInOut}`,
        "&-appear, &-enter": {
          opacity: 0,
          "&-active": {
            opacity: 1
          }
        },
        "&-leave": {
          opacity: 1,
          "&-active": {
            opacity: 0
          }
        },
        // Explain
        [helpItemCls]: {
          overflow: "hidden",
          transition: `height ${token2.motionDurationSlow} ${token2.motionEaseInOut},
                     opacity ${token2.motionDurationSlow} ${token2.motionEaseInOut},
                     transform ${token2.motionDurationSlow} ${token2.motionEaseInOut} !important`,
          [`&${helpItemCls}-appear, &${helpItemCls}-enter`]: {
            transform: `translateY(-5px)`,
            opacity: 0,
            [`&-active`]: {
              transform: "translateY(0)",
              opacity: 1
            }
          },
          [`&${helpItemCls}-leave-active`]: {
            transform: `translateY(-5px)`
          }
        }
      }
    };
  };
  var explain_default = genFormValidateMotionStyle;

  // node_modules/antd/es/form/style/index.js
  var resetForm = (token2) => ({
    legend: {
      display: "block",
      width: "100%",
      marginBottom: token2.marginLG,
      padding: 0,
      color: token2.colorTextDescription,
      fontSize: token2.fontSizeLG,
      lineHeight: "inherit",
      border: 0,
      borderBottom: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`
    },
    'input[type="search"]': {
      boxSizing: "border-box"
    },
    // Position radios and checkboxes better
    'input[type="radio"], input[type="checkbox"]': {
      lineHeight: "normal"
    },
    'input[type="file"]': {
      display: "block"
    },
    // Make range inputs behave like textual form controls
    'input[type="range"]': {
      display: "block",
      width: "100%"
    },
    // Make multiple select elements height not fixed
    "select[multiple], select[size]": {
      height: "auto"
    },
    // Focus for file, radio, and checkbox
    [`input[type='file']:focus,
  input[type='radio']:focus,
  input[type='checkbox']:focus`]: {
      outline: 0,
      boxShadow: `0 0 0 ${unit(token2.controlOutlineWidth)} ${token2.controlOutline}`
    },
    // Adjust output element
    output: {
      display: "block",
      paddingTop: 15,
      color: token2.colorText,
      fontSize: token2.fontSize,
      lineHeight: token2.lineHeight
    }
  });
  var genFormSize = (token2, height) => {
    const {
      formItemCls
    } = token2;
    return {
      [formItemCls]: {
        [`${formItemCls}-label > label`]: {
          height
        },
        [`${formItemCls}-control-input`]: {
          minHeight: height
        }
      }
    };
  };
  var genFormStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [token2.componentCls]: Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), resetForm(token2)), {
        [`${componentCls}-text`]: {
          display: "inline-block",
          paddingInlineEnd: token2.paddingSM
        },
        // ================================================================
        // =                             Size                             =
        // ================================================================
        "&-small": Object.assign({}, genFormSize(token2, token2.controlHeightSM)),
        "&-large": Object.assign({}, genFormSize(token2, token2.controlHeightLG))
      })
    };
  };
  var genFormItemStyle = (token2) => {
    const {
      formItemCls,
      iconCls,
      componentCls,
      rootPrefixCls,
      labelRequiredMarkColor,
      labelColor,
      labelFontSize,
      labelHeight,
      labelColonMarginInlineStart,
      labelColonMarginInlineEnd,
      itemMarginBottom
    } = token2;
    return {
      [formItemCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        marginBottom: itemMarginBottom,
        verticalAlign: "top",
        "&-with-help": {
          transition: "none"
        },
        [`&-hidden,
        &-hidden.${rootPrefixCls}-row`]: {
          // https://github.com/ant-design/ant-design/issues/26141
          display: "none"
        },
        "&-has-warning": {
          [`${formItemCls}-split`]: {
            color: token2.colorError
          }
        },
        "&-has-error": {
          [`${formItemCls}-split`]: {
            color: token2.colorWarning
          }
        },
        // ==============================================================
        // =                            Label                           =
        // ==============================================================
        [`${formItemCls}-label`]: {
          flexGrow: 0,
          overflow: "hidden",
          whiteSpace: "nowrap",
          textAlign: "end",
          verticalAlign: "middle",
          "&-left": {
            textAlign: "start"
          },
          "&-wrap": {
            overflow: "unset",
            lineHeight: token2.lineHeight,
            whiteSpace: "unset"
          },
          "> label": {
            position: "relative",
            display: "inline-flex",
            alignItems: "center",
            maxWidth: "100%",
            height: labelHeight,
            color: labelColor,
            fontSize: labelFontSize,
            [`> ${iconCls}`]: {
              fontSize: token2.fontSize,
              verticalAlign: "top"
            },
            // Required mark
            [`&${formItemCls}-required:not(${formItemCls}-required-mark-optional)::before`]: {
              display: "inline-block",
              marginInlineEnd: token2.marginXXS,
              color: labelRequiredMarkColor,
              fontSize: token2.fontSize,
              fontFamily: "SimSun, sans-serif",
              lineHeight: 1,
              content: '"*"',
              [`${componentCls}-hide-required-mark &`]: {
                display: "none"
              }
            },
            // Optional mark
            [`${formItemCls}-optional`]: {
              display: "inline-block",
              marginInlineStart: token2.marginXXS,
              color: token2.colorTextDescription,
              [`${componentCls}-hide-required-mark &`]: {
                display: "none"
              }
            },
            // Optional mark
            [`${formItemCls}-tooltip`]: {
              color: token2.colorTextDescription,
              cursor: "help",
              writingMode: "horizontal-tb",
              marginInlineStart: token2.marginXXS
            },
            "&::after": {
              content: '":"',
              position: "relative",
              marginBlock: 0,
              marginInlineStart: labelColonMarginInlineStart,
              marginInlineEnd: labelColonMarginInlineEnd
            },
            [`&${formItemCls}-no-colon::after`]: {
              content: '"\\a0"'
            }
          }
        },
        // ==============================================================
        // =                            Input                           =
        // ==============================================================
        [`${formItemCls}-control`]: {
          ["--ant-display"]: "flex",
          flexDirection: "column",
          flexGrow: 1,
          [`&:first-child:not([class^="'${rootPrefixCls}-col-'"]):not([class*="' ${rootPrefixCls}-col-'"])`]: {
            width: "100%"
          },
          "&-input": {
            position: "relative",
            display: "flex",
            alignItems: "center",
            minHeight: token2.controlHeight,
            "&-content": {
              flex: "auto",
              maxWidth: "100%"
            }
          }
        },
        // ==============================================================
        // =                           Explain                          =
        // ==============================================================
        [formItemCls]: {
          "&-explain, &-extra": {
            clear: "both",
            color: token2.colorTextDescription,
            fontSize: token2.fontSize,
            lineHeight: token2.lineHeight
          },
          "&-explain-connected": {
            width: "100%"
          },
          "&-extra": {
            minHeight: token2.controlHeightSM,
            transition: `color ${token2.motionDurationMid} ${token2.motionEaseOut}`
            // sync input color transition
          },
          "&-explain": {
            "&-error": {
              color: token2.colorError
            },
            "&-warning": {
              color: token2.colorWarning
            }
          }
        },
        [`&-with-help ${formItemCls}-explain`]: {
          height: "auto",
          opacity: 1
        },
        // ==============================================================
        // =                        Feedback Icon                       =
        // ==============================================================
        [`${formItemCls}-feedback-icon`]: {
          fontSize: token2.fontSize,
          textAlign: "center",
          visibility: "visible",
          animationName: zoomIn,
          animationDuration: token2.motionDurationMid,
          animationTimingFunction: token2.motionEaseOutBack,
          pointerEvents: "none",
          "&-success": {
            color: token2.colorSuccess
          },
          "&-error": {
            color: token2.colorError
          },
          "&-warning": {
            color: token2.colorWarning
          },
          "&-validating": {
            color: token2.colorPrimary
          }
        }
      })
    };
  };
  var genHorizontalStyle = (token2) => {
    const {
      componentCls,
      formItemCls
    } = token2;
    return {
      [`${componentCls}-horizontal`]: {
        [`${formItemCls}-label`]: {
          flexGrow: 0
        },
        [`${formItemCls}-control`]: {
          flex: "1 1 0",
          // https://github.com/ant-design/ant-design/issues/32777
          // https://github.com/ant-design/ant-design/issues/33773
          minWidth: 0
        },
        // Do not change this to `ant-col-24`! `-24` match all the responsive rules
        // https://github.com/ant-design/ant-design/issues/32980
        // https://github.com/ant-design/ant-design/issues/34903
        // https://github.com/ant-design/ant-design/issues/44538
        [`${formItemCls}-label[class$='-24'], ${formItemCls}-label[class*='-24 ']`]: {
          [`& + ${formItemCls}-control`]: {
            minWidth: "unset"
          }
        }
      }
    };
  };
  var genInlineStyle = (token2) => {
    const {
      componentCls,
      formItemCls
    } = token2;
    return {
      [`${componentCls}-inline`]: {
        display: "flex",
        flexWrap: "wrap",
        [formItemCls]: {
          flex: "none",
          marginInlineEnd: token2.margin,
          marginBottom: 0,
          "&-row": {
            flexWrap: "nowrap"
          },
          [`> ${formItemCls}-label,
        > ${formItemCls}-control`]: {
            display: "inline-block",
            verticalAlign: "top"
          },
          [`> ${formItemCls}-label`]: {
            flex: "none"
          },
          [`${componentCls}-text`]: {
            display: "inline-block"
          },
          [`${formItemCls}-has-feedback`]: {
            display: "inline-block"
          }
        }
      }
    };
  };
  var makeVerticalLayoutLabel = (token2) => ({
    padding: token2.verticalLabelPadding,
    margin: token2.verticalLabelMargin,
    whiteSpace: "initial",
    textAlign: "start",
    "> label": {
      margin: 0,
      "&::after": {
        // https://github.com/ant-design/ant-design/issues/43538
        visibility: "hidden"
      }
    }
  });
  var makeVerticalLayout = (token2) => {
    const {
      componentCls,
      formItemCls,
      rootPrefixCls
    } = token2;
    return {
      [`${formItemCls} ${formItemCls}-label`]: makeVerticalLayoutLabel(token2),
      // ref: https://github.com/ant-design/ant-design/issues/45122
      [`${componentCls}:not(${componentCls}-inline)`]: {
        [formItemCls]: {
          flexWrap: "wrap",
          [`${formItemCls}-label, ${formItemCls}-control`]: {
            // When developer pass `xs: { span }`,
            // It should follow the `xs` screen config
            // ref: https://github.com/ant-design/ant-design/issues/44386
            [`&:not([class*=" ${rootPrefixCls}-col-xs"])`]: {
              flex: "0 0 100%",
              maxWidth: "100%"
            }
          }
        }
      }
    };
  };
  var genVerticalStyle = (token2) => {
    const {
      componentCls,
      formItemCls,
      rootPrefixCls
    } = token2;
    return {
      [`${componentCls}-vertical`]: {
        [formItemCls]: {
          "&-row": {
            flexDirection: "column"
          },
          "&-label > label": {
            height: "auto"
          },
          [`${componentCls}-item-control`]: {
            width: "100%"
          }
        }
      },
      [`${componentCls}-vertical ${formItemCls}-label,
      .${rootPrefixCls}-col-24${formItemCls}-label,
      .${rootPrefixCls}-col-xl-24${formItemCls}-label`]: makeVerticalLayoutLabel(token2),
      [`@media (max-width: ${unit(token2.screenXSMax)})`]: [makeVerticalLayout(token2), {
        [componentCls]: {
          [`.${rootPrefixCls}-col-xs-24${formItemCls}-label`]: makeVerticalLayoutLabel(token2)
        }
      }],
      [`@media (max-width: ${unit(token2.screenSMMax)})`]: {
        [componentCls]: {
          [`.${rootPrefixCls}-col-sm-24${formItemCls}-label`]: makeVerticalLayoutLabel(token2)
        }
      },
      [`@media (max-width: ${unit(token2.screenMDMax)})`]: {
        [componentCls]: {
          [`.${rootPrefixCls}-col-md-24${formItemCls}-label`]: makeVerticalLayoutLabel(token2)
        }
      },
      [`@media (max-width: ${unit(token2.screenLGMax)})`]: {
        [componentCls]: {
          [`.${rootPrefixCls}-col-lg-24${formItemCls}-label`]: makeVerticalLayoutLabel(token2)
        }
      }
    };
  };
  var prepareComponentToken13 = (token2) => ({
    labelRequiredMarkColor: token2.colorError,
    labelColor: token2.colorTextHeading,
    labelFontSize: token2.fontSize,
    labelHeight: token2.controlHeight,
    labelColonMarginInlineStart: token2.marginXXS / 2,
    labelColonMarginInlineEnd: token2.marginXS,
    itemMarginBottom: token2.marginLG,
    verticalLabelPadding: `0 0 ${token2.paddingXS}px`,
    verticalLabelMargin: 0
  });
  var prepareToken3 = (token2, rootPrefixCls) => {
    const formToken = merge2(token2, {
      formItemCls: `${token2.componentCls}-item`,
      rootPrefixCls
    });
    return formToken;
  };
  var style_default18 = genStyleHooks("Form", (token2, _ref) => {
    let {
      rootPrefixCls
    } = _ref;
    const formToken = prepareToken3(token2, rootPrefixCls);
    return [genFormStyle(formToken), genFormItemStyle(formToken), explain_default(formToken), genHorizontalStyle(formToken), genInlineStyle(formToken), genVerticalStyle(formToken), collapse_default(formToken), zoomIn];
  }, prepareComponentToken13, {
    // Let From style before the Grid
    // ref https://github.com/ant-design/ant-design/issues/44386
    order: -1e3
  });

  // node_modules/antd/es/form/ErrorList.js
  var EMPTY_LIST3 = [];
  function toErrorEntity(error, prefix, errorStatus) {
    let index2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    return {
      key: typeof error === "string" ? error : `${prefix}-${index2}`,
      error,
      errorStatus
    };
  }
  var ErrorList = (_ref) => {
    let {
      help,
      helpStatus,
      errors: errors2 = EMPTY_LIST3,
      warnings = EMPTY_LIST3,
      className: rootClassName,
      fieldId,
      onVisibleChanged
    } = _ref;
    const {
      prefixCls
    } = React302.useContext(FormItemPrefixContext);
    const baseClassName = `${prefixCls}-item-explain`;
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default18(prefixCls, rootCls);
    const collapseMotion = (0, import_react94.useMemo)(() => motion_default(prefixCls), [prefixCls]);
    const debounceErrors = useDebounce(errors2);
    const debounceWarnings = useDebounce(warnings);
    const fullKeyList = React302.useMemo(() => {
      if (help !== void 0 && help !== null) {
        return [toErrorEntity(help, "help", helpStatus)];
      }
      return [].concat(_toConsumableArray(debounceErrors.map((error, index2) => toErrorEntity(error, "error", "error", index2))), _toConsumableArray(debounceWarnings.map((warning8, index2) => toErrorEntity(warning8, "warning", "warning", index2))));
    }, [help, helpStatus, debounceErrors, debounceWarnings]);
    const helpProps = {};
    if (fieldId) {
      helpProps.id = `${fieldId}_help`;
    }
    return wrapCSSVar(/* @__PURE__ */ React302.createElement(es_default2, {
      motionDeadline: collapseMotion.motionDeadline,
      motionName: `${prefixCls}-show-help`,
      visible: !!fullKeyList.length,
      onVisibleChanged
    }, (holderProps) => {
      const {
        className: holderClassName,
        style: holderStyle
      } = holderProps;
      return /* @__PURE__ */ React302.createElement("div", Object.assign({}, helpProps, {
        className: (0, import_classnames103.default)(baseClassName, holderClassName, cssVarCls, rootCls, rootClassName, hashId),
        style: holderStyle,
        role: "alert"
      }), /* @__PURE__ */ React302.createElement(CSSMotionList_default, Object.assign({
        keys: fullKeyList
      }, motion_default(prefixCls), {
        motionName: `${prefixCls}-show-help-item`,
        component: false
      }), (itemProps) => {
        const {
          key,
          error,
          errorStatus,
          className: itemClassName,
          style: itemStyle
        } = itemProps;
        return /* @__PURE__ */ React302.createElement("div", {
          key,
          className: (0, import_classnames103.default)(itemClassName, {
            [`${baseClassName}-${errorStatus}`]: errorStatus
          }),
          style: itemStyle
        }, error);
      }));
    }));
  };
  var ErrorList_default = ErrorList;

  // node_modules/antd/es/form/Form.js
  var React304 = __toESM(require_react());
  var import_react96 = __toESM(require_react());
  var import_classnames104 = __toESM(require_classnames());

  // node_modules/antd/es/form/hooks/useForm.js
  var React303 = __toESM(require_react());

  // node_modules/antd/es/form/util.js
  var formItemNameBlackList = ["parentNode"];
  var defaultItemNamePrefixCls = "form_item";
  function toArray7(candidate) {
    if (candidate === void 0 || candidate === false)
      return [];
    return Array.isArray(candidate) ? candidate : [candidate];
  }
  function getFieldId(namePath, formName) {
    if (!namePath.length) {
      return void 0;
    }
    const mergedId = namePath.join("_");
    if (formName) {
      return `${formName}_${mergedId}`;
    }
    const isIllegalName = formItemNameBlackList.includes(mergedId);
    return isIllegalName ? `${defaultItemNamePrefixCls}_${mergedId}` : mergedId;
  }
  function getStatus(errors2, warnings, meta, defaultValidateStatus, hasFeedback, validateStatus) {
    let status = defaultValidateStatus;
    if (validateStatus !== void 0) {
      status = validateStatus;
    } else if (meta.validating) {
      status = "validating";
    } else if (errors2.length) {
      status = "error";
    } else if (warnings.length) {
      status = "warning";
    } else if (meta.touched || hasFeedback && meta.validated) {
      status = "success";
    }
    return status;
  }

  // node_modules/antd/es/form/hooks/useForm.js
  function toNamePathStr(name) {
    const namePath = toArray7(name);
    return namePath.join("_");
  }
  function useForm2(form) {
    const [rcForm] = useForm_default();
    const itemsRef = React303.useRef({});
    const wrapForm = React303.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {
      __INTERNAL__: {
        itemRef: (name) => (node2) => {
          const namePathStr = toNamePathStr(name);
          if (node2) {
            itemsRef.current[namePathStr] = node2;
          } else {
            delete itemsRef.current[namePathStr];
          }
        }
      },
      scrollToField: function(name) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        const namePath = toArray7(name);
        const fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);
        const node2 = fieldId ? document.getElementById(fieldId) : null;
        if (node2) {
          e2(node2, Object.assign({
            scrollMode: "if-needed",
            block: "nearest"
          }, options));
        }
      },
      getFieldInstance: (name) => {
        const namePathStr = toNamePathStr(name);
        return itemsRef.current[namePathStr];
      }
    }), [form, rcForm]);
    return [wrapForm];
  }

  // node_modules/antd/es/form/hooks/useFormWarning.js
  var import_react95 = __toESM(require_react());
  var names2 = {};
  function useFormWarning(_ref) {
    let {
      name
    } = _ref;
    const warning8 = devUseWarning("Form");
    (0, import_react95.useEffect)(() => {
      if (name) {
        names2[name] = (names2[name] || 0) + 1;
        true ? warning8(names2[name] <= 1, "usage", "There exist multiple Form with same `name`.") : void 0;
        return () => {
          names2[name] -= 1;
        };
      }
    }, [name]);
  }

  // node_modules/antd/es/form/Form.js
  var __rest38 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var InternalForm2 = (props, ref) => {
    const contextDisabled = React304.useContext(DisabledContext_default);
    const {
      getPrefixCls,
      direction,
      form: contextForm
    } = React304.useContext(ConfigContext);
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      size,
      disabled = contextDisabled,
      form,
      colon,
      labelAlign,
      labelWrap,
      labelCol,
      wrapperCol,
      hideRequiredMark,
      layout = "horizontal",
      scrollToFirstError,
      requiredMark,
      onFinishFailed,
      name,
      style: style2,
      feedbackIcons,
      variant
    } = props, restFormProps = __rest38(props, ["prefixCls", "className", "rootClassName", "size", "disabled", "form", "colon", "labelAlign", "labelWrap", "labelCol", "wrapperCol", "hideRequiredMark", "layout", "scrollToFirstError", "requiredMark", "onFinishFailed", "name", "style", "feedbackIcons", "variant"]);
    const mergedSize = useSize_default(size);
    const contextValidateMessages = React304.useContext(validateMessagesContext_default);
    if (true) {
      useFormWarning(props);
    }
    const mergedRequiredMark = (0, import_react96.useMemo)(() => {
      if (requiredMark !== void 0) {
        return requiredMark;
      }
      if (hideRequiredMark) {
        return false;
      }
      if (contextForm && contextForm.requiredMark !== void 0) {
        return contextForm.requiredMark;
      }
      return true;
    }, [hideRequiredMark, requiredMark, contextForm]);
    const mergedColon = colon !== null && colon !== void 0 ? colon : contextForm === null || contextForm === void 0 ? void 0 : contextForm.colon;
    const prefixCls = getPrefixCls("form", customizePrefixCls);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default18(prefixCls, rootCls);
    const formClassName = (0, import_classnames104.default)(prefixCls, `${prefixCls}-${layout}`, {
      [`${prefixCls}-hide-required-mark`]: mergedRequiredMark === false,
      [`${prefixCls}-rtl`]: direction === "rtl",
      [`${prefixCls}-${mergedSize}`]: mergedSize
    }, cssVarCls, rootCls, hashId, contextForm === null || contextForm === void 0 ? void 0 : contextForm.className, className, rootClassName);
    const [wrapForm] = useForm2(form);
    const {
      __INTERNAL__
    } = wrapForm;
    __INTERNAL__.name = name;
    const formContextValue = (0, import_react96.useMemo)(() => ({
      name,
      labelAlign,
      labelCol,
      labelWrap,
      wrapperCol,
      vertical: layout === "vertical",
      colon: mergedColon,
      requiredMark: mergedRequiredMark,
      itemRef: __INTERNAL__.itemRef,
      form: wrapForm,
      feedbackIcons
    }), [name, labelAlign, labelCol, wrapperCol, layout, mergedColon, mergedRequiredMark, wrapForm, feedbackIcons]);
    React304.useImperativeHandle(ref, () => wrapForm);
    const scrollToField = (options, fieldName) => {
      if (options) {
        let defaultScrollToFirstError = {
          block: "nearest"
        };
        if (typeof options === "object") {
          defaultScrollToFirstError = options;
        }
        wrapForm.scrollToField(fieldName, defaultScrollToFirstError);
      }
    };
    const onInternalFinishFailed = (errorInfo) => {
      onFinishFailed === null || onFinishFailed === void 0 ? void 0 : onFinishFailed(errorInfo);
      if (errorInfo.errorFields.length) {
        const fieldName = errorInfo.errorFields[0].name;
        if (scrollToFirstError !== void 0) {
          scrollToField(scrollToFirstError, fieldName);
          return;
        }
        if (contextForm && contextForm.scrollToFirstError !== void 0) {
          scrollToField(contextForm.scrollToFirstError, fieldName);
        }
      }
    };
    return wrapCSSVar(/* @__PURE__ */ React304.createElement(VariantContext.Provider, {
      value: variant
    }, /* @__PURE__ */ React304.createElement(DisabledContextProvider, {
      disabled
    }, /* @__PURE__ */ React304.createElement(SizeContext_default.Provider, {
      value: mergedSize
    }, /* @__PURE__ */ React304.createElement(FormProvider3, {
      // This is not list in API, we pass with spread
      validateMessages: contextValidateMessages
    }, /* @__PURE__ */ React304.createElement(FormContext2.Provider, {
      value: formContextValue
    }, /* @__PURE__ */ React304.createElement(es_default5, Object.assign({
      id: name
    }, restFormProps, {
      name,
      onFinishFailed: onInternalFinishFailed,
      form: wrapForm,
      style: Object.assign(Object.assign({}, contextForm === null || contextForm === void 0 ? void 0 : contextForm.style), style2),
      className: formClassName
    }))))))));
  };
  var Form3 = /* @__PURE__ */ React304.forwardRef(InternalForm2);
  if (true) {
    Form3.displayName = "Form";
  }
  var Form_default2 = Form3;

  // node_modules/antd/es/form/FormItem/index.js
  var React312 = __toESM(require_react());
  var import_classnames109 = __toESM(require_classnames());

  // node_modules/antd/es/form/hooks/useChildren.js
  function useChildren2(children) {
    if (typeof children === "function") {
      return children;
    }
    const childList = toArray(children);
    return childList.length <= 1 ? childList[0] : childList;
  }

  // node_modules/antd/es/form/hooks/useFormItemStatus.js
  var import_react97 = __toESM(require_react());
  var useFormItemStatus = () => {
    const {
      status,
      errors: errors2 = [],
      warnings = []
    } = (0, import_react97.useContext)(FormItemInputContext);
    if (true) {
      const warning8 = devUseWarning("Form.Item");
      true ? warning8(status !== void 0, "usage", "Form.Item.useStatus should be used under Form.Item component. For more information: https://u.ant.design/form-item-usestatus") : void 0;
    }
    return {
      status,
      errors: errors2,
      warnings
    };
  };
  useFormItemStatus.Context = FormItemInputContext;
  var useFormItemStatus_default = useFormItemStatus;

  // node_modules/antd/es/form/hooks/useFrameState.js
  var React305 = __toESM(require_react());
  var import_react98 = __toESM(require_react());
  function useFrameState(defaultValue) {
    const [value, setValue] = React305.useState(defaultValue);
    const frameRef = (0, import_react98.useRef)(null);
    const batchRef = (0, import_react98.useRef)([]);
    const destroyRef = (0, import_react98.useRef)(false);
    React305.useEffect(() => {
      destroyRef.current = false;
      return () => {
        destroyRef.current = true;
        raf_default.cancel(frameRef.current);
        frameRef.current = null;
      };
    }, []);
    function setFrameValue(updater) {
      if (destroyRef.current) {
        return;
      }
      if (frameRef.current === null) {
        batchRef.current = [];
        frameRef.current = raf_default(() => {
          frameRef.current = null;
          setValue((prevValue) => {
            let current2 = prevValue;
            batchRef.current.forEach((func) => {
              current2 = func(current2);
            });
            return current2;
          });
        });
      }
      batchRef.current.push(updater);
    }
    return [value, setFrameValue];
  }

  // node_modules/antd/es/form/hooks/useItemRef.js
  var React306 = __toESM(require_react());
  function useItemRef() {
    const {
      itemRef
    } = React306.useContext(FormContext2);
    const cacheRef = React306.useRef({});
    function getRef(name, children) {
      const childrenRef = children && typeof children === "object" && children.ref;
      const nameStr = name.join("_");
      if (cacheRef.current.name !== nameStr || cacheRef.current.originRef !== childrenRef) {
        cacheRef.current.name = nameStr;
        cacheRef.current.originRef = childrenRef;
        cacheRef.current.ref = composeRef(itemRef(name), childrenRef);
      }
      return cacheRef.current.ref;
    }
    return getRef;
  }

  // node_modules/antd/es/form/FormItem/ItemHolder.js
  var React311 = __toESM(require_react());
  var import_classnames108 = __toESM(require_classnames());

  // node_modules/antd/es/form/FormItemInput.js
  var React307 = __toESM(require_react());
  var import_classnames105 = __toESM(require_classnames());

  // node_modules/antd/es/form/style/fallbackCmp.js
  var genFallbackStyle = (token2) => {
    const {
      formItemCls
    } = token2;
    return {
      "@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none)": {
        // Fallback for IE, safe to remove we not support it anymore
        [`${formItemCls}-control`]: {
          display: "flex"
        }
      }
    };
  };
  var fallbackCmp_default = genSubStyleComponent(["Form", "item-item"], (token2, _ref) => {
    let {
      rootPrefixCls
    } = _ref;
    const formToken = prepareToken3(token2, rootPrefixCls);
    return [genFallbackStyle(formToken)];
  });

  // node_modules/antd/es/form/FormItemInput.js
  var FormItemInput = (props) => {
    const {
      prefixCls,
      status,
      wrapperCol,
      children,
      errors: errors2,
      warnings,
      _internalItemRender: formItemRender,
      extra,
      help,
      fieldId,
      marginBottom,
      onErrorVisibleChanged
    } = props;
    const baseClassName = `${prefixCls}-item`;
    const formContext = React307.useContext(FormContext2);
    const mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};
    const className = (0, import_classnames105.default)(`${baseClassName}-control`, mergedWrapperCol.className);
    const subFormContext = React307.useMemo(() => Object.assign({}, formContext), [formContext]);
    delete subFormContext.labelCol;
    delete subFormContext.wrapperCol;
    const inputDom = /* @__PURE__ */ React307.createElement("div", {
      className: `${baseClassName}-control-input`
    }, /* @__PURE__ */ React307.createElement("div", {
      className: `${baseClassName}-control-input-content`
    }, children));
    const formItemContext = React307.useMemo(() => ({
      prefixCls,
      status
    }), [prefixCls, status]);
    const errorListDom = marginBottom !== null || errors2.length || warnings.length ? /* @__PURE__ */ React307.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "nowrap"
      }
    }, /* @__PURE__ */ React307.createElement(FormItemPrefixContext.Provider, {
      value: formItemContext
    }, /* @__PURE__ */ React307.createElement(ErrorList_default, {
      fieldId,
      errors: errors2,
      warnings,
      help,
      helpStatus: status,
      className: `${baseClassName}-explain-connected`,
      onVisibleChanged: onErrorVisibleChanged
    })), !!marginBottom && /* @__PURE__ */ React307.createElement("div", {
      style: {
        width: 0,
        height: marginBottom
      }
    })) : null;
    const extraProps = {};
    if (fieldId) {
      extraProps.id = `${fieldId}_extra`;
    }
    const extraDom = extra ? /* @__PURE__ */ React307.createElement("div", Object.assign({}, extraProps, {
      className: `${baseClassName}-extra`
    }), extra) : null;
    const dom = formItemRender && formItemRender.mark === "pro_table_render" && formItemRender.render ? formItemRender.render(props, {
      input: inputDom,
      errorList: errorListDom,
      extra: extraDom
    }) : /* @__PURE__ */ React307.createElement(React307.Fragment, null, inputDom, errorListDom, extraDom);
    return /* @__PURE__ */ React307.createElement(FormContext2.Provider, {
      value: subFormContext
    }, /* @__PURE__ */ React307.createElement(col_default, Object.assign({}, mergedWrapperCol, {
      className
    }), dom), /* @__PURE__ */ React307.createElement(fallbackCmp_default, {
      prefixCls
    }));
  };
  var FormItemInput_default = FormItemInput;

  // node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js
  var React308 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/QuestionCircleOutlined.js
  var QuestionCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z" } }] }, "name": "question-circle", "theme": "outlined" };
  var QuestionCircleOutlined_default = QuestionCircleOutlined;

  // node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js
  var QuestionCircleOutlined2 = function QuestionCircleOutlined3(props, ref) {
    return /* @__PURE__ */ React308.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: QuestionCircleOutlined_default
    }));
  };
  if (true) {
    QuestionCircleOutlined2.displayName = "QuestionCircleOutlined";
  }
  var QuestionCircleOutlined_default2 = /* @__PURE__ */ React308.forwardRef(QuestionCircleOutlined2);

  // node_modules/antd/es/form/FormItemLabel.js
  var import_classnames106 = __toESM(require_classnames());
  var React309 = __toESM(require_react());
  var __rest39 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function toTooltipProps(tooltip) {
    if (!tooltip) {
      return null;
    }
    if (typeof tooltip === "object" && !/* @__PURE__ */ React309.isValidElement(tooltip)) {
      return tooltip;
    }
    return {
      title: tooltip
    };
  }
  var FormItemLabel = (_ref) => {
    let {
      prefixCls,
      label,
      htmlFor,
      labelCol,
      labelAlign,
      colon,
      required: required4,
      requiredMark,
      tooltip
    } = _ref;
    var _a;
    const [formLocale] = useLocale_default("Form");
    const {
      vertical,
      labelAlign: contextLabelAlign,
      labelCol: contextLabelCol,
      labelWrap,
      colon: contextColon
    } = React309.useContext(FormContext2);
    if (!label) {
      return null;
    }
    const mergedLabelCol = labelCol || contextLabelCol || {};
    const mergedLabelAlign = labelAlign || contextLabelAlign;
    const labelClsBasic = `${prefixCls}-item-label`;
    const labelColClassName = (0, import_classnames106.default)(labelClsBasic, mergedLabelAlign === "left" && `${labelClsBasic}-left`, mergedLabelCol.className, {
      [`${labelClsBasic}-wrap`]: !!labelWrap
    });
    let labelChildren = label;
    const computedColon = colon === true || contextColon !== false && colon !== false;
    const haveColon = computedColon && !vertical;
    if (haveColon && typeof label === "string" && label.trim() !== "") {
      labelChildren = label.replace(/[:|：]\s*$/, "");
    }
    const tooltipProps = toTooltipProps(tooltip);
    if (tooltipProps) {
      const {
        icon = /* @__PURE__ */ React309.createElement(QuestionCircleOutlined_default2, null)
      } = tooltipProps, restTooltipProps = __rest39(tooltipProps, ["icon"]);
      const tooltipNode = /* @__PURE__ */ React309.createElement(tooltip_default, Object.assign({}, restTooltipProps), /* @__PURE__ */ React309.cloneElement(icon, {
        className: `${prefixCls}-item-tooltip`,
        title: "",
        onClick: (e3) => {
          e3.preventDefault();
        },
        tabIndex: null
      }));
      labelChildren = /* @__PURE__ */ React309.createElement(React309.Fragment, null, labelChildren, tooltipNode);
    }
    const isOptionalMark = requiredMark === "optional";
    const isRenderMark = typeof requiredMark === "function";
    if (isRenderMark) {
      labelChildren = requiredMark(labelChildren, {
        required: !!required4
      });
    } else if (isOptionalMark && !required4) {
      labelChildren = /* @__PURE__ */ React309.createElement(React309.Fragment, null, labelChildren, /* @__PURE__ */ React309.createElement("span", {
        className: `${prefixCls}-item-optional`,
        title: ""
      }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = en_US_default6.Form) === null || _a === void 0 ? void 0 : _a.optional)));
    }
    const labelClassName = (0, import_classnames106.default)({
      [`${prefixCls}-item-required`]: required4,
      [`${prefixCls}-item-required-mark-optional`]: isOptionalMark || isRenderMark,
      [`${prefixCls}-item-no-colon`]: !computedColon
    });
    return /* @__PURE__ */ React309.createElement(col_default, Object.assign({}, mergedLabelCol, {
      className: labelColClassName
    }), /* @__PURE__ */ React309.createElement("label", {
      htmlFor,
      className: labelClassName,
      title: typeof label === "string" ? label : ""
    }, labelChildren));
  };
  var FormItemLabel_default = FormItemLabel;

  // node_modules/antd/es/form/FormItem/StatusProvider.js
  var React310 = __toESM(require_react());
  var import_classnames107 = __toESM(require_classnames());
  var iconMap = {
    success: CheckCircleFilled_default2,
    warning: ExclamationCircleFilled_default2,
    error: CloseCircleFilled_default2,
    validating: LoadingOutlined_default2
  };
  function StatusProvider(_ref) {
    let {
      children,
      errors: errors2,
      warnings,
      hasFeedback,
      validateStatus,
      prefixCls,
      meta,
      noStyle
    } = _ref;
    const itemPrefixCls = `${prefixCls}-item`;
    const {
      feedbackIcons
    } = React310.useContext(FormContext2);
    const mergedValidateStatus = getStatus(errors2, warnings, meta, null, !!hasFeedback, validateStatus);
    const {
      isFormItemInput: parentIsFormItemInput,
      status: parentStatus,
      hasFeedback: parentHasFeedback,
      feedbackIcon: parentFeedbackIcon
    } = React310.useContext(FormItemInputContext);
    const formItemStatusContext = React310.useMemo(() => {
      var _a;
      let feedbackIcon;
      if (hasFeedback) {
        const customIcons = hasFeedback !== true && hasFeedback.icons || feedbackIcons;
        const customIconNode = mergedValidateStatus && ((_a = customIcons === null || customIcons === void 0 ? void 0 : customIcons({
          status: mergedValidateStatus,
          errors: errors2,
          warnings
        })) === null || _a === void 0 ? void 0 : _a[mergedValidateStatus]);
        const IconNode = mergedValidateStatus && iconMap[mergedValidateStatus];
        feedbackIcon = customIconNode !== false && IconNode ? /* @__PURE__ */ React310.createElement("span", {
          className: (0, import_classnames107.default)(`${itemPrefixCls}-feedback-icon`, `${itemPrefixCls}-feedback-icon-${mergedValidateStatus}`)
        }, customIconNode || /* @__PURE__ */ React310.createElement(IconNode, null)) : null;
      }
      const context = {
        status: mergedValidateStatus || "",
        errors: errors2,
        warnings,
        hasFeedback: !!hasFeedback,
        feedbackIcon,
        isFormItemInput: true
      };
      if (noStyle) {
        context.status = (mergedValidateStatus !== null && mergedValidateStatus !== void 0 ? mergedValidateStatus : parentStatus) || "";
        context.isFormItemInput = parentIsFormItemInput;
        context.hasFeedback = !!(hasFeedback !== null && hasFeedback !== void 0 ? hasFeedback : parentHasFeedback);
        context.feedbackIcon = hasFeedback !== void 0 ? context.feedbackIcon : parentFeedbackIcon;
      }
      return context;
    }, [mergedValidateStatus, hasFeedback, noStyle, parentIsFormItemInput, parentStatus]);
    return /* @__PURE__ */ React310.createElement(FormItemInputContext.Provider, {
      value: formItemStatusContext
    }, children);
  }

  // node_modules/antd/es/form/FormItem/ItemHolder.js
  var __rest40 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function ItemHolder(props) {
    const {
      prefixCls,
      className,
      rootClassName,
      style: style2,
      help,
      errors: errors2,
      warnings,
      validateStatus,
      meta,
      hasFeedback,
      hidden,
      children,
      fieldId,
      required: required4,
      isRequired,
      onSubItemMetaChange
    } = props, restProps = __rest40(props, ["prefixCls", "className", "rootClassName", "style", "help", "errors", "warnings", "validateStatus", "meta", "hasFeedback", "hidden", "children", "fieldId", "required", "isRequired", "onSubItemMetaChange"]);
    const itemPrefixCls = `${prefixCls}-item`;
    const {
      requiredMark
    } = React311.useContext(FormContext2);
    const itemRef = React311.useRef(null);
    const debounceErrors = useDebounce(errors2);
    const debounceWarnings = useDebounce(warnings);
    const hasHelp = help !== void 0 && help !== null;
    const hasError2 = !!(hasHelp || errors2.length || warnings.length);
    const isOnScreen = !!itemRef.current && isVisible_default(itemRef.current);
    const [marginBottom, setMarginBottom] = React311.useState(null);
    useLayoutEffect_default(() => {
      if (hasError2 && itemRef.current) {
        const itemStyle = getComputedStyle(itemRef.current);
        setMarginBottom(parseInt(itemStyle.marginBottom, 10));
      }
    }, [hasError2, isOnScreen]);
    const onErrorVisibleChanged = (nextVisible) => {
      if (!nextVisible) {
        setMarginBottom(null);
      }
    };
    const getValidateState = function() {
      let isDebounce = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      const _errors = isDebounce ? debounceErrors : meta.errors;
      const _warnings = isDebounce ? debounceWarnings : meta.warnings;
      return getStatus(_errors, _warnings, meta, "", !!hasFeedback, validateStatus);
    };
    const mergedValidateStatus = getValidateState();
    const itemClassName = (0, import_classnames108.default)(itemPrefixCls, className, rootClassName, {
      [`${itemPrefixCls}-with-help`]: hasHelp || debounceErrors.length || debounceWarnings.length,
      // Status
      [`${itemPrefixCls}-has-feedback`]: mergedValidateStatus && hasFeedback,
      [`${itemPrefixCls}-has-success`]: mergedValidateStatus === "success",
      [`${itemPrefixCls}-has-warning`]: mergedValidateStatus === "warning",
      [`${itemPrefixCls}-has-error`]: mergedValidateStatus === "error",
      [`${itemPrefixCls}-is-validating`]: mergedValidateStatus === "validating",
      [`${itemPrefixCls}-hidden`]: hidden
    });
    return /* @__PURE__ */ React311.createElement("div", {
      className: itemClassName,
      style: style2,
      ref: itemRef
    }, /* @__PURE__ */ React311.createElement(row_default, Object.assign({
      className: `${itemPrefixCls}-row`
    }, omit(restProps, [
      "_internalItemRender",
      "colon",
      "dependencies",
      "extra",
      "fieldKey",
      "getValueFromEvent",
      "getValueProps",
      "htmlFor",
      "id",
      // It is deprecated because `htmlFor` is its replacement.
      "initialValue",
      "isListField",
      "label",
      "labelAlign",
      "labelCol",
      "labelWrap",
      "messageVariables",
      "name",
      "normalize",
      "noStyle",
      "preserve",
      "requiredMark",
      "rules",
      "shouldUpdate",
      "trigger",
      "tooltip",
      "validateFirst",
      "validateTrigger",
      "valuePropName",
      "wrapperCol",
      "validateDebounce"
    ])), /* @__PURE__ */ React311.createElement(FormItemLabel_default, Object.assign({
      htmlFor: fieldId
    }, props, {
      requiredMark,
      required: required4 !== null && required4 !== void 0 ? required4 : isRequired,
      prefixCls
    })), /* @__PURE__ */ React311.createElement(FormItemInput_default, Object.assign({}, props, meta, {
      errors: debounceErrors,
      warnings: debounceWarnings,
      prefixCls,
      status: mergedValidateStatus,
      help,
      marginBottom,
      onErrorVisibleChanged
    }), /* @__PURE__ */ React311.createElement(NoStyleItemContext.Provider, {
      value: onSubItemMetaChange
    }, /* @__PURE__ */ React311.createElement(StatusProvider, {
      prefixCls,
      meta,
      errors: meta.errors,
      warnings: meta.warnings,
      hasFeedback,
      // Already calculated
      validateStatus: mergedValidateStatus
    }, children)))), !!marginBottom && /* @__PURE__ */ React311.createElement("div", {
      className: `${itemPrefixCls}-margin-offset`,
      style: {
        marginBottom: -marginBottom
      }
    }));
  }

  // node_modules/antd/es/form/FormItem/index.js
  var NAME_SPLIT = "__SPLIT__";
  function isSimilarControl(a, b) {
    const keysA = Object.keys(a);
    const keysB = Object.keys(b);
    return keysA.length === keysB.length && keysA.every((key) => {
      const propValueA = a[key];
      const propValueB = b[key];
      return propValueA === propValueB || typeof propValueA === "function" || typeof propValueB === "function";
    });
  }
  var MemoInput = /* @__PURE__ */ React312.memo((_ref) => {
    let {
      children
    } = _ref;
    return children;
  }, (prev2, next2) => isSimilarControl(prev2.control, next2.control) && prev2.update === next2.update && prev2.childProps.length === next2.childProps.length && prev2.childProps.every((value, index2) => value === next2.childProps[index2]));
  function genEmptyMeta() {
    return {
      errors: [],
      warnings: [],
      touched: false,
      validating: false,
      name: [],
      validated: false
    };
  }
  function InternalFormItem(props) {
    const {
      name,
      noStyle,
      className,
      dependencies,
      prefixCls: customizePrefixCls,
      shouldUpdate,
      rules: rules2,
      children,
      required: required4,
      label,
      messageVariables,
      trigger = "onChange",
      validateTrigger,
      hidden,
      help
    } = props;
    const {
      getPrefixCls
    } = React312.useContext(ConfigContext);
    const {
      name: formName
    } = React312.useContext(FormContext2);
    const mergedChildren = useChildren2(children);
    const isRenderProps = typeof mergedChildren === "function";
    const notifyParentMetaChange = React312.useContext(NoStyleItemContext);
    const {
      validateTrigger: contextValidateTrigger
    } = React312.useContext(FieldContext_default);
    const mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : contextValidateTrigger;
    const hasName = !(name === void 0 || name === null);
    const prefixCls = getPrefixCls("form", customizePrefixCls);
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default18(prefixCls, rootCls);
    const warning8 = devUseWarning("Form.Item");
    if (true) {
      true ? warning8(name !== null, "usage", "`null` is passed as `name` property") : void 0;
    }
    const listContext = React312.useContext(ListContext_default);
    const fieldKeyPathRef = React312.useRef();
    const [subFieldErrors, setSubFieldErrors] = useFrameState({});
    const [meta, setMeta] = useSafeState(() => genEmptyMeta());
    const onMetaChange = (nextMeta) => {
      const keyInfo = listContext === null || listContext === void 0 ? void 0 : listContext.getKey(nextMeta.name);
      setMeta(nextMeta.destroy ? genEmptyMeta() : nextMeta, true);
      if (noStyle && help !== false && notifyParentMetaChange) {
        let namePath = nextMeta.name;
        if (!nextMeta.destroy) {
          if (keyInfo !== void 0) {
            const [fieldKey, restPath] = keyInfo;
            namePath = [fieldKey].concat(_toConsumableArray(restPath));
            fieldKeyPathRef.current = namePath;
          }
        } else {
          namePath = fieldKeyPathRef.current || namePath;
        }
        notifyParentMetaChange(nextMeta, namePath);
      }
    };
    const onSubItemMetaChange = (subMeta, uniqueKeys) => {
      setSubFieldErrors((prevSubFieldErrors) => {
        const clone = Object.assign({}, prevSubFieldErrors);
        const mergedNamePath = [].concat(_toConsumableArray(subMeta.name.slice(0, -1)), _toConsumableArray(uniqueKeys));
        const mergedNameKey = mergedNamePath.join(NAME_SPLIT);
        if (subMeta.destroy) {
          delete clone[mergedNameKey];
        } else {
          clone[mergedNameKey] = subMeta;
        }
        return clone;
      });
    };
    const [mergedErrors, mergedWarnings] = React312.useMemo(() => {
      const errorList = _toConsumableArray(meta.errors);
      const warningList = _toConsumableArray(meta.warnings);
      Object.values(subFieldErrors).forEach((subFieldError) => {
        errorList.push.apply(errorList, _toConsumableArray(subFieldError.errors || []));
        warningList.push.apply(warningList, _toConsumableArray(subFieldError.warnings || []));
      });
      return [errorList, warningList];
    }, [subFieldErrors, meta.errors, meta.warnings]);
    const getItemRef = useItemRef();
    function renderLayout(baseChildren, fieldId, isRequired) {
      if (noStyle && !hidden) {
        return /* @__PURE__ */ React312.createElement(StatusProvider, {
          prefixCls,
          hasFeedback: props.hasFeedback,
          validateStatus: props.validateStatus,
          meta,
          errors: mergedErrors,
          warnings: mergedWarnings,
          noStyle: true
        }, baseChildren);
      }
      return /* @__PURE__ */ React312.createElement(ItemHolder, Object.assign({
        key: "row"
      }, props, {
        className: (0, import_classnames109.default)(className, cssVarCls, rootCls, hashId),
        prefixCls,
        fieldId,
        isRequired,
        errors: mergedErrors,
        warnings: mergedWarnings,
        meta,
        onSubItemMetaChange
      }), baseChildren);
    }
    if (!hasName && !isRenderProps && !dependencies) {
      return wrapCSSVar(renderLayout(mergedChildren));
    }
    let variables = {};
    if (typeof label === "string") {
      variables.label = label;
    } else if (name) {
      variables.label = String(name);
    }
    if (messageVariables) {
      variables = Object.assign(Object.assign({}, variables), messageVariables);
    }
    return wrapCSSVar(/* @__PURE__ */ React312.createElement(Field_default, Object.assign({}, props, {
      messageVariables: variables,
      trigger,
      validateTrigger: mergedValidateTrigger,
      onMetaChange
    }), (control, renderMeta, context) => {
      const mergedName = toArray7(name).length && renderMeta ? renderMeta.name : [];
      const fieldId = getFieldId(mergedName, formName);
      const isRequired = required4 !== void 0 ? required4 : !!(rules2 && rules2.some((rule) => {
        if (rule && typeof rule === "object" && rule.required && !rule.warningOnly) {
          return true;
        }
        if (typeof rule === "function") {
          const ruleEntity = rule(context);
          return ruleEntity && ruleEntity.required && !ruleEntity.warningOnly;
        }
        return false;
      }));
      const mergedControl = Object.assign({}, control);
      let childNode = null;
      true ? warning8(!(shouldUpdate && dependencies), "usage", "`shouldUpdate` and `dependencies` shouldn't be used together. See https://u.ant.design/form-deps.") : void 0;
      if (Array.isArray(mergedChildren) && hasName) {
        true ? warning8(false, "usage", "A `Form.Item` with a `name` prop must have a single child element. For information on how to render more complex form items, see https://u.ant.design/complex-form-item.") : void 0;
        childNode = mergedChildren;
      } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {
        true ? warning8(!!(shouldUpdate || dependencies), "usage", "A `Form.Item` with a render function must have either `shouldUpdate` or `dependencies`.") : void 0;
        true ? warning8(!hasName, "usage", "A `Form.Item` with a render function cannot be a field, and thus cannot have a `name` prop.") : void 0;
      } else if (dependencies && !isRenderProps && !hasName) {
        true ? warning8(false, "usage", "Must set `name` or use a render function when `dependencies` is set.") : void 0;
      } else if (isValidElement4(mergedChildren)) {
        true ? warning8(mergedChildren.props.defaultValue === void 0, "usage", "`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.") : void 0;
        const childProps = Object.assign(Object.assign({}, mergedChildren.props), mergedControl);
        if (!childProps.id) {
          childProps.id = fieldId;
        }
        if (help || mergedErrors.length > 0 || mergedWarnings.length > 0 || props.extra) {
          const describedbyArr = [];
          if (help || mergedErrors.length > 0) {
            describedbyArr.push(`${fieldId}_help`);
          }
          if (props.extra) {
            describedbyArr.push(`${fieldId}_extra`);
          }
          childProps["aria-describedby"] = describedbyArr.join(" ");
        }
        if (mergedErrors.length > 0) {
          childProps["aria-invalid"] = "true";
        }
        if (isRequired) {
          childProps["aria-required"] = "true";
        }
        if (supportRef(mergedChildren)) {
          childProps.ref = getItemRef(mergedName, mergedChildren);
        }
        const triggers = new Set([].concat(_toConsumableArray(toArray7(trigger)), _toConsumableArray(toArray7(mergedValidateTrigger))));
        triggers.forEach((eventName) => {
          childProps[eventName] = function() {
            var _a2, _c2;
            var _a, _b, _c;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));
            (_c = (_b = mergedChildren.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));
          };
        });
        const watchingChildProps = [childProps["aria-required"], childProps["aria-invalid"], childProps["aria-describedby"]];
        childNode = /* @__PURE__ */ React312.createElement(MemoInput, {
          control: mergedControl,
          update: mergedChildren,
          childProps: watchingChildProps
        }, cloneElement4(mergedChildren, childProps));
      } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {
        childNode = mergedChildren(context);
      } else {
        true ? warning8(!mergedName.length, "usage", "`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.") : void 0;
        childNode = mergedChildren;
      }
      return renderLayout(childNode, fieldId, isRequired);
    }));
  }
  var FormItem = InternalFormItem;
  FormItem.useStatus = useFormItemStatus_default;
  var FormItem_default = FormItem;

  // node_modules/antd/es/form/FormList.js
  var React313 = __toESM(require_react());
  var __rest41 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var FormList = (_a) => {
    var {
      prefixCls: customizePrefixCls,
      children
    } = _a, props = __rest41(_a, ["prefixCls", "children"]);
    if (true) {
      const warning8 = devUseWarning("Form.List");
      true ? warning8(typeof props.name === "number" || (Array.isArray(props.name) ? !!props.name.length : !!props.name), "usage", "Miss `name` prop.") : void 0;
    }
    const {
      getPrefixCls
    } = React313.useContext(ConfigContext);
    const prefixCls = getPrefixCls("form", customizePrefixCls);
    const contextValue = React313.useMemo(() => ({
      prefixCls,
      status: "error"
    }), [prefixCls]);
    return /* @__PURE__ */ React313.createElement(List_default, Object.assign({}, props), (fields, operation, meta) => /* @__PURE__ */ React313.createElement(FormItemPrefixContext.Provider, {
      value: contextValue
    }, children(fields.map((field) => Object.assign(Object.assign({}, field), {
      fieldKey: field.key
    })), operation, {
      errors: meta.errors,
      warnings: meta.warnings
    })));
  };
  var FormList_default = FormList;

  // node_modules/antd/es/form/hooks/useFormInstance.js
  var import_react99 = __toESM(require_react());
  function useFormInstance() {
    const {
      form
    } = (0, import_react99.useContext)(FormContext2);
    return form;
  }

  // node_modules/antd/es/form/index.js
  var Form4 = Form_default2;
  Form4.Item = FormItem_default;
  Form4.List = FormList_default;
  Form4.ErrorList = ErrorList_default;
  Form4.useForm = useForm2;
  Form4.useFormInstance = useFormInstance;
  Form4.useWatch = useWatch_default;
  Form4.Provider = FormProvider3;
  Form4.create = () => {
    true ? warning_default2(false, "Form", "antd v4 removed `Form.create`. Please remove or use `@ant-design/compatible` instead.") : void 0;
  };
  var form_default = Form4;

  // node_modules/rc-util/es/Dom/css.js
  function getOffset2(node2) {
    var box2 = node2.getBoundingClientRect();
    var docElem = document.documentElement;
    return {
      left: box2.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
      top: box2.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
    };
  }

  // node_modules/rc-util/es/Dom/addEventListener.js
  var import_react_dom6 = __toESM(require_react_dom());
  function addEventListenerWrap(target, eventType, cb, option) {
    var callback = import_react_dom6.default.unstable_batchedUpdates ? function run(e3) {
      import_react_dom6.default.unstable_batchedUpdates(cb, e3);
    } : cb;
    if (target !== null && target !== void 0 && target.addEventListener) {
      target.addEventListener(eventType, callback, option);
    }
    return {
      remove: function remove() {
        if (target !== null && target !== void 0 && target.removeEventListener) {
          target.removeEventListener(eventType, callback, option);
        }
      }
    };
  }

  // node_modules/antd/es/layout/layout.js
  var React314 = __toESM(require_react());
  var import_classnames110 = __toESM(require_classnames());

  // node_modules/antd/es/layout/hooks/useHasSider.js
  function useHasSider(siders, children, hasSider) {
    if (typeof hasSider === "boolean") {
      return hasSider;
    }
    if (siders.length) {
      return true;
    }
    const childNodes = toArray(children);
    return childNodes.some((node2) => node2.type === Sider_default);
  }

  // node_modules/antd/es/layout/style/light.js
  var genLayoutLightStyle = (token2) => {
    const {
      componentCls,
      bodyBg,
      lightSiderBg,
      lightTriggerBg,
      lightTriggerColor
    } = token2;
    return {
      [`${componentCls}-sider-light`]: {
        background: lightSiderBg,
        [`${componentCls}-sider-trigger`]: {
          color: lightTriggerColor,
          background: lightTriggerBg
        },
        [`${componentCls}-sider-zero-width-trigger`]: {
          color: lightTriggerColor,
          background: lightTriggerBg,
          border: `1px solid ${bodyBg}`,
          // Safe to modify to any other color
          borderInlineStart: 0
        }
      }
    };
  };
  var light_default = genLayoutLightStyle;

  // node_modules/antd/es/layout/style/index.js
  var genLayoutStyle = (token2) => {
    const {
      antCls,
      // .ant
      componentCls,
      // .ant-layout
      colorText,
      triggerColor,
      footerBg,
      triggerBg,
      headerHeight,
      headerPadding,
      headerColor,
      footerPadding,
      triggerHeight,
      zeroTriggerHeight,
      zeroTriggerWidth,
      motionDurationMid,
      motionDurationSlow,
      fontSize,
      borderRadius,
      bodyBg,
      headerBg,
      siderBg
    } = token2;
    return {
      [componentCls]: Object.assign(Object.assign({
        display: "flex",
        flex: "auto",
        flexDirection: "column",
        /* fix firefox can't set height smaller than content on flex item */
        minHeight: 0,
        background: bodyBg,
        "&, *": {
          boxSizing: "border-box"
        },
        [`&${componentCls}-has-sider`]: {
          flexDirection: "row",
          [`> ${componentCls}, > ${componentCls}-content`]: {
            // https://segmentfault.com/a/1190000019498300
            width: 0
          }
        },
        [`${componentCls}-header, &${componentCls}-footer`]: {
          flex: "0 0 auto"
        },
        [`${componentCls}-sider`]: {
          position: "relative",
          // fix firefox can't set width smaller than content on flex item
          minWidth: 0,
          background: siderBg,
          transition: `all ${motionDurationMid}, background 0s`,
          "&-children": {
            height: "100%",
            // Hack for fixing margin collapse bug
            // https://github.com/ant-design/ant-design/issues/7967
            // solution from https://stackoverflow.com/a/33132624/3040605
            marginTop: -0.1,
            paddingTop: 0.1,
            [`${antCls}-menu${antCls}-menu-inline-collapsed`]: {
              width: "auto"
            }
          },
          "&-has-trigger": {
            paddingBottom: triggerHeight
          },
          "&-right": {
            order: 1
          },
          "&-trigger": {
            position: "fixed",
            bottom: 0,
            zIndex: 1,
            height: triggerHeight,
            color: triggerColor,
            lineHeight: unit(triggerHeight),
            textAlign: "center",
            background: triggerBg,
            cursor: "pointer",
            transition: `all ${motionDurationMid}`
          },
          "&-zero-width": {
            "> *": {
              overflow: "hidden"
            },
            "&-trigger": {
              position: "absolute",
              top: headerHeight,
              insetInlineEnd: token2.calc(zeroTriggerWidth).mul(-1).equal(),
              zIndex: 1,
              width: zeroTriggerWidth,
              height: zeroTriggerHeight,
              color: triggerColor,
              fontSize: token2.fontSizeXL,
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              background: siderBg,
              borderStartStartRadius: 0,
              borderStartEndRadius: borderRadius,
              borderEndEndRadius: borderRadius,
              borderEndStartRadius: 0,
              cursor: "pointer",
              transition: `background ${motionDurationSlow} ease`,
              "&::after": {
                position: "absolute",
                inset: 0,
                background: "transparent",
                transition: `all ${motionDurationSlow}`,
                content: '""'
              },
              "&:hover::after": {
                background: `rgba(255, 255, 255, 0.2)`
              },
              "&-right": {
                insetInlineStart: token2.calc(zeroTriggerWidth).mul(-1).equal(),
                borderStartStartRadius: borderRadius,
                borderStartEndRadius: 0,
                borderEndEndRadius: 0,
                borderEndStartRadius: borderRadius
              }
            }
          }
        }
      }, light_default(token2)), {
        // RTL
        "&-rtl": {
          direction: "rtl"
        }
      }),
      // ==================== Header ====================
      [`${componentCls}-header`]: {
        height: headerHeight,
        padding: headerPadding,
        color: headerColor,
        lineHeight: unit(headerHeight),
        background: headerBg,
        // Other components/menu/style/index.less line:686
        // Integration with header element so menu items have the same height
        [`${antCls}-menu`]: {
          lineHeight: "inherit"
        }
      },
      // ==================== Footer ====================
      [`${componentCls}-footer`]: {
        padding: footerPadding,
        color: colorText,
        fontSize,
        background: footerBg
      },
      // =================== Content ====================
      [`${componentCls}-content`]: {
        flex: "auto",
        // fix firefox can't set height smaller than content on flex item
        minHeight: 0
      }
    };
  };
  var prepareComponentToken14 = (token2) => {
    const {
      colorBgLayout,
      controlHeight,
      controlHeightLG,
      colorText,
      controlHeightSM,
      marginXXS,
      colorTextLightSolid,
      colorBgContainer
    } = token2;
    const paddingInline = controlHeightLG * 1.25;
    return {
      // Deprecated
      colorBgHeader: "#001529",
      colorBgBody: colorBgLayout,
      colorBgTrigger: "#002140",
      bodyBg: colorBgLayout,
      headerBg: "#001529",
      headerHeight: controlHeight * 2,
      headerPadding: `0 ${paddingInline}px`,
      headerColor: colorText,
      footerPadding: `${controlHeightSM}px ${paddingInline}px`,
      footerBg: colorBgLayout,
      siderBg: "#001529",
      triggerHeight: controlHeightLG + marginXXS * 2,
      triggerBg: "#002140",
      triggerColor: colorTextLightSolid,
      zeroTriggerWidth: controlHeightLG,
      zeroTriggerHeight: controlHeightLG,
      lightSiderBg: colorBgContainer,
      lightTriggerBg: colorBgContainer,
      lightTriggerColor: colorText
    };
  };
  var style_default19 = genStyleHooks("Layout", (token2) => [genLayoutStyle(token2)], prepareComponentToken14, {
    deprecatedTokens: [["colorBgBody", "bodyBg"], ["colorBgHeader", "headerBg"], ["colorBgTrigger", "triggerBg"]]
  });

  // node_modules/antd/es/layout/layout.js
  var __rest42 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function generator(_ref) {
    let {
      suffixCls,
      tagName,
      displayName
    } = _ref;
    return (BasicComponent) => {
      const Adapter = /* @__PURE__ */ React314.forwardRef((props, ref) => /* @__PURE__ */ React314.createElement(BasicComponent, Object.assign({
        ref,
        suffixCls,
        tagName
      }, props)));
      if (true) {
        Adapter.displayName = displayName;
      }
      return Adapter;
    };
  }
  var Basic = /* @__PURE__ */ React314.forwardRef((props, ref) => {
    const {
      prefixCls: customizePrefixCls,
      suffixCls,
      className,
      tagName: TagName
    } = props, others = __rest42(props, ["prefixCls", "suffixCls", "className", "tagName"]);
    const {
      getPrefixCls
    } = React314.useContext(ConfigContext);
    const prefixCls = getPrefixCls("layout", customizePrefixCls);
    const [wrapSSR, hashId, cssVarCls] = style_default19(prefixCls);
    const prefixWithSuffixCls = suffixCls ? `${prefixCls}-${suffixCls}` : prefixCls;
    return wrapSSR(/* @__PURE__ */ React314.createElement(TagName, Object.assign({
      className: (0, import_classnames110.default)(customizePrefixCls || prefixWithSuffixCls, className, hashId, cssVarCls),
      ref
    }, others)));
  });
  var BasicLayout = /* @__PURE__ */ React314.forwardRef((props, ref) => {
    const {
      direction
    } = React314.useContext(ConfigContext);
    const [siders, setSiders] = React314.useState([]);
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      children,
      hasSider,
      tagName: Tag,
      style: style2
    } = props, others = __rest42(props, ["prefixCls", "className", "rootClassName", "children", "hasSider", "tagName", "style"]);
    const passedProps = omit(others, ["suffixCls"]);
    const {
      getPrefixCls,
      layout
    } = React314.useContext(ConfigContext);
    const prefixCls = getPrefixCls("layout", customizePrefixCls);
    const mergedHasSider = useHasSider(siders, children, hasSider);
    const [wrapCSSVar, hashId, cssVarCls] = style_default19(prefixCls);
    const classString = (0, import_classnames110.default)(prefixCls, {
      [`${prefixCls}-has-sider`]: mergedHasSider,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, layout === null || layout === void 0 ? void 0 : layout.className, className, rootClassName, hashId, cssVarCls);
    const contextValue = React314.useMemo(() => ({
      siderHook: {
        addSider: (id) => {
          setSiders((prev2) => [].concat(_toConsumableArray(prev2), [id]));
        },
        removeSider: (id) => {
          setSiders((prev2) => prev2.filter((currentId) => currentId !== id));
        }
      }
    }), []);
    return wrapCSSVar(/* @__PURE__ */ React314.createElement(LayoutContext.Provider, {
      value: contextValue
    }, /* @__PURE__ */ React314.createElement(Tag, Object.assign({
      ref,
      className: classString,
      style: Object.assign(Object.assign({}, layout === null || layout === void 0 ? void 0 : layout.style), style2)
    }, passedProps), children)));
  });
  var Layout = generator({
    tagName: "div",
    displayName: "Layout"
  })(BasicLayout);
  var Header2 = generator({
    suffixCls: "header",
    tagName: "header",
    displayName: "Header"
  })(Basic);
  var Footer2 = generator({
    suffixCls: "footer",
    tagName: "footer",
    displayName: "Footer"
  })(Basic);
  var Content2 = generator({
    suffixCls: "content",
    tagName: "main",
    displayName: "Content"
  })(Basic);
  var layout_default = Layout;

  // node_modules/antd/es/layout/index.js
  var Layout2 = layout_default;
  Layout2.Header = Header2;
  Layout2.Footer = Footer2;
  Layout2.Content = Content2;
  Layout2.Sider = Sider_default;
  Layout2._InternalSiderContext = SiderContext;
  var layout_default2 = Layout2;

  // node_modules/antd/es/_util/extendsObject.js
  var extendsObject = function() {
    const result = Object.assign({}, arguments.length <= 0 ? void 0 : arguments[0]);
    for (let i = 1; i < arguments.length; i++) {
      const obj = i < 0 || arguments.length <= i ? void 0 : arguments[i];
      if (obj) {
        Object.keys(obj).forEach((key) => {
          const val = obj[key];
          if (val !== void 0) {
            result[key] = val;
          }
        });
      }
    }
    return result;
  };
  var extendsObject_default = extendsObject;

  // node_modules/@ant-design/icons/es/icons/DoubleLeftOutlined.js
  var React315 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DoubleLeftOutlined.js
  var DoubleLeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M272.9 512l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L186.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H532c6.7 0 10.4-7.7 6.3-12.9L272.9 512zm304 0l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L490.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H836c6.7 0 10.4-7.7 6.3-12.9L576.9 512z" } }] }, "name": "double-left", "theme": "outlined" };
  var DoubleLeftOutlined_default = DoubleLeftOutlined;

  // node_modules/@ant-design/icons/es/icons/DoubleLeftOutlined.js
  var DoubleLeftOutlined2 = function DoubleLeftOutlined3(props, ref) {
    return /* @__PURE__ */ React315.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: DoubleLeftOutlined_default
    }));
  };
  if (true) {
    DoubleLeftOutlined2.displayName = "DoubleLeftOutlined";
  }
  var DoubleLeftOutlined_default2 = /* @__PURE__ */ React315.forwardRef(DoubleLeftOutlined2);

  // node_modules/@ant-design/icons/es/icons/DoubleRightOutlined.js
  var React316 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/DoubleRightOutlined.js
  var DoubleRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M533.2 492.3L277.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H188c-6.7 0-10.4 7.7-6.3 12.9L447.1 512 181.7 851.1A7.98 7.98 0 00188 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5zm304 0L581.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H492c-6.7 0-10.4 7.7-6.3 12.9L751.1 512 485.7 851.1A7.98 7.98 0 00492 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5z" } }] }, "name": "double-right", "theme": "outlined" };
  var DoubleRightOutlined_default = DoubleRightOutlined;

  // node_modules/@ant-design/icons/es/icons/DoubleRightOutlined.js
  var DoubleRightOutlined2 = function DoubleRightOutlined3(props, ref) {
    return /* @__PURE__ */ React316.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: DoubleRightOutlined_default
    }));
  };
  if (true) {
    DoubleRightOutlined2.displayName = "DoubleRightOutlined";
  }
  var DoubleRightOutlined_default2 = /* @__PURE__ */ React316.forwardRef(DoubleRightOutlined2);

  // node_modules/antd/es/pagination/Pagination.js
  var import_classnames113 = __toESM(require_classnames());

  // node_modules/rc-pagination/es/Pagination.js
  var import_classnames112 = __toESM(require_classnames());
  var import_react102 = __toESM(require_react());

  // node_modules/rc-pagination/es/locale/zh_CN.js
  var locale5 = {
    // Options
    items_per_page: "\u6761/\u9875",
    jump_to: "\u8DF3\u81F3",
    jump_to_confirm: "\u786E\u5B9A",
    page: "\u9875",
    // Pagination
    prev_page: "\u4E0A\u4E00\u9875",
    next_page: "\u4E0B\u4E00\u9875",
    prev_5: "\u5411\u524D 5 \u9875",
    next_5: "\u5411\u540E 5 \u9875",
    prev_3: "\u5411\u524D 3 \u9875",
    next_3: "\u5411\u540E 3 \u9875",
    page_size: "\u9875\u7801"
  };
  var zh_CN_default = locale5;

  // node_modules/rc-pagination/es/Options.js
  var import_react100 = __toESM(require_react());
  var defaultPageSizeOptions = ["10", "20", "50", "100"];
  var Options = function Options2(props) {
    var _props$pageSizeOption = props.pageSizeOptions, pageSizeOptions = _props$pageSizeOption === void 0 ? defaultPageSizeOptions : _props$pageSizeOption, locale9 = props.locale, changeSize = props.changeSize, pageSize = props.pageSize, goButton = props.goButton, quickGo = props.quickGo, rootPrefixCls = props.rootPrefixCls, Select3 = props.selectComponentClass, selectPrefixCls = props.selectPrefixCls, disabled = props.disabled, buildOptionText = props.buildOptionText;
    var _React$useState = import_react100.default.useState(""), _React$useState2 = _slicedToArray(_React$useState, 2), goInputText = _React$useState2[0], setGoInputText = _React$useState2[1];
    var getValidValue = function getValidValue2() {
      return !goInputText || Number.isNaN(goInputText) ? void 0 : Number(goInputText);
    };
    var mergeBuildOptionText = typeof buildOptionText === "function" ? buildOptionText : function(value) {
      return "".concat(value, " ").concat(locale9.items_per_page);
    };
    var changeSizeHandle = function changeSizeHandle2(value) {
      changeSize === null || changeSize === void 0 || changeSize(Number(value));
    };
    var handleChange = function handleChange2(e3) {
      setGoInputText(e3.target.value);
    };
    var handleBlur = function handleBlur2(e3) {
      if (goButton || goInputText === "") {
        return;
      }
      setGoInputText("");
      if (e3.relatedTarget && (e3.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item-link")) >= 0 || e3.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item")) >= 0)) {
        return;
      }
      quickGo === null || quickGo === void 0 || quickGo(getValidValue());
    };
    var go = function go2(e3) {
      if (goInputText === "") {
        return;
      }
      if (e3.keyCode === KeyCode_default.ENTER || e3.type === "click") {
        setGoInputText("");
        quickGo === null || quickGo === void 0 || quickGo(getValidValue());
      }
    };
    var getPageSizeOptions = function getPageSizeOptions2() {
      if (pageSizeOptions.some(function(option) {
        return option.toString() === pageSize.toString();
      })) {
        return pageSizeOptions;
      }
      return pageSizeOptions.concat([pageSize.toString()]).sort(function(a, b) {
        var numberA = Number.isNaN(Number(a)) ? 0 : Number(a);
        var numberB = Number.isNaN(Number(b)) ? 0 : Number(b);
        return numberA - numberB;
      });
    };
    var prefixCls = "".concat(rootPrefixCls, "-options");
    if (!changeSize && !quickGo) {
      return null;
    }
    var changeSelect = null;
    var goInput = null;
    var gotoButton = null;
    if (changeSize && Select3) {
      var options = getPageSizeOptions().map(function(opt, i) {
        return /* @__PURE__ */ import_react100.default.createElement(Select3.Option, {
          key: i,
          value: opt.toString()
        }, mergeBuildOptionText(opt));
      });
      changeSelect = /* @__PURE__ */ import_react100.default.createElement(Select3, {
        disabled,
        prefixCls: selectPrefixCls,
        showSearch: false,
        className: "".concat(prefixCls, "-size-changer"),
        optionLabelProp: "children",
        popupMatchSelectWidth: false,
        value: (pageSize || pageSizeOptions[0]).toString(),
        onChange: changeSizeHandle,
        getPopupContainer: function getPopupContainer(triggerNode) {
          return triggerNode.parentNode;
        },
        "aria-label": locale9.page_size,
        defaultOpen: false
      }, options);
    }
    if (quickGo) {
      if (goButton) {
        gotoButton = typeof goButton === "boolean" ? /* @__PURE__ */ import_react100.default.createElement("button", {
          type: "button",
          onClick: go,
          onKeyUp: go,
          disabled,
          className: "".concat(prefixCls, "-quick-jumper-button")
        }, locale9.jump_to_confirm) : /* @__PURE__ */ import_react100.default.createElement("span", {
          onClick: go,
          onKeyUp: go
        }, goButton);
      }
      goInput = /* @__PURE__ */ import_react100.default.createElement("div", {
        className: "".concat(prefixCls, "-quick-jumper")
      }, locale9.jump_to, /* @__PURE__ */ import_react100.default.createElement("input", {
        disabled,
        type: "text",
        value: goInputText,
        onChange: handleChange,
        onKeyUp: go,
        onBlur: handleBlur,
        "aria-label": locale9.page
      }), locale9.page, gotoButton);
    }
    return /* @__PURE__ */ import_react100.default.createElement("li", {
      className: prefixCls
    }, changeSelect, goInput);
  };
  if (true) {
    Options.displayName = "Options";
  }
  var Options_default = Options;

  // node_modules/rc-pagination/es/Pager.js
  var import_classnames111 = __toESM(require_classnames());
  var import_react101 = __toESM(require_react());
  var Pager = function Pager2(props) {
    var _classNames;
    var rootPrefixCls = props.rootPrefixCls, page = props.page, active = props.active, className = props.className, showTitle = props.showTitle, onClick = props.onClick, onKeyPress = props.onKeyPress, itemRender = props.itemRender;
    var prefixCls = "".concat(rootPrefixCls, "-item");
    var cls = (0, import_classnames111.default)(prefixCls, "".concat(prefixCls, "-").concat(page), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), !page), _classNames), className);
    var handleClick = function handleClick2() {
      onClick(page);
    };
    var handleKeyPress = function handleKeyPress2(e3) {
      onKeyPress(e3, onClick, page);
    };
    var pager = itemRender(page, "page", /* @__PURE__ */ import_react101.default.createElement("a", {
      rel: "nofollow"
    }, page));
    return pager ? /* @__PURE__ */ import_react101.default.createElement("li", {
      title: showTitle ? String(page) : null,
      className: cls,
      onClick: handleClick,
      onKeyDown: handleKeyPress,
      tabIndex: 0
    }, pager) : null;
  };
  if (true) {
    Pager.displayName = "Pager";
  }
  var Pager_default = Pager;

  // node_modules/rc-pagination/es/Pagination.js
  var defaultItemRender = function defaultItemRender2(page, type4, element) {
    return element;
  };
  function noop4() {
  }
  function isInteger(v) {
    var value = Number(v);
    return typeof value === "number" && !Number.isNaN(value) && isFinite(value) && Math.floor(value) === value;
  }
  function calculatePage(p, pageSize, total) {
    var _pageSize = typeof p === "undefined" ? pageSize : p;
    return Math.floor((total - 1) / _pageSize) + 1;
  }
  var Pagination = function Pagination2(props) {
    var _classNames5;
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-pagination" : _props$prefixCls, _props$selectPrefixCl = props.selectPrefixCls, selectPrefixCls = _props$selectPrefixCl === void 0 ? "rc-select" : _props$selectPrefixCl, className = props.className, selectComponentClass = props.selectComponentClass, currentProp = props.current, _props$defaultCurrent = props.defaultCurrent, defaultCurrent = _props$defaultCurrent === void 0 ? 1 : _props$defaultCurrent, _props$total = props.total, total = _props$total === void 0 ? 0 : _props$total, pageSizeProp = props.pageSize, _props$defaultPageSiz = props.defaultPageSize, defaultPageSize = _props$defaultPageSiz === void 0 ? 10 : _props$defaultPageSiz, _props$onChange = props.onChange, onChange = _props$onChange === void 0 ? noop4 : _props$onChange, hideOnSinglePage = props.hideOnSinglePage, _props$showPrevNextJu = props.showPrevNextJumpers, showPrevNextJumpers = _props$showPrevNextJu === void 0 ? true : _props$showPrevNextJu, showQuickJumper = props.showQuickJumper, showLessItems = props.showLessItems, _props$showTitle = props.showTitle, showTitle = _props$showTitle === void 0 ? true : _props$showTitle, _props$onShowSizeChan = props.onShowSizeChange, onShowSizeChange = _props$onShowSizeChan === void 0 ? noop4 : _props$onShowSizeChan, _props$locale = props.locale, locale9 = _props$locale === void 0 ? zh_CN_default : _props$locale, style2 = props.style, _props$totalBoundaryS = props.totalBoundaryShowSizeChanger, totalBoundaryShowSizeChanger = _props$totalBoundaryS === void 0 ? 50 : _props$totalBoundaryS, disabled = props.disabled, simple = props.simple, showTotal = props.showTotal, showSizeChangerProp = props.showSizeChanger, pageSizeOptions = props.pageSizeOptions, _props$itemRender = props.itemRender, itemRender = _props$itemRender === void 0 ? defaultItemRender : _props$itemRender, jumpPrevIcon = props.jumpPrevIcon, jumpNextIcon = props.jumpNextIcon, prevIcon = props.prevIcon, nextIcon = props.nextIcon;
    var paginationRef = import_react102.default.useRef(null);
    var _useMergedState = useMergedState(10, {
      value: pageSizeProp,
      defaultValue: defaultPageSize
    }), _useMergedState2 = _slicedToArray(_useMergedState, 2), pageSize = _useMergedState2[0], setPageSize = _useMergedState2[1];
    var _useMergedState3 = useMergedState(1, {
      value: currentProp,
      defaultValue: defaultCurrent,
      postState: function postState(c) {
        return Math.max(1, Math.min(c, calculatePage(void 0, pageSize, total)));
      }
    }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), current2 = _useMergedState4[0], setCurrent = _useMergedState4[1];
    var _React$useState = import_react102.default.useState(current2), _React$useState2 = _slicedToArray(_React$useState, 2), internalInputVal = _React$useState2[0], setInternalInputVal = _React$useState2[1];
    (0, import_react102.useEffect)(function() {
      setInternalInputVal(current2);
    }, [current2]);
    var hasOnChange = onChange !== noop4;
    var hasCurrent = "current" in props;
    if (true) {
      warning_default(hasCurrent ? hasOnChange : true, "You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");
    }
    var jumpPrevPage = Math.max(1, current2 - (showLessItems ? 3 : 5));
    var jumpNextPage = Math.min(calculatePage(void 0, pageSize, total), current2 + (showLessItems ? 3 : 5));
    function getItemIcon(icon, label) {
      var iconNode = icon || /* @__PURE__ */ import_react102.default.createElement("button", {
        type: "button",
        "aria-label": label,
        className: "".concat(prefixCls, "-item-link")
      });
      if (typeof icon === "function") {
        iconNode = /* @__PURE__ */ import_react102.default.createElement(icon, _objectSpread2({}, props));
      }
      return iconNode;
    }
    function getValidValue(e3) {
      var inputValue = e3.target.value;
      var allPages2 = calculatePage(void 0, pageSize, total);
      var value;
      if (inputValue === "") {
        value = inputValue;
      } else if (Number.isNaN(Number(inputValue))) {
        value = internalInputVal;
      } else if (inputValue >= allPages2) {
        value = allPages2;
      } else {
        value = Number(inputValue);
      }
      return value;
    }
    function isValid(page) {
      return isInteger(page) && page !== current2 && isInteger(total) && total > 0;
    }
    var shouldDisplayQuickJumper = total > pageSize ? showQuickJumper : false;
    function handleKeyDown(event) {
      if (event.keyCode === KeyCode_default.UP || event.keyCode === KeyCode_default.DOWN) {
        event.preventDefault();
      }
    }
    function handleKeyUp(event) {
      var value = getValidValue(event);
      if (value !== internalInputVal) {
        setInternalInputVal(value);
      }
      switch (event.keyCode) {
        case KeyCode_default.ENTER:
          handleChange(value);
          break;
        case KeyCode_default.UP:
          handleChange(value - 1);
          break;
        case KeyCode_default.DOWN:
          handleChange(value + 1);
          break;
        default:
          break;
      }
    }
    function handleBlur(event) {
      handleChange(getValidValue(event));
    }
    function changePageSize(size) {
      var newCurrent = calculatePage(size, pageSize, total);
      var nextCurrent = current2 > newCurrent && newCurrent !== 0 ? newCurrent : current2;
      setPageSize(size);
      setInternalInputVal(nextCurrent);
      onShowSizeChange === null || onShowSizeChange === void 0 || onShowSizeChange(current2, size);
      setCurrent(nextCurrent);
      onChange === null || onChange === void 0 || onChange(nextCurrent, size);
    }
    function handleChange(page) {
      if (isValid(page) && !disabled) {
        var currentPage = calculatePage(void 0, pageSize, total);
        var newPage = page;
        if (page > currentPage) {
          newPage = currentPage;
        } else if (page < 1) {
          newPage = 1;
        }
        if (newPage !== internalInputVal) {
          setInternalInputVal(newPage);
        }
        setCurrent(newPage);
        onChange === null || onChange === void 0 || onChange(newPage, pageSize);
        return newPage;
      }
      return current2;
    }
    var hasPrev = current2 > 1;
    var hasNext = current2 < calculatePage(void 0, pageSize, total);
    var showSizeChanger = showSizeChangerProp !== null && showSizeChangerProp !== void 0 ? showSizeChangerProp : total > totalBoundaryShowSizeChanger;
    function prevHandle() {
      if (hasPrev)
        handleChange(current2 - 1);
    }
    function nextHandle() {
      if (hasNext)
        handleChange(current2 + 1);
    }
    function jumpPrevHandle() {
      handleChange(jumpPrevPage);
    }
    function jumpNextHandle() {
      handleChange(jumpNextPage);
    }
    function runIfEnter(event, callback) {
      if (event.key === "Enter" || event.charCode === KeyCode_default.ENTER || event.keyCode === KeyCode_default.ENTER) {
        for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          restParams[_key - 2] = arguments[_key];
        }
        callback.apply(void 0, restParams);
      }
    }
    function runIfEnterPrev(event) {
      runIfEnter(event, prevHandle);
    }
    function runIfEnterNext(event) {
      runIfEnter(event, nextHandle);
    }
    function runIfEnterJumpPrev(event) {
      runIfEnter(event, jumpPrevHandle);
    }
    function runIfEnterJumpNext(event) {
      runIfEnter(event, jumpNextHandle);
    }
    function renderPrev(prevPage2) {
      var prevButton = itemRender(prevPage2, "prev", getItemIcon(prevIcon, "prev page"));
      return /* @__PURE__ */ import_react102.default.isValidElement(prevButton) ? /* @__PURE__ */ import_react102.default.cloneElement(prevButton, {
        disabled: !hasPrev
      }) : prevButton;
    }
    function renderNext(nextPage2) {
      var nextButton = itemRender(nextPage2, "next", getItemIcon(nextIcon, "next page"));
      return /* @__PURE__ */ import_react102.default.isValidElement(nextButton) ? /* @__PURE__ */ import_react102.default.cloneElement(nextButton, {
        disabled: !hasNext
      }) : nextButton;
    }
    function handleGoTO(event) {
      if (event.type === "click" || event.keyCode === KeyCode_default.ENTER) {
        handleChange(internalInputVal);
      }
    }
    var jumpPrev = null;
    var dataOrAriaAttributeProps = pickAttrs(props, {
      aria: true,
      data: true
    });
    var totalText = showTotal && /* @__PURE__ */ import_react102.default.createElement("li", {
      className: "".concat(prefixCls, "-total-text")
    }, showTotal(total, [total === 0 ? 0 : (current2 - 1) * pageSize + 1, current2 * pageSize > total ? total : current2 * pageSize]));
    var jumpNext = null;
    var allPages = calculatePage(void 0, pageSize, total);
    if (hideOnSinglePage && total <= pageSize) {
      return null;
    }
    var pagerList = [];
    var pagerProps = {
      rootPrefixCls: prefixCls,
      onClick: handleChange,
      onKeyPress: runIfEnter,
      showTitle,
      itemRender,
      page: -1
    };
    var prevPage = current2 - 1 > 0 ? current2 - 1 : 0;
    var nextPage = current2 + 1 < allPages ? current2 + 1 : allPages;
    var goButton = showQuickJumper && showQuickJumper.goButton;
    var gotoButton = goButton;
    var simplePager = null;
    if (simple) {
      if (goButton) {
        if (typeof goButton === "boolean") {
          gotoButton = /* @__PURE__ */ import_react102.default.createElement("button", {
            type: "button",
            onClick: handleGoTO,
            onKeyUp: handleGoTO
          }, locale9.jump_to_confirm);
        } else {
          gotoButton = /* @__PURE__ */ import_react102.default.createElement("span", {
            onClick: handleGoTO,
            onKeyUp: handleGoTO
          }, goButton);
        }
        gotoButton = /* @__PURE__ */ import_react102.default.createElement("li", {
          title: showTitle ? "".concat(locale9.jump_to).concat(current2, "/").concat(allPages) : null,
          className: "".concat(prefixCls, "-simple-pager")
        }, gotoButton);
      }
      simplePager = /* @__PURE__ */ import_react102.default.createElement("li", {
        title: showTitle ? "".concat(current2, "/").concat(allPages) : null,
        className: "".concat(prefixCls, "-simple-pager")
      }, /* @__PURE__ */ import_react102.default.createElement("input", {
        type: "text",
        value: internalInputVal,
        disabled,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onChange: handleKeyUp,
        onBlur: handleBlur,
        size: 3
      }), /* @__PURE__ */ import_react102.default.createElement("span", {
        className: "".concat(prefixCls, "-slash")
      }, "/"), allPages);
    }
    var pageBufferSize = showLessItems ? 1 : 2;
    if (allPages <= 3 + pageBufferSize * 2) {
      if (!allPages) {
        pagerList.push(/* @__PURE__ */ import_react102.default.createElement(Pager_default, _extends({}, pagerProps, {
          key: "noPager",
          page: 1,
          className: "".concat(prefixCls, "-item-disabled")
        })));
      }
      for (var i = 1; i <= allPages; i += 1) {
        pagerList.push(/* @__PURE__ */ import_react102.default.createElement(Pager_default, _extends({}, pagerProps, {
          key: i,
          page: i,
          active: current2 === i
        })));
      }
    } else {
      var prevItemTitle = showLessItems ? locale9.prev_3 : locale9.prev_5;
      var nextItemTitle = showLessItems ? locale9.next_3 : locale9.next_5;
      var jumpPrevContent = itemRender(jumpPrevPage, "jump-prev", getItemIcon(jumpPrevIcon, "prev page"));
      var jumpNextContent = itemRender(jumpNextPage, "jump-next", getItemIcon(jumpNextIcon, "next page"));
      if (showPrevNextJumpers) {
        jumpPrev = jumpPrevContent ? /* @__PURE__ */ import_react102.default.createElement("li", {
          title: showTitle ? prevItemTitle : null,
          key: "prev",
          onClick: jumpPrevHandle,
          tabIndex: 0,
          onKeyDown: runIfEnterJumpPrev,
          className: (0, import_classnames112.default)("".concat(prefixCls, "-jump-prev"), _defineProperty({}, "".concat(prefixCls, "-jump-prev-custom-icon"), !!jumpPrevIcon))
        }, jumpPrevContent) : null;
        jumpNext = jumpNextContent ? /* @__PURE__ */ import_react102.default.createElement("li", {
          title: showTitle ? nextItemTitle : null,
          key: "next",
          onClick: jumpNextHandle,
          tabIndex: 0,
          onKeyDown: runIfEnterJumpNext,
          className: (0, import_classnames112.default)("".concat(prefixCls, "-jump-next"), _defineProperty({}, "".concat(prefixCls, "-jump-next-custom-icon"), !!jumpNextIcon))
        }, jumpNextContent) : null;
      }
      var left = Math.max(1, current2 - pageBufferSize);
      var right = Math.min(current2 + pageBufferSize, allPages);
      if (current2 - 1 <= pageBufferSize) {
        right = 1 + pageBufferSize * 2;
      }
      if (allPages - current2 <= pageBufferSize) {
        left = allPages - pageBufferSize * 2;
      }
      for (var _i = left; _i <= right; _i += 1) {
        pagerList.push(/* @__PURE__ */ import_react102.default.createElement(Pager_default, _extends({}, pagerProps, {
          key: _i,
          page: _i,
          active: current2 === _i
        })));
      }
      if (current2 - 1 >= pageBufferSize * 2 && current2 !== 1 + 2) {
        pagerList[0] = /* @__PURE__ */ import_react102.default.cloneElement(pagerList[0], {
          className: (0, import_classnames112.default)("".concat(prefixCls, "-item-after-jump-prev"), pagerList[0].props.className)
        });
        pagerList.unshift(jumpPrev);
      }
      if (allPages - current2 >= pageBufferSize * 2 && current2 !== allPages - 2) {
        var lastOne = pagerList[pagerList.length - 1];
        pagerList[pagerList.length - 1] = /* @__PURE__ */ import_react102.default.cloneElement(lastOne, {
          className: (0, import_classnames112.default)("".concat(prefixCls, "-item-before-jump-next"), lastOne.props.className)
        });
        pagerList.push(jumpNext);
      }
      if (left !== 1) {
        pagerList.unshift(/* @__PURE__ */ import_react102.default.createElement(Pager_default, _extends({}, pagerProps, {
          key: 1,
          page: 1
        })));
      }
      if (right !== allPages) {
        pagerList.push(/* @__PURE__ */ import_react102.default.createElement(Pager_default, _extends({}, pagerProps, {
          key: allPages,
          page: allPages
        })));
      }
    }
    var prev2 = renderPrev(prevPage);
    if (prev2) {
      var prevDisabled = !hasPrev || !allPages;
      prev2 = /* @__PURE__ */ import_react102.default.createElement("li", {
        title: showTitle ? locale9.prev_page : null,
        onClick: prevHandle,
        tabIndex: prevDisabled ? null : 0,
        onKeyDown: runIfEnterPrev,
        className: (0, import_classnames112.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), prevDisabled)),
        "aria-disabled": prevDisabled
      }, prev2);
    }
    var next2 = renderNext(nextPage);
    if (next2) {
      var nextDisabled, nextTabIndex;
      if (simple) {
        nextDisabled = !hasNext;
        nextTabIndex = hasPrev ? 0 : null;
      } else {
        nextDisabled = !hasNext || !allPages;
        nextTabIndex = nextDisabled ? null : 0;
      }
      next2 = /* @__PURE__ */ import_react102.default.createElement("li", {
        title: showTitle ? locale9.next_page : null,
        onClick: nextHandle,
        tabIndex: nextTabIndex,
        onKeyDown: runIfEnterNext,
        className: (0, import_classnames112.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), nextDisabled)),
        "aria-disabled": nextDisabled
      }, next2);
    }
    var cls = (0, import_classnames112.default)(prefixCls, className, (_classNames5 = {}, _defineProperty(_classNames5, "".concat(prefixCls, "-simple"), simple), _defineProperty(_classNames5, "".concat(prefixCls, "-disabled"), disabled), _classNames5));
    return /* @__PURE__ */ import_react102.default.createElement("ul", _extends({
      className: cls,
      style: style2,
      ref: paginationRef
    }, dataOrAriaAttributeProps), totalText, prev2, simple ? simplePager : pagerList, next2, /* @__PURE__ */ import_react102.default.createElement(Options_default, {
      locale: locale9,
      rootPrefixCls: prefixCls,
      disabled,
      selectComponentClass,
      selectPrefixCls,
      changeSize: showSizeChanger ? changePageSize : null,
      pageSize,
      pageSizeOptions,
      quickGo: shouldDisplayQuickJumper ? handleChange : null,
      goButton: gotoButton
    }));
  };
  if (true) {
    Pagination.displayName = "Pagination";
  }
  var Pagination_default = Pagination;

  // node_modules/antd/es/pagination/Pagination.js
  var React321 = __toESM(require_react());

  // node_modules/antd/es/pagination/Select.js
  var React320 = __toESM(require_react());
  var MiniSelect = (props) => /* @__PURE__ */ React320.createElement(select_default, Object.assign({}, props, {
    showSearch: true,
    size: "small"
  }));
  var MiddleSelect = (props) => /* @__PURE__ */ React320.createElement(select_default, Object.assign({}, props, {
    showSearch: true,
    size: "middle"
  }));
  MiniSelect.Option = select_default.Option;
  MiddleSelect.Option = select_default.Option;

  // node_modules/antd/es/pagination/style/index.js
  var genPaginationDisabledStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-disabled`]: {
        "&, &:hover": {
          cursor: "not-allowed",
          [`${componentCls}-item-link`]: {
            color: token2.colorTextDisabled,
            cursor: "not-allowed"
          }
        },
        "&:focus-visible": {
          cursor: "not-allowed",
          [`${componentCls}-item-link`]: {
            color: token2.colorTextDisabled,
            cursor: "not-allowed"
          }
        }
      },
      [`&${componentCls}-disabled`]: {
        cursor: "not-allowed",
        [`${componentCls}-item`]: {
          cursor: "not-allowed",
          "&:hover, &:active": {
            backgroundColor: "transparent"
          },
          a: {
            color: token2.colorTextDisabled,
            backgroundColor: "transparent",
            border: "none",
            cursor: "not-allowed"
          },
          "&-active": {
            borderColor: token2.colorBorder,
            backgroundColor: token2.itemActiveBgDisabled,
            "&:hover, &:active": {
              backgroundColor: token2.itemActiveBgDisabled
            },
            a: {
              color: token2.itemActiveColorDisabled
            }
          }
        },
        [`${componentCls}-item-link`]: {
          color: token2.colorTextDisabled,
          cursor: "not-allowed",
          "&:hover, &:active": {
            backgroundColor: "transparent"
          },
          [`${componentCls}-simple&`]: {
            backgroundColor: "transparent",
            "&:hover, &:active": {
              backgroundColor: "transparent"
            }
          }
        },
        [`${componentCls}-simple-pager`]: {
          color: token2.colorTextDisabled
        },
        [`${componentCls}-jump-prev, ${componentCls}-jump-next`]: {
          [`${componentCls}-item-link-icon`]: {
            opacity: 0
          },
          [`${componentCls}-item-ellipsis`]: {
            opacity: 1
          }
        }
      },
      [`&${componentCls}-simple`]: {
        [`${componentCls}-prev, ${componentCls}-next`]: {
          [`&${componentCls}-disabled ${componentCls}-item-link`]: {
            "&:hover, &:active": {
              backgroundColor: "transparent"
            }
          }
        }
      }
    };
  };
  var genPaginationMiniStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`&${componentCls}-mini ${componentCls}-total-text, &${componentCls}-mini ${componentCls}-simple-pager`]: {
        height: token2.itemSizeSM,
        lineHeight: unit(token2.itemSizeSM)
      },
      [`&${componentCls}-mini ${componentCls}-item`]: {
        minWidth: token2.itemSizeSM,
        height: token2.itemSizeSM,
        margin: 0,
        lineHeight: unit(token2.calc(token2.itemSizeSM).sub(2).equal())
      },
      [`&${componentCls}-mini:not(${componentCls}-disabled) ${componentCls}-item:not(${componentCls}-item-active)`]: {
        backgroundColor: "transparent",
        borderColor: "transparent",
        "&:hover": {
          backgroundColor: token2.colorBgTextHover
        },
        "&:active": {
          backgroundColor: token2.colorBgTextActive
        }
      },
      [`&${componentCls}-mini ${componentCls}-prev, &${componentCls}-mini ${componentCls}-next`]: {
        minWidth: token2.itemSizeSM,
        height: token2.itemSizeSM,
        margin: 0,
        lineHeight: unit(token2.itemSizeSM)
      },
      [`&${componentCls}-mini:not(${componentCls}-disabled)`]: {
        [`${componentCls}-prev, ${componentCls}-next`]: {
          [`&:hover ${componentCls}-item-link`]: {
            backgroundColor: token2.colorBgTextHover
          },
          [`&:active ${componentCls}-item-link`]: {
            backgroundColor: token2.colorBgTextActive
          },
          [`&${componentCls}-disabled:hover ${componentCls}-item-link`]: {
            backgroundColor: "transparent"
          }
        }
      },
      [`
    &${componentCls}-mini ${componentCls}-prev ${componentCls}-item-link,
    &${componentCls}-mini ${componentCls}-next ${componentCls}-item-link
    `]: {
        backgroundColor: "transparent",
        borderColor: "transparent",
        "&::after": {
          height: token2.itemSizeSM,
          lineHeight: unit(token2.itemSizeSM)
        }
      },
      [`&${componentCls}-mini ${componentCls}-jump-prev, &${componentCls}-mini ${componentCls}-jump-next`]: {
        height: token2.itemSizeSM,
        marginInlineEnd: 0,
        lineHeight: unit(token2.itemSizeSM)
      },
      [`&${componentCls}-mini ${componentCls}-options`]: {
        marginInlineStart: token2.paginationMiniOptionsMarginInlineStart,
        [`&-size-changer`]: {
          top: token2.miniOptionsSizeChangerTop
        },
        [`&-quick-jumper`]: {
          height: token2.itemSizeSM,
          lineHeight: unit(token2.itemSizeSM),
          input: Object.assign(Object.assign({}, genInputSmallStyle(token2)), {
            width: token2.paginationMiniQuickJumperInputWidth,
            height: token2.controlHeightSM
          })
        }
      }
    };
  };
  var genPaginationSimpleStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`
    &${componentCls}-simple ${componentCls}-prev,
    &${componentCls}-simple ${componentCls}-next
    `]: {
        height: token2.itemSizeSM,
        lineHeight: unit(token2.itemSizeSM),
        verticalAlign: "top",
        [`${componentCls}-item-link`]: {
          height: token2.itemSizeSM,
          backgroundColor: "transparent",
          border: 0,
          "&:hover": {
            backgroundColor: token2.colorBgTextHover
          },
          "&:active": {
            backgroundColor: token2.colorBgTextActive
          },
          "&::after": {
            height: token2.itemSizeSM,
            lineHeight: unit(token2.itemSizeSM)
          }
        }
      },
      [`&${componentCls}-simple ${componentCls}-simple-pager`]: {
        display: "inline-block",
        height: token2.itemSizeSM,
        marginInlineEnd: token2.marginXS,
        input: {
          boxSizing: "border-box",
          height: "100%",
          marginInlineEnd: token2.marginXS,
          padding: `0 ${unit(token2.paginationItemPaddingInline)}`,
          textAlign: "center",
          backgroundColor: token2.itemInputBg,
          border: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`,
          borderRadius: token2.borderRadius,
          outline: "none",
          transition: `border-color ${token2.motionDurationMid}`,
          color: "inherit",
          "&:hover": {
            borderColor: token2.colorPrimary
          },
          "&:focus": {
            borderColor: token2.colorPrimaryHover,
            boxShadow: `${unit(token2.inputOutlineOffset)} 0 ${unit(token2.controlOutlineWidth)} ${token2.controlOutline}`
          },
          "&[disabled]": {
            color: token2.colorTextDisabled,
            backgroundColor: token2.colorBgContainerDisabled,
            borderColor: token2.colorBorder,
            cursor: "not-allowed"
          }
        }
      }
    };
  };
  var genPaginationJumpStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-jump-prev, ${componentCls}-jump-next`]: {
        outline: 0,
        [`${componentCls}-item-container`]: {
          position: "relative",
          [`${componentCls}-item-link-icon`]: {
            color: token2.colorPrimary,
            fontSize: token2.fontSizeSM,
            opacity: 0,
            transition: `all ${token2.motionDurationMid}`,
            "&-svg": {
              top: 0,
              insetInlineEnd: 0,
              bottom: 0,
              insetInlineStart: 0,
              margin: "auto"
            }
          },
          [`${componentCls}-item-ellipsis`]: {
            position: "absolute",
            top: 0,
            insetInlineEnd: 0,
            bottom: 0,
            insetInlineStart: 0,
            display: "block",
            margin: "auto",
            color: token2.colorTextDisabled,
            fontFamily: "Arial, Helvetica, sans-serif",
            letterSpacing: token2.paginationEllipsisLetterSpacing,
            textAlign: "center",
            textIndent: token2.paginationEllipsisTextIndent,
            opacity: 1,
            transition: `all ${token2.motionDurationMid}`
          }
        },
        "&:hover": {
          [`${componentCls}-item-link-icon`]: {
            opacity: 1
          },
          [`${componentCls}-item-ellipsis`]: {
            opacity: 0
          }
        }
      },
      [`
    ${componentCls}-prev,
    ${componentCls}-jump-prev,
    ${componentCls}-jump-next
    `]: {
        marginInlineEnd: token2.marginXS
      },
      [`
    ${componentCls}-prev,
    ${componentCls}-next,
    ${componentCls}-jump-prev,
    ${componentCls}-jump-next
    `]: {
        display: "inline-block",
        minWidth: token2.itemSize,
        height: token2.itemSize,
        color: token2.colorText,
        fontFamily: token2.fontFamily,
        lineHeight: `${unit(token2.itemSize)}`,
        textAlign: "center",
        verticalAlign: "middle",
        listStyle: "none",
        borderRadius: token2.borderRadius,
        cursor: "pointer",
        transition: `all ${token2.motionDurationMid}`
      },
      [`${componentCls}-prev, ${componentCls}-next`]: {
        fontFamily: "Arial, Helvetica, sans-serif",
        outline: 0,
        button: {
          color: token2.colorText,
          cursor: "pointer",
          userSelect: "none"
        },
        [`${componentCls}-item-link`]: {
          display: "block",
          width: "100%",
          height: "100%",
          padding: 0,
          fontSize: token2.fontSizeSM,
          textAlign: "center",
          backgroundColor: "transparent",
          border: `${unit(token2.lineWidth)} ${token2.lineType} transparent`,
          borderRadius: token2.borderRadius,
          outline: "none",
          transition: `all ${token2.motionDurationMid}`
        },
        [`&:hover ${componentCls}-item-link`]: {
          backgroundColor: token2.colorBgTextHover
        },
        [`&:active ${componentCls}-item-link`]: {
          backgroundColor: token2.colorBgTextActive
        },
        [`&${componentCls}-disabled:hover`]: {
          [`${componentCls}-item-link`]: {
            backgroundColor: "transparent"
          }
        }
      },
      [`${componentCls}-slash`]: {
        marginInlineEnd: token2.paginationSlashMarginInlineEnd,
        marginInlineStart: token2.paginationSlashMarginInlineStart
      },
      [`${componentCls}-options`]: {
        display: "inline-block",
        marginInlineStart: token2.margin,
        verticalAlign: "middle",
        "&-size-changer.-select": {
          display: "inline-block",
          width: "auto"
        },
        "&-quick-jumper": {
          display: "inline-block",
          height: token2.controlHeight,
          marginInlineStart: token2.marginXS,
          lineHeight: unit(token2.controlHeight),
          verticalAlign: "top",
          input: Object.assign(Object.assign(Object.assign({}, genBasicInputStyle(token2)), genBaseOutlinedStyle2(token2, {
            borderColor: token2.colorBorder,
            hoverBorderColor: token2.colorPrimaryHover,
            activeBorderColor: token2.colorPrimary,
            activeShadow: token2.activeShadow
          })), {
            "&[disabled]": Object.assign({}, genDisabledStyle2(token2)),
            width: token2.calc(token2.controlHeightLG).mul(1.25).equal(),
            height: token2.controlHeight,
            boxSizing: "border-box",
            margin: 0,
            marginInlineStart: token2.marginXS,
            marginInlineEnd: token2.marginXS
          })
        }
      }
    };
  };
  var genPaginationItemStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-item`]: {
        display: "inline-block",
        minWidth: token2.itemSize,
        height: token2.itemSize,
        marginInlineEnd: token2.marginXS,
        fontFamily: token2.fontFamily,
        lineHeight: unit(token2.calc(token2.itemSize).sub(2).equal()),
        textAlign: "center",
        verticalAlign: "middle",
        listStyle: "none",
        backgroundColor: "transparent",
        border: `${unit(token2.lineWidth)} ${token2.lineType} transparent`,
        borderRadius: token2.borderRadius,
        outline: 0,
        cursor: "pointer",
        userSelect: "none",
        a: {
          display: "block",
          padding: `0 ${unit(token2.paginationItemPaddingInline)}`,
          color: token2.colorText,
          "&:hover": {
            textDecoration: "none"
          }
        },
        [`&:not(${componentCls}-item-active)`]: {
          "&:hover": {
            transition: `all ${token2.motionDurationMid}`,
            backgroundColor: token2.colorBgTextHover
          },
          "&:active": {
            backgroundColor: token2.colorBgTextActive
          }
        },
        "&-active": {
          fontWeight: token2.fontWeightStrong,
          backgroundColor: token2.itemActiveBg,
          borderColor: token2.colorPrimary,
          a: {
            color: token2.colorPrimary
          },
          "&:hover": {
            borderColor: token2.colorPrimaryHover
          },
          "&:hover a": {
            color: token2.colorPrimaryHover
          }
        }
      }
    };
  };
  var genPaginationStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), {
        "ul, ol": {
          margin: 0,
          padding: 0,
          listStyle: "none"
        },
        "&::after": {
          display: "block",
          clear: "both",
          height: 0,
          overflow: "hidden",
          visibility: "hidden",
          content: '""'
        },
        [`${componentCls}-total-text`]: {
          display: "inline-block",
          height: token2.itemSize,
          marginInlineEnd: token2.marginXS,
          lineHeight: unit(token2.calc(token2.itemSize).sub(2).equal()),
          verticalAlign: "middle"
        }
      }), genPaginationItemStyle(token2)), genPaginationJumpStyle(token2)), genPaginationSimpleStyle(token2)), genPaginationMiniStyle(token2)), genPaginationDisabledStyle(token2)), {
        // media query style
        [`@media only screen and (max-width: ${token2.screenLG}px)`]: {
          [`${componentCls}-item`]: {
            "&-after-jump-prev, &-before-jump-next": {
              display: "none"
            }
          }
        },
        [`@media only screen and (max-width: ${token2.screenSM}px)`]: {
          [`${componentCls}-options`]: {
            display: "none"
          }
        }
      }),
      // rtl style
      [`&${token2.componentCls}-rtl`]: {
        direction: "rtl"
      }
    };
  };
  var genPaginationFocusStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}:not(${componentCls}-disabled)`]: {
        [`${componentCls}-item`]: Object.assign({}, genFocusStyle(token2)),
        [`${componentCls}-jump-prev, ${componentCls}-jump-next`]: {
          "&:focus-visible": Object.assign({
            [`${componentCls}-item-link-icon`]: {
              opacity: 1
            },
            [`${componentCls}-item-ellipsis`]: {
              opacity: 0
            }
          }, genFocusOutline(token2))
        },
        [`${componentCls}-prev, ${componentCls}-next`]: {
          [`&:focus-visible ${componentCls}-item-link`]: Object.assign({}, genFocusOutline(token2))
        }
      }
    };
  };
  var prepareComponentToken15 = (token2) => Object.assign({
    itemBg: token2.colorBgContainer,
    itemSize: token2.controlHeight,
    itemSizeSM: token2.controlHeightSM,
    itemActiveBg: token2.colorBgContainer,
    itemLinkBg: token2.colorBgContainer,
    itemActiveColorDisabled: token2.colorTextDisabled,
    itemActiveBgDisabled: token2.controlItemBgActiveDisabled,
    itemInputBg: token2.colorBgContainer,
    miniOptionsSizeChangerTop: 0
  }, initComponentToken(token2));
  var prepareToken4 = (token2) => merge2(token2, {
    inputOutlineOffset: 0,
    paginationMiniOptionsMarginInlineStart: token2.calc(token2.marginXXS).div(2).equal(),
    paginationMiniQuickJumperInputWidth: token2.calc(token2.controlHeightLG).mul(1.1).equal(),
    paginationItemPaddingInline: token2.calc(token2.marginXXS).mul(1.5).equal(),
    paginationEllipsisLetterSpacing: token2.calc(token2.marginXXS).div(2).equal(),
    paginationSlashMarginInlineStart: token2.marginXXS,
    paginationSlashMarginInlineEnd: token2.marginSM,
    paginationEllipsisTextIndent: "0.13em"
    // magic for ui experience
  }, initInputToken(token2));
  var style_default20 = genStyleHooks("Pagination", (token2) => {
    const paginationToken = prepareToken4(token2);
    return [genPaginationStyle(paginationToken), genPaginationFocusStyle(paginationToken)];
  }, prepareComponentToken15);

  // node_modules/antd/es/pagination/style/bordered.js
  var genBorderedStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}${componentCls}-bordered${componentCls}-disabled:not(${componentCls}-mini)`]: {
        "&, &:hover": {
          [`${componentCls}-item-link`]: {
            borderColor: token2.colorBorder
          }
        },
        "&:focus-visible": {
          [`${componentCls}-item-link`]: {
            borderColor: token2.colorBorder
          }
        },
        [`${componentCls}-item, ${componentCls}-item-link`]: {
          backgroundColor: token2.colorBgContainerDisabled,
          borderColor: token2.colorBorder,
          [`&:hover:not(${componentCls}-item-active)`]: {
            backgroundColor: token2.colorBgContainerDisabled,
            borderColor: token2.colorBorder,
            a: {
              color: token2.colorTextDisabled
            }
          },
          [`&${componentCls}-item-active`]: {
            backgroundColor: token2.itemActiveBgDisabled
          }
        },
        [`${componentCls}-prev, ${componentCls}-next`]: {
          "&:hover button": {
            backgroundColor: token2.colorBgContainerDisabled,
            borderColor: token2.colorBorder,
            color: token2.colorTextDisabled
          },
          [`${componentCls}-item-link`]: {
            backgroundColor: token2.colorBgContainerDisabled,
            borderColor: token2.colorBorder
          }
        }
      },
      [`${componentCls}${componentCls}-bordered:not(${componentCls}-mini)`]: {
        [`${componentCls}-prev, ${componentCls}-next`]: {
          "&:hover button": {
            borderColor: token2.colorPrimaryHover,
            backgroundColor: token2.itemBg
          },
          [`${componentCls}-item-link`]: {
            backgroundColor: token2.itemLinkBg,
            borderColor: token2.colorBorder
          },
          [`&:hover ${componentCls}-item-link`]: {
            borderColor: token2.colorPrimary,
            backgroundColor: token2.itemBg,
            color: token2.colorPrimary
          },
          [`&${componentCls}-disabled`]: {
            [`${componentCls}-item-link`]: {
              borderColor: token2.colorBorder,
              color: token2.colorTextDisabled
            }
          }
        },
        [`${componentCls}-item`]: {
          backgroundColor: token2.itemBg,
          border: `${unit(token2.lineWidth)} ${token2.lineType} ${token2.colorBorder}`,
          [`&:hover:not(${componentCls}-item-active)`]: {
            borderColor: token2.colorPrimary,
            backgroundColor: token2.itemBg,
            a: {
              color: token2.colorPrimary
            }
          },
          "&-active": {
            borderColor: token2.colorPrimary
          }
        }
      }
    };
  };
  var bordered_default = genSubStyleComponent(["Pagination", "bordered"], (token2) => {
    const paginationToken = prepareToken4(token2);
    return [genBorderedStyle(paginationToken)];
  }, prepareComponentToken15);

  // node_modules/antd/es/pagination/Pagination.js
  var __rest43 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Pagination3 = (props) => {
    const {
      prefixCls: customizePrefixCls,
      selectPrefixCls: customizeSelectPrefixCls,
      className,
      rootClassName,
      style: style2,
      size: customizeSize,
      locale: customLocale,
      selectComponentClass,
      responsive,
      showSizeChanger
    } = props, restProps = __rest43(props, ["prefixCls", "selectPrefixCls", "className", "rootClassName", "style", "size", "locale", "selectComponentClass", "responsive", "showSizeChanger"]);
    const {
      xs
    } = useBreakpoint_default(responsive);
    const [, token2] = useToken();
    const {
      getPrefixCls,
      direction,
      pagination = {}
    } = React321.useContext(ConfigContext);
    const prefixCls = getPrefixCls("pagination", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default20(prefixCls);
    const mergedShowSizeChanger = showSizeChanger !== null && showSizeChanger !== void 0 ? showSizeChanger : pagination.showSizeChanger;
    const iconsProps = React321.useMemo(() => {
      const ellipsis = /* @__PURE__ */ React321.createElement("span", {
        className: `${prefixCls}-item-ellipsis`
      }, "\u2022\u2022\u2022");
      const prevIcon = /* @__PURE__ */ React321.createElement("button", {
        className: `${prefixCls}-item-link`,
        type: "button",
        tabIndex: -1
      }, direction === "rtl" ? /* @__PURE__ */ React321.createElement(RightOutlined_default2, null) : /* @__PURE__ */ React321.createElement(LeftOutlined_default2, null));
      const nextIcon = /* @__PURE__ */ React321.createElement("button", {
        className: `${prefixCls}-item-link`,
        type: "button",
        tabIndex: -1
      }, direction === "rtl" ? /* @__PURE__ */ React321.createElement(LeftOutlined_default2, null) : /* @__PURE__ */ React321.createElement(RightOutlined_default2, null));
      const jumpPrevIcon = /* @__PURE__ */ React321.createElement("a", {
        className: `${prefixCls}-item-link`
      }, /* @__PURE__ */ React321.createElement("div", {
        className: `${prefixCls}-item-container`
      }, direction === "rtl" ? /* @__PURE__ */ React321.createElement(DoubleRightOutlined_default2, {
        className: `${prefixCls}-item-link-icon`
      }) : /* @__PURE__ */ React321.createElement(DoubleLeftOutlined_default2, {
        className: `${prefixCls}-item-link-icon`
      }), ellipsis));
      const jumpNextIcon = /* @__PURE__ */ React321.createElement("a", {
        className: `${prefixCls}-item-link`
      }, /* @__PURE__ */ React321.createElement("div", {
        className: `${prefixCls}-item-container`
      }, direction === "rtl" ? /* @__PURE__ */ React321.createElement(DoubleLeftOutlined_default2, {
        className: `${prefixCls}-item-link-icon`
      }) : /* @__PURE__ */ React321.createElement(DoubleRightOutlined_default2, {
        className: `${prefixCls}-item-link-icon`
      }), ellipsis));
      return {
        prevIcon,
        nextIcon,
        jumpPrevIcon,
        jumpNextIcon
      };
    }, [direction, prefixCls]);
    const [contextLocale] = useLocale_default("Pagination", en_US_default);
    const locale9 = Object.assign(Object.assign({}, contextLocale), customLocale);
    const mergedSize = useSize_default(customizeSize);
    const isSmall = mergedSize === "small" || !!(xs && !mergedSize && responsive);
    const selectPrefixCls = getPrefixCls("select", customizeSelectPrefixCls);
    const extendedClassName = (0, import_classnames113.default)({
      [`${prefixCls}-mini`]: isSmall,
      [`${prefixCls}-rtl`]: direction === "rtl",
      [`${prefixCls}-bordered`]: token2.wireframe
    }, pagination === null || pagination === void 0 ? void 0 : pagination.className, className, rootClassName, hashId, cssVarCls);
    const mergedStyle = Object.assign(Object.assign({}, pagination === null || pagination === void 0 ? void 0 : pagination.style), style2);
    return wrapCSSVar(/* @__PURE__ */ React321.createElement(React321.Fragment, null, token2.wireframe && /* @__PURE__ */ React321.createElement(bordered_default, {
      prefixCls
    }), /* @__PURE__ */ React321.createElement(Pagination_default, Object.assign({}, iconsProps, restProps, {
      style: mergedStyle,
      prefixCls,
      selectPrefixCls,
      className: extendedClassName,
      selectComponentClass: selectComponentClass || (isSmall ? MiniSelect : MiddleSelect),
      locale: locale9,
      showSizeChanger: mergedShowSizeChanger
    }))));
  };
  if (true) {
    Pagination3.displayName = "Pagination";
  }
  var Pagination_default2 = Pagination3;

  // node_modules/antd/es/pagination/index.js
  var pagination_default = Pagination_default2;

  // node_modules/antd/es/spin/index.js
  var React322 = __toESM(require_react());
  var import_classnames114 = __toESM(require_classnames());

  // node_modules/antd/es/spin/style/index.js
  var antSpinMove = new Keyframes_default("antSpinMove", {
    to: {
      opacity: 1
    }
  });
  var antRotate = new Keyframes_default("antRotate", {
    to: {
      transform: "rotate(405deg)"
    }
  });
  var genSpinStyle = (token2) => {
    const {
      componentCls,
      calc
    } = token2;
    return {
      [`${componentCls}`]: Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "absolute",
        display: "none",
        color: token2.colorPrimary,
        fontSize: 0,
        textAlign: "center",
        verticalAlign: "middle",
        opacity: 0,
        transition: `transform ${token2.motionDurationSlow} ${token2.motionEaseInOutCirc}`,
        "&-spinning": {
          position: "static",
          display: "inline-block",
          opacity: 1
        },
        [`${componentCls}-text`]: {
          fontSize: token2.fontSize,
          paddingTop: calc(calc(token2.dotSize).sub(token2.fontSize)).div(2).add(2).equal()
        },
        "&-fullscreen": {
          position: "fixed",
          width: "100vw",
          height: "100vh",
          backgroundColor: token2.colorBgMask,
          zIndex: token2.zIndexPopupBase,
          inset: 0,
          display: "flex",
          alignItems: "center",
          flexDirection: "column",
          justifyContent: "center",
          opacity: 0,
          visibility: "hidden",
          transition: `all ${token2.motionDurationMid}`,
          "&-show": {
            opacity: 1,
            visibility: "visible"
          },
          [`${componentCls}-dot ${componentCls}-dot-item`]: {
            backgroundColor: token2.colorWhite
          },
          [`${componentCls}-text`]: {
            color: token2.colorTextLightSolid
          }
        },
        "&-nested-loading": {
          position: "relative",
          [`> div > ${componentCls}`]: {
            position: "absolute",
            top: 0,
            insetInlineStart: 0,
            zIndex: 4,
            display: "block",
            width: "100%",
            height: "100%",
            maxHeight: token2.contentHeight,
            [`${componentCls}-dot`]: {
              position: "absolute",
              top: "50%",
              insetInlineStart: "50%",
              margin: calc(token2.dotSize).mul(-1).div(2).equal()
            },
            [`${componentCls}-text`]: {
              position: "absolute",
              top: "50%",
              width: "100%",
              textShadow: `0 1px 2px ${token2.colorBgContainer}`
              // FIXME: shadow
            },
            [`&${componentCls}-show-text ${componentCls}-dot`]: {
              marginTop: calc(token2.dotSize).div(2).mul(-1).sub(10).equal()
            },
            "&-sm": {
              [`${componentCls}-dot`]: {
                margin: calc(token2.dotSizeSM).mul(-1).div(2).equal()
              },
              [`${componentCls}-text`]: {
                paddingTop: calc(calc(token2.dotSizeSM).sub(token2.fontSize)).div(2).add(2).equal()
              },
              [`&${componentCls}-show-text ${componentCls}-dot`]: {
                marginTop: calc(token2.dotSizeSM).div(2).mul(-1).sub(10).equal()
              }
            },
            "&-lg": {
              [`${componentCls}-dot`]: {
                margin: calc(token2.dotSizeLG).mul(-1).div(2).equal()
              },
              [`${componentCls}-text`]: {
                paddingTop: calc(calc(token2.dotSizeLG).sub(token2.fontSize)).div(2).add(2).equal()
              },
              [`&${componentCls}-show-text ${componentCls}-dot`]: {
                marginTop: calc(token2.dotSizeLG).div(2).mul(-1).sub(10).equal()
              }
            }
          },
          [`${componentCls}-container`]: {
            position: "relative",
            transition: `opacity ${token2.motionDurationSlow}`,
            "&::after": {
              position: "absolute",
              top: 0,
              insetInlineEnd: 0,
              bottom: 0,
              insetInlineStart: 0,
              zIndex: 10,
              width: "100%",
              height: "100%",
              background: token2.colorBgContainer,
              opacity: 0,
              transition: `all ${token2.motionDurationSlow}`,
              content: '""',
              pointerEvents: "none"
            }
          },
          [`${componentCls}-blur`]: {
            clear: "both",
            opacity: 0.5,
            userSelect: "none",
            pointerEvents: "none",
            [`&::after`]: {
              opacity: 0.4,
              pointerEvents: "auto"
            }
          }
        },
        // tip
        // ------------------------------
        [`&-tip`]: {
          color: token2.spinDotDefault
        },
        // dots
        // ------------------------------
        [`${componentCls}-dot`]: {
          position: "relative",
          display: "inline-block",
          fontSize: token2.dotSize,
          width: "1em",
          height: "1em",
          "&-item": {
            position: "absolute",
            display: "block",
            width: calc(token2.dotSize).sub(calc(token2.marginXXS).div(2)).div(2).equal(),
            height: calc(token2.dotSize).sub(calc(token2.marginXXS).div(2)).div(2).equal(),
            backgroundColor: token2.colorPrimary,
            borderRadius: "100%",
            transform: "scale(0.75)",
            transformOrigin: "50% 50%",
            opacity: 0.3,
            animationName: antSpinMove,
            animationDuration: "1s",
            animationIterationCount: "infinite",
            animationTimingFunction: "linear",
            animationDirection: "alternate",
            "&:nth-child(1)": {
              top: 0,
              insetInlineStart: 0,
              animationDelay: "0s"
            },
            "&:nth-child(2)": {
              top: 0,
              insetInlineEnd: 0,
              animationDelay: "0.4s"
            },
            "&:nth-child(3)": {
              insetInlineEnd: 0,
              bottom: 0,
              animationDelay: "0.8s"
            },
            "&:nth-child(4)": {
              bottom: 0,
              insetInlineStart: 0,
              animationDelay: "1.2s"
            }
          },
          "&-spin": {
            transform: "rotate(45deg)",
            animationName: antRotate,
            animationDuration: "1.2s",
            animationIterationCount: "infinite",
            animationTimingFunction: "linear"
          }
        },
        // small
        [`&-sm ${componentCls}-dot`]: {
          fontSize: token2.dotSizeSM,
          i: {
            width: calc(calc(token2.dotSizeSM).sub(calc(token2.marginXXS).div(2))).div(2).equal(),
            height: calc(calc(token2.dotSizeSM).sub(calc(token2.marginXXS).div(2))).div(2).equal()
          }
        },
        // large
        [`&-lg ${componentCls}-dot`]: {
          fontSize: token2.dotSizeLG,
          i: {
            width: calc(calc(token2.dotSizeLG).sub(token2.marginXXS)).div(2).equal(),
            height: calc(calc(token2.dotSizeLG).sub(token2.marginXXS)).div(2).equal()
          }
        },
        [`&${componentCls}-show-text ${componentCls}-text`]: {
          display: "block"
        }
      })
    };
  };
  var prepareComponentToken16 = (token2) => {
    const {
      controlHeightLG,
      controlHeight
    } = token2;
    return {
      contentHeight: 400,
      dotSize: controlHeightLG / 2,
      dotSizeSM: controlHeightLG * 0.35,
      dotSizeLG: controlHeight
    };
  };
  var style_default21 = genStyleHooks("Spin", (token2) => {
    const spinToken = merge2(token2, {
      spinDotDefault: token2.colorTextDescription
    });
    return [genSpinStyle(spinToken)];
  }, prepareComponentToken16);

  // node_modules/antd/es/spin/index.js
  var __rest44 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var defaultIndicator = null;
  function renderIndicator(prefixCls, props) {
    const {
      indicator
    } = props;
    const dotClassName = `${prefixCls}-dot`;
    if (indicator === null) {
      return null;
    }
    if (isValidElement4(indicator)) {
      return cloneElement4(indicator, {
        className: (0, import_classnames114.default)(indicator.props.className, dotClassName)
      });
    }
    if (isValidElement4(defaultIndicator)) {
      return cloneElement4(defaultIndicator, {
        className: (0, import_classnames114.default)(defaultIndicator.props.className, dotClassName)
      });
    }
    return /* @__PURE__ */ React322.createElement("span", {
      className: (0, import_classnames114.default)(dotClassName, `${prefixCls}-dot-spin`)
    }, /* @__PURE__ */ React322.createElement("i", {
      className: `${prefixCls}-dot-item`,
      key: 1
    }), /* @__PURE__ */ React322.createElement("i", {
      className: `${prefixCls}-dot-item`,
      key: 2
    }), /* @__PURE__ */ React322.createElement("i", {
      className: `${prefixCls}-dot-item`,
      key: 3
    }), /* @__PURE__ */ React322.createElement("i", {
      className: `${prefixCls}-dot-item`,
      key: 4
    }));
  }
  function shouldDelay(spinning, delay) {
    return !!spinning && !!delay && !isNaN(Number(delay));
  }
  var Spin = (props) => {
    const {
      prefixCls: customizePrefixCls,
      spinning: customSpinning = true,
      delay = 0,
      className,
      rootClassName,
      size = "default",
      tip,
      wrapperClassName,
      style: style2,
      children,
      fullscreen = false
    } = props, restProps = __rest44(props, ["prefixCls", "spinning", "delay", "className", "rootClassName", "size", "tip", "wrapperClassName", "style", "children", "fullscreen"]);
    const {
      getPrefixCls
    } = React322.useContext(ConfigContext);
    const prefixCls = getPrefixCls("spin", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default21(prefixCls);
    const [spinning, setSpinning] = React322.useState(() => customSpinning && !shouldDelay(customSpinning, delay));
    React322.useEffect(() => {
      if (customSpinning) {
        const showSpinning = debounce(delay, () => {
          setSpinning(true);
        });
        showSpinning();
        return () => {
          var _a;
          (_a = showSpinning === null || showSpinning === void 0 ? void 0 : showSpinning.cancel) === null || _a === void 0 ? void 0 : _a.call(showSpinning);
        };
      }
      setSpinning(false);
    }, [delay, customSpinning]);
    const isNestedPattern = React322.useMemo(() => typeof children !== "undefined" && !fullscreen, [children, fullscreen]);
    if (true) {
      const warning8 = devUseWarning("Spin");
      true ? warning8(!tip || isNestedPattern || fullscreen, "usage", "`tip` only work in nest or fullscreen pattern.") : void 0;
    }
    const {
      direction,
      spin
    } = React322.useContext(ConfigContext);
    const spinClassName = (0, import_classnames114.default)(prefixCls, spin === null || spin === void 0 ? void 0 : spin.className, {
      [`${prefixCls}-sm`]: size === "small",
      [`${prefixCls}-lg`]: size === "large",
      [`${prefixCls}-spinning`]: spinning,
      [`${prefixCls}-show-text`]: !!tip,
      [`${prefixCls}-fullscreen`]: fullscreen,
      [`${prefixCls}-fullscreen-show`]: fullscreen && spinning,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, className, rootClassName, hashId, cssVarCls);
    const containerClassName = (0, import_classnames114.default)(`${prefixCls}-container`, {
      [`${prefixCls}-blur`]: spinning
    });
    const divProps = omit(restProps, ["indicator"]);
    const mergedStyle = Object.assign(Object.assign({}, spin === null || spin === void 0 ? void 0 : spin.style), style2);
    const spinElement = /* @__PURE__ */ React322.createElement("div", Object.assign({}, divProps, {
      style: mergedStyle,
      className: spinClassName,
      "aria-live": "polite",
      "aria-busy": spinning
    }), renderIndicator(prefixCls, props), tip && (isNestedPattern || fullscreen) ? /* @__PURE__ */ React322.createElement("div", {
      className: `${prefixCls}-text`
    }, tip) : null);
    if (isNestedPattern) {
      return wrapCSSVar(/* @__PURE__ */ React322.createElement("div", Object.assign({}, divProps, {
        className: (0, import_classnames114.default)(`${prefixCls}-nested-loading`, wrapperClassName, hashId, cssVarCls)
      }), spinning && /* @__PURE__ */ React322.createElement("div", {
        key: "loading"
      }, spinElement), /* @__PURE__ */ React322.createElement("div", {
        className: containerClassName,
        key: "container"
      }, children)));
    }
    return wrapCSSVar(spinElement);
  };
  Spin.setDefaultIndicator = (indicator) => {
    defaultIndicator = indicator;
  };
  if (true) {
    Spin.displayName = "Spin";
  }
  var spin_default = Spin;

  // node_modules/antd/es/modal/PurePanel.js
  var React323 = __toESM(require_react());
  var import_classnames115 = __toESM(require_classnames());
  var __rest45 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var PurePanel5 = (props) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      closeIcon,
      closable,
      type: type4,
      title,
      children,
      footer
    } = props, restProps = __rest45(props, ["prefixCls", "className", "closeIcon", "closable", "type", "title", "children", "footer"]);
    const {
      getPrefixCls
    } = React323.useContext(ConfigContext);
    const rootPrefixCls = getPrefixCls();
    const prefixCls = customizePrefixCls || getPrefixCls("modal");
    const rootCls = useCSSVarCls_default(rootPrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default4(prefixCls, rootCls);
    const confirmPrefixCls = `${prefixCls}-confirm`;
    let additionalProps = {};
    if (type4) {
      additionalProps = {
        closable: closable !== null && closable !== void 0 ? closable : false,
        title: "",
        footer: "",
        children: /* @__PURE__ */ React323.createElement(ConfirmContent, Object.assign({}, props, {
          prefixCls,
          confirmPrefixCls,
          rootPrefixCls,
          content: children
        }))
      };
    } else {
      additionalProps = {
        closable: closable !== null && closable !== void 0 ? closable : true,
        title,
        footer: footer !== null && /* @__PURE__ */ React323.createElement(Footer, Object.assign({}, props)),
        children
      };
    }
    return wrapCSSVar(/* @__PURE__ */ React323.createElement(Panel_default, Object.assign({
      prefixCls,
      className: (0, import_classnames115.default)(hashId, `${prefixCls}-pure-panel`, type4 && confirmPrefixCls, type4 && `${confirmPrefixCls}-${type4}`, className, cssVarCls, rootCls)
    }, restProps, {
      closeIcon: renderCloseIcon(prefixCls, closeIcon),
      closable
    }, additionalProps)));
  };
  var PurePanel_default3 = withPureRenderTheme(PurePanel5);

  // node_modules/antd/es/modal/index.js
  function modalWarn(props) {
    return confirm2(withWarn(props));
  }
  var Modal2 = Modal_default;
  Modal2.useModal = useModal_default;
  Modal2.info = function infoFn(props) {
    return confirm2(withInfo(props));
  };
  Modal2.success = function successFn(props) {
    return confirm2(withSuccess(props));
  };
  Modal2.error = function errorFn(props) {
    return confirm2(withError(props));
  };
  Modal2.warning = modalWarn;
  Modal2.warn = modalWarn;
  Modal2.confirm = function confirmFn(props) {
    return confirm2(withConfirm(props));
  };
  Modal2.destroyAll = function destroyAllFn() {
    while (destroyFns_default.length) {
      const close = destroyFns_default.pop();
      if (close) {
        close();
      }
    }
  };
  Modal2.config = modalGlobalConfig;
  Modal2._InternalPanelDoNotUseOrYouWillBeFired = PurePanel_default3;
  if (true) {
    Modal2.displayName = "Modal";
  }
  var modal_default = Modal2;

  // node_modules/antd/es/row/index.js
  var row_default2 = row_default;

  // node_modules/antd/es/table/Table.js
  var React391 = __toESM(require_react());

  // node_modules/rc-table/es/constant.js
  var EXPAND_COLUMN = {};
  var INTERNAL_HOOKS = "rc-table-internal-hook";

  // node_modules/@rc-component/context/es/context.js
  var React324 = __toESM(require_react());
  var import_react_dom7 = __toESM(require_react_dom());
  function createContext38(defaultValue) {
    var Context3 = /* @__PURE__ */ React324.createContext(void 0);
    var Provider2 = function Provider3(_ref) {
      var value = _ref.value, children = _ref.children;
      var valueRef = React324.useRef(value);
      valueRef.current = value;
      var _React$useState = React324.useState(function() {
        return {
          getValue: function getValue4() {
            return valueRef.current;
          },
          listeners: /* @__PURE__ */ new Set()
        };
      }), _React$useState2 = _slicedToArray(_React$useState, 1), context = _React$useState2[0];
      useLayoutEffect_default(function() {
        (0, import_react_dom7.unstable_batchedUpdates)(function() {
          context.listeners.forEach(function(listener2) {
            listener2(value);
          });
        });
      }, [value]);
      return /* @__PURE__ */ React324.createElement(Context3.Provider, {
        value: context
      }, children);
    };
    return {
      Context: Context3,
      Provider: Provider2,
      defaultValue
    };
  }
  function useContext134(holder, selector) {
    var eventSelector = useEvent(typeof selector === "function" ? selector : function(ctx) {
      if (selector === void 0) {
        return ctx;
      }
      if (!Array.isArray(selector)) {
        return ctx[selector];
      }
      var obj = {};
      selector.forEach(function(key) {
        obj[key] = ctx[key];
      });
      return obj;
    });
    var context = React324.useContext(holder === null || holder === void 0 ? void 0 : holder.Context);
    var _ref2 = context || {}, listeners = _ref2.listeners, getValue4 = _ref2.getValue;
    var valueRef = React324.useRef();
    valueRef.current = eventSelector(context ? getValue4() : holder === null || holder === void 0 ? void 0 : holder.defaultValue);
    var _React$useState3 = React324.useState({}), _React$useState4 = _slicedToArray(_React$useState3, 2), forceUpdate = _React$useState4[1];
    useLayoutEffect_default(function() {
      if (!context) {
        return;
      }
      function trigger(nextValue) {
        var nextSelectorValue = eventSelector(nextValue);
        if (!isEqual_default(valueRef.current, nextSelectorValue, true)) {
          forceUpdate({});
        }
      }
      listeners.add(trigger);
      return function() {
        listeners.delete(trigger);
      };
    }, [context]);
    return valueRef.current;
  }

  // node_modules/@rc-component/context/es/Immutable.js
  var React325 = __toESM(require_react());
  function createImmutable() {
    var ImmutableContext = /* @__PURE__ */ React325.createContext(null);
    function useImmutableMark3() {
      return React325.useContext(ImmutableContext);
    }
    function makeImmutable3(Component11, shouldTriggerRender) {
      var refAble = supportRef(Component11);
      var ImmutableComponent = function ImmutableComponent2(props, ref) {
        var refProps = refAble ? {
          ref
        } : {};
        var renderTimesRef = React325.useRef(0);
        var prevProps = React325.useRef(props);
        var mark = useImmutableMark3();
        if (mark !== null) {
          return /* @__PURE__ */ React325.createElement(Component11, _extends({}, props, refProps));
        }
        if (
          // Always trigger re-render if not provide `notTriggerRender`
          !shouldTriggerRender || shouldTriggerRender(prevProps.current, props)
        ) {
          renderTimesRef.current += 1;
        }
        prevProps.current = props;
        return /* @__PURE__ */ React325.createElement(ImmutableContext.Provider, {
          value: renderTimesRef.current
        }, /* @__PURE__ */ React325.createElement(Component11, _extends({}, props, refProps)));
      };
      if (true) {
        ImmutableComponent.displayName = "ImmutableRoot(".concat(Component11.displayName || Component11.name, ")");
      }
      return refAble ? /* @__PURE__ */ React325.forwardRef(ImmutableComponent) : ImmutableComponent;
    }
    function responseImmutable3(Component11, propsAreEqual) {
      var refAble = supportRef(Component11);
      var ImmutableComponent = function ImmutableComponent2(props, ref) {
        var refProps = refAble ? {
          ref
        } : {};
        useImmutableMark3();
        return /* @__PURE__ */ React325.createElement(Component11, _extends({}, props, refProps));
      };
      if (true) {
        ImmutableComponent.displayName = "ImmutableResponse(".concat(Component11.displayName || Component11.name, ")");
      }
      return refAble ? /* @__PURE__ */ React325.memo(/* @__PURE__ */ React325.forwardRef(ImmutableComponent), propsAreEqual) : /* @__PURE__ */ React325.memo(ImmutableComponent, propsAreEqual);
    }
    return {
      makeImmutable: makeImmutable3,
      responseImmutable: responseImmutable3,
      useImmutableMark: useImmutableMark3
    };
  }

  // node_modules/@rc-component/context/es/index.js
  var _createImmutable = createImmutable();
  var makeImmutable = _createImmutable.makeImmutable;
  var responseImmutable = _createImmutable.responseImmutable;
  var useImmutableMark = _createImmutable.useImmutableMark;

  // node_modules/rc-table/es/Footer/index.js
  var React333 = __toESM(require_react());

  // node_modules/rc-table/es/context/TableContext.js
  var _createImmutable2 = createImmutable();
  var makeImmutable2 = _createImmutable2.makeImmutable;
  var responseImmutable2 = _createImmutable2.responseImmutable;
  var useImmutableMark2 = _createImmutable2.useImmutableMark;
  var TableContext = createContext38();
  var TableContext_default = TableContext;

  // node_modules/rc-table/es/hooks/useRenderTimes.js
  var React326 = __toESM(require_react());
  function useRenderTimes(props, debug) {
    var timesRef = React326.useRef(0);
    timesRef.current += 1;
    var propsRef = React326.useRef(props);
    var keys2 = [];
    Object.keys(props || {}).map(function(key) {
      var _propsRef$current;
      if ((props === null || props === void 0 ? void 0 : props[key]) !== ((_propsRef$current = propsRef.current) === null || _propsRef$current === void 0 ? void 0 : _propsRef$current[key])) {
        keys2.push(key);
      }
    });
    propsRef.current = props;
    var keysRef = React326.useRef([]);
    if (keys2.length) {
      keysRef.current = keys2;
    }
    React326.useDebugValue(timesRef.current);
    React326.useDebugValue(keysRef.current.join(", "));
    if (debug) {
      console.log("".concat(debug, ":"), timesRef.current, keysRef.current);
    }
    return timesRef.current;
  }
  var useRenderTimes_default = true ? useRenderTimes : function() {
  };
  var RenderBlock = /* @__PURE__ */ React326.memo(function() {
    var times = useRenderTimes();
    return /* @__PURE__ */ React326.createElement("h1", null, "Render Times: ", times);
  });
  RenderBlock.displayName = "RenderBlock";

  // node_modules/rc-table/es/Footer/Cell.js
  var React331 = __toESM(require_react());

  // node_modules/rc-table/es/Cell/index.js
  var import_classnames116 = __toESM(require_classnames());
  var React329 = __toESM(require_react());

  // node_modules/rc-table/es/Cell/useCellRender.js
  var React328 = __toESM(require_react());

  // node_modules/rc-table/es/context/PerfContext.js
  var React327 = __toESM(require_react());
  var PerfContext = /* @__PURE__ */ React327.createContext({
    renderWithProps: false
  });
  var PerfContext_default = PerfContext;

  // node_modules/rc-table/es/utils/valueUtil.js
  var INTERNAL_KEY_PREFIX = "RC_TABLE_KEY";
  function toArray8(arr) {
    if (arr === void 0 || arr === null) {
      return [];
    }
    return Array.isArray(arr) ? arr : [arr];
  }
  function getColumnsKey(columns) {
    var columnKeys = [];
    var keys2 = {};
    columns.forEach(function(column2) {
      var _ref = column2 || {}, key = _ref.key, dataIndex = _ref.dataIndex;
      var mergedKey = key || toArray8(dataIndex).join("-") || INTERNAL_KEY_PREFIX;
      while (keys2[mergedKey]) {
        mergedKey = "".concat(mergedKey, "_next");
      }
      keys2[mergedKey] = true;
      columnKeys.push(mergedKey);
    });
    return columnKeys;
  }
  function validateValue(val) {
    return val !== null && val !== void 0;
  }

  // node_modules/rc-table/es/Cell/useCellRender.js
  function isRenderCell(data) {
    return data && _typeof(data) === "object" && !Array.isArray(data) && !/* @__PURE__ */ React328.isValidElement(data);
  }
  function useCellRender2(record, dataIndex, renderIndex, children, render2, shouldCellUpdate) {
    var perfRecord = React328.useContext(PerfContext_default);
    var mark = useImmutableMark2();
    var retData = useMemo(function() {
      if (validateValue(children)) {
        return [children];
      }
      var path2 = dataIndex === null || dataIndex === void 0 || dataIndex === "" ? [] : Array.isArray(dataIndex) ? dataIndex : [dataIndex];
      var value = get(record, path2);
      var returnChildNode = value;
      var returnCellProps = void 0;
      if (render2) {
        var renderData = render2(value, record, renderIndex);
        if (isRenderCell(renderData)) {
          if (true) {
            warning_default(false, "`columns.render` return cell props is deprecated with perf issue, please use `onCell` instead.");
          }
          returnChildNode = renderData.children;
          returnCellProps = renderData.props;
          perfRecord.renderWithProps = true;
        } else {
          returnChildNode = renderData;
        }
      }
      return [returnChildNode, returnCellProps];
    }, [
      // Force update deps
      mark,
      // Normal deps
      record,
      children,
      dataIndex,
      render2,
      renderIndex
    ], function(prev2, next2) {
      if (shouldCellUpdate) {
        var _prev = _slicedToArray(prev2, 2), prevRecord = _prev[1];
        var _next = _slicedToArray(next2, 2), nextRecord = _next[1];
        return shouldCellUpdate(nextRecord, prevRecord);
      }
      if (perfRecord.renderWithProps) {
        return true;
      }
      return !isEqual_default(prev2, next2, true);
    });
    return retData;
  }

  // node_modules/rc-table/es/Cell/useHoverState.js
  function inHoverRange(cellStartRow, cellRowSpan, startRow, endRow) {
    var cellEndRow = cellStartRow + cellRowSpan - 1;
    return cellStartRow <= endRow && cellEndRow >= startRow;
  }
  function useHoverState(rowIndex, rowSpan) {
    return useContext134(TableContext_default, function(ctx) {
      var hovering = inHoverRange(rowIndex, rowSpan || 1, ctx.hoverStartRow, ctx.hoverEndRow);
      return [hovering, ctx.onHover];
    });
  }

  // node_modules/rc-table/es/Cell/index.js
  var getTitleFromCellRenderChildren = function getTitleFromCellRenderChildren2(_ref) {
    var ellipsis = _ref.ellipsis, rowType = _ref.rowType, children = _ref.children;
    var title;
    var ellipsisConfig = ellipsis === true ? {
      showTitle: true
    } : ellipsis;
    if (ellipsisConfig && (ellipsisConfig.showTitle || rowType === "header")) {
      if (typeof children === "string" || typeof children === "number") {
        title = children.toString();
      } else if (/* @__PURE__ */ React329.isValidElement(children) && typeof children.props.children === "string") {
        title = children.props.children;
      }
    }
    return title;
  };
  function Cell(props) {
    var _ref2, _ref3, _legacyCellProps$colS, _ref4, _ref5, _legacyCellProps$rowS, _additionalProps$titl, _classNames;
    if (true) {
      useRenderTimes_default(props);
    }
    var Component11 = props.component, children = props.children, ellipsis = props.ellipsis, scope = props.scope, prefixCls = props.prefixCls, className = props.className, align = props.align, record = props.record, render2 = props.render, dataIndex = props.dataIndex, renderIndex = props.renderIndex, shouldCellUpdate = props.shouldCellUpdate, index2 = props.index, rowType = props.rowType, colSpan = props.colSpan, rowSpan = props.rowSpan, fixLeft = props.fixLeft, fixRight = props.fixRight, firstFixLeft = props.firstFixLeft, lastFixLeft = props.lastFixLeft, firstFixRight = props.firstFixRight, lastFixRight = props.lastFixRight, appendNode = props.appendNode, _props$additionalProp = props.additionalProps, additionalProps = _props$additionalProp === void 0 ? {} : _props$additionalProp, isSticky = props.isSticky;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var _useContext = useContext134(TableContext_default, ["supportSticky", "allColumnsFixedLeft"]), supportSticky = _useContext.supportSticky, allColumnsFixedLeft = _useContext.allColumnsFixedLeft;
    var _useCellRender = useCellRender2(record, dataIndex, renderIndex, children, render2, shouldCellUpdate), _useCellRender2 = _slicedToArray(_useCellRender, 2), childNode = _useCellRender2[0], legacyCellProps = _useCellRender2[1];
    var fixedStyle = {};
    var isFixLeft = typeof fixLeft === "number" && supportSticky;
    var isFixRight = typeof fixRight === "number" && supportSticky;
    if (isFixLeft) {
      fixedStyle.position = "sticky";
      fixedStyle.left = fixLeft;
    }
    if (isFixRight) {
      fixedStyle.position = "sticky";
      fixedStyle.right = fixRight;
    }
    var mergedColSpan = (_ref2 = (_ref3 = (_legacyCellProps$colS = legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.colSpan) !== null && _legacyCellProps$colS !== void 0 ? _legacyCellProps$colS : additionalProps.colSpan) !== null && _ref3 !== void 0 ? _ref3 : colSpan) !== null && _ref2 !== void 0 ? _ref2 : 1;
    var mergedRowSpan = (_ref4 = (_ref5 = (_legacyCellProps$rowS = legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.rowSpan) !== null && _legacyCellProps$rowS !== void 0 ? _legacyCellProps$rowS : additionalProps.rowSpan) !== null && _ref5 !== void 0 ? _ref5 : rowSpan) !== null && _ref4 !== void 0 ? _ref4 : 1;
    var _useHoverState = useHoverState(index2, mergedRowSpan), _useHoverState2 = _slicedToArray(_useHoverState, 2), hovering = _useHoverState2[0], onHover = _useHoverState2[1];
    var onMouseEnter = useEvent(function(event) {
      var _additionalProps$onMo;
      if (record) {
        onHover(index2, index2 + mergedRowSpan - 1);
      }
      additionalProps === null || additionalProps === void 0 || (_additionalProps$onMo = additionalProps.onMouseEnter) === null || _additionalProps$onMo === void 0 || _additionalProps$onMo.call(additionalProps, event);
    });
    var onMouseLeave = useEvent(function(event) {
      var _additionalProps$onMo2;
      if (record) {
        onHover(-1, -1);
      }
      additionalProps === null || additionalProps === void 0 || (_additionalProps$onMo2 = additionalProps.onMouseLeave) === null || _additionalProps$onMo2 === void 0 || _additionalProps$onMo2.call(additionalProps, event);
    });
    if (mergedColSpan === 0 || mergedRowSpan === 0) {
      return null;
    }
    var title = (_additionalProps$titl = additionalProps.title) !== null && _additionalProps$titl !== void 0 ? _additionalProps$titl : getTitleFromCellRenderChildren({
      rowType,
      ellipsis,
      children: childNode
    });
    var mergedClassName = (0, import_classnames116.default)(cellPrefixCls, className, (_classNames = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-left"), isFixLeft && supportSticky), "".concat(cellPrefixCls, "-fix-left-first"), firstFixLeft && supportSticky), "".concat(cellPrefixCls, "-fix-left-last"), lastFixLeft && supportSticky), "".concat(cellPrefixCls, "-fix-left-all"), lastFixLeft && allColumnsFixedLeft && supportSticky), "".concat(cellPrefixCls, "-fix-right"), isFixRight && supportSticky), "".concat(cellPrefixCls, "-fix-right-first"), firstFixRight && supportSticky), "".concat(cellPrefixCls, "-fix-right-last"), lastFixRight && supportSticky), "".concat(cellPrefixCls, "-ellipsis"), ellipsis), "".concat(cellPrefixCls, "-with-append"), appendNode), "".concat(cellPrefixCls, "-fix-sticky"), (isFixLeft || isFixRight) && isSticky && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-row-hover"), !legacyCellProps && hovering)), additionalProps.className, legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.className);
    var alignStyle = {};
    if (align) {
      alignStyle.textAlign = align;
    }
    var mergedStyle = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, fixedStyle), additionalProps.style), alignStyle), legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.style);
    var mergedChildNode = childNode;
    if (_typeof(mergedChildNode) === "object" && !Array.isArray(mergedChildNode) && !/* @__PURE__ */ React329.isValidElement(mergedChildNode)) {
      mergedChildNode = null;
    }
    if (ellipsis && (lastFixLeft || firstFixRight)) {
      mergedChildNode = /* @__PURE__ */ React329.createElement("span", {
        className: "".concat(cellPrefixCls, "-content")
      }, mergedChildNode);
    }
    return /* @__PURE__ */ React329.createElement(Component11, _extends({}, legacyCellProps, additionalProps, {
      className: mergedClassName,
      style: mergedStyle,
      title,
      scope,
      onMouseEnter,
      onMouseLeave,
      colSpan: mergedColSpan !== 1 ? mergedColSpan : null,
      rowSpan: mergedRowSpan !== 1 ? mergedRowSpan : null
    }), appendNode, mergedChildNode);
  }
  var Cell_default = /* @__PURE__ */ React329.memo(Cell);

  // node_modules/rc-table/es/utils/fixUtil.js
  function getCellFixedInfo(colStart, colEnd, columns, stickyOffsets, direction, curColumns) {
    var startColumn = columns[colStart] || {};
    var endColumn = columns[colEnd] || {};
    var fixLeft;
    var fixRight;
    if (startColumn.fixed === "left") {
      fixLeft = stickyOffsets.left[direction === "rtl" ? colEnd : colStart];
    } else if (endColumn.fixed === "right") {
      fixRight = stickyOffsets.right[direction === "rtl" ? colStart : colEnd];
    }
    var lastFixLeft = false;
    var firstFixRight = false;
    var lastFixRight = false;
    var firstFixLeft = false;
    var nextColumn = columns[colEnd + 1];
    var prevColumn = columns[colStart - 1];
    var canLastFix = !(curColumns !== null && curColumns !== void 0 && curColumns.children);
    if (direction === "rtl") {
      if (fixLeft !== void 0) {
        var prevFixLeft = prevColumn && prevColumn.fixed === "left";
        firstFixLeft = !prevFixLeft && canLastFix;
      } else if (fixRight !== void 0) {
        var nextFixRight = nextColumn && nextColumn.fixed === "right";
        lastFixRight = !nextFixRight && canLastFix;
      }
    } else if (fixLeft !== void 0) {
      var nextFixLeft = nextColumn && nextColumn.fixed === "left";
      lastFixLeft = !nextFixLeft && canLastFix;
    } else if (fixRight !== void 0) {
      var prevFixRight = prevColumn && prevColumn.fixed === "right";
      firstFixRight = !prevFixRight && canLastFix;
    }
    return {
      fixLeft,
      fixRight,
      lastFixLeft,
      firstFixRight,
      lastFixRight,
      firstFixLeft,
      isSticky: stickyOffsets.isSticky
    };
  }

  // node_modules/rc-table/es/Footer/SummaryContext.js
  var React330 = __toESM(require_react());
  var SummaryContext = /* @__PURE__ */ React330.createContext({});
  var SummaryContext_default = SummaryContext;

  // node_modules/rc-table/es/Footer/Cell.js
  function SummaryCell(_ref) {
    var className = _ref.className, index2 = _ref.index, children = _ref.children, _ref$colSpan = _ref.colSpan, colSpan = _ref$colSpan === void 0 ? 1 : _ref$colSpan, rowSpan = _ref.rowSpan, align = _ref.align;
    var _useContext = useContext134(TableContext_default, ["prefixCls", "direction"]), prefixCls = _useContext.prefixCls, direction = _useContext.direction;
    var _React$useContext = React331.useContext(SummaryContext_default), scrollColumnIndex = _React$useContext.scrollColumnIndex, stickyOffsets = _React$useContext.stickyOffsets, flattenColumns = _React$useContext.flattenColumns, columns = _React$useContext.columns;
    var lastIndex = index2 + colSpan - 1;
    var mergedColSpan = lastIndex + 1 === scrollColumnIndex ? colSpan + 1 : colSpan;
    var fixedInfo = getCellFixedInfo(index2, index2 + mergedColSpan - 1, flattenColumns, stickyOffsets, direction, columns === null || columns === void 0 ? void 0 : columns[index2]);
    return /* @__PURE__ */ React331.createElement(Cell_default, _extends({
      className,
      index: index2,
      component: "td",
      prefixCls,
      record: null,
      dataIndex: null,
      align,
      colSpan: mergedColSpan,
      rowSpan,
      render: function render2() {
        return children;
      }
    }, fixedInfo));
  }

  // node_modules/rc-table/es/Footer/Row.js
  var React332 = __toESM(require_react());
  var _excluded44 = ["children"];
  function FooterRow(_ref) {
    var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded44);
    return /* @__PURE__ */ React332.createElement("tr", props, children);
  }

  // node_modules/rc-table/es/Footer/Summary.js
  function Summary(_ref) {
    var children = _ref.children;
    return children;
  }
  Summary.Row = FooterRow;
  Summary.Cell = SummaryCell;
  var Summary_default = Summary;

  // node_modules/rc-table/es/Footer/index.js
  function Footer3(props) {
    if (true) {
      useRenderTimes_default(props);
    }
    var children = props.children, stickyOffsets = props.stickyOffsets, flattenColumns = props.flattenColumns, columns = props.columns;
    var prefixCls = useContext134(TableContext_default, "prefixCls");
    var lastColumnIndex = flattenColumns.length - 1;
    var scrollColumn = flattenColumns[lastColumnIndex];
    var summaryContext = React333.useMemo(function() {
      return {
        stickyOffsets,
        flattenColumns,
        scrollColumnIndex: scrollColumn !== null && scrollColumn !== void 0 && scrollColumn.scrollbar ? lastColumnIndex : null,
        columns
      };
    }, [scrollColumn, flattenColumns, lastColumnIndex, stickyOffsets, columns]);
    return /* @__PURE__ */ React333.createElement(SummaryContext_default.Provider, {
      value: summaryContext
    }, /* @__PURE__ */ React333.createElement("tfoot", {
      className: "".concat(prefixCls, "-summary")
    }, children));
  }
  var Footer_default = responseImmutable2(Footer3);
  var FooterComponents = Summary_default;

  // node_modules/rc-table/es/sugar/Column.js
  function Column(_) {
    return null;
  }
  var Column_default = Column;

  // node_modules/rc-table/es/sugar/ColumnGroup.js
  function ColumnGroup(_) {
    return null;
  }
  var ColumnGroup_default = ColumnGroup;

  // node_modules/rc-table/es/Table.js
  var import_classnames122 = __toESM(require_classnames());
  var React352 = __toESM(require_react());

  // node_modules/rc-table/es/Body/index.js
  var React339 = __toESM(require_react());

  // node_modules/rc-table/es/hooks/useFlattenRecords.js
  var React334 = __toESM(require_react());
  function fillRecords(list, record, indent, childrenColumnName, expandedKeys, getRowKey, index2) {
    list.push({
      record,
      indent,
      index: index2
    });
    var key = getRowKey(record);
    var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);
    if (record && Array.isArray(record[childrenColumnName]) && expanded) {
      for (var i = 0; i < record[childrenColumnName].length; i += 1) {
        fillRecords(list, record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);
      }
    }
  }
  function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {
    var arr = React334.useMemo(function() {
      if (expandedKeys !== null && expandedKeys !== void 0 && expandedKeys.size) {
        var list = [];
        for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {
          var record = data[i];
          fillRecords(list, record, 0, childrenColumnName, expandedKeys, getRowKey, i);
        }
        return list;
      }
      return data === null || data === void 0 ? void 0 : data.map(function(item, index2) {
        return {
          record: item,
          indent: 0,
          index: index2
        };
      });
    }, [data, childrenColumnName, expandedKeys, getRowKey]);
    return arr;
  }

  // node_modules/rc-table/es/Body/BodyRow.js
  var import_classnames118 = __toESM(require_classnames());
  var React336 = __toESM(require_react());

  // node_modules/rc-table/es/hooks/useRowInfo.js
  var import_classnames117 = __toESM(require_classnames());
  function useRowInfo(record, rowKey, recordIndex, indent) {
    var context = useContext134(TableContext_default, ["prefixCls", "fixedInfoList", "flattenColumns", "expandableType", "expandRowByClick", "onTriggerExpand", "rowClassName", "expandedRowClassName", "indentSize", "expandIcon", "expandedRowRender", "expandIconColumnIndex", "expandedKeys", "childrenColumnName", "rowExpandable", "onRow"]);
    var flattenColumns = context.flattenColumns, expandableType = context.expandableType, expandedKeys = context.expandedKeys, childrenColumnName = context.childrenColumnName, onTriggerExpand = context.onTriggerExpand, rowExpandable = context.rowExpandable, onRow = context.onRow, expandRowByClick = context.expandRowByClick, rowClassName = context.rowClassName;
    var nestExpandable = expandableType === "nest";
    var rowSupportExpand = expandableType === "row" && (!rowExpandable || rowExpandable(record));
    var mergedExpandable = rowSupportExpand || nestExpandable;
    var expanded = expandedKeys && expandedKeys.has(rowKey);
    var hasNestChildren = childrenColumnName && record && record[childrenColumnName];
    var onInternalTriggerExpand = useEvent(onTriggerExpand);
    var rowProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, recordIndex);
    var onRowClick = rowProps === null || rowProps === void 0 ? void 0 : rowProps.onClick;
    var onClick = function onClick2(event) {
      if (expandRowByClick && mergedExpandable) {
        onTriggerExpand(record, event);
      }
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      onRowClick === null || onRowClick === void 0 || onRowClick.apply(void 0, [event].concat(args));
    };
    var computeRowClassName;
    if (typeof rowClassName === "string") {
      computeRowClassName = rowClassName;
    } else if (typeof rowClassName === "function") {
      computeRowClassName = rowClassName(record, recordIndex, indent);
    }
    var columnsKey = getColumnsKey(flattenColumns);
    return _objectSpread2(_objectSpread2({}, context), {}, {
      columnsKey,
      nestExpandable,
      expanded,
      hasNestChildren,
      record,
      onTriggerExpand: onInternalTriggerExpand,
      rowSupportExpand,
      expandable: mergedExpandable,
      rowProps: _objectSpread2(_objectSpread2({}, rowProps), {}, {
        className: (0, import_classnames117.default)(computeRowClassName, rowProps === null || rowProps === void 0 ? void 0 : rowProps.className),
        onClick
      })
    });
  }

  // node_modules/rc-table/es/Body/ExpandedRow.js
  var React335 = __toESM(require_react());
  function ExpandedRow(props) {
    if (true) {
      useRenderTimes_default(props);
    }
    var prefixCls = props.prefixCls, children = props.children, Component11 = props.component, cellComponent = props.cellComponent, className = props.className, expanded = props.expanded, colSpan = props.colSpan, isEmpty2 = props.isEmpty;
    var _useContext = useContext134(TableContext_default, ["scrollbarSize", "fixHeader", "fixColumn", "componentWidth", "horizonScroll"]), scrollbarSize = _useContext.scrollbarSize, fixHeader = _useContext.fixHeader, fixColumn = _useContext.fixColumn, componentWidth = _useContext.componentWidth, horizonScroll = _useContext.horizonScroll;
    var contentNode = children;
    if (isEmpty2 ? horizonScroll && componentWidth : fixColumn) {
      contentNode = /* @__PURE__ */ React335.createElement("div", {
        style: {
          width: componentWidth - (fixHeader ? scrollbarSize : 0),
          position: "sticky",
          left: 0,
          overflow: "hidden"
        },
        className: "".concat(prefixCls, "-expanded-row-fixed")
      }, contentNode);
    }
    return /* @__PURE__ */ React335.createElement(Component11, {
      className,
      style: {
        display: expanded ? null : "none"
      }
    }, /* @__PURE__ */ React335.createElement(Cell_default, {
      component: cellComponent,
      prefixCls,
      colSpan
    }, contentNode));
  }
  var ExpandedRow_default = ExpandedRow;

  // node_modules/rc-table/es/Body/BodyRow.js
  function getCellProps(rowInfo, column2, colIndex, indent, index2) {
    var record = rowInfo.record, prefixCls = rowInfo.prefixCls, columnsKey = rowInfo.columnsKey, fixedInfoList = rowInfo.fixedInfoList, expandIconColumnIndex = rowInfo.expandIconColumnIndex, nestExpandable = rowInfo.nestExpandable, indentSize = rowInfo.indentSize, expandIcon = rowInfo.expandIcon, expanded = rowInfo.expanded, hasNestChildren = rowInfo.hasNestChildren, onTriggerExpand = rowInfo.onTriggerExpand;
    var key = columnsKey[colIndex];
    var fixedInfo = fixedInfoList[colIndex];
    var appendCellNode;
    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {
      appendCellNode = /* @__PURE__ */ React336.createElement(React336.Fragment, null, /* @__PURE__ */ React336.createElement("span", {
        style: {
          paddingLeft: "".concat(indentSize * indent, "px")
        },
        className: "".concat(prefixCls, "-row-indent indent-level-").concat(indent)
      }), expandIcon({
        prefixCls,
        expanded,
        expandable: hasNestChildren,
        record,
        onExpand: onTriggerExpand
      }));
    }
    var additionalCellProps;
    if (column2.onCell) {
      additionalCellProps = column2.onCell(record, index2);
    }
    return {
      key,
      fixedInfo,
      appendCellNode,
      additionalCellProps: additionalCellProps || {}
    };
  }
  function BodyRow(props) {
    if (true) {
      useRenderTimes_default(props);
    }
    var className = props.className, style2 = props.style, record = props.record, index2 = props.index, renderIndex = props.renderIndex, rowKey = props.rowKey, _props$indent = props.indent, indent = _props$indent === void 0 ? 0 : _props$indent, RowComponent = props.rowComponent, cellComponent = props.cellComponent, scopeCellComponent = props.scopeCellComponent;
    var rowInfo = useRowInfo(record, rowKey, index2, indent);
    var prefixCls = rowInfo.prefixCls, flattenColumns = rowInfo.flattenColumns, expandedRowClassName = rowInfo.expandedRowClassName, expandedRowRender = rowInfo.expandedRowRender, rowProps = rowInfo.rowProps, expanded = rowInfo.expanded, rowSupportExpand = rowInfo.rowSupportExpand;
    var expandedRef = React336.useRef(false);
    expandedRef.current || (expandedRef.current = expanded);
    if (true) {
      useRenderTimes_default(props);
    }
    var baseRowNode = /* @__PURE__ */ React336.createElement(RowComponent, _extends({}, rowProps, {
      "data-row-key": rowKey,
      className: (0, import_classnames118.default)(className, "".concat(prefixCls, "-row"), "".concat(prefixCls, "-row-level-").concat(indent), rowProps === null || rowProps === void 0 ? void 0 : rowProps.className),
      style: _objectSpread2(_objectSpread2({}, style2), rowProps === null || rowProps === void 0 ? void 0 : rowProps.style)
    }), flattenColumns.map(function(column2, colIndex) {
      var render2 = column2.render, dataIndex = column2.dataIndex, columnClassName = column2.className;
      var _getCellProps = getCellProps(rowInfo, column2, colIndex, indent, index2), key = _getCellProps.key, fixedInfo = _getCellProps.fixedInfo, appendCellNode = _getCellProps.appendCellNode, additionalCellProps = _getCellProps.additionalCellProps;
      return /* @__PURE__ */ React336.createElement(Cell_default, _extends({
        className: columnClassName,
        ellipsis: column2.ellipsis,
        align: column2.align,
        scope: column2.rowScope,
        component: column2.rowScope ? scopeCellComponent : cellComponent,
        prefixCls,
        key,
        record,
        index: index2,
        renderIndex,
        dataIndex,
        render: render2,
        shouldCellUpdate: column2.shouldCellUpdate
      }, fixedInfo, {
        appendNode: appendCellNode,
        additionalProps: additionalCellProps
      }));
    }));
    var expandRowNode;
    if (rowSupportExpand && (expandedRef.current || expanded)) {
      var expandContent = expandedRowRender(record, index2, indent + 1, expanded);
      var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index2, indent);
      expandRowNode = /* @__PURE__ */ React336.createElement(ExpandedRow_default, {
        expanded,
        className: (0, import_classnames118.default)("".concat(prefixCls, "-expanded-row"), "".concat(prefixCls, "-expanded-row-level-").concat(indent + 1), computedExpandedRowClassName),
        prefixCls,
        component: RowComponent,
        cellComponent,
        colSpan: flattenColumns.length,
        isEmpty: false
      }, expandContent);
    }
    return /* @__PURE__ */ React336.createElement(React336.Fragment, null, baseRowNode, expandRowNode);
  }
  BodyRow.displayName = "BodyRow";
  var BodyRow_default = responseImmutable2(BodyRow);

  // node_modules/rc-table/es/Body/MeasureRow.js
  var React338 = __toESM(require_react());

  // node_modules/rc-table/es/Body/MeasureCell.js
  var React337 = __toESM(require_react());
  function MeasureCell(_ref) {
    var columnKey = _ref.columnKey, onColumnResize = _ref.onColumnResize;
    var cellRef = React337.useRef();
    React337.useEffect(function() {
      if (cellRef.current) {
        onColumnResize(columnKey, cellRef.current.offsetWidth);
      }
    }, []);
    return /* @__PURE__ */ React337.createElement(es_default, {
      data: columnKey
    }, /* @__PURE__ */ React337.createElement("td", {
      ref: cellRef,
      style: {
        padding: 0,
        border: 0,
        height: 0
      }
    }, /* @__PURE__ */ React337.createElement("div", {
      style: {
        height: 0,
        overflow: "hidden"
      }
    }, "\xA0")));
  }

  // node_modules/rc-table/es/Body/MeasureRow.js
  function MeasureRow(_ref) {
    var prefixCls = _ref.prefixCls, columnsKey = _ref.columnsKey, onColumnResize = _ref.onColumnResize;
    return /* @__PURE__ */ React338.createElement("tr", {
      "aria-hidden": "true",
      className: "".concat(prefixCls, "-measure-row"),
      style: {
        height: 0,
        fontSize: 0
      }
    }, /* @__PURE__ */ React338.createElement(es_default.Collection, {
      onBatchResize: function onBatchResize(infoList) {
        infoList.forEach(function(_ref2) {
          var columnKey = _ref2.data, size = _ref2.size;
          onColumnResize(columnKey, size.offsetWidth);
        });
      }
    }, columnsKey.map(function(columnKey) {
      return /* @__PURE__ */ React338.createElement(MeasureCell, {
        key: columnKey,
        columnKey,
        onColumnResize
      });
    })));
  }

  // node_modules/rc-table/es/Body/index.js
  function Body(props) {
    if (true) {
      useRenderTimes_default(props);
    }
    var data = props.data, measureColumnWidth = props.measureColumnWidth;
    var _useContext = useContext134(TableContext_default, ["prefixCls", "getComponent", "onColumnResize", "flattenColumns", "getRowKey", "expandedKeys", "childrenColumnName", "emptyNode"]), prefixCls = _useContext.prefixCls, getComponent = _useContext.getComponent, onColumnResize = _useContext.onColumnResize, flattenColumns = _useContext.flattenColumns, getRowKey = _useContext.getRowKey, expandedKeys = _useContext.expandedKeys, childrenColumnName = _useContext.childrenColumnName, emptyNode = _useContext.emptyNode;
    var flattenData2 = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey);
    var perfRef = React339.useRef({
      renderWithProps: false
    });
    var WrapperComponent = getComponent(["body", "wrapper"], "tbody");
    var trComponent = getComponent(["body", "row"], "tr");
    var tdComponent = getComponent(["body", "cell"], "td");
    var thComponent = getComponent(["body", "cell"], "th");
    var rows;
    if (data.length) {
      rows = flattenData2.map(function(item, idx) {
        var record = item.record, indent = item.indent, renderIndex = item.index;
        var key = getRowKey(record, idx);
        return /* @__PURE__ */ React339.createElement(BodyRow_default, {
          key,
          rowKey: key,
          record,
          index: idx,
          renderIndex,
          rowComponent: trComponent,
          cellComponent: tdComponent,
          scopeCellComponent: thComponent,
          getRowKey,
          indent
        });
      });
    } else {
      rows = /* @__PURE__ */ React339.createElement(ExpandedRow_default, {
        expanded: true,
        className: "".concat(prefixCls, "-placeholder"),
        prefixCls,
        component: trComponent,
        cellComponent: tdComponent,
        colSpan: flattenColumns.length,
        isEmpty: true
      }, emptyNode);
    }
    var columnsKey = getColumnsKey(flattenColumns);
    return /* @__PURE__ */ React339.createElement(PerfContext_default.Provider, {
      value: perfRef.current
    }, /* @__PURE__ */ React339.createElement(WrapperComponent, {
      className: "".concat(prefixCls, "-tbody")
    }, measureColumnWidth && /* @__PURE__ */ React339.createElement(MeasureRow, {
      prefixCls,
      columnsKey,
      onColumnResize
    }), rows));
  }
  Body.displayName = "Body";
  var Body_default = responseImmutable2(Body);

  // node_modules/rc-table/es/ColGroup.js
  var React340 = __toESM(require_react());

  // node_modules/rc-table/es/utils/legacyUtil.js
  var _excluded45 = ["expandable"];
  var INTERNAL_COL_DEFINE = "RC_TABLE_INTERNAL_COL_DEFINE";
  function getExpandableProps(props) {
    var expandable = props.expandable, legacyExpandableConfig = _objectWithoutProperties(props, _excluded45);
    var config;
    if ("expandable" in props) {
      config = _objectSpread2(_objectSpread2({}, legacyExpandableConfig), expandable);
    } else {
      if (["indentSize", "expandedRowKeys", "defaultExpandedRowKeys", "defaultExpandAllRows", "expandedRowRender", "expandRowByClick", "expandIcon", "onExpand", "onExpandedRowsChange", "expandedRowClassName", "expandIconColumnIndex", "showExpandColumn", "title"].some(function(prop) {
        return prop in props;
      })) {
        warning_default(false, "expanded related props have been moved into `expandable`.");
      }
      config = legacyExpandableConfig;
    }
    if (config.showExpandColumn === false) {
      config.expandIconColumnIndex = -1;
    }
    return config;
  }

  // node_modules/rc-table/es/ColGroup.js
  var _excluded46 = ["columnType"];
  function ColGroup(_ref) {
    var colWidths = _ref.colWidths, columns = _ref.columns, columCount = _ref.columCount;
    var cols = [];
    var len = columCount || columns.length;
    var mustInsert = false;
    for (var i = len - 1; i >= 0; i -= 1) {
      var width = colWidths[i];
      var column2 = columns && columns[i];
      var additionalProps = column2 && column2[INTERNAL_COL_DEFINE];
      if (width || additionalProps || mustInsert) {
        var _ref2 = additionalProps || {}, columnType = _ref2.columnType, restAdditionalProps = _objectWithoutProperties(_ref2, _excluded46);
        cols.unshift(/* @__PURE__ */ React340.createElement("col", _extends({
          key: i,
          style: {
            width
          }
        }, restAdditionalProps)));
        mustInsert = true;
      }
    }
    return /* @__PURE__ */ React340.createElement("colgroup", null, cols);
  }
  var ColGroup_default = ColGroup;

  // node_modules/rc-table/es/FixedHolder/index.js
  var import_classnames119 = __toESM(require_classnames());
  var React341 = __toESM(require_react());
  var import_react103 = __toESM(require_react());
  var _excluded47 = ["className", "noData", "columns", "flattenColumns", "colWidths", "columCount", "stickyOffsets", "direction", "fixHeader", "stickyTopOffset", "stickyBottomOffset", "stickyClassName", "onScroll", "maxContentScroll", "children"];
  function useColumnWidth(colWidths, columCount) {
    return (0, import_react103.useMemo)(function() {
      var cloneColumns = [];
      for (var i = 0; i < columCount; i += 1) {
        var val = colWidths[i];
        if (val !== void 0) {
          cloneColumns[i] = val;
        } else {
          return null;
        }
      }
      return cloneColumns;
    }, [colWidths.join("_"), columCount]);
  }
  var FixedHolder = /* @__PURE__ */ React341.forwardRef(function(props, ref) {
    if (true) {
      useRenderTimes_default(props);
    }
    var className = props.className, noData = props.noData, columns = props.columns, flattenColumns = props.flattenColumns, colWidths = props.colWidths, columCount = props.columCount, stickyOffsets = props.stickyOffsets, direction = props.direction, fixHeader = props.fixHeader, stickyTopOffset = props.stickyTopOffset, stickyBottomOffset = props.stickyBottomOffset, stickyClassName = props.stickyClassName, onScroll = props.onScroll, maxContentScroll = props.maxContentScroll, children = props.children, restProps = _objectWithoutProperties(props, _excluded47);
    var _useContext = useContext134(TableContext_default, ["prefixCls", "scrollbarSize", "isSticky"]), prefixCls = _useContext.prefixCls, scrollbarSize = _useContext.scrollbarSize, isSticky = _useContext.isSticky;
    var combinationScrollBarSize = isSticky && !fixHeader ? 0 : scrollbarSize;
    var scrollRef = React341.useRef(null);
    var setScrollRef = React341.useCallback(function(element) {
      fillRef(ref, element);
      fillRef(scrollRef, element);
    }, []);
    React341.useEffect(function() {
      var _scrollRef$current;
      function onWheel(e3) {
        var _ref = e3, currentTarget = _ref.currentTarget, deltaX = _ref.deltaX;
        if (deltaX) {
          onScroll({
            currentTarget,
            scrollLeft: currentTarget.scrollLeft + deltaX
          });
          e3.preventDefault();
        }
      }
      (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 || _scrollRef$current.addEventListener("wheel", onWheel);
      return function() {
        var _scrollRef$current2;
        (_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 || _scrollRef$current2.removeEventListener("wheel", onWheel);
      };
    }, []);
    var allFlattenColumnsWithWidth = React341.useMemo(function() {
      return flattenColumns.every(function(column2) {
        return column2.width;
      });
    }, [flattenColumns]);
    var lastColumn = flattenColumns[flattenColumns.length - 1];
    var ScrollBarColumn = {
      fixed: lastColumn ? lastColumn.fixed : null,
      scrollbar: true,
      onHeaderCell: function onHeaderCell() {
        return {
          className: "".concat(prefixCls, "-cell-scrollbar")
        };
      }
    };
    var columnsWithScrollbar = (0, import_react103.useMemo)(function() {
      return combinationScrollBarSize ? [].concat(_toConsumableArray(columns), [ScrollBarColumn]) : columns;
    }, [combinationScrollBarSize, columns]);
    var flattenColumnsWithScrollbar = (0, import_react103.useMemo)(function() {
      return combinationScrollBarSize ? [].concat(_toConsumableArray(flattenColumns), [ScrollBarColumn]) : flattenColumns;
    }, [combinationScrollBarSize, flattenColumns]);
    var headerStickyOffsets = (0, import_react103.useMemo)(function() {
      var right = stickyOffsets.right, left = stickyOffsets.left;
      return _objectSpread2(_objectSpread2({}, stickyOffsets), {}, {
        left: direction === "rtl" ? [].concat(_toConsumableArray(left.map(function(width) {
          return width + combinationScrollBarSize;
        })), [0]) : left,
        right: direction === "rtl" ? right : [].concat(_toConsumableArray(right.map(function(width) {
          return width + combinationScrollBarSize;
        })), [0]),
        isSticky
      });
    }, [combinationScrollBarSize, stickyOffsets, isSticky]);
    var mergedColumnWidth = useColumnWidth(colWidths, columCount);
    return /* @__PURE__ */ React341.createElement("div", {
      style: _objectSpread2({
        overflow: "hidden"
      }, isSticky ? {
        top: stickyTopOffset,
        bottom: stickyBottomOffset
      } : {}),
      ref: setScrollRef,
      className: (0, import_classnames119.default)(className, _defineProperty({}, stickyClassName, !!stickyClassName))
    }, /* @__PURE__ */ React341.createElement("table", {
      style: {
        tableLayout: "fixed",
        visibility: noData || mergedColumnWidth ? null : "hidden"
      }
    }, (!noData || !maxContentScroll || allFlattenColumnsWithWidth) && /* @__PURE__ */ React341.createElement(ColGroup_default, {
      colWidths: mergedColumnWidth ? [].concat(_toConsumableArray(mergedColumnWidth), [combinationScrollBarSize]) : [],
      columCount: columCount + 1,
      columns: flattenColumnsWithScrollbar
    }), children(_objectSpread2(_objectSpread2({}, restProps), {}, {
      stickyOffsets: headerStickyOffsets,
      columns: columnsWithScrollbar,
      flattenColumns: flattenColumnsWithScrollbar
    }))));
  });
  FixedHolder.displayName = "FixedHolder";
  var FixedHolder_default = /* @__PURE__ */ React341.memo(FixedHolder);

  // node_modules/rc-table/es/Header/Header.js
  var React343 = __toESM(require_react());

  // node_modules/rc-table/es/Header/HeaderRow.js
  var React342 = __toESM(require_react());
  function HeaderRow(_ref) {
    var cells = _ref.cells, stickyOffsets = _ref.stickyOffsets, flattenColumns = _ref.flattenColumns, RowComponent = _ref.rowComponent, CellComponent = _ref.cellComponent, tdCellComponent = _ref.tdCellComponent, onHeaderRow = _ref.onHeaderRow, index2 = _ref.index;
    var _useContext = useContext134(TableContext_default, ["prefixCls", "direction"]), prefixCls = _useContext.prefixCls, direction = _useContext.direction;
    var rowProps;
    if (onHeaderRow) {
      rowProps = onHeaderRow(cells.map(function(cell) {
        return cell.column;
      }), index2);
    }
    var columnsKey = getColumnsKey(cells.map(function(cell) {
      return cell.column;
    }));
    return /* @__PURE__ */ React342.createElement(RowComponent, rowProps, cells.map(function(cell, cellIndex) {
      var column2 = cell.column;
      var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets, direction, column2);
      var additionalProps;
      if (column2 && column2.onHeaderCell) {
        additionalProps = cell.column.onHeaderCell(column2);
      }
      return /* @__PURE__ */ React342.createElement(Cell_default, _extends({}, cell, {
        scope: column2.title ? cell.colSpan > 1 ? "colgroup" : "col" : null,
        ellipsis: column2.ellipsis,
        align: column2.align,
        component: column2.title ? CellComponent : tdCellComponent,
        prefixCls,
        key: columnsKey[cellIndex]
      }, fixedInfo, {
        additionalProps,
        rowType: "header"
      }));
    }));
  }
  HeaderRow.displayName = "HeaderRow";
  var HeaderRow_default = HeaderRow;

  // node_modules/rc-table/es/Header/Header.js
  function parseHeaderRows(rootColumns) {
    var rows = [];
    function fillRowCells(columns, colIndex) {
      var rowIndex2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      rows[rowIndex2] = rows[rowIndex2] || [];
      var currentColIndex = colIndex;
      var colSpans = columns.filter(Boolean).map(function(column2) {
        var cell = {
          key: column2.key,
          className: column2.className || "",
          children: column2.title,
          column: column2,
          colStart: currentColIndex
        };
        var colSpan = 1;
        var subColumns = column2.children;
        if (subColumns && subColumns.length > 0) {
          colSpan = fillRowCells(subColumns, currentColIndex, rowIndex2 + 1).reduce(function(total, count) {
            return total + count;
          }, 0);
          cell.hasSubColumns = true;
        }
        if ("colSpan" in column2) {
          colSpan = column2.colSpan;
        }
        if ("rowSpan" in column2) {
          cell.rowSpan = column2.rowSpan;
        }
        cell.colSpan = colSpan;
        cell.colEnd = cell.colStart + colSpan - 1;
        rows[rowIndex2].push(cell);
        currentColIndex += colSpan;
        return colSpan;
      });
      return colSpans;
    }
    fillRowCells(rootColumns, 0);
    var rowCount = rows.length;
    var _loop = function _loop2(rowIndex2) {
      rows[rowIndex2].forEach(function(cell) {
        if (!("rowSpan" in cell) && !cell.hasSubColumns) {
          cell.rowSpan = rowCount - rowIndex2;
        }
      });
    };
    for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
      _loop(rowIndex);
    }
    return rows;
  }
  function Header3(props) {
    if (true) {
      useRenderTimes_default(props);
    }
    var stickyOffsets = props.stickyOffsets, columns = props.columns, flattenColumns = props.flattenColumns, onHeaderRow = props.onHeaderRow;
    var _useContext = useContext134(TableContext_default, ["prefixCls", "getComponent"]), prefixCls = _useContext.prefixCls, getComponent = _useContext.getComponent;
    var rows = React343.useMemo(function() {
      return parseHeaderRows(columns);
    }, [columns]);
    var WrapperComponent = getComponent(["header", "wrapper"], "thead");
    var trComponent = getComponent(["header", "row"], "tr");
    var thComponent = getComponent(["header", "cell"], "th");
    var tdComponent = getComponent(["header", "cell"], "td");
    return /* @__PURE__ */ React343.createElement(WrapperComponent, {
      className: "".concat(prefixCls, "-thead")
    }, rows.map(function(row, rowIndex) {
      var rowNode = /* @__PURE__ */ React343.createElement(HeaderRow_default, {
        key: rowIndex,
        flattenColumns,
        cells: row,
        stickyOffsets,
        rowComponent: trComponent,
        cellComponent: thComponent,
        tdCellComponent: tdComponent,
        onHeaderRow,
        index: rowIndex
      });
      return rowNode;
    }));
  }
  var Header_default2 = responseImmutable2(Header3);

  // node_modules/rc-table/es/hooks/useColumns/index.js
  var React345 = __toESM(require_react());

  // node_modules/rc-table/es/hooks/useColumns/useWidthColumns.js
  var React344 = __toESM(require_react());
  function parseColWidth(totalWidth) {
    var width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    if (typeof width === "number") {
      return width;
    }
    if (width.endsWith("%")) {
      return totalWidth * parseFloat(width) / 100;
    }
    return null;
  }
  function useWidthColumns(flattenColumns, scrollWidth, clientWidth) {
    return React344.useMemo(function() {
      if (scrollWidth && scrollWidth > 0) {
        var totalWidth = 0;
        var missWidthCount = 0;
        flattenColumns.forEach(function(col) {
          var colWidth = parseColWidth(scrollWidth, col.width);
          if (colWidth) {
            totalWidth += colWidth;
          } else {
            missWidthCount += 1;
          }
        });
        var maxFitWidth = Math.max(scrollWidth, clientWidth);
        var restWidth = Math.max(maxFitWidth - totalWidth, missWidthCount);
        var restCount = missWidthCount;
        var avgWidth = restWidth / missWidthCount;
        var realTotal = 0;
        var filledColumns = flattenColumns.map(function(col) {
          var clone = _objectSpread2({}, col);
          var colWidth = parseColWidth(scrollWidth, clone.width);
          if (colWidth) {
            clone.width = colWidth;
          } else {
            var colAvgWidth = Math.floor(avgWidth);
            clone.width = restCount === 1 ? restWidth : colAvgWidth;
            restWidth -= colAvgWidth;
            restCount -= 1;
          }
          realTotal += clone.width;
          return clone;
        });
        if (realTotal < maxFitWidth) {
          var scale = maxFitWidth / realTotal;
          restWidth = maxFitWidth;
          filledColumns.forEach(function(col, index2) {
            var colWidth = Math.floor(col.width * scale);
            col.width = index2 === filledColumns.length - 1 ? restWidth : colWidth;
            restWidth -= colWidth;
          });
        }
        return [filledColumns, Math.max(realTotal, maxFitWidth)];
      }
      return [flattenColumns, scrollWidth];
    }, [flattenColumns, scrollWidth, clientWidth]);
  }

  // node_modules/rc-table/es/hooks/useColumns/index.js
  var _excluded48 = ["children"];
  var _excluded212 = ["fixed"];
  function convertChildrenToColumns(children) {
    return toArray(children).filter(function(node2) {
      return /* @__PURE__ */ React345.isValidElement(node2);
    }).map(function(_ref) {
      var key = _ref.key, props = _ref.props;
      var nodeChildren = props.children, restProps = _objectWithoutProperties(props, _excluded48);
      var column2 = _objectSpread2({
        key
      }, restProps);
      if (nodeChildren) {
        column2.children = convertChildrenToColumns(nodeChildren);
      }
      return column2;
    });
  }
  function filterHiddenColumns(columns) {
    return columns.filter(function(column2) {
      return column2 && _typeof(column2) === "object" && !column2.hidden;
    }).map(function(column2) {
      var subColumns = column2.children;
      if (subColumns && subColumns.length > 0) {
        return _objectSpread2(_objectSpread2({}, column2), {}, {
          children: filterHiddenColumns(subColumns)
        });
      }
      return column2;
    });
  }
  function flatColumns(columns) {
    var parentKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key";
    return columns.filter(function(column2) {
      return column2 && _typeof(column2) === "object";
    }).reduce(function(list, column2, index2) {
      var fixed = column2.fixed;
      var parsedFixed = fixed === true ? "left" : fixed;
      var mergedKey = "".concat(parentKey, "-").concat(index2);
      var subColumns = column2.children;
      if (subColumns && subColumns.length > 0) {
        return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns, mergedKey).map(function(subColum) {
          return _objectSpread2({
            fixed: parsedFixed
          }, subColum);
        })));
      }
      return [].concat(_toConsumableArray(list), [_objectSpread2(_objectSpread2({
        key: mergedKey
      }, column2), {}, {
        fixed: parsedFixed
      })]);
    }, []);
  }
  function warningFixed(flattenColumns) {
    var allFixLeft = true;
    for (var i = 0; i < flattenColumns.length; i += 1) {
      var col = flattenColumns[i];
      if (allFixLeft && col.fixed !== "left") {
        allFixLeft = false;
      } else if (!allFixLeft && col.fixed === "left") {
        warning_default(false, "Index ".concat(i - 1, " of `columns` missing `fixed='left'` prop."));
        break;
      }
    }
    var allFixRight = true;
    for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {
      var _col = flattenColumns[_i];
      if (allFixRight && _col.fixed !== "right") {
        allFixRight = false;
      } else if (!allFixRight && _col.fixed === "right") {
        warning_default(false, "Index ".concat(_i + 1, " of `columns` missing `fixed='right'` prop."));
        break;
      }
    }
  }
  function revertForRtl(columns) {
    return columns.map(function(column2) {
      var fixed = column2.fixed, restProps = _objectWithoutProperties(column2, _excluded212);
      var parsedFixed = fixed;
      if (fixed === "left") {
        parsedFixed = "right";
      } else if (fixed === "right") {
        parsedFixed = "left";
      }
      return _objectSpread2({
        fixed: parsedFixed
      }, restProps);
    });
  }
  function useColumns(_ref2, transformColumns) {
    var prefixCls = _ref2.prefixCls, columns = _ref2.columns, children = _ref2.children, expandable = _ref2.expandable, expandedKeys = _ref2.expandedKeys, columnTitle = _ref2.columnTitle, getRowKey = _ref2.getRowKey, onTriggerExpand = _ref2.onTriggerExpand, expandIcon = _ref2.expandIcon, rowExpandable = _ref2.rowExpandable, expandIconColumnIndex = _ref2.expandIconColumnIndex, direction = _ref2.direction, expandRowByClick = _ref2.expandRowByClick, columnWidth = _ref2.columnWidth, fixed = _ref2.fixed, scrollWidth = _ref2.scrollWidth, clientWidth = _ref2.clientWidth;
    var baseColumns = React345.useMemo(function() {
      var newColumns = columns || convertChildrenToColumns(children) || [];
      return filterHiddenColumns(newColumns.slice());
    }, [columns, children]);
    var withExpandColumns = React345.useMemo(function() {
      if (expandable) {
        var cloneColumns = baseColumns.slice();
        if (expandIconColumnIndex >= 0) {
          warning_default(false, "`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.");
        }
        if (!cloneColumns.includes(EXPAND_COLUMN)) {
          var expandColIndex = expandIconColumnIndex || 0;
          if (expandColIndex >= 0) {
            cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);
          }
        }
        if (cloneColumns.filter(function(c) {
          return c === EXPAND_COLUMN;
        }).length > 1) {
          warning_default(false, "There exist more than one `EXPAND_COLUMN` in `columns`.");
        }
        var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);
        cloneColumns = cloneColumns.filter(function(column2, index2) {
          return column2 !== EXPAND_COLUMN || index2 === expandColumnIndex;
        });
        var prevColumn = baseColumns[expandColumnIndex];
        var fixedColumn;
        if ((fixed === "left" || fixed) && !expandIconColumnIndex) {
          fixedColumn = "left";
        } else if ((fixed === "right" || fixed) && expandIconColumnIndex === baseColumns.length) {
          fixedColumn = "right";
        } else {
          fixedColumn = prevColumn ? prevColumn.fixed : null;
        }
        var expandColumn = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, INTERNAL_COL_DEFINE, {
          className: "".concat(prefixCls, "-expand-icon-col"),
          columnType: "EXPAND_COLUMN"
        }), "title", columnTitle), "fixed", fixedColumn), "className", "".concat(prefixCls, "-row-expand-icon-cell")), "width", columnWidth), "render", function render2(_, record, index2) {
          var rowKey = getRowKey(record, index2);
          var expanded = expandedKeys.has(rowKey);
          var recordExpandable = rowExpandable ? rowExpandable(record) : true;
          var icon = expandIcon({
            prefixCls,
            expanded,
            expandable: recordExpandable,
            record,
            onExpand: onTriggerExpand
          });
          if (expandRowByClick) {
            return /* @__PURE__ */ React345.createElement("span", {
              onClick: function onClick(e3) {
                return e3.stopPropagation();
              }
            }, icon);
          }
          return icon;
        });
        return cloneColumns.map(function(col) {
          return col === EXPAND_COLUMN ? expandColumn : col;
        });
      }
      if (baseColumns.includes(EXPAND_COLUMN)) {
        warning_default(false, "`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.");
      }
      return baseColumns.filter(function(col) {
        return col !== EXPAND_COLUMN;
      });
    }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]);
    var mergedColumns = React345.useMemo(function() {
      var finalColumns = withExpandColumns;
      if (transformColumns) {
        finalColumns = transformColumns(finalColumns);
      }
      if (!finalColumns.length) {
        finalColumns = [{
          render: function render2() {
            return null;
          }
        }];
      }
      return finalColumns;
    }, [transformColumns, withExpandColumns, direction]);
    var flattenColumns = React345.useMemo(function() {
      if (direction === "rtl") {
        return revertForRtl(flatColumns(mergedColumns));
      }
      return flatColumns(mergedColumns);
    }, [mergedColumns, direction, scrollWidth]);
    if (true) {
      warningFixed(direction === "rtl" ? flattenColumns.slice().reverse() : flattenColumns);
    }
    var _useWidthColumns = useWidthColumns(flattenColumns, scrollWidth, clientWidth), _useWidthColumns2 = _slicedToArray(_useWidthColumns, 2), filledColumns = _useWidthColumns2[0], realScrollWidth = _useWidthColumns2[1];
    return [mergedColumns, filledColumns, realScrollWidth];
  }
  var useColumns_default = useColumns;

  // node_modules/rc-table/es/hooks/useExpand.js
  var React347 = __toESM(require_react());

  // node_modules/rc-table/es/utils/expandUtil.js
  var React346 = __toESM(require_react());
  var import_classnames120 = __toESM(require_classnames());
  function renderExpandIcon(_ref) {
    var prefixCls = _ref.prefixCls, record = _ref.record, onExpand = _ref.onExpand, expanded = _ref.expanded, expandable = _ref.expandable;
    var expandClassName = "".concat(prefixCls, "-row-expand-icon");
    if (!expandable) {
      return /* @__PURE__ */ React346.createElement("span", {
        className: (0, import_classnames120.default)(expandClassName, "".concat(prefixCls, "-row-spaced"))
      });
    }
    var onClick = function onClick2(event) {
      onExpand(record, event);
      event.stopPropagation();
    };
    return /* @__PURE__ */ React346.createElement("span", {
      className: (0, import_classnames120.default)(expandClassName, _defineProperty(_defineProperty({}, "".concat(prefixCls, "-row-expanded"), expanded), "".concat(prefixCls, "-row-collapsed"), !expanded)),
      onClick
    });
  }
  function findAllChildrenKeys(data, getRowKey, childrenColumnName) {
    var keys2 = [];
    function dig(list) {
      (list || []).forEach(function(item, index2) {
        keys2.push(getRowKey(item, index2));
        dig(item[childrenColumnName]);
      });
    }
    dig(data);
    return keys2;
  }

  // node_modules/rc-table/es/hooks/useExpand.js
  function useExpand(props, mergedData, getRowKey) {
    var expandableConfig = getExpandableProps(props);
    var expandIcon = expandableConfig.expandIcon, expandedRowKeys = expandableConfig.expandedRowKeys, defaultExpandedRowKeys = expandableConfig.defaultExpandedRowKeys, defaultExpandAllRows = expandableConfig.defaultExpandAllRows, expandedRowRender = expandableConfig.expandedRowRender, onExpand = expandableConfig.onExpand, onExpandedRowsChange = expandableConfig.onExpandedRowsChange, childrenColumnName = expandableConfig.childrenColumnName;
    var mergedExpandIcon = expandIcon || renderExpandIcon;
    var mergedChildrenColumnName = childrenColumnName || "children";
    var expandableType = React347.useMemo(function() {
      if (expandedRowRender) {
        return "row";
      }
      if (props.expandable && props.internalHooks === INTERNAL_HOOKS && props.expandable.__PARENT_RENDER_ICON__ || mergedData.some(function(record) {
        return record && _typeof(record) === "object" && record[mergedChildrenColumnName];
      })) {
        return "nest";
      }
      return false;
    }, [!!expandedRowRender, mergedData]);
    var _React$useState = React347.useState(function() {
      if (defaultExpandedRowKeys) {
        return defaultExpandedRowKeys;
      }
      if (defaultExpandAllRows) {
        return findAllChildrenKeys(mergedData, getRowKey, mergedChildrenColumnName);
      }
      return [];
    }), _React$useState2 = _slicedToArray(_React$useState, 2), innerExpandedKeys = _React$useState2[0], setInnerExpandedKeys = _React$useState2[1];
    var mergedExpandedKeys = React347.useMemo(function() {
      return new Set(expandedRowKeys || innerExpandedKeys || []);
    }, [expandedRowKeys, innerExpandedKeys]);
    var onTriggerExpand = React347.useCallback(function(record) {
      var key = getRowKey(record, mergedData.indexOf(record));
      var newExpandedKeys;
      var hasKey = mergedExpandedKeys.has(key);
      if (hasKey) {
        mergedExpandedKeys.delete(key);
        newExpandedKeys = _toConsumableArray(mergedExpandedKeys);
      } else {
        newExpandedKeys = [].concat(_toConsumableArray(mergedExpandedKeys), [key]);
      }
      setInnerExpandedKeys(newExpandedKeys);
      if (onExpand) {
        onExpand(!hasKey, record);
      }
      if (onExpandedRowsChange) {
        onExpandedRowsChange(newExpandedKeys);
      }
    }, [getRowKey, mergedExpandedKeys, mergedData, onExpand, onExpandedRowsChange]);
    if (expandedRowRender && mergedData.some(function(record) {
      return Array.isArray(record === null || record === void 0 ? void 0 : record[mergedChildrenColumnName]);
    })) {
      warning_default(false, "`expandedRowRender` should not use with nested Table");
    }
    return [expandableConfig, expandableType, mergedExpandedKeys, mergedExpandIcon, mergedChildrenColumnName, onTriggerExpand];
  }

  // node_modules/rc-table/es/hooks/useFixedInfo.js
  function useFixedInfo(flattenColumns, stickyOffsets, direction, columns) {
    var fixedInfoList = flattenColumns.map(function(_, colIndex) {
      return getCellFixedInfo(colIndex, colIndex, flattenColumns, stickyOffsets, direction, columns === null || columns === void 0 ? void 0 : columns[colIndex]);
    });
    return useMemo(function() {
      return fixedInfoList;
    }, [fixedInfoList], function(prev2, next2) {
      return !isEqual_default(prev2, next2);
    });
  }

  // node_modules/rc-table/es/hooks/useFrame.js
  var import_react104 = __toESM(require_react());
  function useLayoutState(defaultState) {
    var stateRef = (0, import_react104.useRef)(defaultState);
    var _useState = (0, import_react104.useState)({}), _useState2 = _slicedToArray(_useState, 2), forceUpdate = _useState2[1];
    var lastPromiseRef = (0, import_react104.useRef)(null);
    var updateBatchRef = (0, import_react104.useRef)([]);
    function setFrameState(updater) {
      updateBatchRef.current.push(updater);
      var promise = Promise.resolve();
      lastPromiseRef.current = promise;
      promise.then(function() {
        if (lastPromiseRef.current === promise) {
          var prevBatch = updateBatchRef.current;
          var prevState = stateRef.current;
          updateBatchRef.current = [];
          prevBatch.forEach(function(batchUpdater) {
            stateRef.current = batchUpdater(stateRef.current);
          });
          lastPromiseRef.current = null;
          if (prevState !== stateRef.current) {
            forceUpdate({});
          }
        }
      });
    }
    (0, import_react104.useEffect)(function() {
      return function() {
        lastPromiseRef.current = null;
      };
    }, []);
    return [stateRef.current, setFrameState];
  }
  function useTimeoutLock(defaultState) {
    var frameRef = (0, import_react104.useRef)(defaultState || null);
    var timeoutRef = (0, import_react104.useRef)();
    function cleanUp() {
      window.clearTimeout(timeoutRef.current);
    }
    function setState(newState) {
      frameRef.current = newState;
      cleanUp();
      timeoutRef.current = window.setTimeout(function() {
        frameRef.current = null;
        timeoutRef.current = void 0;
      }, 100);
    }
    function getState() {
      return frameRef.current;
    }
    (0, import_react104.useEffect)(function() {
      return cleanUp;
    }, []);
    return [setState, getState];
  }

  // node_modules/rc-table/es/hooks/useHover.js
  var React348 = __toESM(require_react());
  function useHover() {
    var _React$useState = React348.useState(-1), _React$useState2 = _slicedToArray(_React$useState, 2), startRow = _React$useState2[0], setStartRow = _React$useState2[1];
    var _React$useState3 = React348.useState(-1), _React$useState4 = _slicedToArray(_React$useState3, 2), endRow = _React$useState4[0], setEndRow = _React$useState4[1];
    var onHover = React348.useCallback(function(start2, end) {
      setStartRow(start2);
      setEndRow(end);
    }, []);
    return [startRow, endRow, onHover];
  }

  // node_modules/rc-table/es/hooks/useSticky.js
  var React349 = __toESM(require_react());
  var defaultContainer = canUseDom() ? window : null;
  function useSticky(sticky, prefixCls) {
    var _ref = _typeof(sticky) === "object" ? sticky : {}, _ref$offsetHeader = _ref.offsetHeader, offsetHeader = _ref$offsetHeader === void 0 ? 0 : _ref$offsetHeader, _ref$offsetSummary = _ref.offsetSummary, offsetSummary = _ref$offsetSummary === void 0 ? 0 : _ref$offsetSummary, _ref$offsetScroll = _ref.offsetScroll, offsetScroll = _ref$offsetScroll === void 0 ? 0 : _ref$offsetScroll, _ref$getContainer = _ref.getContainer, getContainer2 = _ref$getContainer === void 0 ? function() {
      return defaultContainer;
    } : _ref$getContainer;
    var container = getContainer2() || defaultContainer;
    return React349.useMemo(function() {
      var isSticky = !!sticky;
      return {
        isSticky,
        stickyClassName: isSticky ? "".concat(prefixCls, "-sticky-holder") : "",
        offsetHeader,
        offsetSummary,
        offsetScroll,
        container
      };
    }, [offsetScroll, offsetHeader, offsetSummary, prefixCls, container]);
  }

  // node_modules/rc-table/es/hooks/useStickyOffsets.js
  var import_react105 = __toESM(require_react());
  function useStickyOffsets(colWidths, columnCount, direction) {
    var stickyOffsets = (0, import_react105.useMemo)(function() {
      var leftOffsets = [];
      var rightOffsets = [];
      var left = 0;
      var right = 0;
      for (var start2 = 0; start2 < columnCount; start2 += 1) {
        if (direction === "rtl") {
          rightOffsets[start2] = right;
          right += colWidths[start2] || 0;
          var end = columnCount - start2 - 1;
          leftOffsets[end] = left;
          left += colWidths[end] || 0;
        } else {
          leftOffsets[start2] = left;
          left += colWidths[start2] || 0;
          var _end = columnCount - start2 - 1;
          rightOffsets[_end] = right;
          right += colWidths[_end] || 0;
        }
      }
      return {
        left: leftOffsets,
        right: rightOffsets
      };
    }, [colWidths, columnCount, direction]);
    return stickyOffsets;
  }
  var useStickyOffsets_default = useStickyOffsets;

  // node_modules/rc-table/es/Panel/index.js
  var React350 = __toESM(require_react());
  function Panel2(_ref) {
    var className = _ref.className, children = _ref.children;
    return /* @__PURE__ */ React350.createElement("div", {
      className
    }, children);
  }
  var Panel_default2 = Panel2;

  // node_modules/rc-table/es/stickyScrollBar.js
  var import_classnames121 = __toESM(require_classnames());
  var React351 = __toESM(require_react());
  var StickyScrollBar = function StickyScrollBar2(_ref, ref) {
    var _scrollBodyRef$curren, _scrollBodyRef$curren2;
    var scrollBodyRef = _ref.scrollBodyRef, onScroll = _ref.onScroll, offsetScroll = _ref.offsetScroll, container = _ref.container;
    var prefixCls = useContext134(TableContext_default, "prefixCls");
    var bodyScrollWidth = ((_scrollBodyRef$curren = scrollBodyRef.current) === null || _scrollBodyRef$curren === void 0 ? void 0 : _scrollBodyRef$curren.scrollWidth) || 0;
    var bodyWidth = ((_scrollBodyRef$curren2 = scrollBodyRef.current) === null || _scrollBodyRef$curren2 === void 0 ? void 0 : _scrollBodyRef$curren2.clientWidth) || 0;
    var scrollBarWidth = bodyScrollWidth && bodyWidth * (bodyWidth / bodyScrollWidth);
    var scrollBarRef = React351.useRef();
    var _useLayoutState = useLayoutState({
      scrollLeft: 0,
      isHiddenScrollBar: false
    }), _useLayoutState2 = _slicedToArray(_useLayoutState, 2), scrollState = _useLayoutState2[0], setScrollState = _useLayoutState2[1];
    var refState = React351.useRef({
      delta: 0,
      x: 0
    });
    var _React$useState = React351.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), isActive2 = _React$useState2[0], setActive = _React$useState2[1];
    var onMouseUp = function onMouseUp2() {
      setActive(false);
    };
    var onMouseDown = function onMouseDown2(event) {
      event.persist();
      refState.current.delta = event.pageX - scrollState.scrollLeft;
      refState.current.x = 0;
      setActive(true);
      event.preventDefault();
    };
    var onMouseMove = function onMouseMove2(event) {
      var _window;
      var _ref2 = event || ((_window = window) === null || _window === void 0 ? void 0 : _window.event), buttons = _ref2.buttons;
      if (!isActive2 || buttons === 0) {
        if (isActive2) {
          setActive(false);
        }
        return;
      }
      var left = refState.current.x + event.pageX - refState.current.x - refState.current.delta;
      if (left <= 0) {
        left = 0;
      }
      if (left + scrollBarWidth >= bodyWidth) {
        left = bodyWidth - scrollBarWidth;
      }
      onScroll({
        scrollLeft: left / bodyWidth * (bodyScrollWidth + 2)
      });
      refState.current.x = event.pageX;
    };
    var onContainerScroll = function onContainerScroll2() {
      if (!scrollBodyRef.current) {
        return;
      }
      var tableOffsetTop = getOffset2(scrollBodyRef.current).top;
      var tableBottomOffset = tableOffsetTop + scrollBodyRef.current.offsetHeight;
      var currentClientOffset = container === window ? document.documentElement.scrollTop + window.innerHeight : getOffset2(container).top + container.clientHeight;
      if (tableBottomOffset - getScrollBarSize() <= currentClientOffset || tableOffsetTop >= currentClientOffset - offsetScroll) {
        setScrollState(function(state) {
          return _objectSpread2(_objectSpread2({}, state), {}, {
            isHiddenScrollBar: true
          });
        });
      } else {
        setScrollState(function(state) {
          return _objectSpread2(_objectSpread2({}, state), {}, {
            isHiddenScrollBar: false
          });
        });
      }
    };
    var setScrollLeft = function setScrollLeft2(left) {
      setScrollState(function(state) {
        return _objectSpread2(_objectSpread2({}, state), {}, {
          scrollLeft: left / bodyScrollWidth * bodyWidth || 0
        });
      });
    };
    React351.useImperativeHandle(ref, function() {
      return {
        setScrollLeft
      };
    });
    React351.useEffect(function() {
      var onMouseUpListener = addEventListenerWrap(document.body, "mouseup", onMouseUp, false);
      var onMouseMoveListener = addEventListenerWrap(document.body, "mousemove", onMouseMove, false);
      onContainerScroll();
      return function() {
        onMouseUpListener.remove();
        onMouseMoveListener.remove();
      };
    }, [scrollBarWidth, isActive2]);
    React351.useEffect(function() {
      var onScrollListener = addEventListenerWrap(container, "scroll", onContainerScroll, false);
      var onResizeListener = addEventListenerWrap(window, "resize", onContainerScroll, false);
      return function() {
        onScrollListener.remove();
        onResizeListener.remove();
      };
    }, [container]);
    React351.useEffect(function() {
      if (!scrollState.isHiddenScrollBar) {
        setScrollState(function(state) {
          var bodyNode = scrollBodyRef.current;
          if (!bodyNode) {
            return state;
          }
          return _objectSpread2(_objectSpread2({}, state), {}, {
            scrollLeft: bodyNode.scrollLeft / bodyNode.scrollWidth * bodyNode.clientWidth
          });
        });
      }
    }, [scrollState.isHiddenScrollBar]);
    if (bodyScrollWidth <= bodyWidth || !scrollBarWidth || scrollState.isHiddenScrollBar) {
      return null;
    }
    return /* @__PURE__ */ React351.createElement("div", {
      style: {
        height: getScrollBarSize(),
        width: bodyWidth,
        bottom: offsetScroll
      },
      className: "".concat(prefixCls, "-sticky-scroll")
    }, /* @__PURE__ */ React351.createElement("div", {
      onMouseDown,
      ref: scrollBarRef,
      className: (0, import_classnames121.default)("".concat(prefixCls, "-sticky-scroll-bar"), _defineProperty({}, "".concat(prefixCls, "-sticky-scroll-bar-active"), isActive2)),
      style: {
        width: "".concat(scrollBarWidth, "px"),
        transform: "translate3d(".concat(scrollState.scrollLeft, "px, 0, 0)")
      }
    }));
  };
  var stickyScrollBar_default = /* @__PURE__ */ React351.forwardRef(StickyScrollBar);

  // node_modules/rc-table/es/Table.js
  var DEFAULT_PREFIX = "rc-table";
  var EMPTY_DATA2 = [];
  var EMPTY_SCROLL_TARGET = {};
  function defaultEmpty() {
    return "No Data";
  }
  function Table(tableProps, ref) {
    var props = _objectSpread2({
      rowKey: "key",
      prefixCls: DEFAULT_PREFIX,
      emptyText: defaultEmpty
    }, tableProps);
    var prefixCls = props.prefixCls, className = props.className, rowClassName = props.rowClassName, style2 = props.style, data = props.data, rowKey = props.rowKey, scroll = props.scroll, tableLayout = props.tableLayout, direction = props.direction, title = props.title, footer = props.footer, summary = props.summary, caption = props.caption, id = props.id, showHeader = props.showHeader, components = props.components, emptyText = props.emptyText, onRow = props.onRow, onHeaderRow = props.onHeaderRow, internalHooks = props.internalHooks, transformColumns = props.transformColumns, internalRefs = props.internalRefs, tailor = props.tailor, getContainerWidth = props.getContainerWidth, sticky = props.sticky;
    var mergedData = data || EMPTY_DATA2;
    var hasData = !!mergedData.length;
    var useInternalHooks = internalHooks === INTERNAL_HOOKS;
    if (true) {
      ["onRowClick", "onRowDoubleClick", "onRowContextMenu", "onRowMouseEnter", "onRowMouseLeave"].forEach(function(name) {
        warning_default(props[name] === void 0, "`".concat(name, "` is removed, please use `onRow` instead."));
      });
      warning_default(!("getBodyWrapper" in props), "`getBodyWrapper` is deprecated, please use custom `components` instead.");
    }
    var getComponent = React352.useCallback(function(path2, defaultComponent) {
      return get(components, path2) || defaultComponent;
    }, [components]);
    var getRowKey = React352.useMemo(function() {
      if (typeof rowKey === "function") {
        return rowKey;
      }
      return function(record) {
        var key = record && record[rowKey];
        if (true) {
          warning_default(key !== void 0, "Each record in table should have a unique `key` prop, or set `rowKey` to an unique primary key.");
        }
        return key;
      };
    }, [rowKey]);
    var customizeScrollBody = getComponent(["body"]);
    var _useHover = useHover(), _useHover2 = _slicedToArray(_useHover, 3), startRow = _useHover2[0], endRow = _useHover2[1], onHover = _useHover2[2];
    var _useExpand = useExpand(props, mergedData, getRowKey), _useExpand2 = _slicedToArray(_useExpand, 6), expandableConfig = _useExpand2[0], expandableType = _useExpand2[1], mergedExpandedKeys = _useExpand2[2], mergedExpandIcon = _useExpand2[3], mergedChildrenColumnName = _useExpand2[4], onTriggerExpand = _useExpand2[5];
    var scrollX = scroll === null || scroll === void 0 ? void 0 : scroll.x;
    var _React$useState = React352.useState(0), _React$useState2 = _slicedToArray(_React$useState, 2), componentWidth = _React$useState2[0], setComponentWidth = _React$useState2[1];
    var _useColumns = useColumns_default(_objectSpread2(_objectSpread2(_objectSpread2({}, props), expandableConfig), {}, {
      expandable: !!expandableConfig.expandedRowRender,
      columnTitle: expandableConfig.columnTitle,
      expandedKeys: mergedExpandedKeys,
      getRowKey,
      // https://github.com/ant-design/ant-design/issues/23894
      onTriggerExpand,
      expandIcon: mergedExpandIcon,
      expandIconColumnIndex: expandableConfig.expandIconColumnIndex,
      direction,
      scrollWidth: useInternalHooks && tailor && typeof scrollX === "number" ? scrollX : null,
      clientWidth: componentWidth
    }), useInternalHooks ? transformColumns : null), _useColumns2 = _slicedToArray(_useColumns, 3), columns = _useColumns2[0], flattenColumns = _useColumns2[1], flattenScrollX = _useColumns2[2];
    var mergedScrollX = flattenScrollX !== null && flattenScrollX !== void 0 ? flattenScrollX : scrollX;
    var columnContext = React352.useMemo(function() {
      return {
        columns,
        flattenColumns
      };
    }, [columns, flattenColumns]);
    var fullTableRef = React352.useRef();
    var scrollHeaderRef = React352.useRef();
    var scrollBodyRef = React352.useRef();
    var scrollBodyContainerRef = React352.useRef();
    React352.useImperativeHandle(ref, function() {
      return {
        nativeElement: fullTableRef.current,
        scrollTo: function scrollTo3(config) {
          var _scrollBodyRef$curren3;
          if (scrollBodyRef.current instanceof HTMLElement) {
            var index2 = config.index, top = config.top, key = config.key;
            if (top) {
              var _scrollBodyRef$curren;
              (_scrollBodyRef$curren = scrollBodyRef.current) === null || _scrollBodyRef$curren === void 0 || _scrollBodyRef$curren.scrollTo({
                top
              });
            } else {
              var _scrollBodyRef$curren2;
              var mergedKey = key !== null && key !== void 0 ? key : getRowKey(mergedData[index2]);
              (_scrollBodyRef$curren2 = scrollBodyRef.current.querySelector('[data-row-key="'.concat(mergedKey, '"]'))) === null || _scrollBodyRef$curren2 === void 0 || _scrollBodyRef$curren2.scrollIntoView();
            }
          } else if ((_scrollBodyRef$curren3 = scrollBodyRef.current) !== null && _scrollBodyRef$curren3 !== void 0 && _scrollBodyRef$curren3.scrollTo) {
            scrollBodyRef.current.scrollTo(config);
          }
        }
      };
    });
    var scrollSummaryRef = React352.useRef();
    var _React$useState3 = React352.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), pingedLeft = _React$useState4[0], setPingedLeft = _React$useState4[1];
    var _React$useState5 = React352.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), pingedRight = _React$useState6[0], setPingedRight = _React$useState6[1];
    var _useLayoutState = useLayoutState(/* @__PURE__ */ new Map()), _useLayoutState2 = _slicedToArray(_useLayoutState, 2), colsWidths = _useLayoutState2[0], updateColsWidths = _useLayoutState2[1];
    var colsKeys = getColumnsKey(flattenColumns);
    var pureColWidths = colsKeys.map(function(columnKey) {
      return colsWidths.get(columnKey);
    });
    var colWidths = React352.useMemo(function() {
      return pureColWidths;
    }, [pureColWidths.join("_")]);
    var stickyOffsets = useStickyOffsets_default(colWidths, flattenColumns.length, direction);
    var fixHeader = scroll && validateValue(scroll.y);
    var horizonScroll = scroll && validateValue(mergedScrollX) || Boolean(expandableConfig.fixed);
    var fixColumn = horizonScroll && flattenColumns.some(function(_ref) {
      var fixed = _ref.fixed;
      return fixed;
    });
    var stickyRef = React352.useRef();
    var _useSticky = useSticky(sticky, prefixCls), isSticky = _useSticky.isSticky, offsetHeader = _useSticky.offsetHeader, offsetSummary = _useSticky.offsetSummary, offsetScroll = _useSticky.offsetScroll, stickyClassName = _useSticky.stickyClassName, container = _useSticky.container;
    var summaryNode = React352.useMemo(function() {
      return summary === null || summary === void 0 ? void 0 : summary(mergedData);
    }, [summary, mergedData]);
    var fixFooter = (fixHeader || isSticky) && /* @__PURE__ */ React352.isValidElement(summaryNode) && summaryNode.type === Summary_default && summaryNode.props.fixed;
    var scrollXStyle;
    var scrollYStyle;
    var scrollTableStyle;
    if (fixHeader) {
      scrollYStyle = {
        overflowY: "scroll",
        maxHeight: scroll.y
      };
    }
    if (horizonScroll) {
      scrollXStyle = {
        overflowX: "auto"
      };
      if (!fixHeader) {
        scrollYStyle = {
          overflowY: "hidden"
        };
      }
      scrollTableStyle = {
        width: mergedScrollX === true ? "auto" : mergedScrollX,
        minWidth: "100%"
      };
    }
    var onColumnResize = React352.useCallback(function(columnKey, width) {
      if (isVisible_default(fullTableRef.current)) {
        updateColsWidths(function(widths) {
          if (widths.get(columnKey) !== width) {
            var newWidths = new Map(widths);
            newWidths.set(columnKey, width);
            return newWidths;
          }
          return widths;
        });
      }
    }, []);
    var _useTimeoutLock = useTimeoutLock(null), _useTimeoutLock2 = _slicedToArray(_useTimeoutLock, 2), setScrollTarget = _useTimeoutLock2[0], getScrollTarget = _useTimeoutLock2[1];
    function forceScroll(scrollLeft, target) {
      if (!target) {
        return;
      }
      if (typeof target === "function") {
        target(scrollLeft);
      } else if (target.scrollLeft !== scrollLeft) {
        target.scrollLeft = scrollLeft;
        if (target.scrollLeft !== scrollLeft) {
          setTimeout(function() {
            target.scrollLeft = scrollLeft;
          }, 0);
        }
      }
    }
    var onScroll = useEvent(function(_ref2) {
      var currentTarget = _ref2.currentTarget, scrollLeft = _ref2.scrollLeft;
      var isRTL = direction === "rtl";
      var mergedScrollLeft = typeof scrollLeft === "number" ? scrollLeft : currentTarget.scrollLeft;
      var compareTarget = currentTarget || EMPTY_SCROLL_TARGET;
      if (!getScrollTarget() || getScrollTarget() === compareTarget) {
        var _stickyRef$current;
        setScrollTarget(compareTarget);
        forceScroll(mergedScrollLeft, scrollHeaderRef.current);
        forceScroll(mergedScrollLeft, scrollBodyRef.current);
        forceScroll(mergedScrollLeft, scrollSummaryRef.current);
        forceScroll(mergedScrollLeft, (_stickyRef$current = stickyRef.current) === null || _stickyRef$current === void 0 ? void 0 : _stickyRef$current.setScrollLeft);
      }
      var measureTarget = currentTarget || scrollHeaderRef.current;
      if (measureTarget) {
        var scrollWidth = measureTarget.scrollWidth, clientWidth = measureTarget.clientWidth;
        if (scrollWidth === clientWidth) {
          setPingedLeft(false);
          setPingedRight(false);
          return;
        }
        if (isRTL) {
          setPingedLeft(-mergedScrollLeft < scrollWidth - clientWidth);
          setPingedRight(-mergedScrollLeft > 0);
        } else {
          setPingedLeft(mergedScrollLeft > 0);
          setPingedRight(mergedScrollLeft < scrollWidth - clientWidth);
        }
      }
    });
    var triggerOnScroll = function triggerOnScroll2() {
      if (horizonScroll && scrollBodyRef.current) {
        onScroll({
          currentTarget: scrollBodyRef.current
        });
      } else {
        setPingedLeft(false);
        setPingedRight(false);
      }
    };
    var onFullTableResize = function onFullTableResize2(_ref3) {
      var width = _ref3.width;
      var mergedWidth = fullTableRef.current ? fullTableRef.current.offsetWidth : width;
      if (useInternalHooks && getContainerWidth && fullTableRef.current) {
        mergedWidth = getContainerWidth(fullTableRef.current, mergedWidth) || mergedWidth;
      }
      if (mergedWidth !== componentWidth) {
        triggerOnScroll();
        setComponentWidth(mergedWidth);
      }
    };
    var mounted = React352.useRef(false);
    React352.useEffect(function() {
      if (mounted.current) {
        triggerOnScroll();
      }
    }, [horizonScroll, data, columns.length]);
    React352.useEffect(function() {
      mounted.current = true;
    }, []);
    var _React$useState7 = React352.useState(0), _React$useState8 = _slicedToArray(_React$useState7, 2), scrollbarSize = _React$useState8[0], setScrollbarSize = _React$useState8[1];
    var _React$useState9 = React352.useState(true), _React$useState10 = _slicedToArray(_React$useState9, 2), supportSticky = _React$useState10[0], setSupportSticky = _React$useState10[1];
    React352.useEffect(function() {
      if (!tailor || !useInternalHooks) {
        if (scrollBodyRef.current instanceof Element) {
          setScrollbarSize(getTargetScrollBarSize(scrollBodyRef.current).width);
        } else {
          setScrollbarSize(getTargetScrollBarSize(scrollBodyContainerRef.current).width);
        }
      }
      setSupportSticky(isStyleSupport("position", "sticky"));
    }, []);
    React352.useEffect(function() {
      if (useInternalHooks && internalRefs) {
        internalRefs.body.current = scrollBodyRef.current;
      }
    });
    var renderFixedHeaderTable = React352.useCallback(function(fixedHolderPassProps) {
      return /* @__PURE__ */ React352.createElement(React352.Fragment, null, /* @__PURE__ */ React352.createElement(Header_default2, fixedHolderPassProps), fixFooter === "top" && /* @__PURE__ */ React352.createElement(Footer_default, fixedHolderPassProps, summaryNode));
    }, [fixFooter, summaryNode]);
    var renderFixedFooterTable = React352.useCallback(function(fixedHolderPassProps) {
      return /* @__PURE__ */ React352.createElement(Footer_default, fixedHolderPassProps, summaryNode);
    }, [summaryNode]);
    var TableComponent = getComponent(["table"], "table");
    var mergedTableLayout = React352.useMemo(function() {
      if (tableLayout) {
        return tableLayout;
      }
      if (fixColumn) {
        return mergedScrollX === "max-content" ? "auto" : "fixed";
      }
      if (fixHeader || isSticky || flattenColumns.some(function(_ref4) {
        var ellipsis = _ref4.ellipsis;
        return ellipsis;
      })) {
        return "fixed";
      }
      return "auto";
    }, [fixHeader, fixColumn, flattenColumns, tableLayout, isSticky]);
    var groupTableNode;
    var headerProps = {
      colWidths,
      columCount: flattenColumns.length,
      stickyOffsets,
      onHeaderRow,
      fixHeader,
      scroll
    };
    var emptyNode = React352.useMemo(function() {
      if (hasData) {
        return null;
      }
      if (typeof emptyText === "function") {
        return emptyText();
      }
      return emptyText;
    }, [hasData, emptyText]);
    var bodyTable = /* @__PURE__ */ React352.createElement(Body_default, {
      data: mergedData,
      measureColumnWidth: fixHeader || horizonScroll || isSticky
    });
    var bodyColGroup = /* @__PURE__ */ React352.createElement(ColGroup_default, {
      colWidths: flattenColumns.map(function(_ref5) {
        var width = _ref5.width;
        return width;
      }),
      columns: flattenColumns
    });
    var captionElement = caption !== null && caption !== void 0 ? /* @__PURE__ */ React352.createElement("caption", {
      className: "".concat(prefixCls, "-caption")
    }, caption) : void 0;
    var dataProps = pickAttrs(props, {
      data: true
    });
    var ariaProps = pickAttrs(props, {
      aria: true
    });
    if (fixHeader || isSticky) {
      var bodyContent;
      if (typeof customizeScrollBody === "function") {
        bodyContent = customizeScrollBody(mergedData, {
          scrollbarSize,
          ref: scrollBodyRef,
          onScroll
        });
        headerProps.colWidths = flattenColumns.map(function(_ref6, index2) {
          var width = _ref6.width;
          var colWidth = index2 === flattenColumns.length - 1 ? width - scrollbarSize : width;
          if (typeof colWidth === "number" && !Number.isNaN(colWidth)) {
            return colWidth;
          }
          if (true) {
            warning_default(props.columns.length === 0, "When use `components.body` with render props. Each column should have a fixed `width` value.");
          }
          return 0;
        });
      } else {
        bodyContent = /* @__PURE__ */ React352.createElement("div", {
          style: _objectSpread2(_objectSpread2({}, scrollXStyle), scrollYStyle),
          onScroll,
          ref: scrollBodyRef,
          className: (0, import_classnames122.default)("".concat(prefixCls, "-body"))
        }, /* @__PURE__ */ React352.createElement(TableComponent, _extends({
          style: _objectSpread2(_objectSpread2({}, scrollTableStyle), {}, {
            tableLayout: mergedTableLayout
          })
        }, ariaProps), captionElement, bodyColGroup, bodyTable, !fixFooter && summaryNode && /* @__PURE__ */ React352.createElement(Footer_default, {
          stickyOffsets,
          flattenColumns,
          columns
        }, summaryNode)));
      }
      var fixedHolderProps = _objectSpread2(_objectSpread2(_objectSpread2({
        noData: !mergedData.length,
        maxContentScroll: horizonScroll && mergedScrollX === "max-content"
      }, headerProps), columnContext), {}, {
        direction,
        stickyClassName,
        onScroll
      });
      groupTableNode = /* @__PURE__ */ React352.createElement(React352.Fragment, null, showHeader !== false && /* @__PURE__ */ React352.createElement(FixedHolder_default, _extends({}, fixedHolderProps, {
        stickyTopOffset: offsetHeader,
        className: "".concat(prefixCls, "-header"),
        ref: scrollHeaderRef
      }), renderFixedHeaderTable), bodyContent, fixFooter && fixFooter !== "top" && /* @__PURE__ */ React352.createElement(FixedHolder_default, _extends({}, fixedHolderProps, {
        stickyBottomOffset: offsetSummary,
        className: "".concat(prefixCls, "-summary"),
        ref: scrollSummaryRef
      }), renderFixedFooterTable), isSticky && scrollBodyRef.current && scrollBodyRef.current instanceof Element && /* @__PURE__ */ React352.createElement(stickyScrollBar_default, {
        ref: stickyRef,
        offsetScroll,
        scrollBodyRef,
        onScroll,
        container
      }));
    } else {
      groupTableNode = /* @__PURE__ */ React352.createElement("div", {
        style: _objectSpread2(_objectSpread2({}, scrollXStyle), scrollYStyle),
        className: (0, import_classnames122.default)("".concat(prefixCls, "-content")),
        onScroll,
        ref: scrollBodyRef
      }, /* @__PURE__ */ React352.createElement(TableComponent, _extends({
        style: _objectSpread2(_objectSpread2({}, scrollTableStyle), {}, {
          tableLayout: mergedTableLayout
        })
      }, ariaProps), captionElement, bodyColGroup, showHeader !== false && /* @__PURE__ */ React352.createElement(Header_default2, _extends({}, headerProps, columnContext)), bodyTable, summaryNode && /* @__PURE__ */ React352.createElement(Footer_default, {
        stickyOffsets,
        flattenColumns,
        columns
      }, summaryNode)));
    }
    var fullTable = /* @__PURE__ */ React352.createElement("div", _extends({
      className: (0, import_classnames122.default)(prefixCls, className, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), "".concat(prefixCls, "-ping-left"), pingedLeft), "".concat(prefixCls, "-ping-right"), pingedRight), "".concat(prefixCls, "-layout-fixed"), tableLayout === "fixed"), "".concat(prefixCls, "-fixed-header"), fixHeader), "".concat(prefixCls, "-fixed-column"), fixColumn), "".concat(prefixCls, "-scroll-horizontal"), horizonScroll), "".concat(prefixCls, "-has-fix-left"), flattenColumns[0] && flattenColumns[0].fixed), "".concat(prefixCls, "-has-fix-right"), flattenColumns[flattenColumns.length - 1] && flattenColumns[flattenColumns.length - 1].fixed === "right")),
      style: style2,
      id,
      ref: fullTableRef
    }, dataProps), title && /* @__PURE__ */ React352.createElement(Panel_default2, {
      className: "".concat(prefixCls, "-title")
    }, title(mergedData)), /* @__PURE__ */ React352.createElement("div", {
      ref: scrollBodyContainerRef,
      className: "".concat(prefixCls, "-container")
    }, groupTableNode), footer && /* @__PURE__ */ React352.createElement(Panel_default2, {
      className: "".concat(prefixCls, "-footer")
    }, footer(mergedData)));
    if (horizonScroll) {
      fullTable = /* @__PURE__ */ React352.createElement(es_default, {
        onResize: onFullTableResize
      }, fullTable);
    }
    var fixedInfoList = useFixedInfo(flattenColumns, stickyOffsets, direction, columns);
    var TableContextValue = React352.useMemo(function() {
      return {
        // Scroll
        scrollX: mergedScrollX,
        // Table
        prefixCls,
        getComponent,
        scrollbarSize,
        direction,
        fixedInfoList,
        isSticky,
        supportSticky,
        componentWidth,
        fixHeader,
        fixColumn,
        horizonScroll,
        // Body
        tableLayout: mergedTableLayout,
        rowClassName,
        expandedRowClassName: expandableConfig.expandedRowClassName,
        expandIcon: mergedExpandIcon,
        expandableType,
        expandRowByClick: expandableConfig.expandRowByClick,
        expandedRowRender: expandableConfig.expandedRowRender,
        onTriggerExpand,
        expandIconColumnIndex: expandableConfig.expandIconColumnIndex,
        indentSize: expandableConfig.indentSize,
        allColumnsFixedLeft: flattenColumns.every(function(col) {
          return col.fixed === "left";
        }),
        emptyNode,
        // Column
        columns,
        flattenColumns,
        onColumnResize,
        // Row
        hoverStartRow: startRow,
        hoverEndRow: endRow,
        onHover,
        rowExpandable: expandableConfig.rowExpandable,
        onRow,
        getRowKey,
        expandedKeys: mergedExpandedKeys,
        childrenColumnName: mergedChildrenColumnName
      };
    }, [
      // Scroll
      mergedScrollX,
      // Table
      prefixCls,
      getComponent,
      scrollbarSize,
      direction,
      fixedInfoList,
      isSticky,
      supportSticky,
      componentWidth,
      fixHeader,
      fixColumn,
      horizonScroll,
      // Body
      mergedTableLayout,
      rowClassName,
      expandableConfig.expandedRowClassName,
      mergedExpandIcon,
      expandableType,
      expandableConfig.expandRowByClick,
      expandableConfig.expandedRowRender,
      onTriggerExpand,
      expandableConfig.expandIconColumnIndex,
      expandableConfig.indentSize,
      emptyNode,
      // Column
      columns,
      flattenColumns,
      onColumnResize,
      // Row
      startRow,
      endRow,
      onHover,
      expandableConfig.rowExpandable,
      onRow,
      getRowKey,
      mergedExpandedKeys,
      mergedChildrenColumnName
    ]);
    return /* @__PURE__ */ React352.createElement(TableContext_default.Provider, {
      value: TableContextValue
    }, fullTable);
  }
  var RefTable = /* @__PURE__ */ React352.forwardRef(Table);
  if (true) {
    RefTable.displayName = "Table";
  }
  function genTable(shouldTriggerRender) {
    return makeImmutable2(RefTable, shouldTriggerRender);
  }
  var ImmutableTable = genTable();
  ImmutableTable.EXPAND_COLUMN = EXPAND_COLUMN;
  ImmutableTable.INTERNAL_HOOKS = INTERNAL_HOOKS;
  ImmutableTable.Column = Column_default;
  ImmutableTable.ColumnGroup = ColumnGroup_default;
  ImmutableTable.Summary = FooterComponents;
  var Table_default = ImmutableTable;

  // node_modules/rc-table/es/VirtualTable/index.js
  var import_classnames126 = __toESM(require_classnames());
  var React356 = __toESM(require_react());

  // node_modules/rc-table/es/VirtualTable/BodyGrid.js
  var import_classnames125 = __toESM(require_classnames());
  var React355 = __toESM(require_react());

  // node_modules/rc-table/es/VirtualTable/BodyLine.js
  var import_classnames124 = __toESM(require_classnames());
  var React354 = __toESM(require_react());

  // node_modules/rc-table/es/VirtualTable/VirtualCell.js
  var import_classnames123 = __toESM(require_classnames());
  var React353 = __toESM(require_react());

  // node_modules/rc-table/es/VirtualTable/context.js
  var StaticContext = createContext38(null);
  var GridContext = createContext38(null);

  // node_modules/rc-table/es/VirtualTable/VirtualCell.js
  function getColumnWidth(colIndex, colSpan, columnsOffset) {
    var mergedColSpan = colSpan || 1;
    return columnsOffset[colIndex + mergedColSpan] - (columnsOffset[colIndex] || 0);
  }
  function VirtualCell(props) {
    var rowInfo = props.rowInfo, column2 = props.column, colIndex = props.colIndex, indent = props.indent, index2 = props.index, renderIndex = props.renderIndex, record = props.record, style2 = props.style, className = props.className, inverse = props.inverse, getHeight = props.getHeight;
    var render2 = column2.render, dataIndex = column2.dataIndex, columnClassName = column2.className, colWidth = column2.width;
    var _useContext = useContext134(GridContext, ["columnsOffset"]), columnsOffset = _useContext.columnsOffset;
    var _getCellProps = getCellProps(rowInfo, column2, colIndex, indent, index2), key = _getCellProps.key, fixedInfo = _getCellProps.fixedInfo, appendCellNode = _getCellProps.appendCellNode, additionalCellProps = _getCellProps.additionalCellProps;
    var cellStyle = additionalCellProps.style, _additionalCellProps$ = additionalCellProps.colSpan, colSpan = _additionalCellProps$ === void 0 ? 1 : _additionalCellProps$, _additionalCellProps$2 = additionalCellProps.rowSpan, rowSpan = _additionalCellProps$2 === void 0 ? 1 : _additionalCellProps$2;
    var startColIndex = colIndex - 1;
    var concatColWidth = getColumnWidth(startColIndex, colSpan, columnsOffset);
    var marginOffset = colSpan > 1 ? colWidth - concatColWidth : 0;
    var mergedStyle = _objectSpread2(_objectSpread2(_objectSpread2({}, cellStyle), style2), {}, {
      flex: "0 0 ".concat(concatColWidth, "px"),
      width: "".concat(concatColWidth, "px"),
      marginRight: marginOffset,
      pointerEvents: "auto"
    });
    var needHide = React353.useMemo(function() {
      if (inverse) {
        return rowSpan <= 1;
      } else {
        return colSpan === 0 || rowSpan === 0 || rowSpan > 1;
      }
    }, [rowSpan, colSpan, inverse]);
    if (needHide) {
      mergedStyle.visibility = "hidden";
    } else if (inverse) {
      mergedStyle.height = getHeight === null || getHeight === void 0 ? void 0 : getHeight(rowSpan);
    }
    var mergedRender = needHide ? function() {
      return null;
    } : render2;
    var cellSpan = {};
    if (rowSpan === 0 || colSpan === 0) {
      cellSpan.rowSpan = 1;
      cellSpan.colSpan = 1;
    }
    return /* @__PURE__ */ React353.createElement(Cell_default, _extends({
      className: (0, import_classnames123.default)(columnClassName, className),
      ellipsis: column2.ellipsis,
      align: column2.align,
      scope: column2.rowScope,
      component: "div",
      prefixCls: rowInfo.prefixCls,
      key,
      record,
      index: index2,
      renderIndex,
      dataIndex,
      render: mergedRender,
      shouldCellUpdate: column2.shouldCellUpdate
    }, fixedInfo, {
      appendNode: appendCellNode,
      additionalProps: _objectSpread2(_objectSpread2({}, additionalCellProps), {}, {
        style: mergedStyle
      }, cellSpan)
    }));
  }
  var VirtualCell_default = VirtualCell;

  // node_modules/rc-table/es/VirtualTable/BodyLine.js
  var _excluded49 = ["data", "index", "className", "rowKey", "style", "extra", "getHeight"];
  var BodyLine = /* @__PURE__ */ React354.forwardRef(function(props, ref) {
    var data = props.data, index2 = props.index, className = props.className, rowKey = props.rowKey, style2 = props.style, extra = props.extra, getHeight = props.getHeight, restProps = _objectWithoutProperties(props, _excluded49);
    var record = data.record, indent = data.indent, renderIndex = data.index;
    var _useContext = useContext134(TableContext_default, ["prefixCls", "flattenColumns", "fixColumn", "componentWidth", "scrollX"]), scrollX = _useContext.scrollX, flattenColumns = _useContext.flattenColumns, prefixCls = _useContext.prefixCls, fixColumn = _useContext.fixColumn, componentWidth = _useContext.componentWidth;
    var rowInfo = useRowInfo(record, rowKey, index2, indent);
    var rowSupportExpand = rowInfo.rowSupportExpand, expanded = rowInfo.expanded, rowProps = rowInfo.rowProps, expandedRowRender = rowInfo.expandedRowRender, expandedRowClassName = rowInfo.expandedRowClassName;
    var expandRowNode;
    if (rowSupportExpand && expanded) {
      var expandContent = expandedRowRender(record, index2, indent + 1, expanded);
      var computedExpandedRowClassName = expandedRowClassName === null || expandedRowClassName === void 0 ? void 0 : expandedRowClassName(record, index2, indent);
      var additionalProps = {};
      if (fixColumn) {
        additionalProps = {
          style: _defineProperty({}, "--virtual-width", "".concat(componentWidth, "px"))
        };
      }
      var rowCellCls = "".concat(prefixCls, "-expanded-row-cell");
      expandRowNode = /* @__PURE__ */ React354.createElement("div", {
        className: (0, import_classnames124.default)("".concat(prefixCls, "-expanded-row"), "".concat(prefixCls, "-expanded-row-level-").concat(indent + 1), computedExpandedRowClassName)
      }, /* @__PURE__ */ React354.createElement(Cell_default, {
        component: "div",
        prefixCls,
        className: (0, import_classnames124.default)(rowCellCls, _defineProperty({}, "".concat(rowCellCls, "-fixed"), fixColumn)),
        additionalProps
      }, expandContent));
    }
    var rowStyle = _objectSpread2(_objectSpread2({}, style2), {}, {
      width: scrollX
    });
    if (extra) {
      rowStyle.position = "absolute";
      rowStyle.pointerEvents = "none";
    }
    var rowNode = /* @__PURE__ */ React354.createElement("div", _extends({}, rowProps, restProps, {
      ref: rowSupportExpand ? null : ref,
      className: (0, import_classnames124.default)(className, "".concat(prefixCls, "-row"), rowProps === null || rowProps === void 0 ? void 0 : rowProps.className, _defineProperty({}, "".concat(prefixCls, "-row-extra"), extra)),
      style: _objectSpread2(_objectSpread2({}, rowStyle), rowProps === null || rowProps === void 0 ? void 0 : rowProps.style)
    }), flattenColumns.map(function(column2, colIndex) {
      return /* @__PURE__ */ React354.createElement(VirtualCell_default, {
        key: colIndex,
        rowInfo,
        column: column2,
        colIndex,
        indent,
        index: index2,
        renderIndex,
        record,
        inverse: extra,
        getHeight
      });
    }));
    if (rowSupportExpand) {
      return /* @__PURE__ */ React354.createElement("div", {
        ref
      }, rowNode, expandRowNode);
    }
    return rowNode;
  });
  var ResponseBodyLine = responseImmutable2(BodyLine);
  if (true) {
    ResponseBodyLine.displayName = "BodyLine";
  }
  var BodyLine_default = ResponseBodyLine;

  // node_modules/rc-table/es/VirtualTable/BodyGrid.js
  var Grid2 = /* @__PURE__ */ React355.forwardRef(function(props, ref) {
    var data = props.data, onScroll = props.onScroll;
    var _useContext = useContext134(TableContext_default, ["flattenColumns", "onColumnResize", "getRowKey", "prefixCls", "expandedKeys", "childrenColumnName", "emptyNode", "scrollX"]), flattenColumns = _useContext.flattenColumns, onColumnResize = _useContext.onColumnResize, getRowKey = _useContext.getRowKey, expandedKeys = _useContext.expandedKeys, prefixCls = _useContext.prefixCls, childrenColumnName = _useContext.childrenColumnName, emptyNode = _useContext.emptyNode, scrollX = _useContext.scrollX;
    var _useContext2 = useContext134(StaticContext), sticky = _useContext2.sticky, scrollY = _useContext2.scrollY, listItemHeight = _useContext2.listItemHeight;
    var listRef = React355.useRef();
    var flattenData2 = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey);
    var columnsWidth = React355.useMemo(function() {
      var total = 0;
      return flattenColumns.map(function(_ref) {
        var width = _ref.width, key = _ref.key;
        total += width;
        return [key, width, total];
      });
    }, [flattenColumns]);
    var columnsOffset = React355.useMemo(function() {
      return columnsWidth.map(function(colWidth) {
        return colWidth[2];
      });
    }, [columnsWidth]);
    React355.useEffect(function() {
      columnsWidth.forEach(function(_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], width = _ref3[1];
        onColumnResize(key, width);
      });
    }, [columnsWidth]);
    React355.useImperativeHandle(ref, function() {
      var obj = {
        scrollTo: function scrollTo3(config) {
          var _listRef$current;
          (_listRef$current = listRef.current) === null || _listRef$current === void 0 || _listRef$current.scrollTo(config);
        }
      };
      Object.defineProperty(obj, "scrollLeft", {
        get: function get2() {
          var _listRef$current2;
          return ((_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 ? void 0 : _listRef$current2.getScrollInfo().x) || 0;
        },
        set: function set3(value) {
          var _listRef$current3;
          (_listRef$current3 = listRef.current) === null || _listRef$current3 === void 0 || _listRef$current3.scrollTo({
            left: value
          });
        }
      });
      return obj;
    });
    var getRowSpan = function getRowSpan2(column2, index2) {
      var _flattenData$index;
      var record = (_flattenData$index = flattenData2[index2]) === null || _flattenData$index === void 0 ? void 0 : _flattenData$index.record;
      var onCell = column2.onCell;
      if (onCell) {
        var _cellProps$rowSpan;
        var cellProps = onCell(record, index2);
        return (_cellProps$rowSpan = cellProps === null || cellProps === void 0 ? void 0 : cellProps.rowSpan) !== null && _cellProps$rowSpan !== void 0 ? _cellProps$rowSpan : 1;
      }
      return 1;
    };
    var extraRender = function extraRender2(info) {
      var start2 = info.start, end = info.end, getSize3 = info.getSize, offsetY = info.offsetY;
      if (end < 0) {
        return null;
      }
      var firstRowSpanColumns = flattenColumns.filter(
        // rowSpan is 0
        function(column2) {
          return getRowSpan(column2, start2) === 0;
        }
      );
      var startIndex = start2;
      var _loop = function _loop4(i2) {
        firstRowSpanColumns = firstRowSpanColumns.filter(function(column2) {
          return getRowSpan(column2, i2) === 0;
        });
        if (!firstRowSpanColumns.length) {
          startIndex = i2;
          return 1;
        }
      };
      for (var i = start2; i >= 0; i -= 1) {
        if (_loop(i))
          break;
      }
      var lastRowSpanColumns = flattenColumns.filter(
        // rowSpan is not 1
        function(column2) {
          return getRowSpan(column2, end) !== 1;
        }
      );
      var endIndex = end;
      var _loop2 = function _loop22(_i3) {
        lastRowSpanColumns = lastRowSpanColumns.filter(function(column2) {
          return getRowSpan(column2, _i3) !== 1;
        });
        if (!lastRowSpanColumns.length) {
          endIndex = Math.max(_i3 - 1, end);
          return 1;
        }
      };
      for (var _i = end; _i < flattenData2.length; _i += 1) {
        if (_loop2(_i))
          break;
      }
      var spanLines = [];
      var _loop3 = function _loop32(_i22) {
        var item = flattenData2[_i22];
        if (!item) {
          return 1;
        }
        if (flattenColumns.some(function(column2) {
          return getRowSpan(column2, _i22) > 1;
        })) {
          spanLines.push(_i22);
        }
      };
      for (var _i2 = startIndex; _i2 <= endIndex; _i2 += 1) {
        if (_loop3(_i2))
          continue;
      }
      var nodes = spanLines.map(function(index2) {
        var item = flattenData2[index2];
        var rowKey = getRowKey(item.record, index2);
        var getHeight = function getHeight2(rowSpan) {
          var endItemIndex = index2 + rowSpan - 1;
          var endItemKey = getRowKey(flattenData2[endItemIndex].record, endItemIndex);
          var sizeInfo2 = getSize3(rowKey, endItemKey);
          return sizeInfo2.bottom - sizeInfo2.top;
        };
        var sizeInfo = getSize3(rowKey);
        return /* @__PURE__ */ React355.createElement(BodyLine_default, {
          key: index2,
          data: item,
          rowKey,
          index: index2,
          style: {
            top: -offsetY + sizeInfo.top
          },
          extra: true,
          getHeight
        });
      });
      return nodes;
    };
    var gridContext = React355.useMemo(function() {
      return {
        columnsOffset
      };
    }, [columnsOffset]);
    var tblPrefixCls = "".concat(prefixCls, "-tbody");
    var bodyContent;
    if (flattenData2.length) {
      var horizontalScrollBarStyle = {};
      if (sticky) {
        horizontalScrollBarStyle.position = "sticky";
        horizontalScrollBarStyle.bottom = 0;
        if (_typeof(sticky) === "object" && sticky.offsetScroll) {
          horizontalScrollBarStyle.bottom = sticky.offsetScroll;
        }
      }
      bodyContent = /* @__PURE__ */ React355.createElement(es_default8, {
        fullHeight: false,
        ref: listRef,
        styles: {
          horizontalScrollBar: horizontalScrollBarStyle
        },
        className: (0, import_classnames125.default)(tblPrefixCls, "".concat(tblPrefixCls, "-virtual")),
        height: scrollY,
        itemHeight: listItemHeight || 24,
        data: flattenData2,
        itemKey: function itemKey3(item) {
          return getRowKey(item.record);
        },
        scrollWidth: scrollX,
        onVirtualScroll: function onVirtualScroll(_ref4) {
          var x = _ref4.x;
          onScroll({
            scrollLeft: x
          });
        },
        extraRender
      }, function(item, index2, itemProps) {
        var rowKey = getRowKey(item.record, index2);
        return /* @__PURE__ */ React355.createElement(BodyLine_default, _extends({
          data: item,
          rowKey,
          index: index2
        }, itemProps));
      });
    } else {
      bodyContent = /* @__PURE__ */ React355.createElement("div", {
        className: (0, import_classnames125.default)("".concat(prefixCls, "-placeholder"))
      }, /* @__PURE__ */ React355.createElement(Cell_default, {
        component: "div",
        prefixCls
      }, emptyNode));
    }
    return /* @__PURE__ */ React355.createElement(GridContext.Provider, {
      value: gridContext
    }, bodyContent);
  });
  var ResponseGrid = responseImmutable2(Grid2);
  if (true) {
    ResponseGrid.displayName = "ResponseGrid";
  }
  var BodyGrid_default = ResponseGrid;

  // node_modules/rc-table/es/VirtualTable/index.js
  var renderBody = function renderBody2(rawData, props) {
    var ref = props.ref, onScroll = props.onScroll;
    return /* @__PURE__ */ React356.createElement(BodyGrid_default, {
      ref,
      data: rawData,
      onScroll
    });
  };
  function VirtualTable(props, ref) {
    var columns = props.columns, scroll = props.scroll, sticky = props.sticky, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? DEFAULT_PREFIX : _props$prefixCls, className = props.className, listItemHeight = props.listItemHeight, components = props.components;
    var _ref = scroll || {}, scrollX = _ref.x, scrollY = _ref.y;
    if (typeof scrollX !== "number") {
      if (true) {
        warning_default(!scrollX, "`scroll.x` in virtual table must be number.");
      }
      scrollX = 1;
    }
    if (typeof scrollY !== "number") {
      scrollY = 500;
      if (true) {
        warning_default(false, "`scroll.y` in virtual table must be number.");
      }
    }
    var context = React356.useMemo(function() {
      return {
        sticky,
        scrollY,
        listItemHeight
      };
    }, [sticky, scrollY, listItemHeight]);
    return /* @__PURE__ */ React356.createElement(StaticContext.Provider, {
      value: context
    }, /* @__PURE__ */ React356.createElement(Table_default, _extends({}, props, {
      className: (0, import_classnames126.default)(className, "".concat(prefixCls, "-virtual")),
      scroll: _objectSpread2(_objectSpread2({}, scroll), {}, {
        x: scrollX
      }),
      components: _objectSpread2(_objectSpread2({}, components), {}, {
        body: renderBody
      }),
      columns,
      internalHooks: INTERNAL_HOOKS,
      tailor: true,
      ref
    })));
  }
  var RefVirtualTable = /* @__PURE__ */ React356.forwardRef(VirtualTable);
  if (true) {
    RefVirtualTable.displayName = "VirtualTable";
  }
  function genVirtualTable(shouldTriggerRender) {
    return makeImmutable2(RefVirtualTable, shouldTriggerRender);
  }
  var VirtualTable_default = genVirtualTable();

  // node_modules/antd/es/table/Column.js
  function Column2(_) {
    return null;
  }
  var Column_default2 = Column2;

  // node_modules/antd/es/table/ColumnGroup.js
  function ColumnGroup2(_) {
    return null;
  }
  var ColumnGroup_default2 = ColumnGroup2;

  // node_modules/antd/es/table/hooks/useSelection.js
  var React361 = __toESM(require_react());
  var import_react108 = __toESM(require_react());
  var import_classnames129 = __toESM(require_classnames());

  // node_modules/rc-tree/es/util.js
  var import_react106 = __toESM(require_react());

  // node_modules/rc-tree/es/TreeNode.js
  var import_classnames128 = __toESM(require_classnames());
  var React359 = __toESM(require_react());

  // node_modules/rc-tree/es/contextTypes.js
  var React357 = __toESM(require_react());
  var TreeContext = /* @__PURE__ */ React357.createContext(null);

  // node_modules/rc-tree/es/Indent.js
  var React358 = __toESM(require_react());
  var import_classnames127 = __toESM(require_classnames());
  var Indent = function Indent2(_ref) {
    var prefixCls = _ref.prefixCls, level = _ref.level, isStart = _ref.isStart, isEnd = _ref.isEnd;
    var baseClassName = "".concat(prefixCls, "-indent-unit");
    var list = [];
    for (var i = 0; i < level; i += 1) {
      list.push(/* @__PURE__ */ React358.createElement("span", {
        key: i,
        className: (0, import_classnames127.default)(baseClassName, _defineProperty(_defineProperty({}, "".concat(baseClassName, "-start"), isStart[i]), "".concat(baseClassName, "-end"), isEnd[i]))
      }));
    }
    return /* @__PURE__ */ React358.createElement("span", {
      "aria-hidden": "true",
      className: "".concat(prefixCls, "-indent")
    }, list);
  };
  var Indent_default = /* @__PURE__ */ React358.memo(Indent);

  // node_modules/rc-tree/es/TreeNode.js
  var _excluded50 = ["eventKey", "className", "style", "dragOver", "dragOverGapTop", "dragOverGapBottom", "isLeaf", "isStart", "isEnd", "expanded", "selected", "checked", "halfChecked", "loading", "domRef", "active", "data", "onMouseMove", "selectable"];
  var ICON_OPEN = "open";
  var ICON_CLOSE = "close";
  var defaultTitle = "---";
  var InternalTreeNode = /* @__PURE__ */ function(_React$Component) {
    _inherits(InternalTreeNode2, _React$Component);
    var _super = _createSuper(InternalTreeNode2);
    function InternalTreeNode2() {
      var _this;
      _classCallCheck(this, InternalTreeNode2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty(_assertThisInitialized(_this), "state", {
        dragNodeHighlight: false
      });
      _defineProperty(_assertThisInitialized(_this), "selectHandle", void 0);
      _defineProperty(_assertThisInitialized(_this), "cacheIndent", void 0);
      _defineProperty(_assertThisInitialized(_this), "onSelectorClick", function(e3) {
        var onNodeClick = _this.props.context.onNodeClick;
        onNodeClick(e3, convertNodePropsToEventData(_this.props));
        if (_this.isSelectable()) {
          _this.onSelect(e3);
        } else {
          _this.onCheck(e3);
        }
      });
      _defineProperty(_assertThisInitialized(_this), "onSelectorDoubleClick", function(e3) {
        var onNodeDoubleClick = _this.props.context.onNodeDoubleClick;
        onNodeDoubleClick(e3, convertNodePropsToEventData(_this.props));
      });
      _defineProperty(_assertThisInitialized(_this), "onSelect", function(e3) {
        if (_this.isDisabled())
          return;
        var onNodeSelect = _this.props.context.onNodeSelect;
        onNodeSelect(e3, convertNodePropsToEventData(_this.props));
      });
      _defineProperty(_assertThisInitialized(_this), "onCheck", function(e3) {
        if (_this.isDisabled())
          return;
        var _this$props = _this.props, disableCheckbox = _this$props.disableCheckbox, checked = _this$props.checked;
        var onNodeCheck = _this.props.context.onNodeCheck;
        if (!_this.isCheckable() || disableCheckbox)
          return;
        var targetChecked = !checked;
        onNodeCheck(e3, convertNodePropsToEventData(_this.props), targetChecked);
      });
      _defineProperty(_assertThisInitialized(_this), "onMouseEnter", function(e3) {
        var onNodeMouseEnter = _this.props.context.onNodeMouseEnter;
        onNodeMouseEnter(e3, convertNodePropsToEventData(_this.props));
      });
      _defineProperty(_assertThisInitialized(_this), "onMouseLeave", function(e3) {
        var onNodeMouseLeave = _this.props.context.onNodeMouseLeave;
        onNodeMouseLeave(e3, convertNodePropsToEventData(_this.props));
      });
      _defineProperty(_assertThisInitialized(_this), "onContextMenu", function(e3) {
        var onNodeContextMenu = _this.props.context.onNodeContextMenu;
        onNodeContextMenu(e3, convertNodePropsToEventData(_this.props));
      });
      _defineProperty(_assertThisInitialized(_this), "onDragStart", function(e3) {
        var onNodeDragStart = _this.props.context.onNodeDragStart;
        e3.stopPropagation();
        _this.setState({
          dragNodeHighlight: true
        });
        onNodeDragStart(e3, _assertThisInitialized(_this));
        try {
          e3.dataTransfer.setData("text/plain", "");
        } catch (error) {
        }
      });
      _defineProperty(_assertThisInitialized(_this), "onDragEnter", function(e3) {
        var onNodeDragEnter = _this.props.context.onNodeDragEnter;
        e3.preventDefault();
        e3.stopPropagation();
        onNodeDragEnter(e3, _assertThisInitialized(_this));
      });
      _defineProperty(_assertThisInitialized(_this), "onDragOver", function(e3) {
        var onNodeDragOver = _this.props.context.onNodeDragOver;
        e3.preventDefault();
        e3.stopPropagation();
        onNodeDragOver(e3, _assertThisInitialized(_this));
      });
      _defineProperty(_assertThisInitialized(_this), "onDragLeave", function(e3) {
        var onNodeDragLeave = _this.props.context.onNodeDragLeave;
        e3.stopPropagation();
        onNodeDragLeave(e3, _assertThisInitialized(_this));
      });
      _defineProperty(_assertThisInitialized(_this), "onDragEnd", function(e3) {
        var onNodeDragEnd = _this.props.context.onNodeDragEnd;
        e3.stopPropagation();
        _this.setState({
          dragNodeHighlight: false
        });
        onNodeDragEnd(e3, _assertThisInitialized(_this));
      });
      _defineProperty(_assertThisInitialized(_this), "onDrop", function(e3) {
        var onNodeDrop = _this.props.context.onNodeDrop;
        e3.preventDefault();
        e3.stopPropagation();
        _this.setState({
          dragNodeHighlight: false
        });
        onNodeDrop(e3, _assertThisInitialized(_this));
      });
      _defineProperty(_assertThisInitialized(_this), "onExpand", function(e3) {
        var _this$props2 = _this.props, loading = _this$props2.loading, onNodeExpand = _this$props2.context.onNodeExpand;
        if (loading)
          return;
        onNodeExpand(e3, convertNodePropsToEventData(_this.props));
      });
      _defineProperty(_assertThisInitialized(_this), "setSelectHandle", function(node2) {
        _this.selectHandle = node2;
      });
      _defineProperty(_assertThisInitialized(_this), "getNodeState", function() {
        var expanded = _this.props.expanded;
        if (_this.isLeaf()) {
          return null;
        }
        return expanded ? ICON_OPEN : ICON_CLOSE;
      });
      _defineProperty(_assertThisInitialized(_this), "hasChildren", function() {
        var eventKey = _this.props.eventKey;
        var keyEntities = _this.props.context.keyEntities;
        var _ref = getEntity(keyEntities, eventKey) || {}, children = _ref.children;
        return !!(children || []).length;
      });
      _defineProperty(_assertThisInitialized(_this), "isLeaf", function() {
        var _this$props3 = _this.props, isLeaf = _this$props3.isLeaf, loaded = _this$props3.loaded;
        var loadData = _this.props.context.loadData;
        var hasChildren = _this.hasChildren();
        if (isLeaf === false) {
          return false;
        }
        return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
      });
      _defineProperty(_assertThisInitialized(_this), "isDisabled", function() {
        var disabled = _this.props.disabled;
        var treeDisabled = _this.props.context.disabled;
        return !!(treeDisabled || disabled);
      });
      _defineProperty(_assertThisInitialized(_this), "isCheckable", function() {
        var checkable = _this.props.checkable;
        var treeCheckable = _this.props.context.checkable;
        if (!treeCheckable || checkable === false)
          return false;
        return treeCheckable;
      });
      _defineProperty(_assertThisInitialized(_this), "syncLoadData", function(props) {
        var expanded = props.expanded, loading = props.loading, loaded = props.loaded;
        var _this$props$context = _this.props.context, loadData = _this$props$context.loadData, onNodeLoad = _this$props$context.onNodeLoad;
        if (loading) {
          return;
        }
        if (loadData && expanded && !_this.isLeaf()) {
          if (!_this.hasChildren() && !loaded) {
            onNodeLoad(convertNodePropsToEventData(_this.props));
          }
        }
      });
      _defineProperty(_assertThisInitialized(_this), "isDraggable", function() {
        var _this$props4 = _this.props, data = _this$props4.data, draggable = _this$props4.context.draggable;
        return !!(draggable && (!draggable.nodeDraggable || draggable.nodeDraggable(data)));
      });
      _defineProperty(_assertThisInitialized(_this), "renderDragHandler", function() {
        var _this$props$context2 = _this.props.context, draggable = _this$props$context2.draggable, prefixCls = _this$props$context2.prefixCls;
        return draggable !== null && draggable !== void 0 && draggable.icon ? /* @__PURE__ */ React359.createElement("span", {
          className: "".concat(prefixCls, "-draggable-icon")
        }, draggable.icon) : null;
      });
      _defineProperty(_assertThisInitialized(_this), "renderSwitcherIconDom", function(isLeaf) {
        var switcherIconFromProps = _this.props.switcherIcon;
        var switcherIconFromCtx = _this.props.context.switcherIcon;
        var switcherIcon = switcherIconFromProps || switcherIconFromCtx;
        if (typeof switcherIcon === "function") {
          return switcherIcon(_objectSpread2(_objectSpread2({}, _this.props), {}, {
            isLeaf
          }));
        }
        return switcherIcon;
      });
      _defineProperty(_assertThisInitialized(_this), "renderSwitcher", function() {
        var expanded = _this.props.expanded;
        var prefixCls = _this.props.context.prefixCls;
        if (_this.isLeaf()) {
          var _switcherIconDom = _this.renderSwitcherIconDom(true);
          return _switcherIconDom !== false ? /* @__PURE__ */ React359.createElement("span", {
            className: (0, import_classnames128.default)("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher-noop"))
          }, _switcherIconDom) : null;
        }
        var switcherCls = (0, import_classnames128.default)("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher_").concat(expanded ? ICON_OPEN : ICON_CLOSE));
        var switcherIconDom = _this.renderSwitcherIconDom(false);
        return switcherIconDom !== false ? /* @__PURE__ */ React359.createElement("span", {
          onClick: _this.onExpand,
          className: switcherCls
        }, switcherIconDom) : null;
      });
      _defineProperty(_assertThisInitialized(_this), "renderCheckbox", function() {
        var _this$props5 = _this.props, checked = _this$props5.checked, halfChecked = _this$props5.halfChecked, disableCheckbox = _this$props5.disableCheckbox;
        var prefixCls = _this.props.context.prefixCls;
        var disabled = _this.isDisabled();
        var checkable = _this.isCheckable();
        if (!checkable)
          return null;
        var $custom = typeof checkable !== "boolean" ? checkable : null;
        return /* @__PURE__ */ React359.createElement("span", {
          className: (0, import_classnames128.default)("".concat(prefixCls, "-checkbox"), checked && "".concat(prefixCls, "-checkbox-checked"), !checked && halfChecked && "".concat(prefixCls, "-checkbox-indeterminate"), (disabled || disableCheckbox) && "".concat(prefixCls, "-checkbox-disabled")),
          onClick: _this.onCheck
        }, $custom);
      });
      _defineProperty(_assertThisInitialized(_this), "renderIcon", function() {
        var loading = _this.props.loading;
        var prefixCls = _this.props.context.prefixCls;
        return /* @__PURE__ */ React359.createElement("span", {
          className: (0, import_classnames128.default)("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__").concat(_this.getNodeState() || "docu"), loading && "".concat(prefixCls, "-icon_loading"))
        });
      });
      _defineProperty(_assertThisInitialized(_this), "renderSelector", function() {
        var dragNodeHighlight = _this.state.dragNodeHighlight;
        var _this$props6 = _this.props, _this$props6$title = _this$props6.title, title = _this$props6$title === void 0 ? defaultTitle : _this$props6$title, selected = _this$props6.selected, icon = _this$props6.icon, loading = _this$props6.loading, data = _this$props6.data;
        var _this$props$context3 = _this.props.context, prefixCls = _this$props$context3.prefixCls, showIcon = _this$props$context3.showIcon, treeIcon = _this$props$context3.icon, loadData = _this$props$context3.loadData, titleRender = _this$props$context3.titleRender;
        var disabled = _this.isDisabled();
        var wrapClass = "".concat(prefixCls, "-node-content-wrapper");
        var $icon;
        if (showIcon) {
          var currentIcon = icon || treeIcon;
          $icon = currentIcon ? /* @__PURE__ */ React359.createElement("span", {
            className: (0, import_classnames128.default)("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__customize"))
          }, typeof currentIcon === "function" ? currentIcon(_this.props) : currentIcon) : _this.renderIcon();
        } else if (loadData && loading) {
          $icon = _this.renderIcon();
        }
        var titleNode;
        if (typeof title === "function") {
          titleNode = title(data);
        } else if (titleRender) {
          titleNode = titleRender(data);
        } else {
          titleNode = title;
        }
        var $title = /* @__PURE__ */ React359.createElement("span", {
          className: "".concat(prefixCls, "-title")
        }, titleNode);
        return /* @__PURE__ */ React359.createElement("span", {
          ref: _this.setSelectHandle,
          title: typeof title === "string" ? title : "",
          className: (0, import_classnames128.default)("".concat(wrapClass), "".concat(wrapClass, "-").concat(_this.getNodeState() || "normal"), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls, "-node-selected")),
          onMouseEnter: _this.onMouseEnter,
          onMouseLeave: _this.onMouseLeave,
          onContextMenu: _this.onContextMenu,
          onClick: _this.onSelectorClick,
          onDoubleClick: _this.onSelectorDoubleClick
        }, $icon, $title, _this.renderDropIndicator());
      });
      _defineProperty(_assertThisInitialized(_this), "renderDropIndicator", function() {
        var _this$props7 = _this.props, disabled = _this$props7.disabled, eventKey = _this$props7.eventKey;
        var _this$props$context4 = _this.props.context, draggable = _this$props$context4.draggable, dropLevelOffset = _this$props$context4.dropLevelOffset, dropPosition = _this$props$context4.dropPosition, prefixCls = _this$props$context4.prefixCls, indent = _this$props$context4.indent, dropIndicatorRender2 = _this$props$context4.dropIndicatorRender, dragOverNodeKey = _this$props$context4.dragOverNodeKey, direction = _this$props$context4.direction;
        var rootDraggable = !!draggable;
        var showIndicator = !disabled && rootDraggable && dragOverNodeKey === eventKey;
        var mergedIndent = indent !== null && indent !== void 0 ? indent : _this.cacheIndent;
        _this.cacheIndent = indent;
        return showIndicator ? dropIndicatorRender2({
          dropPosition,
          dropLevelOffset,
          indent: mergedIndent,
          prefixCls,
          direction
        }) : null;
      });
      return _this;
    }
    _createClass(InternalTreeNode2, [{
      key: "componentDidMount",
      value: (
        // Isomorphic needn't load data in server side
        function componentDidMount() {
          this.syncLoadData(this.props);
        }
      )
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.syncLoadData(this.props);
      }
    }, {
      key: "isSelectable",
      value: function isSelectable() {
        var selectable = this.props.selectable;
        var treeSelectable = this.props.context.selectable;
        if (typeof selectable === "boolean") {
          return selectable;
        }
        return treeSelectable;
      }
    }, {
      key: "render",
      value: (
        // =========================== Render ===========================
        function render2() {
          var _classNames;
          var _this$props8 = this.props, eventKey = _this$props8.eventKey, className = _this$props8.className, style2 = _this$props8.style, dragOver = _this$props8.dragOver, dragOverGapTop = _this$props8.dragOverGapTop, dragOverGapBottom = _this$props8.dragOverGapBottom, isLeaf = _this$props8.isLeaf, isStart = _this$props8.isStart, isEnd = _this$props8.isEnd, expanded = _this$props8.expanded, selected = _this$props8.selected, checked = _this$props8.checked, halfChecked = _this$props8.halfChecked, loading = _this$props8.loading, domRef = _this$props8.domRef, active = _this$props8.active, data = _this$props8.data, onMouseMove = _this$props8.onMouseMove, selectable = _this$props8.selectable, otherProps = _objectWithoutProperties(_this$props8, _excluded50);
          var _this$props$context5 = this.props.context, prefixCls = _this$props$context5.prefixCls, filterTreeNode = _this$props$context5.filterTreeNode, keyEntities = _this$props$context5.keyEntities, dropContainerKey = _this$props$context5.dropContainerKey, dropTargetKey = _this$props$context5.dropTargetKey, draggingNodeKey = _this$props$context5.draggingNodeKey;
          var disabled = this.isDisabled();
          var dataOrAriaAttributeProps = pickAttrs(otherProps, {
            aria: true,
            data: true
          });
          var _ref2 = getEntity(keyEntities, eventKey) || {}, level = _ref2.level;
          var isEndNode = isEnd[isEnd.length - 1];
          var mergedDraggable = this.isDraggable();
          var draggableWithoutDisabled = !disabled && mergedDraggable;
          var dragging = draggingNodeKey === eventKey;
          var ariaSelected = selectable !== void 0 ? {
            "aria-selected": !!selectable
          } : void 0;
          return /* @__PURE__ */ React359.createElement("div", _extends({
            ref: domRef,
            className: (0, import_classnames128.default)(className, "".concat(prefixCls, "-treenode"), (_classNames = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_classNames, "".concat(prefixCls, "-treenode-disabled"), disabled), "".concat(prefixCls, "-treenode-switcher-").concat(expanded ? "open" : "close"), !isLeaf), "".concat(prefixCls, "-treenode-checkbox-checked"), checked), "".concat(prefixCls, "-treenode-checkbox-indeterminate"), halfChecked), "".concat(prefixCls, "-treenode-selected"), selected), "".concat(prefixCls, "-treenode-loading"), loading), "".concat(prefixCls, "-treenode-active"), active), "".concat(prefixCls, "-treenode-leaf-last"), isEndNode), "".concat(prefixCls, "-treenode-draggable"), mergedDraggable), "dragging", dragging), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_classNames, "drop-target", dropTargetKey === eventKey), "drop-container", dropContainerKey === eventKey), "drag-over", !disabled && dragOver), "drag-over-gap-top", !disabled && dragOverGapTop), "drag-over-gap-bottom", !disabled && dragOverGapBottom), "filter-node", filterTreeNode && filterTreeNode(convertNodePropsToEventData(this.props))))),
            style: style2,
            draggable: draggableWithoutDisabled,
            "aria-grabbed": dragging,
            onDragStart: draggableWithoutDisabled ? this.onDragStart : void 0,
            onDragEnter: mergedDraggable ? this.onDragEnter : void 0,
            onDragOver: mergedDraggable ? this.onDragOver : void 0,
            onDragLeave: mergedDraggable ? this.onDragLeave : void 0,
            onDrop: mergedDraggable ? this.onDrop : void 0,
            onDragEnd: mergedDraggable ? this.onDragEnd : void 0,
            onMouseMove
          }, ariaSelected, dataOrAriaAttributeProps), /* @__PURE__ */ React359.createElement(Indent_default, {
            prefixCls,
            level,
            isStart,
            isEnd
          }), this.renderDragHandler(), this.renderSwitcher(), this.renderCheckbox(), this.renderSelector());
        }
      )
    }]);
    return InternalTreeNode2;
  }(React359.Component);
  var ContextTreeNode = function ContextTreeNode2(props) {
    return /* @__PURE__ */ React359.createElement(TreeContext.Consumer, null, function(context) {
      return /* @__PURE__ */ React359.createElement(InternalTreeNode, _extends({}, props, {
        context
      }));
    });
  };
  ContextTreeNode.displayName = "TreeNode";
  ContextTreeNode.isTreeNode = 1;
  var TreeNode_default = ContextTreeNode;

  // node_modules/rc-tree/es/util.js
  function arrDel(list, value) {
    if (!list)
      return [];
    var clone = list.slice();
    var index2 = clone.indexOf(value);
    if (index2 >= 0) {
      clone.splice(index2, 1);
    }
    return clone;
  }
  function arrAdd(list, value) {
    var clone = (list || []).slice();
    if (clone.indexOf(value) === -1) {
      clone.push(value);
    }
    return clone;
  }
  function posToArr(pos) {
    return pos.split("-");
  }
  function getDragChildrenKeys(dragNodeKey, keyEntities) {
    var dragChildrenKeys = [];
    var entity = getEntity(keyEntities, dragNodeKey);
    function dig() {
      var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      list.forEach(function(_ref) {
        var key = _ref.key, children = _ref.children;
        dragChildrenKeys.push(key);
        dig(children);
      });
    }
    dig(entity.children);
    return dragChildrenKeys;
  }
  function isLastChild(treeNodeEntity) {
    if (treeNodeEntity.parent) {
      var posArr = posToArr(treeNodeEntity.pos);
      return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;
    }
    return false;
  }
  function isFirstChild(treeNodeEntity) {
    var posArr = posToArr(treeNodeEntity.pos);
    return Number(posArr[posArr.length - 1]) === 0;
  }
  function calcDropPosition(event, dragNode, targetNode, indent, startMousePosition, allowDrop2, flattenedNodes, keyEntities, expandKeys, direction) {
    var _abstractDropNodeEnti;
    var clientX = event.clientX, clientY = event.clientY;
    var _getBoundingClientRec = event.target.getBoundingClientRect(), top = _getBoundingClientRec.top, height = _getBoundingClientRec.height;
    var horizontalMouseOffset = (direction === "rtl" ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);
    var rawDropLevelOffset = (horizontalMouseOffset - 12) / indent;
    var filteredExpandKeys = expandKeys.filter(function(key) {
      var _keyEntities$key;
      return (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 || (_keyEntities$key = _keyEntities$key.children) === null || _keyEntities$key === void 0 ? void 0 : _keyEntities$key.length;
    });
    var abstractDropNodeEntity = getEntity(keyEntities, targetNode.props.eventKey);
    if (clientY < top + height / 2) {
      var nodeIndex = flattenedNodes.findIndex(function(flattenedNode) {
        return flattenedNode.key === abstractDropNodeEntity.key;
      });
      var prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;
      var prevNodeKey = flattenedNodes[prevNodeIndex].key;
      abstractDropNodeEntity = getEntity(keyEntities, prevNodeKey);
    }
    var initialAbstractDropNodeKey = abstractDropNodeEntity.key;
    var abstractDragOverEntity = abstractDropNodeEntity;
    var dragOverNodeKey = abstractDropNodeEntity.key;
    var dropPosition = 0;
    var dropLevelOffset = 0;
    if (!filteredExpandKeys.includes(initialAbstractDropNodeKey)) {
      for (var i = 0; i < rawDropLevelOffset; i += 1) {
        if (isLastChild(abstractDropNodeEntity)) {
          abstractDropNodeEntity = abstractDropNodeEntity.parent;
          dropLevelOffset += 1;
        } else {
          break;
        }
      }
    }
    var abstractDragDataNode = dragNode.props.data;
    var abstractDropDataNode = abstractDropNodeEntity.node;
    var dropAllowed = true;
    if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop2({
      dragNode: abstractDragDataNode,
      dropNode: abstractDropDataNode,
      dropPosition: -1
    }) && abstractDropNodeEntity.key === targetNode.props.eventKey) {
      dropPosition = -1;
    } else if ((abstractDragOverEntity.children || []).length && filteredExpandKeys.includes(dragOverNodeKey)) {
      if (allowDrop2({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 0
      })) {
        dropPosition = 0;
      } else {
        dropAllowed = false;
      }
    } else if (dropLevelOffset === 0) {
      if (rawDropLevelOffset > -1.5) {
        if (allowDrop2({
          dragNode: abstractDragDataNode,
          dropNode: abstractDropDataNode,
          dropPosition: 1
        })) {
          dropPosition = 1;
        } else {
          dropAllowed = false;
        }
      } else {
        if (allowDrop2({
          dragNode: abstractDragDataNode,
          dropNode: abstractDropDataNode,
          dropPosition: 0
        })) {
          dropPosition = 0;
        } else if (allowDrop2({
          dragNode: abstractDragDataNode,
          dropNode: abstractDropDataNode,
          dropPosition: 1
        })) {
          dropPosition = 1;
        } else {
          dropAllowed = false;
        }
      }
    } else {
      if (allowDrop2({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 1
      })) {
        dropPosition = 1;
      } else {
        dropAllowed = false;
      }
    }
    return {
      dropPosition,
      dropLevelOffset,
      dropTargetKey: abstractDropNodeEntity.key,
      dropTargetPos: abstractDropNodeEntity.pos,
      dragOverNodeKey,
      dropContainerKey: dropPosition === 0 ? null : ((_abstractDropNodeEnti = abstractDropNodeEntity.parent) === null || _abstractDropNodeEnti === void 0 ? void 0 : _abstractDropNodeEnti.key) || null,
      dropAllowed
    };
  }
  function calcSelectedKeys(selectedKeys, props) {
    if (!selectedKeys)
      return void 0;
    var multiple = props.multiple;
    if (multiple) {
      return selectedKeys.slice();
    }
    if (selectedKeys.length) {
      return [selectedKeys[0]];
    }
    return selectedKeys;
  }
  function parseCheckedKeys(keys2) {
    if (!keys2) {
      return null;
    }
    var keyProps;
    if (Array.isArray(keys2)) {
      keyProps = {
        checkedKeys: keys2,
        halfCheckedKeys: void 0
      };
    } else if (_typeof(keys2) === "object") {
      keyProps = {
        checkedKeys: keys2.checked || void 0,
        halfCheckedKeys: keys2.halfChecked || void 0
      };
    } else {
      warning_default(false, "`checkedKeys` is not an array or an object");
      return null;
    }
    return keyProps;
  }
  function conductExpandParent(keyList, keyEntities) {
    var expandedKeys = /* @__PURE__ */ new Set();
    function conductUp(key) {
      if (expandedKeys.has(key))
        return;
      var entity = getEntity(keyEntities, key);
      if (!entity)
        return;
      expandedKeys.add(key);
      var parent = entity.parent, node2 = entity.node;
      if (node2.disabled)
        return;
      if (parent) {
        conductUp(parent.key);
      }
    }
    (keyList || []).forEach(function(key) {
      conductUp(key);
    });
    return _toConsumableArray(expandedKeys);
  }

  // node_modules/antd/es/_util/hooks/useMultipleSelect.js
  var import_react107 = __toESM(require_react());
  function useMultipleSelect(getKey3) {
    const [prevSelectedIndex, setPrevSelectedIndex] = (0, import_react107.useState)(null);
    const multipleSelect = (0, import_react107.useCallback)((currentSelectedIndex, data, selectedKeys) => {
      const configPrevSelectedIndex = prevSelectedIndex !== null && prevSelectedIndex !== void 0 ? prevSelectedIndex : currentSelectedIndex;
      const startIndex = Math.min(configPrevSelectedIndex || 0, currentSelectedIndex);
      const endIndex = Math.max(configPrevSelectedIndex || 0, currentSelectedIndex);
      const rangeKeys = data.slice(startIndex, endIndex + 1).map((item) => getKey3(item));
      const shouldSelected = rangeKeys.some((rangeKey) => !selectedKeys.has(rangeKey));
      const changedKeys = [];
      rangeKeys.forEach((item) => {
        if (shouldSelected) {
          if (!selectedKeys.has(item)) {
            changedKeys.push(item);
          }
          selectedKeys.add(item);
        } else {
          selectedKeys.delete(item);
          changedKeys.push(item);
        }
      });
      setPrevSelectedIndex(shouldSelected ? endIndex : null);
      return changedKeys;
    }, [prevSelectedIndex]);
    const updatePrevSelectedIndex = (val) => {
      setPrevSelectedIndex(val);
    };
    return [multipleSelect, updatePrevSelectedIndex];
  }

  // node_modules/antd/es/table/hooks/useSelection.js
  var SELECTION_COLUMN = {};
  var SELECTION_ALL = "SELECT_ALL";
  var SELECTION_INVERT = "SELECT_INVERT";
  var SELECTION_NONE = "SELECT_NONE";
  var EMPTY_LIST4 = [];
  var flattenData = (childrenColumnName, data) => {
    let list = [];
    (data || []).forEach((record) => {
      list.push(record);
      if (record && typeof record === "object" && childrenColumnName in record) {
        list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));
      }
    });
    return list;
  };
  var useSelection = (config, rowSelection) => {
    const {
      preserveSelectedRowKeys,
      selectedRowKeys,
      defaultSelectedRowKeys,
      getCheckboxProps,
      onChange: onSelectionChange,
      onSelect,
      onSelectAll,
      onSelectInvert,
      onSelectNone,
      onSelectMultiple,
      columnWidth: selectionColWidth,
      type: selectionType,
      selections,
      fixed,
      renderCell: customizeRenderCell,
      hideSelectAll,
      checkStrictly = true
    } = rowSelection || {};
    const {
      prefixCls,
      data,
      pageData,
      getRecordByKey,
      getRowKey,
      expandType,
      childrenColumnName,
      locale: tableLocale,
      getPopupContainer
    } = config;
    const warning8 = devUseWarning("Table");
    const [multipleSelect, updatePrevSelectedIndex] = useMultipleSelect((item) => item);
    const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST4, {
      value: selectedRowKeys
    });
    const preserveRecordsRef = React361.useRef(/* @__PURE__ */ new Map());
    const updatePreserveRecordsCache = (0, import_react108.useCallback)((keys2) => {
      if (preserveSelectedRowKeys) {
        const newCache = /* @__PURE__ */ new Map();
        keys2.forEach((key) => {
          let record = getRecordByKey(key);
          if (!record && preserveRecordsRef.current.has(key)) {
            record = preserveRecordsRef.current.get(key);
          }
          newCache.set(key, record);
        });
        preserveRecordsRef.current = newCache;
      }
    }, [getRecordByKey, preserveSelectedRowKeys]);
    React361.useEffect(() => {
      updatePreserveRecordsCache(mergedSelectedKeys);
    }, [mergedSelectedKeys]);
    const {
      keyEntities
    } = (0, import_react108.useMemo)(() => {
      if (checkStrictly) {
        return {
          keyEntities: null
        };
      }
      let convertData = data;
      if (preserveSelectedRowKeys) {
        const keysSet = new Set(data.map((record, index2) => getRowKey(record, index2)));
        const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, _ref) => {
          let [key, value] = _ref;
          return keysSet.has(key) ? total : total.concat(value);
        }, []);
        convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));
      }
      return convertDataToEntities(convertData, {
        externalGetKey: getRowKey,
        childrenPropName: childrenColumnName
      });
    }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys]);
    const flattedData = (0, import_react108.useMemo)(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);
    const checkboxPropsMap = (0, import_react108.useMemo)(() => {
      const map = /* @__PURE__ */ new Map();
      flattedData.forEach((record, index2) => {
        const key = getRowKey(record, index2);
        const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};
        map.set(key, checkboxProps);
        true ? warning8(!("checked" in checkboxProps || "defaultChecked" in checkboxProps), "usage", "Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.") : void 0;
      });
      return map;
    }, [flattedData, getRowKey, getCheckboxProps]);
    const isCheckboxDisabled = (0, import_react108.useCallback)((r2) => {
      var _a;
      return !!((_a = checkboxPropsMap.get(getRowKey(r2))) === null || _a === void 0 ? void 0 : _a.disabled);
    }, [checkboxPropsMap, getRowKey]);
    const [derivedSelectedKeys, derivedHalfSelectedKeys] = (0, import_react108.useMemo)(() => {
      if (checkStrictly) {
        return [mergedSelectedKeys || [], []];
      }
      const {
        checkedKeys,
        halfCheckedKeys
      } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);
      return [checkedKeys || [], halfCheckedKeys];
    }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);
    const derivedSelectedKeySet = (0, import_react108.useMemo)(() => {
      const keys2 = selectionType === "radio" ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;
      return new Set(keys2);
    }, [derivedSelectedKeys, selectionType]);
    const derivedHalfSelectedKeySet = (0, import_react108.useMemo)(() => selectionType === "radio" ? /* @__PURE__ */ new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);
    React361.useEffect(() => {
      if (!rowSelection) {
        setMergedSelectedKeys(EMPTY_LIST4);
      }
    }, [!!rowSelection]);
    const setSelectedKeys = (0, import_react108.useCallback)((keys2, method4) => {
      let availableKeys;
      let records;
      updatePreserveRecordsCache(keys2);
      if (preserveSelectedRowKeys) {
        availableKeys = keys2;
        records = keys2.map((key) => preserveRecordsRef.current.get(key));
      } else {
        availableKeys = [];
        records = [];
        keys2.forEach((key) => {
          const record = getRecordByKey(key);
          if (record !== void 0) {
            availableKeys.push(key);
            records.push(record);
          }
        });
      }
      setMergedSelectedKeys(availableKeys);
      onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {
        type: method4
      });
    }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);
    const triggerSingleSelection = (0, import_react108.useCallback)((key, selected, keys2, event) => {
      if (onSelect) {
        const rows = keys2.map((k) => getRecordByKey(k));
        onSelect(getRecordByKey(key), selected, rows, event);
      }
      setSelectedKeys(keys2, "single");
    }, [onSelect, getRecordByKey, setSelectedKeys]);
    const mergedSelections = (0, import_react108.useMemo)(() => {
      if (!selections || hideSelectAll) {
        return null;
      }
      const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;
      return selectionList.map((selection) => {
        if (selection === SELECTION_ALL) {
          return {
            key: "all",
            text: tableLocale.selectionAll,
            onSelect() {
              setSelectedKeys(data.map((record, index2) => getRowKey(record, index2)).filter((key) => {
                const checkProps = checkboxPropsMap.get(key);
                return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);
              }), "all");
            }
          };
        }
        if (selection === SELECTION_INVERT) {
          return {
            key: "invert",
            text: tableLocale.selectInvert,
            onSelect() {
              const keySet = new Set(derivedSelectedKeySet);
              pageData.forEach((record, index2) => {
                const key = getRowKey(record, index2);
                const checkProps = checkboxPropsMap.get(key);
                if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {
                  if (keySet.has(key)) {
                    keySet.delete(key);
                  } else {
                    keySet.add(key);
                  }
                }
              });
              const keys2 = Array.from(keySet);
              if (onSelectInvert) {
                warning8.deprecated(false, "onSelectInvert", "onChange");
                onSelectInvert(keys2);
              }
              setSelectedKeys(keys2, "invert");
            }
          };
        }
        if (selection === SELECTION_NONE) {
          return {
            key: "none",
            text: tableLocale.selectNone,
            onSelect() {
              onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();
              setSelectedKeys(Array.from(derivedSelectedKeySet).filter((key) => {
                const checkProps = checkboxPropsMap.get(key);
                return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;
              }), "none");
            }
          };
        }
        return selection;
      }).map((selection) => Object.assign(Object.assign({}, selection), {
        onSelect: function() {
          var _a2;
          var _a;
          for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
            rest[_key] = arguments[_key];
          }
          (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));
          updatePrevSelectedIndex(null);
        }
      }));
    }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);
    const transformColumns = (0, import_react108.useCallback)((columns) => {
      var _a;
      if (!rowSelection) {
        true ? warning8(!columns.includes(SELECTION_COLUMN), "usage", "`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.") : void 0;
        return columns.filter((col) => col !== SELECTION_COLUMN);
      }
      let cloneColumns = _toConsumableArray(columns);
      const keySet = new Set(derivedSelectedKeySet);
      const recordKeys = flattedData.map(getRowKey).filter((key) => !checkboxPropsMap.get(key).disabled);
      const checkedCurrentAll = recordKeys.every((key) => keySet.has(key));
      const checkedCurrentSome = recordKeys.some((key) => keySet.has(key));
      const onSelectAllChange = () => {
        const changeKeys = [];
        if (checkedCurrentAll) {
          recordKeys.forEach((key) => {
            keySet.delete(key);
            changeKeys.push(key);
          });
        } else {
          recordKeys.forEach((key) => {
            if (!keySet.has(key)) {
              keySet.add(key);
              changeKeys.push(key);
            }
          });
        }
        const keys2 = Array.from(keySet);
        onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys2.map((k) => getRecordByKey(k)), changeKeys.map((k) => getRecordByKey(k)));
        setSelectedKeys(keys2, "all");
        updatePrevSelectedIndex(null);
      };
      let title;
      let columnTitleCheckbox;
      if (selectionType !== "radio") {
        let customizeSelections;
        if (mergedSelections) {
          const menu = {
            getPopupContainer,
            items: mergedSelections.map((selection, index2) => {
              const {
                key,
                text,
                onSelect: onSelectionClick
              } = selection;
              return {
                key: key !== null && key !== void 0 ? key : index2,
                onClick: () => {
                  onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);
                },
                label: text
              };
            })
          };
          customizeSelections = /* @__PURE__ */ React361.createElement("div", {
            className: `${prefixCls}-selection-extra`
          }, /* @__PURE__ */ React361.createElement(dropdown_default3, {
            menu,
            getPopupContainer
          }, /* @__PURE__ */ React361.createElement("span", null, /* @__PURE__ */ React361.createElement(DownOutlined_default2, null))));
        }
        const allDisabledData = flattedData.map((record, index2) => {
          const key = getRowKey(record, index2);
          const checkboxProps = checkboxPropsMap.get(key) || {};
          return Object.assign({
            checked: keySet.has(key)
          }, checkboxProps);
        }).filter((_ref2) => {
          let {
            disabled
          } = _ref2;
          return disabled;
        });
        const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;
        const allDisabledAndChecked = allDisabled && allDisabledData.every((_ref3) => {
          let {
            checked
          } = _ref3;
          return checked;
        });
        const allDisabledSomeChecked = allDisabled && allDisabledData.some((_ref4) => {
          let {
            checked
          } = _ref4;
          return checked;
        });
        columnTitleCheckbox = /* @__PURE__ */ React361.createElement(checkbox_default, {
          checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,
          indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,
          onChange: onSelectAllChange,
          disabled: flattedData.length === 0 || allDisabled,
          "aria-label": customizeSelections ? "Custom selection" : "Select all",
          skipGroup: true
        });
        title = !hideSelectAll && /* @__PURE__ */ React361.createElement("div", {
          className: `${prefixCls}-selection`
        }, columnTitleCheckbox, customizeSelections);
      }
      let renderCell;
      if (selectionType === "radio") {
        renderCell = (_, record, index2) => {
          const key = getRowKey(record, index2);
          const checked = keySet.has(key);
          return {
            node: /* @__PURE__ */ React361.createElement(radio_default2, Object.assign({}, checkboxPropsMap.get(key), {
              checked,
              onClick: (e3) => e3.stopPropagation(),
              onChange: (event) => {
                if (!keySet.has(key)) {
                  triggerSingleSelection(key, true, [key], event.nativeEvent);
                }
              }
            })),
            checked
          };
        };
      } else {
        renderCell = (_, record, index2) => {
          var _a2;
          const key = getRowKey(record, index2);
          const checked = keySet.has(key);
          const indeterminate = derivedHalfSelectedKeySet.has(key);
          const checkboxProps = checkboxPropsMap.get(key);
          let mergedIndeterminate;
          if (expandType === "nest") {
            mergedIndeterminate = indeterminate;
            true ? warning8(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== "boolean", "usage", "set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.") : void 0;
          } else {
            mergedIndeterminate = (_a2 = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a2 !== void 0 ? _a2 : indeterminate;
          }
          return {
            node: /* @__PURE__ */ React361.createElement(checkbox_default, Object.assign({}, checkboxProps, {
              indeterminate: mergedIndeterminate,
              checked,
              skipGroup: true,
              onClick: (e3) => e3.stopPropagation(),
              onChange: (_ref5) => {
                let {
                  nativeEvent
                } = _ref5;
                const {
                  shiftKey
                } = nativeEvent;
                const currentSelectedIndex = recordKeys.findIndex((item) => item === key);
                const isMultiple3 = derivedSelectedKeys.some((item) => recordKeys.includes(item));
                if (shiftKey && checkStrictly && isMultiple3) {
                  const changedKeys = multipleSelect(currentSelectedIndex, recordKeys, keySet);
                  const keys2 = Array.from(keySet);
                  onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys2.map((recordKey) => getRecordByKey(recordKey)), changedKeys.map((recordKey) => getRecordByKey(recordKey)));
                  setSelectedKeys(keys2, "multiple");
                } else {
                  const originCheckedKeys = derivedSelectedKeys;
                  if (checkStrictly) {
                    const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);
                    triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);
                  } else {
                    const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);
                    const {
                      checkedKeys,
                      halfCheckedKeys
                    } = result;
                    let nextCheckedKeys = checkedKeys;
                    if (checked) {
                      const tempKeySet = new Set(checkedKeys);
                      tempKeySet.delete(key);
                      nextCheckedKeys = conductCheck(Array.from(tempKeySet), {
                        checked: false,
                        halfCheckedKeys
                      }, keyEntities, isCheckboxDisabled).checkedKeys;
                    }
                    triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);
                  }
                }
                if (checked) {
                  updatePrevSelectedIndex(null);
                } else {
                  updatePrevSelectedIndex(currentSelectedIndex);
                }
              }
            })),
            checked
          };
        };
      }
      const renderSelectionCell = (_, record, index2) => {
        const {
          node: node2,
          checked
        } = renderCell(_, record, index2);
        if (customizeRenderCell) {
          return customizeRenderCell(checked, record, index2, node2);
        }
        return node2;
      };
      if (!cloneColumns.includes(SELECTION_COLUMN)) {
        if (cloneColumns.findIndex((col) => {
          var _a2;
          return ((_a2 = col[INTERNAL_COL_DEFINE]) === null || _a2 === void 0 ? void 0 : _a2.columnType) === "EXPAND_COLUMN";
        }) === 0) {
          const [expandColumn, ...restColumns] = cloneColumns;
          cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));
        } else {
          cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));
        }
      }
      const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);
      true ? warning8(cloneColumns.filter((col) => col === SELECTION_COLUMN).length <= 1, "usage", "Multiple `SELECTION_COLUMN` exist in `columns`.") : void 0;
      cloneColumns = cloneColumns.filter((column2, index2) => column2 !== SELECTION_COLUMN || index2 === selectionColumnIndex);
      const prevCol = cloneColumns[selectionColumnIndex - 1];
      const nextCol = cloneColumns[selectionColumnIndex + 1];
      let mergedFixed = fixed;
      if (mergedFixed === void 0) {
        if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== void 0) {
          mergedFixed = nextCol.fixed;
        } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== void 0) {
          mergedFixed = prevCol.fixed;
        }
      }
      if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === "EXPAND_COLUMN" && prevCol.fixed === void 0) {
        prevCol.fixed = mergedFixed;
      }
      const columnCls = (0, import_classnames129.default)(`${prefixCls}-selection-col`, {
        [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === "checkbox"
      });
      const renderColumnTitle2 = () => {
        if (!(rowSelection === null || rowSelection === void 0 ? void 0 : rowSelection.columnTitle)) {
          return title;
        }
        if (typeof rowSelection.columnTitle === "function") {
          return rowSelection.columnTitle(columnTitleCheckbox);
        }
        return rowSelection.columnTitle;
      };
      const selectionColumn = {
        fixed: mergedFixed,
        width: selectionColWidth,
        className: `${prefixCls}-selection-column`,
        title: renderColumnTitle2(),
        render: renderSelectionCell,
        onCell: rowSelection.onCell,
        [INTERNAL_COL_DEFINE]: {
          className: columnCls
        }
      };
      return cloneColumns.map((col) => col === SELECTION_COLUMN ? selectionColumn : col);
    }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);
    return [transformColumns, derivedSelectedKeySet];
  };
  var useSelection_default = useSelection;

  // node_modules/antd/es/table/InternalTable.js
  var React390 = __toESM(require_react());
  var import_classnames138 = __toESM(require_classnames());

  // node_modules/antd/es/_util/hooks/useProxyImperativeHandle.js
  var import_react109 = __toESM(require_react());
  function fillProxy(element, handler) {
    element._antProxy = element._antProxy || {};
    Object.keys(handler).forEach((key) => {
      if (!(key in element._antProxy)) {
        const ori = element[key];
        element._antProxy[key] = ori;
        element[key] = handler[key];
      }
    });
    return element;
  }
  function useProxyImperativeHandle(ref, init) {
    return (0, import_react109.useImperativeHandle)(ref, () => {
      const refObj = init();
      const {
        nativeElement
      } = refObj;
      if (typeof Proxy !== "undefined") {
        return new Proxy(nativeElement, {
          get(obj, prop) {
            if (refObj[prop]) {
              return refObj[prop];
            }
            return Reflect.get(obj, prop);
          }
        });
      }
      return fillProxy(nativeElement, refObj);
    });
  }

  // node_modules/antd/es/table/ExpandIcon.js
  var import_classnames130 = __toESM(require_classnames());
  var React362 = __toESM(require_react());
  function renderExpandIcon2(locale9) {
    return function expandIcon(_ref) {
      let {
        prefixCls,
        onExpand,
        record,
        expanded,
        expandable
      } = _ref;
      const iconPrefix = `${prefixCls}-row-expand-icon`;
      return /* @__PURE__ */ React362.createElement("button", {
        type: "button",
        onClick: (e3) => {
          onExpand(record, e3);
          e3.stopPropagation();
        },
        className: (0, import_classnames130.default)(iconPrefix, {
          [`${iconPrefix}-spaced`]: !expandable,
          [`${iconPrefix}-expanded`]: expandable && expanded,
          [`${iconPrefix}-collapsed`]: expandable && !expanded
        }),
        "aria-label": expanded ? locale9.collapse : locale9.expand,
        "aria-expanded": expanded
      });
    };
  }
  var ExpandIcon_default = renderExpandIcon2;

  // node_modules/antd/es/table/hooks/useContainerWidth.js
  function useContainerWidth(prefixCls) {
    const getContainerWidth = (ele, width) => {
      const container = ele.querySelector(`.${prefixCls}-container`);
      let returnWidth = width;
      if (container) {
        const style2 = getComputedStyle(container);
        const borderLeft = parseInt(style2.borderLeftWidth, 10);
        const borderRight = parseInt(style2.borderRightWidth, 10);
        returnWidth = width - borderLeft - borderRight;
      }
      return returnWidth;
    };
    return getContainerWidth;
  }

  // node_modules/antd/es/table/hooks/useFilter/index.js
  var React384 = __toESM(require_react());

  // node_modules/antd/es/table/util.js
  function getColumnKey(column2, defaultKey) {
    if ("key" in column2 && column2.key !== void 0 && column2.key !== null) {
      return column2.key;
    }
    if (column2.dataIndex) {
      return Array.isArray(column2.dataIndex) ? column2.dataIndex.join(".") : column2.dataIndex;
    }
    return defaultKey;
  }
  function getColumnPos(index2, pos) {
    return pos ? `${pos}-${index2}` : `${index2}`;
  }
  function renderColumnTitle(title, props) {
    if (typeof title === "function") {
      return title(props);
    }
    return title;
  }
  function safeColumnTitle(title, props) {
    const res = renderColumnTitle(title, props);
    if (Object.prototype.toString.call(res) === "[object Object]")
      return "";
    return res;
  }

  // node_modules/antd/es/table/hooks/useFilter/FilterDropdown.js
  var React383 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/FilterFilled.js
  var React363 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FilterFilled.js
  var FilterFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V642H349v196zm531.1-684H143.9c-24.5 0-39.8 26.7-27.5 48l221.3 376h348.8l221.3-376c12.1-21.3-3.2-48-27.7-48z" } }] }, "name": "filter", "theme": "filled" };
  var FilterFilled_default = FilterFilled;

  // node_modules/@ant-design/icons/es/icons/FilterFilled.js
  var FilterFilled2 = function FilterFilled3(props, ref) {
    return /* @__PURE__ */ React363.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: FilterFilled_default
    }));
  };
  if (true) {
    FilterFilled2.displayName = "FilterFilled";
  }
  var FilterFilled_default2 = /* @__PURE__ */ React363.forwardRef(FilterFilled2);

  // node_modules/antd/es/table/hooks/useFilter/FilterDropdown.js
  var import_classnames136 = __toESM(require_classnames());

  // node_modules/antd/es/_util/hooks/useSyncState.js
  var React364 = __toESM(require_react());
  function useSyncState2(initialValue) {
    const ref = React364.useRef(initialValue);
    const forceUpdate = useForceUpdate();
    return [() => ref.current, (newValue) => {
      ref.current = newValue;
      forceUpdate();
    }];
  }

  // node_modules/rc-tree/es/Tree.js
  var import_classnames132 = __toESM(require_classnames());
  var React369 = __toESM(require_react());

  // node_modules/rc-tree/es/DropIndicator.js
  var React365 = __toESM(require_react());
  function DropIndicator(_ref) {
    var dropPosition = _ref.dropPosition, dropLevelOffset = _ref.dropLevelOffset, indent = _ref.indent;
    var style2 = {
      pointerEvents: "none",
      position: "absolute",
      right: 0,
      backgroundColor: "red",
      height: 2
    };
    switch (dropPosition) {
      case -1:
        style2.top = 0;
        style2.left = -dropLevelOffset * indent;
        break;
      case 1:
        style2.bottom = 0;
        style2.left = -dropLevelOffset * indent;
        break;
      case 0:
        style2.bottom = 0;
        style2.left = indent;
        break;
    }
    return /* @__PURE__ */ React365.createElement("div", {
      style: style2
    });
  }

  // node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js
  function _objectDestructuringEmpty(obj) {
    if (obj == null)
      throw new TypeError("Cannot destructure " + obj);
  }

  // node_modules/rc-tree/es/NodeList.js
  var React368 = __toESM(require_react());

  // node_modules/rc-tree/es/MotionTreeNode.js
  var import_classnames131 = __toESM(require_classnames());
  var React367 = __toESM(require_react());

  // node_modules/rc-tree/es/useUnmount.js
  var React366 = __toESM(require_react());
  function useUnmount(triggerStart, triggerEnd) {
    var _React$useState = React366.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), firstMount = _React$useState2[0], setFirstMount = _React$useState2[1];
    useLayoutEffect_default(function() {
      if (firstMount) {
        triggerStart();
        return function() {
          triggerEnd();
        };
      }
    }, [firstMount]);
    useLayoutEffect_default(function() {
      setFirstMount(true);
      return function() {
        setFirstMount(false);
      };
    }, []);
  }

  // node_modules/rc-tree/es/MotionTreeNode.js
  var _excluded51 = ["className", "style", "motion", "motionNodes", "motionType", "onMotionStart", "onMotionEnd", "active", "treeNodeRequiredProps"];
  var MotionTreeNode = function MotionTreeNode2(_ref, ref) {
    var className = _ref.className, style2 = _ref.style, motion2 = _ref.motion, motionNodes = _ref.motionNodes, motionType = _ref.motionType, onOriginMotionStart = _ref.onMotionStart, onOriginMotionEnd = _ref.onMotionEnd, active = _ref.active, treeNodeRequiredProps = _ref.treeNodeRequiredProps, props = _objectWithoutProperties(_ref, _excluded51);
    var _React$useState = React367.useState(true), _React$useState2 = _slicedToArray(_React$useState, 2), visible = _React$useState2[0], setVisible = _React$useState2[1];
    var _React$useContext = React367.useContext(TreeContext), prefixCls = _React$useContext.prefixCls;
    var targetVisible = motionNodes && motionType !== "hide";
    useLayoutEffect_default(function() {
      if (motionNodes) {
        if (targetVisible !== visible) {
          setVisible(targetVisible);
        }
      }
    }, [motionNodes]);
    var triggerMotionStart = function triggerMotionStart2() {
      if (motionNodes) {
        onOriginMotionStart();
      }
    };
    var triggerMotionEndRef = React367.useRef(false);
    var triggerMotionEnd = function triggerMotionEnd2() {
      if (motionNodes && !triggerMotionEndRef.current) {
        triggerMotionEndRef.current = true;
        onOriginMotionEnd();
      }
    };
    useUnmount(triggerMotionStart, triggerMotionEnd);
    var onVisibleChanged = function onVisibleChanged2(nextVisible) {
      if (targetVisible === nextVisible) {
        triggerMotionEnd();
      }
    };
    if (motionNodes) {
      return /* @__PURE__ */ React367.createElement(es_default2, _extends({
        ref,
        visible
      }, motion2, {
        motionAppear: motionType === "show",
        onVisibleChanged
      }), function(_ref2, motionRef) {
        var motionClassName = _ref2.className, motionStyle = _ref2.style;
        return /* @__PURE__ */ React367.createElement("div", {
          ref: motionRef,
          className: (0, import_classnames131.default)("".concat(prefixCls, "-treenode-motion"), motionClassName),
          style: motionStyle
        }, motionNodes.map(function(treeNode) {
          var restProps = Object.assign({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)), title = treeNode.title, key = treeNode.key, isStart = treeNode.isStart, isEnd = treeNode.isEnd;
          delete restProps.children;
          var treeNodeProps = getTreeNodeProps(key, treeNodeRequiredProps);
          return /* @__PURE__ */ React367.createElement(TreeNode_default, _extends({}, restProps, treeNodeProps, {
            title,
            active,
            data: treeNode.data,
            key,
            isStart,
            isEnd
          }));
        }));
      });
    }
    return /* @__PURE__ */ React367.createElement(TreeNode_default, _extends({
      domRef: ref,
      className,
      style: style2
    }, props, {
      active
    }));
  };
  MotionTreeNode.displayName = "MotionTreeNode";
  var RefMotionTreeNode = /* @__PURE__ */ React367.forwardRef(MotionTreeNode);
  var MotionTreeNode_default = RefMotionTreeNode;

  // node_modules/rc-tree/es/utils/diffUtil.js
  function findExpandedKeys() {
    var prev2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var next2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var prevLen = prev2.length;
    var nextLen = next2.length;
    if (Math.abs(prevLen - nextLen) !== 1) {
      return {
        add: false,
        key: null
      };
    }
    function find(shorter, longer) {
      var cache2 = /* @__PURE__ */ new Map();
      shorter.forEach(function(key) {
        cache2.set(key, true);
      });
      var keys2 = longer.filter(function(key) {
        return !cache2.has(key);
      });
      return keys2.length === 1 ? keys2[0] : null;
    }
    if (prevLen < nextLen) {
      return {
        add: true,
        key: find(prev2, next2)
      };
    }
    return {
      add: false,
      key: find(next2, prev2)
    };
  }
  function getExpandRange(shorter, longer, key) {
    var shorterStartIndex = shorter.findIndex(function(data) {
      return data.key === key;
    });
    var shorterEndNode = shorter[shorterStartIndex + 1];
    var longerStartIndex = longer.findIndex(function(data) {
      return data.key === key;
    });
    if (shorterEndNode) {
      var longerEndIndex = longer.findIndex(function(data) {
        return data.key === shorterEndNode.key;
      });
      return longer.slice(longerStartIndex + 1, longerEndIndex);
    }
    return longer.slice(longerStartIndex + 1);
  }

  // node_modules/rc-tree/es/NodeList.js
  var _excluded52 = ["prefixCls", "data", "selectable", "checkable", "expandedKeys", "selectedKeys", "checkedKeys", "loadedKeys", "loadingKeys", "halfCheckedKeys", "keyEntities", "disabled", "dragging", "dragOverNodeKey", "dropPosition", "motion", "height", "itemHeight", "virtual", "focusable", "activeItem", "focused", "tabIndex", "onKeyDown", "onFocus", "onBlur", "onActiveChange", "onListChangeStart", "onListChangeEnd"];
  var HIDDEN_STYLE2 = {
    width: 0,
    height: 0,
    display: "flex",
    overflow: "hidden",
    opacity: 0,
    border: 0,
    padding: 0,
    margin: 0
  };
  var noop5 = function noop6() {
  };
  var MOTION_KEY = "RC_TREE_MOTION_".concat(Math.random());
  var MotionNode = {
    key: MOTION_KEY
  };
  var MotionEntity = {
    key: MOTION_KEY,
    level: 0,
    index: 0,
    pos: "0",
    node: MotionNode,
    nodes: [MotionNode]
  };
  var MotionFlattenData = {
    parent: null,
    children: [],
    pos: MotionEntity.pos,
    data: MotionNode,
    title: null,
    key: MOTION_KEY,
    /** Hold empty list here since we do not use it */
    isStart: [],
    isEnd: []
  };
  function getMinimumRangeTransitionRange(list, virtual, height, itemHeight) {
    if (virtual === false || !height) {
      return list;
    }
    return list.slice(0, Math.ceil(height / itemHeight) + 1);
  }
  function itemKey2(item) {
    var key = item.key, pos = item.pos;
    return getKey2(key, pos);
  }
  function getAccessibilityPath(item) {
    var path2 = String(item.data.key);
    var current2 = item;
    while (current2.parent) {
      current2 = current2.parent;
      path2 = "".concat(current2.data.key, " > ").concat(path2);
    }
    return path2;
  }
  var NodeList = /* @__PURE__ */ React368.forwardRef(function(props, ref) {
    var prefixCls = props.prefixCls, data = props.data, selectable = props.selectable, checkable = props.checkable, expandedKeys = props.expandedKeys, selectedKeys = props.selectedKeys, checkedKeys = props.checkedKeys, loadedKeys = props.loadedKeys, loadingKeys = props.loadingKeys, halfCheckedKeys = props.halfCheckedKeys, keyEntities = props.keyEntities, disabled = props.disabled, dragging = props.dragging, dragOverNodeKey = props.dragOverNodeKey, dropPosition = props.dropPosition, motion2 = props.motion, height = props.height, itemHeight = props.itemHeight, virtual = props.virtual, focusable2 = props.focusable, activeItem = props.activeItem, focused = props.focused, tabIndex = props.tabIndex, onKeyDown2 = props.onKeyDown, onFocus = props.onFocus, onBlur = props.onBlur, onActiveChange = props.onActiveChange, onListChangeStart = props.onListChangeStart, onListChangeEnd = props.onListChangeEnd, domProps = _objectWithoutProperties(props, _excluded52);
    var listRef = React368.useRef(null);
    var indentMeasurerRef = React368.useRef(null);
    React368.useImperativeHandle(ref, function() {
      return {
        scrollTo: function scrollTo3(scroll) {
          listRef.current.scrollTo(scroll);
        },
        getIndentWidth: function getIndentWidth() {
          return indentMeasurerRef.current.offsetWidth;
        }
      };
    });
    var _React$useState = React368.useState(expandedKeys), _React$useState2 = _slicedToArray(_React$useState, 2), prevExpandedKeys = _React$useState2[0], setPrevExpandedKeys = _React$useState2[1];
    var _React$useState3 = React368.useState(data), _React$useState4 = _slicedToArray(_React$useState3, 2), prevData = _React$useState4[0], setPrevData = _React$useState4[1];
    var _React$useState5 = React368.useState(data), _React$useState6 = _slicedToArray(_React$useState5, 2), transitionData = _React$useState6[0], setTransitionData = _React$useState6[1];
    var _React$useState7 = React368.useState([]), _React$useState8 = _slicedToArray(_React$useState7, 2), transitionRange = _React$useState8[0], setTransitionRange = _React$useState8[1];
    var _React$useState9 = React368.useState(null), _React$useState10 = _slicedToArray(_React$useState9, 2), motionType = _React$useState10[0], setMotionType = _React$useState10[1];
    var dataRef = React368.useRef(data);
    dataRef.current = data;
    function onMotionEnd() {
      var latestData = dataRef.current;
      setPrevData(latestData);
      setTransitionData(latestData);
      setTransitionRange([]);
      setMotionType(null);
      onListChangeEnd();
    }
    useLayoutEffect_default(function() {
      setPrevExpandedKeys(expandedKeys);
      var diffExpanded = findExpandedKeys(prevExpandedKeys, expandedKeys);
      if (diffExpanded.key !== null) {
        if (diffExpanded.add) {
          var keyIndex = prevData.findIndex(function(_ref) {
            var key = _ref.key;
            return key === diffExpanded.key;
          });
          var rangeNodes = getMinimumRangeTransitionRange(getExpandRange(prevData, data, diffExpanded.key), virtual, height, itemHeight);
          var newTransitionData = prevData.slice();
          newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);
          setTransitionData(newTransitionData);
          setTransitionRange(rangeNodes);
          setMotionType("show");
        } else {
          var _keyIndex = data.findIndex(function(_ref2) {
            var key = _ref2.key;
            return key === diffExpanded.key;
          });
          var _rangeNodes = getMinimumRangeTransitionRange(getExpandRange(data, prevData, diffExpanded.key), virtual, height, itemHeight);
          var _newTransitionData = data.slice();
          _newTransitionData.splice(_keyIndex + 1, 0, MotionFlattenData);
          setTransitionData(_newTransitionData);
          setTransitionRange(_rangeNodes);
          setMotionType("hide");
        }
      } else if (prevData !== data) {
        setPrevData(data);
        setTransitionData(data);
      }
    }, [expandedKeys, data]);
    React368.useEffect(function() {
      if (!dragging) {
        onMotionEnd();
      }
    }, [dragging]);
    var mergedData = motion2 ? transitionData : data;
    var treeNodeRequiredProps = {
      expandedKeys,
      selectedKeys,
      loadedKeys,
      loadingKeys,
      checkedKeys,
      halfCheckedKeys,
      dragOverNodeKey,
      dropPosition,
      keyEntities
    };
    return /* @__PURE__ */ React368.createElement(React368.Fragment, null, focused && activeItem && /* @__PURE__ */ React368.createElement("span", {
      style: HIDDEN_STYLE2,
      "aria-live": "assertive"
    }, getAccessibilityPath(activeItem)), /* @__PURE__ */ React368.createElement("div", null, /* @__PURE__ */ React368.createElement("input", {
      style: HIDDEN_STYLE2,
      disabled: focusable2 === false || disabled,
      tabIndex: focusable2 !== false ? tabIndex : null,
      onKeyDown: onKeyDown2,
      onFocus,
      onBlur,
      value: "",
      onChange: noop5,
      "aria-label": "for screen reader"
    })), /* @__PURE__ */ React368.createElement("div", {
      className: "".concat(prefixCls, "-treenode"),
      "aria-hidden": true,
      style: {
        position: "absolute",
        pointerEvents: "none",
        visibility: "hidden",
        height: 0,
        overflow: "hidden",
        border: 0,
        padding: 0
      }
    }, /* @__PURE__ */ React368.createElement("div", {
      className: "".concat(prefixCls, "-indent")
    }, /* @__PURE__ */ React368.createElement("div", {
      ref: indentMeasurerRef,
      className: "".concat(prefixCls, "-indent-unit")
    }))), /* @__PURE__ */ React368.createElement(es_default8, _extends({}, domProps, {
      data: mergedData,
      itemKey: itemKey2,
      height,
      fullHeight: false,
      virtual,
      itemHeight,
      prefixCls: "".concat(prefixCls, "-list"),
      ref: listRef,
      onVisibleChange: function onVisibleChange(originList, fullList) {
        var originSet = new Set(originList);
        var restList = fullList.filter(function(item) {
          return !originSet.has(item);
        });
        if (restList.some(function(item) {
          return itemKey2(item) === MOTION_KEY;
        })) {
          onMotionEnd();
        }
      }
    }), function(treeNode) {
      var pos = treeNode.pos, restProps = Object.assign({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)), title = treeNode.title, key = treeNode.key, isStart = treeNode.isStart, isEnd = treeNode.isEnd;
      var mergedKey = getKey2(key, pos);
      delete restProps.key;
      delete restProps.children;
      var treeNodeProps = getTreeNodeProps(mergedKey, treeNodeRequiredProps);
      return /* @__PURE__ */ React368.createElement(MotionTreeNode_default, _extends({}, restProps, treeNodeProps, {
        title,
        active: !!activeItem && key === activeItem.key,
        pos,
        data: treeNode.data,
        isStart,
        isEnd,
        motion: motion2,
        motionNodes: key === MOTION_KEY ? transitionRange : null,
        motionType,
        onMotionStart: onListChangeStart,
        onMotionEnd,
        treeNodeRequiredProps,
        onMouseMove: function onMouseMove() {
          onActiveChange(null);
        }
      }));
    }));
  });
  NodeList.displayName = "NodeList";
  var NodeList_default = NodeList;

  // node_modules/rc-tree/es/Tree.js
  var MAX_RETRY_TIMES = 10;
  var Tree = /* @__PURE__ */ function(_React$Component) {
    _inherits(Tree4, _React$Component);
    var _super = _createSuper(Tree4);
    function Tree4() {
      var _this;
      _classCallCheck(this, Tree4);
      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(_args));
      _defineProperty(_assertThisInitialized(_this), "destroyed", false);
      _defineProperty(_assertThisInitialized(_this), "delayedDragEnterLogic", void 0);
      _defineProperty(_assertThisInitialized(_this), "loadingRetryTimes", {});
      _defineProperty(_assertThisInitialized(_this), "state", {
        keyEntities: {},
        indent: null,
        selectedKeys: [],
        checkedKeys: [],
        halfCheckedKeys: [],
        loadedKeys: [],
        loadingKeys: [],
        expandedKeys: [],
        draggingNodeKey: null,
        dragChildrenKeys: [],
        // dropTargetKey is the key of abstract-drop-node
        // the abstract-drop-node is the real drop node when drag and drop
        // not the DOM drag over node
        dropTargetKey: null,
        dropPosition: null,
        // the drop position of abstract-drop-node, inside 0, top -1, bottom 1
        dropContainerKey: null,
        // the container key of abstract-drop-node if dropPosition is -1 or 1
        dropLevelOffset: null,
        // the drop level offset of abstract-drag-over-node
        dropTargetPos: null,
        // the pos of abstract-drop-node
        dropAllowed: true,
        // if drop to abstract-drop-node is allowed
        // the abstract-drag-over-node
        // if mouse is on the bottom of top dom node or no the top of the bottom dom node
        // abstract-drag-over-node is the top node
        dragOverNodeKey: null,
        treeData: [],
        flattenNodes: [],
        focused: false,
        activeKey: null,
        listChanging: false,
        prevProps: null,
        fieldNames: fillFieldNames2()
      });
      _defineProperty(_assertThisInitialized(_this), "dragStartMousePosition", null);
      _defineProperty(_assertThisInitialized(_this), "dragNode", void 0);
      _defineProperty(_assertThisInitialized(_this), "currentMouseOverDroppableNodeKey", null);
      _defineProperty(_assertThisInitialized(_this), "listRef", /* @__PURE__ */ React369.createRef());
      _defineProperty(_assertThisInitialized(_this), "onNodeDragStart", function(event, node2) {
        var _this$state = _this.state, expandedKeys = _this$state.expandedKeys, keyEntities = _this$state.keyEntities;
        var onDragStart = _this.props.onDragStart;
        var eventKey = node2.props.eventKey;
        _this.dragNode = node2;
        _this.dragStartMousePosition = {
          x: event.clientX,
          y: event.clientY
        };
        var newExpandedKeys = arrDel(expandedKeys, eventKey);
        _this.setState({
          draggingNodeKey: eventKey,
          dragChildrenKeys: getDragChildrenKeys(eventKey, keyEntities),
          indent: _this.listRef.current.getIndentWidth()
        });
        _this.setExpandedKeys(newExpandedKeys);
        window.addEventListener("dragend", _this.onWindowDragEnd);
        onDragStart === null || onDragStart === void 0 || onDragStart({
          event,
          node: convertNodePropsToEventData(node2.props)
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeDragEnter", function(event, node2) {
        var _this$state2 = _this.state, expandedKeys = _this$state2.expandedKeys, keyEntities = _this$state2.keyEntities, dragChildrenKeys = _this$state2.dragChildrenKeys, flattenNodes = _this$state2.flattenNodes, indent = _this$state2.indent;
        var _this$props = _this.props, onDragEnter = _this$props.onDragEnter, onExpand = _this$props.onExpand, allowDrop2 = _this$props.allowDrop, direction = _this$props.direction;
        var _node$props = node2.props, pos = _node$props.pos, eventKey = _node$props.eventKey;
        var _assertThisInitialize = _assertThisInitialized(_this), dragNode = _assertThisInitialize.dragNode;
        if (_this.currentMouseOverDroppableNodeKey !== eventKey) {
          _this.currentMouseOverDroppableNodeKey = eventKey;
        }
        if (!dragNode) {
          _this.resetDragState();
          return;
        }
        var _calcDropPosition = calcDropPosition(event, dragNode, node2, indent, _this.dragStartMousePosition, allowDrop2, flattenNodes, keyEntities, expandedKeys, direction), dropPosition = _calcDropPosition.dropPosition, dropLevelOffset = _calcDropPosition.dropLevelOffset, dropTargetKey = _calcDropPosition.dropTargetKey, dropContainerKey = _calcDropPosition.dropContainerKey, dropTargetPos = _calcDropPosition.dropTargetPos, dropAllowed = _calcDropPosition.dropAllowed, dragOverNodeKey = _calcDropPosition.dragOverNodeKey;
        if (
          // don't allow drop inside its children
          dragChildrenKeys.indexOf(dropTargetKey) !== -1 || // don't allow drop when drop is not allowed caculated by calcDropPosition
          !dropAllowed
        ) {
          _this.resetDragState();
          return;
        }
        if (!_this.delayedDragEnterLogic) {
          _this.delayedDragEnterLogic = {};
        }
        Object.keys(_this.delayedDragEnterLogic).forEach(function(key) {
          clearTimeout(_this.delayedDragEnterLogic[key]);
        });
        if (dragNode.props.eventKey !== node2.props.eventKey) {
          event.persist();
          _this.delayedDragEnterLogic[pos] = window.setTimeout(function() {
            if (_this.state.draggingNodeKey === null)
              return;
            var newExpandedKeys = _toConsumableArray(expandedKeys);
            var entity = getEntity(keyEntities, node2.props.eventKey);
            if (entity && (entity.children || []).length) {
              newExpandedKeys = arrAdd(expandedKeys, node2.props.eventKey);
            }
            if (!("expandedKeys" in _this.props)) {
              _this.setExpandedKeys(newExpandedKeys);
            }
            onExpand === null || onExpand === void 0 || onExpand(newExpandedKeys, {
              node: convertNodePropsToEventData(node2.props),
              expanded: true,
              nativeEvent: event.nativeEvent
            });
          }, 800);
        }
        if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {
          _this.resetDragState();
          return;
        }
        _this.setState({
          dragOverNodeKey,
          dropPosition,
          dropLevelOffset,
          dropTargetKey,
          dropContainerKey,
          dropTargetPos,
          dropAllowed
        });
        onDragEnter === null || onDragEnter === void 0 || onDragEnter({
          event,
          node: convertNodePropsToEventData(node2.props),
          expandedKeys
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeDragOver", function(event, node2) {
        var _this$state3 = _this.state, dragChildrenKeys = _this$state3.dragChildrenKeys, flattenNodes = _this$state3.flattenNodes, keyEntities = _this$state3.keyEntities, expandedKeys = _this$state3.expandedKeys, indent = _this$state3.indent;
        var _this$props2 = _this.props, onDragOver = _this$props2.onDragOver, allowDrop2 = _this$props2.allowDrop, direction = _this$props2.direction;
        var _assertThisInitialize2 = _assertThisInitialized(_this), dragNode = _assertThisInitialize2.dragNode;
        if (!dragNode) {
          return;
        }
        var _calcDropPosition2 = calcDropPosition(event, dragNode, node2, indent, _this.dragStartMousePosition, allowDrop2, flattenNodes, keyEntities, expandedKeys, direction), dropPosition = _calcDropPosition2.dropPosition, dropLevelOffset = _calcDropPosition2.dropLevelOffset, dropTargetKey = _calcDropPosition2.dropTargetKey, dropContainerKey = _calcDropPosition2.dropContainerKey, dropAllowed = _calcDropPosition2.dropAllowed, dropTargetPos = _calcDropPosition2.dropTargetPos, dragOverNodeKey = _calcDropPosition2.dragOverNodeKey;
        if (dragChildrenKeys.indexOf(dropTargetKey) !== -1 || !dropAllowed) {
          return;
        }
        if (dragNode.props.eventKey === dropTargetKey && dropLevelOffset === 0) {
          if (!(_this.state.dropPosition === null && _this.state.dropLevelOffset === null && _this.state.dropTargetKey === null && _this.state.dropContainerKey === null && _this.state.dropTargetPos === null && _this.state.dropAllowed === false && _this.state.dragOverNodeKey === null)) {
            _this.resetDragState();
          }
        } else if (!(dropPosition === _this.state.dropPosition && dropLevelOffset === _this.state.dropLevelOffset && dropTargetKey === _this.state.dropTargetKey && dropContainerKey === _this.state.dropContainerKey && dropTargetPos === _this.state.dropTargetPos && dropAllowed === _this.state.dropAllowed && dragOverNodeKey === _this.state.dragOverNodeKey)) {
          _this.setState({
            dropPosition,
            dropLevelOffset,
            dropTargetKey,
            dropContainerKey,
            dropTargetPos,
            dropAllowed,
            dragOverNodeKey
          });
        }
        onDragOver === null || onDragOver === void 0 || onDragOver({
          event,
          node: convertNodePropsToEventData(node2.props)
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeDragLeave", function(event, node2) {
        if (_this.currentMouseOverDroppableNodeKey === node2.props.eventKey && !event.currentTarget.contains(event.relatedTarget)) {
          _this.resetDragState();
          _this.currentMouseOverDroppableNodeKey = null;
        }
        var onDragLeave = _this.props.onDragLeave;
        onDragLeave === null || onDragLeave === void 0 || onDragLeave({
          event,
          node: convertNodePropsToEventData(node2.props)
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onWindowDragEnd", function(event) {
        _this.onNodeDragEnd(event, null, true);
        window.removeEventListener("dragend", _this.onWindowDragEnd);
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeDragEnd", function(event, node2) {
        var onDragEnd = _this.props.onDragEnd;
        _this.setState({
          dragOverNodeKey: null
        });
        _this.cleanDragState();
        onDragEnd === null || onDragEnd === void 0 || onDragEnd({
          event,
          node: convertNodePropsToEventData(node2.props)
        });
        _this.dragNode = null;
        window.removeEventListener("dragend", _this.onWindowDragEnd);
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeDrop", function(event, node2) {
        var _this$getActiveItem;
        var outsideTree = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var _this$state4 = _this.state, dragChildrenKeys = _this$state4.dragChildrenKeys, dropPosition = _this$state4.dropPosition, dropTargetKey = _this$state4.dropTargetKey, dropTargetPos = _this$state4.dropTargetPos, dropAllowed = _this$state4.dropAllowed;
        if (!dropAllowed)
          return;
        var onDrop = _this.props.onDrop;
        _this.setState({
          dragOverNodeKey: null
        });
        _this.cleanDragState();
        if (dropTargetKey === null)
          return;
        var abstractDropNodeProps = _objectSpread2(_objectSpread2({}, getTreeNodeProps(dropTargetKey, _this.getTreeNodeRequiredProps())), {}, {
          active: ((_this$getActiveItem = _this.getActiveItem()) === null || _this$getActiveItem === void 0 ? void 0 : _this$getActiveItem.key) === dropTargetKey,
          data: getEntity(_this.state.keyEntities, dropTargetKey).node
        });
        var dropToChild = dragChildrenKeys.indexOf(dropTargetKey) !== -1;
        warning_default(!dropToChild, "Can not drop to dragNode's children node. This is a bug of rc-tree. Please report an issue.");
        var posArr = posToArr(dropTargetPos);
        var dropResult = {
          event,
          node: convertNodePropsToEventData(abstractDropNodeProps),
          dragNode: _this.dragNode ? convertNodePropsToEventData(_this.dragNode.props) : null,
          dragNodesKeys: [_this.dragNode.props.eventKey].concat(dragChildrenKeys),
          dropToGap: dropPosition !== 0,
          dropPosition: dropPosition + Number(posArr[posArr.length - 1])
        };
        if (!outsideTree) {
          onDrop === null || onDrop === void 0 || onDrop(dropResult);
        }
        _this.dragNode = null;
      });
      _defineProperty(_assertThisInitialized(_this), "cleanDragState", function() {
        var draggingNodeKey = _this.state.draggingNodeKey;
        if (draggingNodeKey !== null) {
          _this.setState({
            draggingNodeKey: null,
            dropPosition: null,
            dropContainerKey: null,
            dropTargetKey: null,
            dropLevelOffset: null,
            dropAllowed: true,
            dragOverNodeKey: null
          });
        }
        _this.dragStartMousePosition = null;
        _this.currentMouseOverDroppableNodeKey = null;
      });
      _defineProperty(_assertThisInitialized(_this), "triggerExpandActionExpand", function(e3, treeNode) {
        var _this$state5 = _this.state, expandedKeys = _this$state5.expandedKeys, flattenNodes = _this$state5.flattenNodes;
        var expanded = treeNode.expanded, key = treeNode.key, isLeaf = treeNode.isLeaf;
        if (isLeaf || e3.shiftKey || e3.metaKey || e3.ctrlKey) {
          return;
        }
        var node2 = flattenNodes.filter(function(nodeItem) {
          return nodeItem.key === key;
        })[0];
        var eventNode = convertNodePropsToEventData(_objectSpread2(_objectSpread2({}, getTreeNodeProps(key, _this.getTreeNodeRequiredProps())), {}, {
          data: node2.data
        }));
        _this.setExpandedKeys(expanded ? arrDel(expandedKeys, key) : arrAdd(expandedKeys, key));
        _this.onNodeExpand(e3, eventNode);
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeClick", function(e3, treeNode) {
        var _this$props3 = _this.props, onClick = _this$props3.onClick, expandAction = _this$props3.expandAction;
        if (expandAction === "click") {
          _this.triggerExpandActionExpand(e3, treeNode);
        }
        onClick === null || onClick === void 0 || onClick(e3, treeNode);
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeDoubleClick", function(e3, treeNode) {
        var _this$props4 = _this.props, onDoubleClick = _this$props4.onDoubleClick, expandAction = _this$props4.expandAction;
        if (expandAction === "doubleClick") {
          _this.triggerExpandActionExpand(e3, treeNode);
        }
        onDoubleClick === null || onDoubleClick === void 0 || onDoubleClick(e3, treeNode);
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeSelect", function(e3, treeNode) {
        var selectedKeys = _this.state.selectedKeys;
        var _this$state6 = _this.state, keyEntities = _this$state6.keyEntities, fieldNames = _this$state6.fieldNames;
        var _this$props5 = _this.props, onSelect = _this$props5.onSelect, multiple = _this$props5.multiple;
        var selected = treeNode.selected;
        var key = treeNode[fieldNames.key];
        var targetSelected = !selected;
        if (!targetSelected) {
          selectedKeys = arrDel(selectedKeys, key);
        } else if (!multiple) {
          selectedKeys = [key];
        } else {
          selectedKeys = arrAdd(selectedKeys, key);
        }
        var selectedNodes = selectedKeys.map(function(selectedKey) {
          var entity = getEntity(keyEntities, selectedKey);
          if (!entity)
            return null;
          return entity.node;
        }).filter(function(node2) {
          return node2;
        });
        _this.setUncontrolledState({
          selectedKeys
        });
        onSelect === null || onSelect === void 0 || onSelect(selectedKeys, {
          event: "select",
          selected: targetSelected,
          node: treeNode,
          selectedNodes,
          nativeEvent: e3.nativeEvent
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeCheck", function(e3, treeNode, checked) {
        var _this$state7 = _this.state, keyEntities = _this$state7.keyEntities, oriCheckedKeys = _this$state7.checkedKeys, oriHalfCheckedKeys = _this$state7.halfCheckedKeys;
        var _this$props6 = _this.props, checkStrictly = _this$props6.checkStrictly, onCheck = _this$props6.onCheck;
        var key = treeNode.key;
        var checkedObj;
        var eventObj = {
          event: "check",
          node: treeNode,
          checked,
          nativeEvent: e3.nativeEvent
        };
        if (checkStrictly) {
          var checkedKeys = checked ? arrAdd(oriCheckedKeys, key) : arrDel(oriCheckedKeys, key);
          var halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);
          checkedObj = {
            checked: checkedKeys,
            halfChecked: halfCheckedKeys
          };
          eventObj.checkedNodes = checkedKeys.map(function(checkedKey) {
            return getEntity(keyEntities, checkedKey);
          }).filter(function(entity) {
            return entity;
          }).map(function(entity) {
            return entity.node;
          });
          _this.setUncontrolledState({
            checkedKeys
          });
        } else {
          var _conductCheck = conductCheck([].concat(_toConsumableArray(oriCheckedKeys), [key]), true, keyEntities), _checkedKeys = _conductCheck.checkedKeys, _halfCheckedKeys = _conductCheck.halfCheckedKeys;
          if (!checked) {
            var keySet = new Set(_checkedKeys);
            keySet.delete(key);
            var _conductCheck2 = conductCheck(Array.from(keySet), {
              checked: false,
              halfCheckedKeys: _halfCheckedKeys
            }, keyEntities);
            _checkedKeys = _conductCheck2.checkedKeys;
            _halfCheckedKeys = _conductCheck2.halfCheckedKeys;
          }
          checkedObj = _checkedKeys;
          eventObj.checkedNodes = [];
          eventObj.checkedNodesPositions = [];
          eventObj.halfCheckedKeys = _halfCheckedKeys;
          _checkedKeys.forEach(function(checkedKey) {
            var entity = getEntity(keyEntities, checkedKey);
            if (!entity)
              return;
            var node2 = entity.node, pos = entity.pos;
            eventObj.checkedNodes.push(node2);
            eventObj.checkedNodesPositions.push({
              node: node2,
              pos
            });
          });
          _this.setUncontrolledState({
            checkedKeys: _checkedKeys
          }, false, {
            halfCheckedKeys: _halfCheckedKeys
          });
        }
        onCheck === null || onCheck === void 0 || onCheck(checkedObj, eventObj);
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeLoad", function(treeNode) {
        var key = treeNode.key;
        var loadPromise = new Promise(function(resolve, reject) {
          _this.setState(function(_ref) {
            var _ref$loadedKeys = _ref.loadedKeys, loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys, _ref$loadingKeys = _ref.loadingKeys, loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;
            var _this$props7 = _this.props, loadData = _this$props7.loadData, onLoad = _this$props7.onLoad;
            if (!loadData || loadedKeys.indexOf(key) !== -1 || loadingKeys.indexOf(key) !== -1) {
              return null;
            }
            var promise = loadData(treeNode);
            promise.then(function() {
              var currentLoadedKeys = _this.state.loadedKeys;
              var newLoadedKeys = arrAdd(currentLoadedKeys, key);
              onLoad === null || onLoad === void 0 || onLoad(newLoadedKeys, {
                event: "load",
                node: treeNode
              });
              _this.setUncontrolledState({
                loadedKeys: newLoadedKeys
              });
              _this.setState(function(prevState) {
                return {
                  loadingKeys: arrDel(prevState.loadingKeys, key)
                };
              });
              resolve();
            }).catch(function(e3) {
              _this.setState(function(prevState) {
                return {
                  loadingKeys: arrDel(prevState.loadingKeys, key)
                };
              });
              _this.loadingRetryTimes[key] = (_this.loadingRetryTimes[key] || 0) + 1;
              if (_this.loadingRetryTimes[key] >= MAX_RETRY_TIMES) {
                var currentLoadedKeys = _this.state.loadedKeys;
                warning_default(false, "Retry for `loadData` many times but still failed. No more retry.");
                _this.setUncontrolledState({
                  loadedKeys: arrAdd(currentLoadedKeys, key)
                });
                resolve();
              }
              reject(e3);
            });
            return {
              loadingKeys: arrAdd(loadingKeys, key)
            };
          });
        });
        loadPromise.catch(function() {
        });
        return loadPromise;
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeMouseEnter", function(event, node2) {
        var onMouseEnter = _this.props.onMouseEnter;
        onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
          event,
          node: node2
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeMouseLeave", function(event, node2) {
        var onMouseLeave = _this.props.onMouseLeave;
        onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
          event,
          node: node2
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeContextMenu", function(event, node2) {
        var onRightClick = _this.props.onRightClick;
        if (onRightClick) {
          event.preventDefault();
          onRightClick({
            event,
            node: node2
          });
        }
      });
      _defineProperty(_assertThisInitialized(_this), "onFocus", function() {
        var onFocus = _this.props.onFocus;
        _this.setState({
          focused: true
        });
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        onFocus === null || onFocus === void 0 || onFocus.apply(void 0, args);
      });
      _defineProperty(_assertThisInitialized(_this), "onBlur", function() {
        var onBlur = _this.props.onBlur;
        _this.setState({
          focused: false
        });
        _this.onActiveChange(null);
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        onBlur === null || onBlur === void 0 || onBlur.apply(void 0, args);
      });
      _defineProperty(_assertThisInitialized(_this), "getTreeNodeRequiredProps", function() {
        var _this$state8 = _this.state, expandedKeys = _this$state8.expandedKeys, selectedKeys = _this$state8.selectedKeys, loadedKeys = _this$state8.loadedKeys, loadingKeys = _this$state8.loadingKeys, checkedKeys = _this$state8.checkedKeys, halfCheckedKeys = _this$state8.halfCheckedKeys, dragOverNodeKey = _this$state8.dragOverNodeKey, dropPosition = _this$state8.dropPosition, keyEntities = _this$state8.keyEntities;
        return {
          expandedKeys: expandedKeys || [],
          selectedKeys: selectedKeys || [],
          loadedKeys: loadedKeys || [],
          loadingKeys: loadingKeys || [],
          checkedKeys: checkedKeys || [],
          halfCheckedKeys: halfCheckedKeys || [],
          dragOverNodeKey,
          dropPosition,
          keyEntities
        };
      });
      _defineProperty(_assertThisInitialized(_this), "setExpandedKeys", function(expandedKeys) {
        var _this$state9 = _this.state, treeData = _this$state9.treeData, fieldNames = _this$state9.fieldNames;
        var flattenNodes = flattenTreeData(treeData, expandedKeys, fieldNames);
        _this.setUncontrolledState({
          expandedKeys,
          flattenNodes
        }, true);
      });
      _defineProperty(_assertThisInitialized(_this), "onNodeExpand", function(e3, treeNode) {
        var expandedKeys = _this.state.expandedKeys;
        var _this$state10 = _this.state, listChanging = _this$state10.listChanging, fieldNames = _this$state10.fieldNames;
        var _this$props8 = _this.props, onExpand = _this$props8.onExpand, loadData = _this$props8.loadData;
        var expanded = treeNode.expanded;
        var key = treeNode[fieldNames.key];
        if (listChanging) {
          return;
        }
        var index2 = expandedKeys.indexOf(key);
        var targetExpanded = !expanded;
        warning_default(expanded && index2 !== -1 || !expanded && index2 === -1, "Expand state not sync with index check");
        if (targetExpanded) {
          expandedKeys = arrAdd(expandedKeys, key);
        } else {
          expandedKeys = arrDel(expandedKeys, key);
        }
        _this.setExpandedKeys(expandedKeys);
        onExpand === null || onExpand === void 0 || onExpand(expandedKeys, {
          node: treeNode,
          expanded: targetExpanded,
          nativeEvent: e3.nativeEvent
        });
        if (targetExpanded && loadData) {
          var loadPromise = _this.onNodeLoad(treeNode);
          if (loadPromise) {
            loadPromise.then(function() {
              var newFlattenTreeData = flattenTreeData(_this.state.treeData, expandedKeys, fieldNames);
              _this.setUncontrolledState({
                flattenNodes: newFlattenTreeData
              });
            }).catch(function() {
              var currentExpandedKeys = _this.state.expandedKeys;
              var expandedKeysToRestore = arrDel(currentExpandedKeys, key);
              _this.setExpandedKeys(expandedKeysToRestore);
            });
          }
        }
      });
      _defineProperty(_assertThisInitialized(_this), "onListChangeStart", function() {
        _this.setUncontrolledState({
          listChanging: true
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onListChangeEnd", function() {
        setTimeout(function() {
          _this.setUncontrolledState({
            listChanging: false
          });
        });
      });
      _defineProperty(_assertThisInitialized(_this), "onActiveChange", function(newActiveKey) {
        var activeKey = _this.state.activeKey;
        var _this$props9 = _this.props, onActiveChange = _this$props9.onActiveChange, _this$props9$itemScro = _this$props9.itemScrollOffset, itemScrollOffset = _this$props9$itemScro === void 0 ? 0 : _this$props9$itemScro;
        if (activeKey === newActiveKey) {
          return;
        }
        _this.setState({
          activeKey: newActiveKey
        });
        if (newActiveKey !== null) {
          _this.scrollTo({
            key: newActiveKey,
            offset: itemScrollOffset
          });
        }
        onActiveChange === null || onActiveChange === void 0 || onActiveChange(newActiveKey);
      });
      _defineProperty(_assertThisInitialized(_this), "getActiveItem", function() {
        var _this$state11 = _this.state, activeKey = _this$state11.activeKey, flattenNodes = _this$state11.flattenNodes;
        if (activeKey === null) {
          return null;
        }
        return flattenNodes.find(function(_ref2) {
          var key = _ref2.key;
          return key === activeKey;
        }) || null;
      });
      _defineProperty(_assertThisInitialized(_this), "offsetActiveKey", function(offset3) {
        var _this$state12 = _this.state, flattenNodes = _this$state12.flattenNodes, activeKey = _this$state12.activeKey;
        var index2 = flattenNodes.findIndex(function(_ref3) {
          var key = _ref3.key;
          return key === activeKey;
        });
        if (index2 === -1 && offset3 < 0) {
          index2 = flattenNodes.length;
        }
        index2 = (index2 + offset3 + flattenNodes.length) % flattenNodes.length;
        var item = flattenNodes[index2];
        if (item) {
          var _key4 = item.key;
          _this.onActiveChange(_key4);
        } else {
          _this.onActiveChange(null);
        }
      });
      _defineProperty(_assertThisInitialized(_this), "onKeyDown", function(event) {
        var _this$state13 = _this.state, activeKey = _this$state13.activeKey, expandedKeys = _this$state13.expandedKeys, checkedKeys = _this$state13.checkedKeys, fieldNames = _this$state13.fieldNames;
        var _this$props10 = _this.props, onKeyDown2 = _this$props10.onKeyDown, checkable = _this$props10.checkable, selectable = _this$props10.selectable;
        switch (event.which) {
          case KeyCode_default.UP: {
            _this.offsetActiveKey(-1);
            event.preventDefault();
            break;
          }
          case KeyCode_default.DOWN: {
            _this.offsetActiveKey(1);
            event.preventDefault();
            break;
          }
        }
        var activeItem = _this.getActiveItem();
        if (activeItem && activeItem.data) {
          var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();
          var expandable = activeItem.data.isLeaf === false || !!(activeItem.data[fieldNames.children] || []).length;
          var eventNode = convertNodePropsToEventData(_objectSpread2(_objectSpread2({}, getTreeNodeProps(activeKey, treeNodeRequiredProps)), {}, {
            data: activeItem.data,
            active: true
          }));
          switch (event.which) {
            case KeyCode_default.LEFT: {
              if (expandable && expandedKeys.includes(activeKey)) {
                _this.onNodeExpand({}, eventNode);
              } else if (activeItem.parent) {
                _this.onActiveChange(activeItem.parent.key);
              }
              event.preventDefault();
              break;
            }
            case KeyCode_default.RIGHT: {
              if (expandable && !expandedKeys.includes(activeKey)) {
                _this.onNodeExpand({}, eventNode);
              } else if (activeItem.children && activeItem.children.length) {
                _this.onActiveChange(activeItem.children[0].key);
              }
              event.preventDefault();
              break;
            }
            case KeyCode_default.ENTER:
            case KeyCode_default.SPACE: {
              if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {
                _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));
              } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {
                _this.onNodeSelect({}, eventNode);
              }
              break;
            }
          }
        }
        onKeyDown2 === null || onKeyDown2 === void 0 || onKeyDown2(event);
      });
      _defineProperty(_assertThisInitialized(_this), "setUncontrolledState", function(state) {
        var atomic = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var forceState = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!_this.destroyed) {
          var needSync = false;
          var allPassed = true;
          var newState = {};
          Object.keys(state).forEach(function(name) {
            if (name in _this.props) {
              allPassed = false;
              return;
            }
            needSync = true;
            newState[name] = state[name];
          });
          if (needSync && (!atomic || allPassed)) {
            _this.setState(_objectSpread2(_objectSpread2({}, newState), forceState));
          }
        }
      });
      _defineProperty(_assertThisInitialized(_this), "scrollTo", function(scroll) {
        _this.listRef.current.scrollTo(scroll);
      });
      return _this;
    }
    _createClass(Tree4, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.destroyed = false;
        this.onUpdated();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.onUpdated();
      }
    }, {
      key: "onUpdated",
      value: function onUpdated() {
        var _this$props11 = this.props, activeKey = _this$props11.activeKey, _this$props11$itemScr = _this$props11.itemScrollOffset, itemScrollOffset = _this$props11$itemScr === void 0 ? 0 : _this$props11$itemScr;
        if (activeKey !== void 0 && activeKey !== this.state.activeKey) {
          this.setState({
            activeKey
          });
          if (activeKey !== null) {
            this.scrollTo({
              key: activeKey,
              offset: itemScrollOffset
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        window.removeEventListener("dragend", this.onWindowDragEnd);
        this.destroyed = true;
      }
    }, {
      key: "resetDragState",
      value: function resetDragState() {
        this.setState({
          dragOverNodeKey: null,
          dropPosition: null,
          dropLevelOffset: null,
          dropTargetKey: null,
          dropContainerKey: null,
          dropTargetPos: null,
          dropAllowed: false
        });
      }
    }, {
      key: "render",
      value: function render2() {
        var _this$state14 = this.state, focused = _this$state14.focused, flattenNodes = _this$state14.flattenNodes, keyEntities = _this$state14.keyEntities, draggingNodeKey = _this$state14.draggingNodeKey, activeKey = _this$state14.activeKey, dropLevelOffset = _this$state14.dropLevelOffset, dropContainerKey = _this$state14.dropContainerKey, dropTargetKey = _this$state14.dropTargetKey, dropPosition = _this$state14.dropPosition, dragOverNodeKey = _this$state14.dragOverNodeKey, indent = _this$state14.indent;
        var _this$props12 = this.props, prefixCls = _this$props12.prefixCls, className = _this$props12.className, style2 = _this$props12.style, showLine = _this$props12.showLine, focusable2 = _this$props12.focusable, _this$props12$tabInde = _this$props12.tabIndex, tabIndex = _this$props12$tabInde === void 0 ? 0 : _this$props12$tabInde, selectable = _this$props12.selectable, showIcon = _this$props12.showIcon, icon = _this$props12.icon, switcherIcon = _this$props12.switcherIcon, draggable = _this$props12.draggable, checkable = _this$props12.checkable, checkStrictly = _this$props12.checkStrictly, disabled = _this$props12.disabled, motion2 = _this$props12.motion, loadData = _this$props12.loadData, filterTreeNode = _this$props12.filterTreeNode, height = _this$props12.height, itemHeight = _this$props12.itemHeight, virtual = _this$props12.virtual, titleRender = _this$props12.titleRender, dropIndicatorRender2 = _this$props12.dropIndicatorRender, onContextMenu = _this$props12.onContextMenu, onScroll = _this$props12.onScroll, direction = _this$props12.direction, rootClassName = _this$props12.rootClassName, rootStyle = _this$props12.rootStyle;
        var domProps = pickAttrs(this.props, {
          aria: true,
          data: true
        });
        var draggableConfig;
        if (draggable) {
          if (_typeof(draggable) === "object") {
            draggableConfig = draggable;
          } else if (typeof draggable === "function") {
            draggableConfig = {
              nodeDraggable: draggable
            };
          } else {
            draggableConfig = {};
          }
        }
        return /* @__PURE__ */ React369.createElement(TreeContext.Provider, {
          value: {
            prefixCls,
            selectable,
            showIcon,
            icon,
            switcherIcon,
            draggable: draggableConfig,
            draggingNodeKey,
            checkable,
            checkStrictly,
            disabled,
            keyEntities,
            dropLevelOffset,
            dropContainerKey,
            dropTargetKey,
            dropPosition,
            dragOverNodeKey,
            indent,
            direction,
            dropIndicatorRender: dropIndicatorRender2,
            loadData,
            filterTreeNode,
            titleRender,
            onNodeClick: this.onNodeClick,
            onNodeDoubleClick: this.onNodeDoubleClick,
            onNodeExpand: this.onNodeExpand,
            onNodeSelect: this.onNodeSelect,
            onNodeCheck: this.onNodeCheck,
            onNodeLoad: this.onNodeLoad,
            onNodeMouseEnter: this.onNodeMouseEnter,
            onNodeMouseLeave: this.onNodeMouseLeave,
            onNodeContextMenu: this.onNodeContextMenu,
            onNodeDragStart: this.onNodeDragStart,
            onNodeDragEnter: this.onNodeDragEnter,
            onNodeDragOver: this.onNodeDragOver,
            onNodeDragLeave: this.onNodeDragLeave,
            onNodeDragEnd: this.onNodeDragEnd,
            onNodeDrop: this.onNodeDrop
          }
        }, /* @__PURE__ */ React369.createElement("div", {
          role: "tree",
          className: (0, import_classnames132.default)(prefixCls, className, rootClassName, _defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-show-line"), showLine), "".concat(prefixCls, "-focused"), focused), "".concat(prefixCls, "-active-focused"), activeKey !== null)),
          style: rootStyle
        }, /* @__PURE__ */ React369.createElement(NodeList_default, _extends({
          ref: this.listRef,
          prefixCls,
          style: style2,
          data: flattenNodes,
          disabled,
          selectable,
          checkable: !!checkable,
          motion: motion2,
          dragging: draggingNodeKey !== null,
          height,
          itemHeight,
          virtual,
          focusable: focusable2,
          focused,
          tabIndex,
          activeItem: this.getActiveItem(),
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onKeyDown: this.onKeyDown,
          onActiveChange: this.onActiveChange,
          onListChangeStart: this.onListChangeStart,
          onListChangeEnd: this.onListChangeEnd,
          onContextMenu,
          onScroll
        }, this.getTreeNodeRequiredProps(), domProps))));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        var prevProps = prevState.prevProps;
        var newState = {
          prevProps: props
        };
        function needSync(name) {
          return !prevProps && name in props || prevProps && prevProps[name] !== props[name];
        }
        var treeData;
        var fieldNames = prevState.fieldNames;
        if (needSync("fieldNames")) {
          fieldNames = fillFieldNames2(props.fieldNames);
          newState.fieldNames = fieldNames;
        }
        if (needSync("treeData")) {
          treeData = props.treeData;
        } else if (needSync("children")) {
          warning_default(false, "`children` of Tree is deprecated. Please use `treeData` instead.");
          treeData = convertTreeToData(props.children);
        }
        if (treeData) {
          newState.treeData = treeData;
          var entitiesMap = convertDataToEntities(treeData, {
            fieldNames
          });
          newState.keyEntities = _objectSpread2(_defineProperty({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities);
          if (true) {
            warningWithoutKey(treeData, fieldNames);
          }
        }
        var keyEntities = newState.keyEntities || prevState.keyEntities;
        if (needSync("expandedKeys") || prevProps && needSync("autoExpandParent")) {
          newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;
        } else if (!prevProps && props.defaultExpandAll) {
          var cloneKeyEntities = _objectSpread2({}, keyEntities);
          delete cloneKeyEntities[MOTION_KEY];
          newState.expandedKeys = Object.keys(cloneKeyEntities).map(function(key) {
            return cloneKeyEntities[key].key;
          });
        } else if (!prevProps && props.defaultExpandedKeys) {
          newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;
        }
        if (!newState.expandedKeys) {
          delete newState.expandedKeys;
        }
        if (treeData || newState.expandedKeys) {
          var flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys, fieldNames);
          newState.flattenNodes = flattenNodes;
        }
        if (props.selectable) {
          if (needSync("selectedKeys")) {
            newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);
          } else if (!prevProps && props.defaultSelectedKeys) {
            newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);
          }
        }
        if (props.checkable) {
          var checkedKeyEntity;
          if (needSync("checkedKeys")) {
            checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};
          } else if (!prevProps && props.defaultCheckedKeys) {
            checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};
          } else if (treeData) {
            checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {
              checkedKeys: prevState.checkedKeys,
              halfCheckedKeys: prevState.halfCheckedKeys
            };
          }
          if (checkedKeyEntity) {
            var _checkedKeyEntity = checkedKeyEntity, _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys, checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che, _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys, halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;
            if (!props.checkStrictly) {
              var conductKeys = conductCheck(checkedKeys, true, keyEntities);
              checkedKeys = conductKeys.checkedKeys;
              halfCheckedKeys = conductKeys.halfCheckedKeys;
            }
            newState.checkedKeys = checkedKeys;
            newState.halfCheckedKeys = halfCheckedKeys;
          }
        }
        if (needSync("loadedKeys")) {
          newState.loadedKeys = props.loadedKeys;
        }
        return newState;
      }
    }]);
    return Tree4;
  }(React369.Component);
  _defineProperty(Tree, "defaultProps", {
    prefixCls: "rc-tree",
    showLine: false,
    showIcon: true,
    selectable: true,
    multiple: false,
    checkable: false,
    disabled: false,
    checkStrictly: false,
    draggable: false,
    defaultExpandParent: true,
    autoExpandParent: false,
    defaultExpandAll: false,
    defaultExpandedKeys: [],
    defaultCheckedKeys: [],
    defaultSelectedKeys: [],
    dropIndicatorRender: DropIndicator,
    allowDrop: function allowDrop() {
      return true;
    },
    expandAction: false
  });
  _defineProperty(Tree, "TreeNode", TreeNode_default);
  var Tree_default = Tree;

  // node_modules/rc-tree/es/index.js
  var es_default18 = Tree_default;

  // node_modules/antd/es/tree/DirectoryTree.js
  var React380 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/FileOutlined.js
  var React370 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FileOutlined.js
  var FileOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494z" } }] }, "name": "file", "theme": "outlined" };
  var FileOutlined_default = FileOutlined;

  // node_modules/@ant-design/icons/es/icons/FileOutlined.js
  var FileOutlined2 = function FileOutlined3(props, ref) {
    return /* @__PURE__ */ React370.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: FileOutlined_default
    }));
  };
  if (true) {
    FileOutlined2.displayName = "FileOutlined";
  }
  var FileOutlined_default2 = /* @__PURE__ */ React370.forwardRef(FileOutlined2);

  // node_modules/@ant-design/icons/es/icons/FolderOpenOutlined.js
  var React371 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FolderOpenOutlined.js
  var FolderOpenOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 00-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z" } }] }, "name": "folder-open", "theme": "outlined" };
  var FolderOpenOutlined_default = FolderOpenOutlined;

  // node_modules/@ant-design/icons/es/icons/FolderOpenOutlined.js
  var FolderOpenOutlined2 = function FolderOpenOutlined3(props, ref) {
    return /* @__PURE__ */ React371.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: FolderOpenOutlined_default
    }));
  };
  if (true) {
    FolderOpenOutlined2.displayName = "FolderOpenOutlined";
  }
  var FolderOpenOutlined_default2 = /* @__PURE__ */ React371.forwardRef(FolderOpenOutlined2);

  // node_modules/@ant-design/icons/es/icons/FolderOutlined.js
  var React372 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/FolderOutlined.js
  var FolderOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M880 298.4H521L403.7 186.2a8.15 8.15 0 00-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z" } }] }, "name": "folder", "theme": "outlined" };
  var FolderOutlined_default = FolderOutlined;

  // node_modules/@ant-design/icons/es/icons/FolderOutlined.js
  var FolderOutlined2 = function FolderOutlined3(props, ref) {
    return /* @__PURE__ */ React372.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: FolderOutlined_default
    }));
  };
  if (true) {
    FolderOutlined2.displayName = "FolderOutlined";
  }
  var FolderOutlined_default2 = /* @__PURE__ */ React372.forwardRef(FolderOutlined2);

  // node_modules/antd/es/tree/DirectoryTree.js
  var import_classnames135 = __toESM(require_classnames());

  // node_modules/antd/es/tree/Tree.js
  var import_react111 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/HolderOutlined.js
  var React373 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/HolderOutlined.js
  var HolderOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M300 276.5a56 56 0 1056-97 56 56 0 00-56 97zm0 284a56 56 0 1056-97 56 56 0 00-56 97zM640 228a56 56 0 10112 0 56 56 0 00-112 0zm0 284a56 56 0 10112 0 56 56 0 00-112 0zM300 844.5a56 56 0 1056-97 56 56 0 00-56 97zM640 796a56 56 0 10112 0 56 56 0 00-112 0z" } }] }, "name": "holder", "theme": "outlined" };
  var HolderOutlined_default = HolderOutlined;

  // node_modules/@ant-design/icons/es/icons/HolderOutlined.js
  var HolderOutlined2 = function HolderOutlined3(props, ref) {
    return /* @__PURE__ */ React373.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: HolderOutlined_default
    }));
  };
  if (true) {
    HolderOutlined2.displayName = "HolderOutlined";
  }
  var HolderOutlined_default2 = /* @__PURE__ */ React373.forwardRef(HolderOutlined2);

  // node_modules/antd/es/tree/Tree.js
  var import_classnames134 = __toESM(require_classnames());

  // node_modules/antd/es/tree/style/index.js
  var treeNodeFX = new Keyframes_default("ant-tree-node-fx-do-not-use", {
    "0%": {
      opacity: 0
    },
    "100%": {
      opacity: 1
    }
  });
  var getSwitchStyle = (prefixCls, token2) => ({
    [`.${prefixCls}-switcher-icon`]: {
      display: "inline-block",
      fontSize: 10,
      verticalAlign: "baseline",
      svg: {
        transition: `transform ${token2.motionDurationSlow}`
      }
    }
  });
  var getDropIndicatorStyle = (prefixCls, token2) => ({
    [`.${prefixCls}-drop-indicator`]: {
      position: "absolute",
      // it should displayed over the following node
      zIndex: 1,
      height: 2,
      backgroundColor: token2.colorPrimary,
      borderRadius: 1,
      pointerEvents: "none",
      "&:after": {
        position: "absolute",
        top: -3,
        insetInlineStart: -6,
        width: 8,
        height: 8,
        backgroundColor: "transparent",
        border: `${unit(token2.lineWidthBold)} solid ${token2.colorPrimary}`,
        borderRadius: "50%",
        content: '""'
      }
    }
  });
  var genBaseStyle4 = (prefixCls, token2) => {
    const {
      treeCls,
      treeNodeCls,
      treeNodePadding,
      titleHeight,
      nodeSelectedBg,
      nodeHoverBg
    } = token2;
    const treeCheckBoxMarginHorizontal = token2.paddingXS;
    return {
      [treeCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        background: token2.colorBgContainer,
        borderRadius: token2.borderRadius,
        transition: `background-color ${token2.motionDurationSlow}`,
        [`&${treeCls}-rtl`]: {
          // >>> Switcher
          [`${treeCls}-switcher`]: {
            "&_close": {
              [`${treeCls}-switcher-icon`]: {
                svg: {
                  transform: "rotate(90deg)"
                }
              }
            }
          }
        },
        [`&-focused:not(:hover):not(${treeCls}-active-focused)`]: Object.assign({}, genFocusOutline(token2)),
        // =================== Virtual List ===================
        [`${treeCls}-list-holder-inner`]: {
          alignItems: "flex-start"
        },
        [`&${treeCls}-block-node`]: {
          [`${treeCls}-list-holder-inner`]: {
            alignItems: "stretch",
            // >>> Title
            [`${treeCls}-node-content-wrapper`]: {
              flex: "auto"
            },
            // >>> Drag
            [`${treeNodeCls}.dragging`]: {
              position: "relative",
              "&:after": {
                position: "absolute",
                top: 0,
                insetInlineEnd: 0,
                bottom: treeNodePadding,
                insetInlineStart: 0,
                border: `1px solid ${token2.colorPrimary}`,
                opacity: 0,
                animationName: treeNodeFX,
                animationDuration: token2.motionDurationSlow,
                animationPlayState: "running",
                animationFillMode: "forwards",
                content: '""',
                pointerEvents: "none"
              }
            }
          }
        },
        // ===================== TreeNode =====================
        [`${treeNodeCls}`]: {
          display: "flex",
          alignItems: "flex-start",
          padding: `0 0 ${unit(treeNodePadding)} 0`,
          outline: "none",
          "&-rtl": {
            direction: "rtl"
          },
          // Disabled
          "&-disabled": {
            // >>> Title
            [`${treeCls}-node-content-wrapper`]: {
              color: token2.colorTextDisabled,
              cursor: "not-allowed",
              "&:hover": {
                background: "transparent"
              }
            }
          },
          [`&-active ${treeCls}-node-content-wrapper`]: {
            background: token2.controlItemBgHover
          },
          [`&:not(${treeNodeCls}-disabled).filter-node ${treeCls}-title`]: {
            color: "inherit",
            fontWeight: 500
          },
          "&-draggable": {
            cursor: "grab",
            [`${treeCls}-draggable-icon`]: {
              // https://github.com/ant-design/ant-design/issues/41915
              flexShrink: 0,
              width: titleHeight,
              lineHeight: `${unit(titleHeight)}`,
              textAlign: "center",
              visibility: "visible",
              opacity: 0.2,
              transition: `opacity ${token2.motionDurationSlow}`,
              [`${treeNodeCls}:hover &`]: {
                opacity: 0.45
              }
            },
            [`&${treeNodeCls}-disabled`]: {
              [`${treeCls}-draggable-icon`]: {
                visibility: "hidden"
              }
            }
          }
        },
        // >>> Indent
        [`${treeCls}-indent`]: {
          alignSelf: "stretch",
          whiteSpace: "nowrap",
          userSelect: "none",
          "&-unit": {
            display: "inline-block",
            width: titleHeight
          }
        },
        // >>> Drag Handler
        [`${treeCls}-draggable-icon`]: {
          visibility: "hidden"
        },
        // >>> Switcher
        [`${treeCls}-switcher`]: Object.assign(Object.assign({}, getSwitchStyle(prefixCls, token2)), {
          position: "relative",
          flex: "none",
          alignSelf: "stretch",
          width: titleHeight,
          margin: 0,
          lineHeight: `${unit(titleHeight)}`,
          textAlign: "center",
          cursor: "pointer",
          userSelect: "none",
          transition: `all ${token2.motionDurationSlow}`,
          borderRadius: token2.borderRadius,
          "&-noop": {
            cursor: "unset"
          },
          [`&:not(${treeCls}-switcher-noop):hover`]: {
            backgroundColor: token2.colorBgTextHover
          },
          "&_close": {
            [`${treeCls}-switcher-icon`]: {
              svg: {
                transform: "rotate(-90deg)"
              }
            }
          },
          "&-loading-icon": {
            color: token2.colorPrimary
          },
          "&-leaf-line": {
            position: "relative",
            zIndex: 1,
            display: "inline-block",
            width: "100%",
            height: "100%",
            // https://github.com/ant-design/ant-design/issues/31884
            "&:before": {
              position: "absolute",
              top: 0,
              insetInlineEnd: token2.calc(titleHeight).div(2).equal(),
              bottom: token2.calc(treeNodePadding).mul(-1).equal(),
              marginInlineStart: -1,
              borderInlineEnd: `1px solid ${token2.colorBorder}`,
              content: '""'
            },
            "&:after": {
              position: "absolute",
              width: token2.calc(token2.calc(titleHeight).div(2).equal()).mul(0.8).equal(),
              height: token2.calc(titleHeight).div(2).equal(),
              borderBottom: `1px solid ${token2.colorBorder}`,
              content: '""'
            }
          }
        }),
        // >>> Checkbox
        [`${treeCls}-checkbox`]: {
          top: "initial",
          marginInlineEnd: treeCheckBoxMarginHorizontal,
          alignSelf: "flex-start",
          marginTop: token2.marginXXS
        },
        // >>> Title
        // add `${treeCls}-checkbox + span` to cover checkbox `${checkboxCls} + span`
        [`${treeCls}-node-content-wrapper, ${treeCls}-checkbox + span`]: {
          position: "relative",
          zIndex: "auto",
          minHeight: titleHeight,
          margin: 0,
          padding: `0 ${unit(token2.calc(token2.paddingXS).div(2).equal())}`,
          color: "inherit",
          lineHeight: `${unit(titleHeight)}`,
          background: "transparent",
          borderRadius: token2.borderRadius,
          cursor: "pointer",
          transition: `all ${token2.motionDurationMid}, border 0s, line-height 0s, box-shadow 0s`,
          "&:hover": {
            backgroundColor: nodeHoverBg
          },
          [`&${treeCls}-node-selected`]: {
            backgroundColor: nodeSelectedBg
          },
          // Icon
          [`${treeCls}-iconEle`]: {
            display: "inline-block",
            width: titleHeight,
            height: titleHeight,
            lineHeight: `${unit(titleHeight)}`,
            textAlign: "center",
            verticalAlign: "top",
            "&:empty": {
              display: "none"
            }
          }
        },
        // https://github.com/ant-design/ant-design/issues/28217
        [`${treeCls}-unselectable ${treeCls}-node-content-wrapper:hover`]: {
          backgroundColor: "transparent"
        },
        // ==================== Draggable =====================
        [`${treeCls}-node-content-wrapper`]: Object.assign({
          lineHeight: `${unit(titleHeight)}`,
          userSelect: "none"
        }, getDropIndicatorStyle(prefixCls, token2)),
        [`${treeNodeCls}.drop-container`]: {
          "> [draggable]": {
            boxShadow: `0 0 0 2px ${token2.colorPrimary}`
          }
        },
        // ==================== Show Line =====================
        "&-show-line": {
          // ================ Indent lines ================
          [`${treeCls}-indent`]: {
            "&-unit": {
              position: "relative",
              height: "100%",
              "&:before": {
                position: "absolute",
                top: 0,
                insetInlineEnd: token2.calc(titleHeight).div(2).equal(),
                bottom: token2.calc(treeNodePadding).mul(-1).equal(),
                borderInlineEnd: `1px solid ${token2.colorBorder}`,
                content: '""'
              },
              "&-end": {
                "&:before": {
                  display: "none"
                }
              }
            }
          },
          // ============== Cover Background ==============
          [`${treeCls}-switcher`]: {
            background: "transparent",
            "&-line-icon": {
              // https://github.com/ant-design/ant-design/issues/32813
              verticalAlign: "-0.15em"
            }
          }
        },
        [`${treeNodeCls}-leaf-last`]: {
          [`${treeCls}-switcher`]: {
            "&-leaf-line": {
              "&:before": {
                top: "auto !important",
                bottom: "auto !important",
                height: `${unit(token2.calc(titleHeight).div(2).equal())} !important`
              }
            }
          }
        }
      })
    };
  };
  var genDirectoryStyle = (token2) => {
    const {
      treeCls,
      treeNodeCls,
      treeNodePadding,
      directoryNodeSelectedBg,
      directoryNodeSelectedColor
    } = token2;
    return {
      [`${treeCls}${treeCls}-directory`]: {
        // ================== TreeNode ==================
        [treeNodeCls]: {
          position: "relative",
          // Hover color
          "&:before": {
            position: "absolute",
            top: 0,
            insetInlineEnd: 0,
            bottom: treeNodePadding,
            insetInlineStart: 0,
            transition: `background-color ${token2.motionDurationMid}`,
            content: '""',
            pointerEvents: "none"
          },
          "&:hover": {
            "&:before": {
              background: token2.controlItemBgHover
            }
          },
          // Elements
          "> *": {
            zIndex: 1
          },
          // >>> Switcher
          [`${treeCls}-switcher`]: {
            transition: `color ${token2.motionDurationMid}`
          },
          // >>> Title
          [`${treeCls}-node-content-wrapper`]: {
            borderRadius: 0,
            userSelect: "none",
            "&:hover": {
              background: "transparent"
            },
            [`&${treeCls}-node-selected`]: {
              color: directoryNodeSelectedColor,
              background: "transparent"
            }
          },
          // ============= Selected =============
          "&-selected": {
            [`
            &:hover::before,
            &::before
          `]: {
              background: directoryNodeSelectedBg
            },
            // >>> Switcher
            [`${treeCls}-switcher`]: {
              color: directoryNodeSelectedColor
            },
            // >>> Title
            [`${treeCls}-node-content-wrapper`]: {
              color: directoryNodeSelectedColor,
              background: "transparent"
            }
          }
        }
      }
    };
  };
  var genTreeStyle = (prefixCls, token2) => {
    const treeCls = `.${prefixCls}`;
    const treeNodeCls = `${treeCls}-treenode`;
    const treeNodePadding = token2.calc(token2.paddingXS).div(2).equal();
    const treeToken = merge2(token2, {
      treeCls,
      treeNodeCls,
      treeNodePadding
    });
    return [
      // Basic
      genBaseStyle4(prefixCls, treeToken),
      // Directory
      genDirectoryStyle(treeToken)
    ];
  };
  var initComponentToken2 = (token2) => {
    const {
      controlHeightSM
    } = token2;
    return {
      titleHeight: controlHeightSM,
      nodeHoverBg: token2.controlItemBgHover,
      nodeSelectedBg: token2.controlItemBgActive
    };
  };
  var prepareComponentToken17 = (token2) => {
    const {
      colorTextLightSolid,
      colorPrimary
    } = token2;
    return Object.assign(Object.assign({}, initComponentToken2(token2)), {
      directoryNodeSelectedColor: colorTextLightSolid,
      directoryNodeSelectedBg: colorPrimary
    });
  };
  var style_default22 = genStyleHooks("Tree", (token2, _ref) => {
    let {
      prefixCls
    } = _ref;
    return [{
      [token2.componentCls]: getStyle2(`${prefixCls}-checkbox`, token2)
    }, genTreeStyle(prefixCls, token2), collapse_default(token2)];
  }, prepareComponentToken17);

  // node_modules/antd/es/tree/utils/dropIndicator.js
  var import_react110 = __toESM(require_react());
  var offset2 = 4;
  function dropIndicatorRender(props) {
    const {
      dropPosition,
      dropLevelOffset,
      prefixCls,
      indent,
      direction = "ltr"
    } = props;
    const startPosition = direction === "ltr" ? "left" : "right";
    const endPosition = direction === "ltr" ? "right" : "left";
    const style2 = {
      [startPosition]: -dropLevelOffset * indent + offset2,
      [endPosition]: 0
    };
    switch (dropPosition) {
      case -1:
        style2.top = -3;
        break;
      case 1:
        style2.bottom = -3;
        break;
      default:
        style2.bottom = -3;
        style2[startPosition] = indent + offset2;
        break;
    }
    return /* @__PURE__ */ import_react110.default.createElement("div", {
      style: style2,
      className: `${prefixCls}-drop-indicator`
    });
  }

  // node_modules/@ant-design/icons/es/icons/CaretDownFilled.js
  var React375 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CaretDownFilled.js
  var CaretDownFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "filled" };
  var CaretDownFilled_default = CaretDownFilled;

  // node_modules/@ant-design/icons/es/icons/CaretDownFilled.js
  var CaretDownFilled2 = function CaretDownFilled3(props, ref) {
    return /* @__PURE__ */ React375.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CaretDownFilled_default
    }));
  };
  if (true) {
    CaretDownFilled2.displayName = "CaretDownFilled";
  }
  var CaretDownFilled_default2 = /* @__PURE__ */ React375.forwardRef(CaretDownFilled2);

  // node_modules/@ant-design/icons/es/icons/MinusSquareOutlined.js
  var React376 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/MinusSquareOutlined.js
  var MinusSquareOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "minus-square", "theme": "outlined" };
  var MinusSquareOutlined_default = MinusSquareOutlined;

  // node_modules/@ant-design/icons/es/icons/MinusSquareOutlined.js
  var MinusSquareOutlined2 = function MinusSquareOutlined3(props, ref) {
    return /* @__PURE__ */ React376.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: MinusSquareOutlined_default
    }));
  };
  if (true) {
    MinusSquareOutlined2.displayName = "MinusSquareOutlined";
  }
  var MinusSquareOutlined_default2 = /* @__PURE__ */ React376.forwardRef(MinusSquareOutlined2);

  // node_modules/@ant-design/icons/es/icons/PlusSquareOutlined.js
  var React377 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/PlusSquareOutlined.js
  var PlusSquareOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "plus-square", "theme": "outlined" };
  var PlusSquareOutlined_default = PlusSquareOutlined;

  // node_modules/@ant-design/icons/es/icons/PlusSquareOutlined.js
  var PlusSquareOutlined2 = function PlusSquareOutlined3(props, ref) {
    return /* @__PURE__ */ React377.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: PlusSquareOutlined_default
    }));
  };
  if (true) {
    PlusSquareOutlined2.displayName = "PlusSquareOutlined";
  }
  var PlusSquareOutlined_default2 = /* @__PURE__ */ React377.forwardRef(PlusSquareOutlined2);

  // node_modules/antd/es/tree/utils/iconUtil.js
  var import_classnames133 = __toESM(require_classnames());
  var React378 = __toESM(require_react());
  var SwitcherIconCom = (props) => {
    const {
      prefixCls,
      switcherIcon,
      treeNodeProps,
      showLine
    } = props;
    const {
      isLeaf,
      expanded,
      loading
    } = treeNodeProps;
    if (loading) {
      return /* @__PURE__ */ React378.createElement(LoadingOutlined_default2, {
        className: `${prefixCls}-switcher-loading-icon`
      });
    }
    let showLeafIcon;
    if (showLine && typeof showLine === "object") {
      showLeafIcon = showLine.showLeafIcon;
    }
    if (isLeaf) {
      if (!showLine) {
        return null;
      }
      if (typeof showLeafIcon !== "boolean" && !!showLeafIcon) {
        const leafIcon = typeof showLeafIcon === "function" ? showLeafIcon(treeNodeProps) : showLeafIcon;
        const leafCls = `${prefixCls}-switcher-line-custom-icon`;
        if (isValidElement4(leafIcon)) {
          return cloneElement4(leafIcon, {
            className: (0, import_classnames133.default)(leafIcon.props.className || "", leafCls)
          });
        }
        return leafIcon;
      }
      return showLeafIcon ? /* @__PURE__ */ React378.createElement(FileOutlined_default2, {
        className: `${prefixCls}-switcher-line-icon`
      }) : /* @__PURE__ */ React378.createElement("span", {
        className: `${prefixCls}-switcher-leaf-line`
      });
    }
    const switcherCls = `${prefixCls}-switcher-icon`;
    const switcher = typeof switcherIcon === "function" ? switcherIcon(treeNodeProps) : switcherIcon;
    if (isValidElement4(switcher)) {
      return cloneElement4(switcher, {
        className: (0, import_classnames133.default)(switcher.props.className || "", switcherCls)
      });
    }
    if (switcher !== void 0) {
      return switcher;
    }
    if (showLine) {
      return expanded ? /* @__PURE__ */ React378.createElement(MinusSquareOutlined_default2, {
        className: `${prefixCls}-switcher-line-icon`
      }) : /* @__PURE__ */ React378.createElement(PlusSquareOutlined_default2, {
        className: `${prefixCls}-switcher-line-icon`
      });
    }
    return /* @__PURE__ */ React378.createElement(CaretDownFilled_default2, {
      className: switcherCls
    });
  };
  var iconUtil_default = SwitcherIconCom;

  // node_modules/antd/es/tree/Tree.js
  var Tree2 = /* @__PURE__ */ import_react111.default.forwardRef((props, ref) => {
    var _a;
    const {
      getPrefixCls,
      direction,
      virtual,
      tree
    } = import_react111.default.useContext(ConfigContext);
    const {
      prefixCls: customizePrefixCls,
      className,
      showIcon = false,
      showLine,
      switcherIcon,
      blockNode = false,
      children,
      checkable = false,
      selectable = true,
      draggable,
      motion: customMotion,
      style: style2
    } = props;
    const prefixCls = getPrefixCls("tree", customizePrefixCls);
    const rootPrefixCls = getPrefixCls();
    const motion2 = customMotion !== null && customMotion !== void 0 ? customMotion : Object.assign(Object.assign({}, motion_default(rootPrefixCls)), {
      motionAppear: false
    });
    const newProps = Object.assign(Object.assign({}, props), {
      checkable,
      selectable,
      showIcon,
      motion: motion2,
      blockNode,
      showLine: Boolean(showLine),
      dropIndicatorRender
    });
    const [wrapCSSVar, hashId, cssVarCls] = style_default22(prefixCls);
    const [, token2] = useToken();
    const itemHeight = token2.paddingXS / 2 + (((_a = token2.Tree) === null || _a === void 0 ? void 0 : _a.titleHeight) || token2.controlHeightSM);
    const draggableConfig = import_react111.default.useMemo(() => {
      if (!draggable) {
        return false;
      }
      let mergedDraggable = {};
      switch (typeof draggable) {
        case "function":
          mergedDraggable.nodeDraggable = draggable;
          break;
        case "object":
          mergedDraggable = Object.assign({}, draggable);
          break;
        default:
          break;
      }
      if (mergedDraggable.icon !== false) {
        mergedDraggable.icon = mergedDraggable.icon || /* @__PURE__ */ import_react111.default.createElement(HolderOutlined_default2, null);
      }
      return mergedDraggable;
    }, [draggable]);
    const renderSwitcherIcon = (nodeProps) => /* @__PURE__ */ import_react111.default.createElement(iconUtil_default, {
      prefixCls,
      switcherIcon,
      treeNodeProps: nodeProps,
      showLine
    });
    return wrapCSSVar(/* @__PURE__ */ import_react111.default.createElement(es_default18, Object.assign({
      itemHeight,
      ref,
      virtual
    }, newProps, {
      // newProps may contain style so declare style below it
      style: Object.assign(Object.assign({}, tree === null || tree === void 0 ? void 0 : tree.style), style2),
      prefixCls,
      className: (0, import_classnames134.default)({
        [`${prefixCls}-icon-hide`]: !showIcon,
        [`${prefixCls}-block-node`]: blockNode,
        [`${prefixCls}-unselectable`]: !selectable,
        [`${prefixCls}-rtl`]: direction === "rtl"
      }, tree === null || tree === void 0 ? void 0 : tree.className, className, hashId, cssVarCls),
      direction,
      checkable: checkable ? /* @__PURE__ */ import_react111.default.createElement("span", {
        className: `${prefixCls}-checkbox-inner`
      }) : checkable,
      selectable,
      switcherIcon: renderSwitcherIcon,
      draggable: draggableConfig
    }), children));
  });
  if (true) {
    Tree2.displayName = "Tree";
  }
  var Tree_default2 = Tree2;

  // node_modules/antd/es/tree/utils/dictUtil.js
  var Record;
  (function(Record2) {
    Record2[Record2["None"] = 0] = "None";
    Record2[Record2["Start"] = 1] = "Start";
    Record2[Record2["End"] = 2] = "End";
  })(Record || (Record = {}));
  function traverseNodesKey(treeData, callback, fieldNames) {
    const {
      key: fieldKey,
      children: fieldChildren
    } = fieldNames;
    function processNode(dataNode) {
      const key = dataNode[fieldKey];
      const children = dataNode[fieldChildren];
      if (callback(key, dataNode) !== false) {
        traverseNodesKey(children || [], callback, fieldNames);
      }
    }
    treeData.forEach(processNode);
  }
  function calcRangeKeys(_ref) {
    let {
      treeData,
      expandedKeys,
      startKey,
      endKey,
      fieldNames
    } = _ref;
    const keys2 = [];
    let record = Record.None;
    if (startKey && startKey === endKey) {
      return [startKey];
    }
    if (!startKey || !endKey) {
      return [];
    }
    function matchKey(key) {
      return key === startKey || key === endKey;
    }
    traverseNodesKey(treeData, (key) => {
      if (record === Record.End) {
        return false;
      }
      if (matchKey(key)) {
        keys2.push(key);
        if (record === Record.None) {
          record = Record.Start;
        } else if (record === Record.Start) {
          record = Record.End;
          return false;
        }
      } else if (record === Record.Start) {
        keys2.push(key);
      }
      return expandedKeys.includes(key);
    }, fillFieldNames2(fieldNames));
    return keys2;
  }
  function convertDirectoryKeysToNodes(treeData, keys2, fieldNames) {
    const restKeys = _toConsumableArray(keys2);
    const nodes = [];
    traverseNodesKey(treeData, (key, node2) => {
      const index2 = restKeys.indexOf(key);
      if (index2 !== -1) {
        nodes.push(node2);
        restKeys.splice(index2, 1);
      }
      return !!restKeys.length;
    }, fillFieldNames2(fieldNames));
    return nodes;
  }

  // node_modules/antd/es/tree/DirectoryTree.js
  var __rest46 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function getIcon(props) {
    const {
      isLeaf,
      expanded
    } = props;
    if (isLeaf) {
      return /* @__PURE__ */ React380.createElement(FileOutlined_default2, null);
    }
    return expanded ? /* @__PURE__ */ React380.createElement(FolderOpenOutlined_default2, null) : /* @__PURE__ */ React380.createElement(FolderOutlined_default2, null);
  }
  function getTreeData(_ref) {
    let {
      treeData,
      children
    } = _ref;
    return treeData || convertTreeToData(children);
  }
  var DirectoryTree = (_a, ref) => {
    var {
      defaultExpandAll,
      defaultExpandParent,
      defaultExpandedKeys
    } = _a, props = __rest46(_a, ["defaultExpandAll", "defaultExpandParent", "defaultExpandedKeys"]);
    const lastSelectedKey = React380.useRef();
    const cachedSelectedKeys = React380.useRef();
    const getInitExpandedKeys = () => {
      const {
        keyEntities
      } = convertDataToEntities(getTreeData(props));
      let initExpandedKeys;
      if (defaultExpandAll) {
        initExpandedKeys = Object.keys(keyEntities);
      } else if (defaultExpandParent) {
        initExpandedKeys = conductExpandParent(props.expandedKeys || defaultExpandedKeys || [], keyEntities);
      } else {
        initExpandedKeys = props.expandedKeys || defaultExpandedKeys;
      }
      return initExpandedKeys;
    };
    const [selectedKeys, setSelectedKeys] = React380.useState(props.selectedKeys || props.defaultSelectedKeys || []);
    const [expandedKeys, setExpandedKeys] = React380.useState(() => getInitExpandedKeys());
    React380.useEffect(() => {
      if ("selectedKeys" in props) {
        setSelectedKeys(props.selectedKeys);
      }
    }, [props.selectedKeys]);
    React380.useEffect(() => {
      if ("expandedKeys" in props) {
        setExpandedKeys(props.expandedKeys);
      }
    }, [props.expandedKeys]);
    const onExpand = (keys2, info) => {
      var _a2;
      if (!("expandedKeys" in props)) {
        setExpandedKeys(keys2);
      }
      return (_a2 = props.onExpand) === null || _a2 === void 0 ? void 0 : _a2.call(props, keys2, info);
    };
    const onSelect = (keys2, event) => {
      var _a2;
      const {
        multiple,
        fieldNames
      } = props;
      const {
        node: node2,
        nativeEvent
      } = event;
      const {
        key = ""
      } = node2;
      const treeData = getTreeData(props);
      const newEvent = Object.assign(Object.assign({}, event), {
        selected: true
      });
      const ctrlPick = (nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.ctrlKey) || (nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.metaKey);
      const shiftPick = nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.shiftKey;
      let newSelectedKeys;
      if (multiple && ctrlPick) {
        newSelectedKeys = keys2;
        lastSelectedKey.current = key;
        cachedSelectedKeys.current = newSelectedKeys;
        newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys, fieldNames);
      } else if (multiple && shiftPick) {
        newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(cachedSelectedKeys.current || []), _toConsumableArray(calcRangeKeys({
          treeData,
          expandedKeys,
          startKey: key,
          endKey: lastSelectedKey.current,
          fieldNames
        })))));
        newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys, fieldNames);
      } else {
        newSelectedKeys = [key];
        lastSelectedKey.current = key;
        cachedSelectedKeys.current = newSelectedKeys;
        newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys, fieldNames);
      }
      (_a2 = props.onSelect) === null || _a2 === void 0 ? void 0 : _a2.call(props, newSelectedKeys, newEvent);
      if (!("selectedKeys" in props)) {
        setSelectedKeys(newSelectedKeys);
      }
    };
    const {
      getPrefixCls,
      direction
    } = React380.useContext(ConfigContext);
    const {
      prefixCls: customizePrefixCls,
      className,
      showIcon = true,
      expandAction = "click"
    } = props, otherProps = __rest46(props, ["prefixCls", "className", "showIcon", "expandAction"]);
    const prefixCls = getPrefixCls("tree", customizePrefixCls);
    const connectClassName = (0, import_classnames135.default)(`${prefixCls}-directory`, {
      [`${prefixCls}-directory-rtl`]: direction === "rtl"
    }, className);
    return /* @__PURE__ */ React380.createElement(Tree_default2, Object.assign({
      icon: getIcon,
      ref,
      blockNode: true
    }, otherProps, {
      showIcon,
      expandAction,
      prefixCls,
      className: connectClassName,
      expandedKeys,
      selectedKeys,
      onSelect,
      onExpand
    }));
  };
  var ForwardDirectoryTree = /* @__PURE__ */ React380.forwardRef(DirectoryTree);
  if (true) {
    ForwardDirectoryTree.displayName = "DirectoryTree";
  }
  var DirectoryTree_default = ForwardDirectoryTree;

  // node_modules/antd/es/tree/index.js
  var Tree3 = Tree_default2;
  Tree3.DirectoryTree = DirectoryTree_default;
  Tree3.TreeNode = TreeNode_default;
  var tree_default = Tree3;

  // node_modules/antd/es/table/hooks/useFilter/FilterSearch.js
  var React381 = __toESM(require_react());
  function FilterSearch(_ref) {
    let {
      value,
      onChange,
      filterSearch,
      tablePrefixCls,
      locale: locale9
    } = _ref;
    if (!filterSearch) {
      return null;
    }
    return /* @__PURE__ */ React381.createElement("div", {
      className: `${tablePrefixCls}-filter-dropdown-search`
    }, /* @__PURE__ */ React381.createElement(input_default, {
      prefix: /* @__PURE__ */ React381.createElement(SearchOutlined_default2, null),
      placeholder: locale9.filterSearchPlaceholder,
      onChange,
      value,
      // for skip min-width of input
      htmlSize: 1,
      className: `${tablePrefixCls}-filter-dropdown-search-input`
    }));
  }
  var FilterSearch_default = FilterSearch;

  // node_modules/antd/es/table/hooks/useFilter/FilterWrapper.js
  var React382 = __toESM(require_react());
  var onKeyDown = (event) => {
    const {
      keyCode
    } = event;
    if (keyCode === KeyCode_default.ENTER) {
      event.stopPropagation();
    }
  };
  var FilterDropdownMenuWrapper = /* @__PURE__ */ React382.forwardRef((props, ref) => /* @__PURE__ */ React382.createElement("div", {
    className: props.className,
    onClick: (e3) => e3.stopPropagation(),
    onKeyDown,
    ref
  }, props.children));
  if (true) {
    FilterDropdownMenuWrapper.displayName = "FilterDropdownMenuWrapper";
  }
  var FilterWrapper_default = FilterDropdownMenuWrapper;

  // node_modules/antd/es/table/hooks/useFilter/FilterDropdown.js
  function flattenKeys(filters) {
    let keys2 = [];
    (filters || []).forEach((_ref) => {
      let {
        value,
        children
      } = _ref;
      keys2.push(value);
      if (children) {
        keys2 = [].concat(_toConsumableArray(keys2), _toConsumableArray(flattenKeys(children)));
      }
    });
    return keys2;
  }
  function hasSubMenu(filters) {
    return filters.some((_ref2) => {
      let {
        children
      } = _ref2;
      return children;
    });
  }
  function searchValueMatched(searchValue, text) {
    if (typeof text === "string" || typeof text === "number") {
      return text === null || text === void 0 ? void 0 : text.toString().toLowerCase().includes(searchValue.trim().toLowerCase());
    }
    return false;
  }
  function renderFilterItems(_ref3) {
    let {
      filters,
      prefixCls,
      filteredKeys,
      filterMultiple,
      searchValue,
      filterSearch
    } = _ref3;
    return filters.map((filter2, index2) => {
      const key = String(filter2.value);
      if (filter2.children) {
        return {
          key: key || index2,
          label: filter2.text,
          popupClassName: `${prefixCls}-dropdown-submenu`,
          children: renderFilterItems({
            filters: filter2.children,
            prefixCls,
            filteredKeys,
            filterMultiple,
            searchValue,
            filterSearch
          })
        };
      }
      const Component11 = filterMultiple ? checkbox_default : radio_default2;
      const item = {
        key: filter2.value !== void 0 ? key : index2,
        label: /* @__PURE__ */ React383.createElement(React383.Fragment, null, /* @__PURE__ */ React383.createElement(Component11, {
          checked: filteredKeys.includes(key)
        }), /* @__PURE__ */ React383.createElement("span", null, filter2.text))
      };
      if (searchValue.trim()) {
        if (typeof filterSearch === "function") {
          return filterSearch(searchValue, filter2) ? item : null;
        }
        return searchValueMatched(searchValue, filter2.text) ? item : null;
      }
      return item;
    });
  }
  function wrapStringListType(keys2) {
    return keys2 || [];
  }
  function FilterDropdown(props) {
    var _a, _b;
    const {
      tablePrefixCls,
      prefixCls,
      column: column2,
      dropdownPrefixCls,
      columnKey,
      filterMultiple,
      filterMode = "menu",
      filterSearch = false,
      filterState,
      triggerFilter,
      locale: locale9,
      children,
      getPopupContainer,
      rootClassName
    } = props;
    const {
      filterDropdownOpen,
      onFilterDropdownOpenChange,
      filterResetToDefaultFilteredValue,
      defaultFilteredValue,
      // Deprecated
      filterDropdownVisible,
      onFilterDropdownVisibleChange
    } = column2;
    const [visible, setVisible] = React383.useState(false);
    const filtered = !!(filterState && (((_a = filterState.filteredKeys) === null || _a === void 0 ? void 0 : _a.length) || filterState.forceFiltered));
    const triggerVisible = (newVisible) => {
      setVisible(newVisible);
      onFilterDropdownOpenChange === null || onFilterDropdownOpenChange === void 0 ? void 0 : onFilterDropdownOpenChange(newVisible);
      onFilterDropdownVisibleChange === null || onFilterDropdownVisibleChange === void 0 ? void 0 : onFilterDropdownVisibleChange(newVisible);
    };
    if (true) {
      const warning8 = devUseWarning("Table");
      [["filterDropdownVisible", "filterDropdownOpen", filterDropdownVisible], ["onFilterDropdownVisibleChange", "onFilterDropdownOpenChange", onFilterDropdownVisibleChange]].forEach((_ref4) => {
        let [deprecatedName, newName, prop] = _ref4;
        warning8.deprecated(prop === void 0 || prop === null, deprecatedName, newName);
      });
    }
    const mergedVisible = (_b = filterDropdownOpen !== null && filterDropdownOpen !== void 0 ? filterDropdownOpen : filterDropdownVisible) !== null && _b !== void 0 ? _b : visible;
    const propFilteredKeys = filterState === null || filterState === void 0 ? void 0 : filterState.filteredKeys;
    const [getFilteredKeysSync, setFilteredKeysSync] = useSyncState2(wrapStringListType(propFilteredKeys));
    const onSelectKeys = (_ref5) => {
      let {
        selectedKeys
      } = _ref5;
      setFilteredKeysSync(selectedKeys);
    };
    const onCheck = (keys2, _ref6) => {
      let {
        node: node2,
        checked
      } = _ref6;
      if (!filterMultiple) {
        onSelectKeys({
          selectedKeys: checked && node2.key ? [node2.key] : []
        });
      } else {
        onSelectKeys({
          selectedKeys: keys2
        });
      }
    };
    React383.useEffect(() => {
      if (!visible) {
        return;
      }
      onSelectKeys({
        selectedKeys: wrapStringListType(propFilteredKeys)
      });
    }, [propFilteredKeys]);
    const [openKeys, setOpenKeys] = React383.useState([]);
    const onOpenChange = (keys2) => {
      setOpenKeys(keys2);
    };
    const [searchValue, setSearchValue] = React383.useState("");
    const onSearch = (e3) => {
      const {
        value
      } = e3.target;
      setSearchValue(value);
    };
    React383.useEffect(() => {
      if (!visible) {
        setSearchValue("");
      }
    }, [visible]);
    const internalTriggerFilter = (keys2) => {
      const mergedKeys = keys2 && keys2.length ? keys2 : null;
      if (mergedKeys === null && (!filterState || !filterState.filteredKeys)) {
        return null;
      }
      if (isEqual_default(mergedKeys, filterState === null || filterState === void 0 ? void 0 : filterState.filteredKeys, true)) {
        return null;
      }
      triggerFilter({
        column: column2,
        key: columnKey,
        filteredKeys: mergedKeys
      });
    };
    const onConfirm = () => {
      triggerVisible(false);
      internalTriggerFilter(getFilteredKeysSync());
    };
    const onReset = function() {
      let {
        confirm: confirm3,
        closeDropdown
      } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        confirm: false,
        closeDropdown: false
      };
      if (confirm3) {
        internalTriggerFilter([]);
      }
      if (closeDropdown) {
        triggerVisible(false);
      }
      setSearchValue("");
      if (filterResetToDefaultFilteredValue) {
        setFilteredKeysSync((defaultFilteredValue || []).map((key) => String(key)));
      } else {
        setFilteredKeysSync([]);
      }
    };
    const doFilter = function() {
      let {
        closeDropdown
      } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        closeDropdown: true
      };
      if (closeDropdown) {
        triggerVisible(false);
      }
      internalTriggerFilter(getFilteredKeysSync());
    };
    const onVisibleChange = (newVisible, info) => {
      if (info.source === "trigger") {
        if (newVisible && propFilteredKeys !== void 0) {
          setFilteredKeysSync(wrapStringListType(propFilteredKeys));
        }
        triggerVisible(newVisible);
        if (!newVisible && !column2.filterDropdown) {
          onConfirm();
        }
      }
    };
    const dropdownMenuClass = (0, import_classnames136.default)({
      [`${dropdownPrefixCls}-menu-without-submenu`]: !hasSubMenu(column2.filters || [])
    });
    const onCheckAll = (e3) => {
      if (e3.target.checked) {
        const allFilterKeys = flattenKeys(column2 === null || column2 === void 0 ? void 0 : column2.filters).map((key) => String(key));
        setFilteredKeysSync(allFilterKeys);
      } else {
        setFilteredKeysSync([]);
      }
    };
    const getTreeData2 = (_ref7) => {
      let {
        filters
      } = _ref7;
      return (filters || []).map((filter2, index2) => {
        const key = String(filter2.value);
        const item = {
          title: filter2.text,
          key: filter2.value !== void 0 ? key : String(index2)
        };
        if (filter2.children) {
          item.children = getTreeData2({
            filters: filter2.children
          });
        }
        return item;
      });
    };
    const getFilterData2 = (node2) => {
      var _a2;
      return Object.assign(Object.assign({}, node2), {
        text: node2.title,
        value: node2.key,
        children: ((_a2 = node2.children) === null || _a2 === void 0 ? void 0 : _a2.map((item) => getFilterData2(item))) || []
      });
    };
    let dropdownContent;
    if (typeof column2.filterDropdown === "function") {
      dropdownContent = column2.filterDropdown({
        prefixCls: `${dropdownPrefixCls}-custom`,
        setSelectedKeys: (selectedKeys) => onSelectKeys({
          selectedKeys
        }),
        selectedKeys: getFilteredKeysSync(),
        confirm: doFilter,
        clearFilters: onReset,
        filters: column2.filters,
        visible: mergedVisible,
        close: () => {
          triggerVisible(false);
        }
      });
    } else if (column2.filterDropdown) {
      dropdownContent = column2.filterDropdown;
    } else {
      const selectedKeys = getFilteredKeysSync() || [];
      const getFilterComponent = () => {
        if ((column2.filters || []).length === 0) {
          return /* @__PURE__ */ React383.createElement(empty_default2, {
            image: empty_default2.PRESENTED_IMAGE_SIMPLE,
            description: locale9.filterEmptyText,
            imageStyle: {
              height: 24
            },
            style: {
              margin: 0,
              padding: "16px 0"
            }
          });
        }
        if (filterMode === "tree") {
          return /* @__PURE__ */ React383.createElement(React383.Fragment, null, /* @__PURE__ */ React383.createElement(FilterSearch_default, {
            filterSearch,
            value: searchValue,
            onChange: onSearch,
            tablePrefixCls,
            locale: locale9
          }), /* @__PURE__ */ React383.createElement("div", {
            className: `${tablePrefixCls}-filter-dropdown-tree`
          }, filterMultiple ? /* @__PURE__ */ React383.createElement(checkbox_default, {
            checked: selectedKeys.length === flattenKeys(column2.filters).length,
            indeterminate: selectedKeys.length > 0 && selectedKeys.length < flattenKeys(column2.filters).length,
            className: `${tablePrefixCls}-filter-dropdown-checkall`,
            onChange: onCheckAll
          }, locale9.filterCheckall) : null, /* @__PURE__ */ React383.createElement(tree_default, {
            checkable: true,
            selectable: false,
            blockNode: true,
            multiple: filterMultiple,
            checkStrictly: !filterMultiple,
            className: `${dropdownPrefixCls}-menu`,
            onCheck,
            checkedKeys: selectedKeys,
            selectedKeys,
            showIcon: false,
            treeData: getTreeData2({
              filters: column2.filters
            }),
            autoExpandParent: true,
            defaultExpandAll: true,
            filterTreeNode: searchValue.trim() ? (node2) => {
              if (typeof filterSearch === "function") {
                return filterSearch(searchValue, getFilterData2(node2));
              }
              return searchValueMatched(searchValue, node2.title);
            } : void 0
          })));
        }
        return /* @__PURE__ */ React383.createElement(React383.Fragment, null, /* @__PURE__ */ React383.createElement(FilterSearch_default, {
          filterSearch,
          value: searchValue,
          onChange: onSearch,
          tablePrefixCls,
          locale: locale9
        }), /* @__PURE__ */ React383.createElement(menu_default2, {
          selectable: true,
          multiple: filterMultiple,
          prefixCls: `${dropdownPrefixCls}-menu`,
          className: dropdownMenuClass,
          onSelect: onSelectKeys,
          onDeselect: onSelectKeys,
          selectedKeys,
          getPopupContainer,
          openKeys,
          onOpenChange,
          items: renderFilterItems({
            filters: column2.filters || [],
            filterSearch,
            prefixCls,
            filteredKeys: getFilteredKeysSync(),
            filterMultiple,
            searchValue
          })
        }));
      };
      const getResetDisabled = () => {
        if (filterResetToDefaultFilteredValue) {
          return isEqual_default((defaultFilteredValue || []).map((key) => String(key)), selectedKeys, true);
        }
        return selectedKeys.length === 0;
      };
      dropdownContent = /* @__PURE__ */ React383.createElement(React383.Fragment, null, getFilterComponent(), /* @__PURE__ */ React383.createElement("div", {
        className: `${prefixCls}-dropdown-btns`
      }, /* @__PURE__ */ React383.createElement(button_default2, {
        type: "link",
        size: "small",
        disabled: getResetDisabled(),
        onClick: () => onReset()
      }, locale9.filterReset), /* @__PURE__ */ React383.createElement(button_default2, {
        type: "primary",
        size: "small",
        onClick: onConfirm
      }, locale9.filterConfirm)));
    }
    if (column2.filterDropdown) {
      dropdownContent = /* @__PURE__ */ React383.createElement(OverrideProvider, {
        selectable: void 0
      }, dropdownContent);
    }
    const menu = () => /* @__PURE__ */ React383.createElement(FilterWrapper_default, {
      className: `${prefixCls}-dropdown`
    }, dropdownContent);
    let filterIcon;
    if (typeof column2.filterIcon === "function") {
      filterIcon = column2.filterIcon(filtered);
    } else if (column2.filterIcon) {
      filterIcon = column2.filterIcon;
    } else {
      filterIcon = /* @__PURE__ */ React383.createElement(FilterFilled_default2, null);
    }
    const {
      direction
    } = React383.useContext(ConfigContext);
    return /* @__PURE__ */ React383.createElement("div", {
      className: `${prefixCls}-column`
    }, /* @__PURE__ */ React383.createElement("span", {
      className: `${tablePrefixCls}-column-title`
    }, children), /* @__PURE__ */ React383.createElement(dropdown_default3, {
      dropdownRender: menu,
      trigger: ["click"],
      open: mergedVisible,
      onOpenChange: onVisibleChange,
      getPopupContainer,
      placement: direction === "rtl" ? "bottomLeft" : "bottomRight",
      rootClassName
    }, /* @__PURE__ */ React383.createElement("span", {
      role: "button",
      tabIndex: -1,
      className: (0, import_classnames136.default)(`${prefixCls}-trigger`, {
        active: filtered
      }),
      onClick: (e3) => {
        e3.stopPropagation();
      }
    }, filterIcon)));
  }
  var FilterDropdown_default = FilterDropdown;

  // node_modules/antd/es/table/hooks/useFilter/index.js
  function collectFilterStates(columns, init, pos) {
    let filterStates = [];
    (columns || []).forEach((column2, index2) => {
      var _a;
      const columnPos = getColumnPos(index2, pos);
      if (column2.filters || "filterDropdown" in column2 || "onFilter" in column2) {
        if ("filteredValue" in column2) {
          let filteredValues = column2.filteredValue;
          if (!("filterDropdown" in column2)) {
            filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;
          }
          filterStates.push({
            column: column2,
            key: getColumnKey(column2, columnPos),
            filteredKeys: filteredValues,
            forceFiltered: column2.filtered
          });
        } else {
          filterStates.push({
            column: column2,
            key: getColumnKey(column2, columnPos),
            filteredKeys: init && column2.defaultFilteredValue ? column2.defaultFilteredValue : void 0,
            forceFiltered: column2.filtered
          });
        }
      }
      if ("children" in column2) {
        filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column2.children, init, columnPos)));
      }
    });
    return filterStates;
  }
  function injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, locale9, triggerFilter, getPopupContainer, pos, rootClassName) {
    return columns.map((column2, index2) => {
      const columnPos = getColumnPos(index2, pos);
      const {
        filterMultiple = true,
        filterMode,
        filterSearch
      } = column2;
      let newColumn = column2;
      if (newColumn.filters || newColumn.filterDropdown) {
        const columnKey = getColumnKey(newColumn, columnPos);
        const filterState = filterStates.find((_ref) => {
          let {
            key
          } = _ref;
          return columnKey === key;
        });
        newColumn = Object.assign(Object.assign({}, newColumn), {
          title: (renderProps) => /* @__PURE__ */ React384.createElement(FilterDropdown_default, {
            tablePrefixCls: prefixCls,
            prefixCls: `${prefixCls}-filter`,
            dropdownPrefixCls,
            column: newColumn,
            columnKey,
            filterState,
            filterMultiple,
            filterMode,
            filterSearch,
            triggerFilter,
            locale: locale9,
            getPopupContainer,
            rootClassName
          }, renderColumnTitle(column2.title, renderProps))
        });
      }
      if ("children" in newColumn) {
        newColumn = Object.assign(Object.assign({}, newColumn), {
          children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, locale9, triggerFilter, getPopupContainer, columnPos, rootClassName)
        });
      }
      return newColumn;
    });
  }
  function generateFilterInfo(filterStates) {
    const currentFilters = {};
    filterStates.forEach((_ref2) => {
      let {
        key,
        filteredKeys,
        column: column2
      } = _ref2;
      const keyAsString = key;
      const {
        filters,
        filterDropdown
      } = column2;
      if (filterDropdown) {
        currentFilters[keyAsString] = filteredKeys || null;
      } else if (Array.isArray(filteredKeys)) {
        const keys2 = flattenKeys(filters);
        currentFilters[keyAsString] = keys2.filter((originKey) => filteredKeys.includes(String(originKey)));
      } else {
        currentFilters[keyAsString] = null;
      }
    });
    return currentFilters;
  }
  function getFilterData(data, filterStates, childrenColumnName) {
    return filterStates.reduce((currentData, filterState) => {
      const {
        column: {
          onFilter,
          filters
        },
        filteredKeys
      } = filterState;
      if (onFilter && filteredKeys && filteredKeys.length) {
        return currentData.map((record) => Object.assign({}, record)).filter((record) => filteredKeys.some((key) => {
          const keys2 = flattenKeys(filters);
          const keyIndex = keys2.findIndex((k) => String(k) === String(key));
          const realKey = keyIndex !== -1 ? keys2[keyIndex] : key;
          if (record[childrenColumnName]) {
            record[childrenColumnName] = getFilterData(record[childrenColumnName], filterStates, childrenColumnName);
          }
          return onFilter(realKey, record);
        }));
      }
      return currentData;
    }, data);
  }
  var getMergedColumns = (rawMergedColumns) => rawMergedColumns.flatMap((column2) => {
    if ("children" in column2) {
      return [column2].concat(_toConsumableArray(getMergedColumns(column2.children || [])));
    }
    return [column2];
  });
  function useFilter(_ref3) {
    let {
      prefixCls,
      dropdownPrefixCls,
      mergedColumns: rawMergedColumns,
      onFilterChange,
      getPopupContainer,
      locale: tableLocale,
      rootClassName
    } = _ref3;
    const warning8 = devUseWarning("Table");
    const mergedColumns = React384.useMemo(() => getMergedColumns(rawMergedColumns || []), [rawMergedColumns]);
    const [filterStates, setFilterStates] = React384.useState(() => collectFilterStates(mergedColumns, true));
    const mergedFilterStates = React384.useMemo(() => {
      const collectedStates = collectFilterStates(mergedColumns, false);
      if (collectedStates.length === 0) {
        return collectedStates;
      }
      let filteredKeysIsAllNotControlled = true;
      let filteredKeysIsAllControlled = true;
      collectedStates.forEach((_ref4) => {
        let {
          filteredKeys
        } = _ref4;
        if (filteredKeys !== void 0) {
          filteredKeysIsAllNotControlled = false;
        } else {
          filteredKeysIsAllControlled = false;
        }
      });
      if (filteredKeysIsAllNotControlled) {
        const keyList = (mergedColumns || []).map((column2, index2) => getColumnKey(column2, getColumnPos(index2)));
        return filterStates.filter((_ref5) => {
          let {
            key
          } = _ref5;
          return keyList.includes(key);
        }).map((item) => {
          const col = mergedColumns[keyList.findIndex((key) => key === item.key)];
          return Object.assign(Object.assign({}, item), {
            column: Object.assign(Object.assign({}, item.column), col),
            forceFiltered: col.filtered
          });
        });
      }
      true ? warning8(filteredKeysIsAllControlled, "usage", "Columns should all contain `filteredValue` or not contain `filteredValue`.") : void 0;
      return collectedStates;
    }, [mergedColumns, filterStates]);
    const filters = React384.useMemo(() => generateFilterInfo(mergedFilterStates), [mergedFilterStates]);
    const triggerFilter = (filterState) => {
      const newFilterStates = mergedFilterStates.filter((_ref6) => {
        let {
          key
        } = _ref6;
        return key !== filterState.key;
      });
      newFilterStates.push(filterState);
      setFilterStates(newFilterStates);
      onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);
    };
    const transformColumns = (innerColumns) => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, tableLocale, triggerFilter, getPopupContainer, void 0, rootClassName);
    return [transformColumns, mergedFilterStates, filters];
  }
  var useFilter_default = useFilter;

  // node_modules/antd/es/table/hooks/useLazyKVMap.js
  var React385 = __toESM(require_react());
  function useLazyKVMap(data, childrenColumnName, getRowKey) {
    const mapCacheRef = React385.useRef({});
    function getRecordByKey(key) {
      if (!mapCacheRef.current || mapCacheRef.current.data !== data || mapCacheRef.current.childrenColumnName !== childrenColumnName || mapCacheRef.current.getRowKey !== getRowKey) {
        let dig = function(records) {
          records.forEach((record, index2) => {
            const rowKey = getRowKey(record, index2);
            kvMap.set(rowKey, record);
            if (record && typeof record === "object" && childrenColumnName in record) {
              dig(record[childrenColumnName] || []);
            }
          });
        };
        const kvMap = /* @__PURE__ */ new Map();
        dig(data);
        mapCacheRef.current = {
          data,
          childrenColumnName,
          kvMap,
          getRowKey
        };
      }
      return mapCacheRef.current.kvMap.get(key);
    }
    return [getRecordByKey];
  }

  // node_modules/antd/es/table/hooks/usePagination.js
  var import_react112 = __toESM(require_react());
  var __rest47 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var DEFAULT_PAGE_SIZE = 10;
  function getPaginationParam(mergedPagination, pagination) {
    const param = {
      current: mergedPagination.current,
      pageSize: mergedPagination.pageSize
    };
    const paginationObj = pagination && typeof pagination === "object" ? pagination : {};
    Object.keys(paginationObj).forEach((pageProp) => {
      const value = mergedPagination[pageProp];
      if (typeof value !== "function") {
        param[pageProp] = value;
      }
    });
    return param;
  }
  function usePagination(total, onChange, pagination) {
    const _a = pagination && typeof pagination === "object" ? pagination : {}, {
      total: paginationTotal = 0
    } = _a, paginationObj = __rest47(_a, ["total"]);
    const [innerPagination, setInnerPagination] = (0, import_react112.useState)(() => ({
      current: "defaultCurrent" in paginationObj ? paginationObj.defaultCurrent : 1,
      pageSize: "defaultPageSize" in paginationObj ? paginationObj.defaultPageSize : DEFAULT_PAGE_SIZE
    }));
    const mergedPagination = extendsObject_default(innerPagination, paginationObj, {
      total: paginationTotal > 0 ? paginationTotal : total
    });
    const maxPage = Math.ceil((paginationTotal || total) / mergedPagination.pageSize);
    if (mergedPagination.current > maxPage) {
      mergedPagination.current = maxPage || 1;
    }
    const refreshPagination = (current2, pageSize) => {
      setInnerPagination({
        current: current2 !== null && current2 !== void 0 ? current2 : 1,
        pageSize: pageSize || mergedPagination.pageSize
      });
    };
    const onInternalChange = (current2, pageSize) => {
      var _a2;
      if (pagination) {
        (_a2 = pagination.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(pagination, current2, pageSize);
      }
      refreshPagination(current2, pageSize);
      onChange(current2, pageSize || (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.pageSize));
    };
    if (pagination === false) {
      return [{}, () => {
      }];
    }
    return [Object.assign(Object.assign({}, mergedPagination), {
      onChange: onInternalChange
    }), refreshPagination];
  }
  var usePagination_default = usePagination;

  // node_modules/@ant-design/icons/es/icons/CaretDownOutlined.js
  var React386 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CaretDownOutlined.js
  var CaretDownOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "outlined" };
  var CaretDownOutlined_default = CaretDownOutlined;

  // node_modules/@ant-design/icons/es/icons/CaretDownOutlined.js
  var CaretDownOutlined2 = function CaretDownOutlined3(props, ref) {
    return /* @__PURE__ */ React386.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CaretDownOutlined_default
    }));
  };
  if (true) {
    CaretDownOutlined2.displayName = "CaretDownOutlined";
  }
  var CaretDownOutlined_default2 = /* @__PURE__ */ React386.forwardRef(CaretDownOutlined2);

  // node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js
  var React387 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CaretUpOutlined.js
  var CaretUpOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z" } }] }, "name": "caret-up", "theme": "outlined" };
  var CaretUpOutlined_default = CaretUpOutlined;

  // node_modules/@ant-design/icons/es/icons/CaretUpOutlined.js
  var CaretUpOutlined2 = function CaretUpOutlined3(props, ref) {
    return /* @__PURE__ */ React387.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CaretUpOutlined_default
    }));
  };
  if (true) {
    CaretUpOutlined2.displayName = "CaretUpOutlined";
  }
  var CaretUpOutlined_default2 = /* @__PURE__ */ React387.forwardRef(CaretUpOutlined2);

  // node_modules/antd/es/table/hooks/useSorter.js
  var import_classnames137 = __toESM(require_classnames());
  var React388 = __toESM(require_react());
  var ASCEND = "ascend";
  var DESCEND = "descend";
  function getMultiplePriority(column2) {
    if (typeof column2.sorter === "object" && typeof column2.sorter.multiple === "number") {
      return column2.sorter.multiple;
    }
    return false;
  }
  function getSortFunction(sorter) {
    if (typeof sorter === "function") {
      return sorter;
    }
    if (sorter && typeof sorter === "object" && sorter.compare) {
      return sorter.compare;
    }
    return false;
  }
  function nextSortDirection(sortDirections, current2) {
    if (!current2) {
      return sortDirections[0];
    }
    return sortDirections[sortDirections.indexOf(current2) + 1];
  }
  function collectSortStates(columns, init, pos) {
    let sortStates = [];
    function pushState(column2, columnPos) {
      sortStates.push({
        column: column2,
        key: getColumnKey(column2, columnPos),
        multiplePriority: getMultiplePriority(column2),
        sortOrder: column2.sortOrder
      });
    }
    (columns || []).forEach((column2, index2) => {
      const columnPos = getColumnPos(index2, pos);
      if (column2.children) {
        if ("sortOrder" in column2) {
          pushState(column2, columnPos);
        }
        sortStates = [].concat(_toConsumableArray(sortStates), _toConsumableArray(collectSortStates(column2.children, init, columnPos)));
      } else if (column2.sorter) {
        if ("sortOrder" in column2) {
          pushState(column2, columnPos);
        } else if (init && column2.defaultSortOrder) {
          sortStates.push({
            column: column2,
            key: getColumnKey(column2, columnPos),
            multiplePriority: getMultiplePriority(column2),
            sortOrder: column2.defaultSortOrder
          });
        }
      }
    });
    return sortStates;
  }
  function injectSorter(prefixCls, columns, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, pos) {
    return (columns || []).map((column2, index2) => {
      const columnPos = getColumnPos(index2, pos);
      let newColumn = column2;
      if (newColumn.sorter) {
        const sortDirections = newColumn.sortDirections || defaultSortDirections;
        const showSorterTooltip = newColumn.showSorterTooltip === void 0 ? tableShowSorterTooltip : newColumn.showSorterTooltip;
        const columnKey = getColumnKey(newColumn, columnPos);
        const sorterState = sorterStates.find((_ref) => {
          let {
            key
          } = _ref;
          return key === columnKey;
        });
        const sortOrder = sorterState ? sorterState.sortOrder : null;
        const nextSortOrder = nextSortDirection(sortDirections, sortOrder);
        let sorter;
        if (column2.sortIcon) {
          sorter = column2.sortIcon({
            sortOrder
          });
        } else {
          const upNode = sortDirections.includes(ASCEND) && /* @__PURE__ */ React388.createElement(CaretUpOutlined_default2, {
            className: (0, import_classnames137.default)(`${prefixCls}-column-sorter-up`, {
              active: sortOrder === ASCEND
            })
          });
          const downNode = sortDirections.includes(DESCEND) && /* @__PURE__ */ React388.createElement(CaretDownOutlined_default2, {
            className: (0, import_classnames137.default)(`${prefixCls}-column-sorter-down`, {
              active: sortOrder === DESCEND
            })
          });
          sorter = /* @__PURE__ */ React388.createElement("span", {
            className: (0, import_classnames137.default)(`${prefixCls}-column-sorter`, {
              [`${prefixCls}-column-sorter-full`]: !!(upNode && downNode)
            })
          }, /* @__PURE__ */ React388.createElement("span", {
            className: `${prefixCls}-column-sorter-inner`,
            "aria-hidden": "true"
          }, upNode, downNode));
        }
        const {
          cancelSort,
          triggerAsc,
          triggerDesc
        } = tableLocale || {};
        let sortTip = cancelSort;
        if (nextSortOrder === DESCEND) {
          sortTip = triggerDesc;
        } else if (nextSortOrder === ASCEND) {
          sortTip = triggerAsc;
        }
        const tooltipProps = typeof showSorterTooltip === "object" ? Object.assign({
          title: sortTip
        }, showSorterTooltip) : {
          title: sortTip
        };
        newColumn = Object.assign(Object.assign({}, newColumn), {
          className: (0, import_classnames137.default)(newColumn.className, {
            [`${prefixCls}-column-sort`]: sortOrder
          }),
          title: (renderProps) => {
            const renderSortTitle = /* @__PURE__ */ React388.createElement("div", {
              className: `${prefixCls}-column-sorters`
            }, /* @__PURE__ */ React388.createElement("span", {
              className: `${prefixCls}-column-title`
            }, renderColumnTitle(column2.title, renderProps)), sorter);
            return showSorterTooltip ? /* @__PURE__ */ React388.createElement(tooltip_default, Object.assign({}, tooltipProps), renderSortTitle) : renderSortTitle;
          },
          onHeaderCell: (col) => {
            const cell = column2.onHeaderCell && column2.onHeaderCell(col) || {};
            const originOnClick = cell.onClick;
            const originOKeyDown = cell.onKeyDown;
            cell.onClick = (event) => {
              triggerSorter({
                column: column2,
                key: columnKey,
                sortOrder: nextSortOrder,
                multiplePriority: getMultiplePriority(column2)
              });
              originOnClick === null || originOnClick === void 0 ? void 0 : originOnClick(event);
            };
            cell.onKeyDown = (event) => {
              if (event.keyCode === KeyCode_default.ENTER) {
                triggerSorter({
                  column: column2,
                  key: columnKey,
                  sortOrder: nextSortOrder,
                  multiplePriority: getMultiplePriority(column2)
                });
                originOKeyDown === null || originOKeyDown === void 0 ? void 0 : originOKeyDown(event);
              }
            };
            const renderTitle = safeColumnTitle(column2.title, {});
            const displayTitle = renderTitle === null || renderTitle === void 0 ? void 0 : renderTitle.toString();
            if (sortOrder) {
              cell["aria-sort"] = sortOrder === "ascend" ? "ascending" : "descending";
            } else {
              cell["aria-label"] = displayTitle || "";
            }
            cell.className = (0, import_classnames137.default)(cell.className, `${prefixCls}-column-has-sorters`);
            cell.tabIndex = 0;
            if (column2.ellipsis) {
              cell.title = (renderTitle !== null && renderTitle !== void 0 ? renderTitle : "").toString();
            }
            return cell;
          }
        });
      }
      if ("children" in newColumn) {
        newColumn = Object.assign(Object.assign({}, newColumn), {
          children: injectSorter(prefixCls, newColumn.children, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, columnPos)
        });
      }
      return newColumn;
    });
  }
  function stateToInfo(sorterStates) {
    const {
      column: column2,
      sortOrder
    } = sorterStates;
    return {
      column: column2,
      order: sortOrder,
      field: column2.dataIndex,
      columnKey: column2.key
    };
  }
  function generateSorterInfo(sorterStates) {
    const list = sorterStates.filter((_ref2) => {
      let {
        sortOrder
      } = _ref2;
      return sortOrder;
    }).map(stateToInfo);
    if (list.length === 0 && sorterStates.length) {
      return Object.assign(Object.assign({}, stateToInfo(sorterStates[sorterStates.length - 1])), {
        column: void 0
      });
    }
    if (list.length <= 1) {
      return list[0] || {};
    }
    return list;
  }
  function getSortData(data, sortStates, childrenColumnName) {
    const innerSorterStates = sortStates.slice().sort((a, b) => b.multiplePriority - a.multiplePriority);
    const cloneData = data.slice();
    const runningSorters = innerSorterStates.filter((_ref3) => {
      let {
        column: {
          sorter
        },
        sortOrder
      } = _ref3;
      return getSortFunction(sorter) && sortOrder;
    });
    if (!runningSorters.length) {
      return cloneData;
    }
    return cloneData.sort((record1, record2) => {
      for (let i = 0; i < runningSorters.length; i += 1) {
        const sorterState = runningSorters[i];
        const {
          column: {
            sorter
          },
          sortOrder
        } = sorterState;
        const compareFn = getSortFunction(sorter);
        if (compareFn && sortOrder) {
          const compareResult = compareFn(record1, record2, sortOrder);
          if (compareResult !== 0) {
            return sortOrder === ASCEND ? compareResult : -compareResult;
          }
        }
      }
      return 0;
    }).map((record) => {
      const subRecords = record[childrenColumnName];
      if (subRecords) {
        return Object.assign(Object.assign({}, record), {
          [childrenColumnName]: getSortData(subRecords, sortStates, childrenColumnName)
        });
      }
      return record;
    });
  }
  function useFilterSorter(_ref4) {
    let {
      prefixCls,
      mergedColumns,
      onSorterChange,
      sortDirections,
      tableLocale,
      showSorterTooltip
    } = _ref4;
    const [sortStates, setSortStates] = React388.useState(collectSortStates(mergedColumns, true));
    const mergedSorterStates = React388.useMemo(() => {
      let validate = true;
      const collectedStates = collectSortStates(mergedColumns, false);
      if (!collectedStates.length) {
        return sortStates;
      }
      const validateStates = [];
      function patchStates(state) {
        if (validate) {
          validateStates.push(state);
        } else {
          validateStates.push(Object.assign(Object.assign({}, state), {
            sortOrder: null
          }));
        }
      }
      let multipleMode = null;
      collectedStates.forEach((state) => {
        if (multipleMode === null) {
          patchStates(state);
          if (state.sortOrder) {
            if (state.multiplePriority === false) {
              validate = false;
            } else {
              multipleMode = true;
            }
          }
        } else if (multipleMode && state.multiplePriority !== false) {
          patchStates(state);
        } else {
          validate = false;
          patchStates(state);
        }
      });
      return validateStates;
    }, [mergedColumns, sortStates]);
    const columnTitleSorterProps = React388.useMemo(() => {
      const sortColumns = mergedSorterStates.map((_ref5) => {
        let {
          column: column2,
          sortOrder
        } = _ref5;
        return {
          column: column2,
          order: sortOrder
        };
      });
      return {
        sortColumns,
        // Legacy
        sortColumn: sortColumns[0] && sortColumns[0].column,
        sortOrder: sortColumns[0] && sortColumns[0].order
      };
    }, [mergedSorterStates]);
    function triggerSorter(sortState) {
      let newSorterStates;
      if (sortState.multiplePriority === false || !mergedSorterStates.length || mergedSorterStates[0].multiplePriority === false) {
        newSorterStates = [sortState];
      } else {
        newSorterStates = [].concat(_toConsumableArray(mergedSorterStates.filter((_ref6) => {
          let {
            key
          } = _ref6;
          return key !== sortState.key;
        })), [sortState]);
      }
      setSortStates(newSorterStates);
      onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);
    }
    const transformColumns = (innerColumns) => injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections, tableLocale, showSorterTooltip);
    const getSorters = () => generateSorterInfo(mergedSorterStates);
    return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];
  }

  // node_modules/antd/es/table/hooks/useTitleColumns.js
  var React389 = __toESM(require_react());
  function fillTitle(columns, columnTitleProps) {
    return columns.map((column2) => {
      const cloneColumn = Object.assign({}, column2);
      cloneColumn.title = renderColumnTitle(column2.title, columnTitleProps);
      if ("children" in cloneColumn) {
        cloneColumn.children = fillTitle(cloneColumn.children, columnTitleProps);
      }
      return cloneColumn;
    });
  }
  function useTitleColumns(columnTitleProps) {
    const filledColumns = React389.useCallback((columns) => fillTitle(columns, columnTitleProps), [columnTitleProps]);
    return [filledColumns];
  }

  // node_modules/antd/es/table/RcTable/index.js
  var RcTable_default = genTable((prev2, next2) => {
    const {
      _renderTimes: prevRenderTimes
    } = prev2;
    const {
      _renderTimes: nextRenderTimes
    } = next2;
    return prevRenderTimes !== nextRenderTimes;
  });

  // node_modules/antd/es/table/RcTable/VirtualTable.js
  var VirtualTable_default2 = genVirtualTable((prev2, next2) => {
    const {
      _renderTimes: prevRenderTimes
    } = prev2;
    const {
      _renderTimes: nextRenderTimes
    } = next2;
    return prevRenderTimes !== nextRenderTimes;
  });

  // node_modules/antd/es/table/style/bordered.js
  var genBorderedStyle2 = (token2) => {
    const {
      componentCls,
      lineWidth,
      lineType,
      tableBorderColor,
      tableHeaderBg,
      tablePaddingVertical,
      tablePaddingHorizontal,
      calc
    } = token2;
    const tableBorder = `${unit(lineWidth)} ${lineType} ${tableBorderColor}`;
    const getSizeBorderStyle = (size, paddingVertical, paddingHorizontal) => ({
      [`&${componentCls}-${size}`]: {
        [`> ${componentCls}-container`]: {
          [`> ${componentCls}-content, > ${componentCls}-body`]: {
            [`
            > table > tbody > tr > th,
            > table > tbody > tr > td
          `]: {
              [`> ${componentCls}-expanded-row-fixed`]: {
                margin: `${unit(calc(paddingVertical).mul(-1).equal())}
              ${unit(calc(calc(paddingHorizontal).add(lineWidth)).mul(-1).equal())}`
              }
            }
          }
        }
      }
    });
    return {
      [`${componentCls}-wrapper`]: {
        [`${componentCls}${componentCls}-bordered`]: Object.assign(Object.assign(Object.assign({
          // ============================ Title =============================
          [`> ${componentCls}-title`]: {
            border: tableBorder,
            borderBottom: 0
          },
          // ============================ Content ============================
          [`> ${componentCls}-container`]: {
            borderInlineStart: tableBorder,
            borderTop: tableBorder,
            [`
            > ${componentCls}-content,
            > ${componentCls}-header,
            > ${componentCls}-body,
            > ${componentCls}-summary
          `]: {
              "> table": {
                // ============================= Cell =============================
                [`
                > thead > tr > th,
                > thead > tr > td,
                > tbody > tr > th,
                > tbody > tr > td,
                > tfoot > tr > th,
                > tfoot > tr > td
              `]: {
                  borderInlineEnd: tableBorder
                },
                // ============================ Header ============================
                "> thead": {
                  "> tr:not(:last-child) > th": {
                    borderBottom: tableBorder
                  },
                  "> tr > th::before": {
                    backgroundColor: "transparent !important"
                  }
                },
                // Fixed right should provides additional border
                [`
                > thead > tr,
                > tbody > tr,
                > tfoot > tr
              `]: {
                  [`> ${componentCls}-cell-fix-right-first::after`]: {
                    borderInlineEnd: tableBorder
                  }
                },
                // ========================== Expandable ==========================
                [`
                > tbody > tr > th,
                > tbody > tr > td
              `]: {
                  [`> ${componentCls}-expanded-row-fixed`]: {
                    margin: `${unit(calc(tablePaddingVertical).mul(-1).equal())} ${unit(calc(calc(tablePaddingHorizontal).add(lineWidth)).mul(-1).equal())}`,
                    "&::after": {
                      position: "absolute",
                      top: 0,
                      insetInlineEnd: lineWidth,
                      bottom: 0,
                      borderInlineEnd: tableBorder,
                      content: '""'
                    }
                  }
                }
              }
            }
          },
          // ============================ Scroll ============================
          [`&${componentCls}-scroll-horizontal`]: {
            [`> ${componentCls}-container > ${componentCls}-body`]: {
              "> table > tbody": {
                [`
                > tr${componentCls}-expanded-row,
                > tr${componentCls}-placeholder
              `]: {
                  [`> th, > td`]: {
                    borderInlineEnd: 0
                  }
                }
              }
            }
          }
        }, getSizeBorderStyle("middle", token2.tablePaddingVerticalMiddle, token2.tablePaddingHorizontalMiddle)), getSizeBorderStyle("small", token2.tablePaddingVerticalSmall, token2.tablePaddingHorizontalSmall)), {
          // ============================ Footer ============================
          [`> ${componentCls}-footer`]: {
            border: tableBorder,
            borderTop: 0
          }
        }),
        // ============================ Nested ============================
        [`${componentCls}-cell`]: {
          [`${componentCls}-container:first-child`]: {
            // :first-child to avoid the case when bordered and title is set
            borderTop: 0
          },
          // https://github.com/ant-design/ant-design/issues/35577
          "&-scrollbar:not([rowspan])": {
            boxShadow: `0 ${unit(lineWidth)} 0 ${unit(lineWidth)} ${tableHeaderBg}`
          }
        },
        [`${componentCls}-bordered ${componentCls}-cell-scrollbar`]: {
          borderInlineEnd: tableBorder
        }
      }
    };
  };
  var bordered_default2 = genBorderedStyle2;

  // node_modules/antd/es/table/style/ellipsis.js
  var genEllipsisStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-wrapper`]: {
        [`${componentCls}-cell-ellipsis`]: Object.assign(Object.assign({}, textEllipsis), {
          wordBreak: "keep-all",
          // Fixed first or last should special process
          [`
          &${componentCls}-cell-fix-left-last,
          &${componentCls}-cell-fix-right-first
        `]: {
            overflow: "visible",
            [`${componentCls}-cell-content`]: {
              display: "block",
              overflow: "hidden",
              textOverflow: "ellipsis"
            }
          },
          [`${componentCls}-column-title`]: {
            overflow: "hidden",
            textOverflow: "ellipsis",
            wordBreak: "keep-all"
          }
        })
      }
    };
  };
  var ellipsis_default = genEllipsisStyle;

  // node_modules/antd/es/table/style/empty.js
  var genEmptyStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-wrapper`]: {
        [`${componentCls}-tbody > tr${componentCls}-placeholder`]: {
          textAlign: "center",
          color: token2.colorTextDisabled,
          [`
          &:hover > th,
          &:hover > td,
        `]: {
            background: token2.colorBgContainer
          }
        }
      }
    };
  };
  var empty_default3 = genEmptyStyle;

  // node_modules/antd/es/table/style/expand.js
  var genExpandStyle = (token2) => {
    const {
      componentCls,
      antCls,
      motionDurationSlow,
      lineWidth,
      paddingXS,
      lineType,
      tableBorderColor,
      tableExpandIconBg,
      tableExpandColumnWidth,
      borderRadius,
      tablePaddingVertical,
      tablePaddingHorizontal,
      tableExpandedRowBg,
      paddingXXS,
      expandIconMarginTop,
      expandIconSize,
      expandIconHalfInner,
      expandIconScale,
      calc
    } = token2;
    const tableBorder = `${unit(lineWidth)} ${lineType} ${tableBorderColor}`;
    const expandIconLineOffset = calc(paddingXXS).sub(lineWidth).equal();
    return {
      [`${componentCls}-wrapper`]: {
        [`${componentCls}-expand-icon-col`]: {
          width: tableExpandColumnWidth
        },
        [`${componentCls}-row-expand-icon-cell`]: {
          textAlign: "center",
          [`${componentCls}-row-expand-icon`]: {
            display: "inline-flex",
            float: "none",
            verticalAlign: "sub"
          }
        },
        [`${componentCls}-row-indent`]: {
          height: 1,
          float: "left"
        },
        [`${componentCls}-row-expand-icon`]: Object.assign(Object.assign({}, operationUnit(token2)), {
          position: "relative",
          float: "left",
          boxSizing: "border-box",
          width: expandIconSize,
          height: expandIconSize,
          padding: 0,
          color: "inherit",
          lineHeight: unit(expandIconSize),
          background: tableExpandIconBg,
          border: tableBorder,
          borderRadius,
          transform: `scale(${expandIconScale})`,
          transition: `all ${motionDurationSlow}`,
          userSelect: "none",
          [`&:focus, &:hover, &:active`]: {
            borderColor: "currentcolor"
          },
          [`&::before, &::after`]: {
            position: "absolute",
            background: "currentcolor",
            transition: `transform ${motionDurationSlow} ease-out`,
            content: '""'
          },
          "&::before": {
            top: expandIconHalfInner,
            insetInlineEnd: expandIconLineOffset,
            insetInlineStart: expandIconLineOffset,
            height: lineWidth
          },
          "&::after": {
            top: expandIconLineOffset,
            bottom: expandIconLineOffset,
            insetInlineStart: expandIconHalfInner,
            width: lineWidth,
            transform: "rotate(90deg)"
          },
          // Motion effect
          "&-collapsed::before": {
            transform: "rotate(-180deg)"
          },
          "&-collapsed::after": {
            transform: "rotate(0deg)"
          },
          "&-spaced": {
            "&::before, &::after": {
              display: "none",
              content: "none"
            },
            background: "transparent",
            border: 0,
            visibility: "hidden"
          }
        }),
        [`${componentCls}-row-indent + ${componentCls}-row-expand-icon`]: {
          marginTop: expandIconMarginTop,
          marginInlineEnd: paddingXS
        },
        [`tr${componentCls}-expanded-row`]: {
          "&, &:hover": {
            [`> th, > td`]: {
              background: tableExpandedRowBg
            }
          },
          // https://github.com/ant-design/ant-design/issues/25573
          [`${antCls}-descriptions-view`]: {
            display: "flex",
            table: {
              flex: "auto",
              width: "auto"
            }
          }
        },
        // With fixed
        [`${componentCls}-expanded-row-fixed`]: {
          position: "relative",
          margin: `${unit(calc(tablePaddingVertical).mul(-1).equal())} ${unit(calc(tablePaddingHorizontal).mul(-1).equal())}`,
          padding: `${unit(tablePaddingVertical)} ${unit(tablePaddingHorizontal)}`
        }
      }
    };
  };
  var expand_default = genExpandStyle;

  // node_modules/antd/es/table/style/filter.js
  var genFilterStyle = (token2) => {
    const {
      componentCls,
      antCls,
      iconCls,
      tableFilterDropdownWidth,
      tableFilterDropdownSearchWidth,
      paddingXXS,
      paddingXS,
      colorText,
      lineWidth,
      lineType,
      tableBorderColor,
      headerIconColor,
      fontSizeSM,
      tablePaddingHorizontal,
      borderRadius,
      motionDurationSlow,
      colorTextDescription,
      colorPrimary,
      tableHeaderFilterActiveBg,
      colorTextDisabled,
      tableFilterDropdownBg,
      tableFilterDropdownHeight,
      controlItemBgHover,
      controlItemBgActive,
      boxShadowSecondary,
      filterDropdownMenuBg,
      calc
    } = token2;
    const dropdownPrefixCls = `${antCls}-dropdown`;
    const tableFilterDropdownPrefixCls = `${componentCls}-filter-dropdown`;
    const treePrefixCls = `${antCls}-tree`;
    const tableBorder = `${unit(lineWidth)} ${lineType} ${tableBorderColor}`;
    return [
      {
        [`${componentCls}-wrapper`]: {
          [`${componentCls}-filter-column`]: {
            display: "flex",
            justifyContent: "space-between"
          },
          [`${componentCls}-filter-trigger`]: {
            position: "relative",
            display: "flex",
            alignItems: "center",
            marginBlock: calc(paddingXXS).mul(-1).equal(),
            marginInline: `${unit(paddingXXS)} ${unit(calc(tablePaddingHorizontal).div(2).mul(-1).equal())}`,
            padding: `0 ${unit(paddingXXS)}`,
            color: headerIconColor,
            fontSize: fontSizeSM,
            borderRadius,
            cursor: "pointer",
            transition: `all ${motionDurationSlow}`,
            "&:hover": {
              color: colorTextDescription,
              background: tableHeaderFilterActiveBg
            },
            "&.active": {
              color: colorPrimary
            }
          }
        }
      },
      {
        // Dropdown
        [`${antCls}-dropdown`]: {
          [tableFilterDropdownPrefixCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
            minWidth: tableFilterDropdownWidth,
            backgroundColor: tableFilterDropdownBg,
            borderRadius,
            boxShadow: boxShadowSecondary,
            overflow: "hidden",
            // Reset menu
            [`${dropdownPrefixCls}-menu`]: {
              // https://github.com/ant-design/ant-design/issues/4916
              // https://github.com/ant-design/ant-design/issues/19542
              maxHeight: tableFilterDropdownHeight,
              overflowX: "hidden",
              border: 0,
              boxShadow: "none",
              borderRadius: "unset",
              backgroundColor: filterDropdownMenuBg,
              "&:empty::after": {
                display: "block",
                padding: `${unit(paddingXS)} 0`,
                color: colorTextDisabled,
                fontSize: fontSizeSM,
                textAlign: "center",
                content: '"Not Found"'
              }
            },
            [`${tableFilterDropdownPrefixCls}-tree`]: {
              paddingBlock: `${unit(paddingXS)} 0`,
              paddingInline: paddingXS,
              [treePrefixCls]: {
                padding: 0
              },
              [`${treePrefixCls}-treenode ${treePrefixCls}-node-content-wrapper:hover`]: {
                backgroundColor: controlItemBgHover
              },
              [`${treePrefixCls}-treenode-checkbox-checked ${treePrefixCls}-node-content-wrapper`]: {
                "&, &:hover": {
                  backgroundColor: controlItemBgActive
                }
              }
            },
            [`${tableFilterDropdownPrefixCls}-search`]: {
              padding: paddingXS,
              borderBottom: tableBorder,
              "&-input": {
                input: {
                  minWidth: tableFilterDropdownSearchWidth
                },
                [iconCls]: {
                  color: colorTextDisabled
                }
              }
            },
            [`${tableFilterDropdownPrefixCls}-checkall`]: {
              width: "100%",
              marginBottom: paddingXXS,
              marginInlineStart: paddingXXS
            },
            // Operation
            [`${tableFilterDropdownPrefixCls}-btns`]: {
              display: "flex",
              justifyContent: "space-between",
              padding: `${unit(calc(paddingXS).sub(lineWidth).equal())} ${unit(paddingXS)}`,
              overflow: "hidden",
              borderTop: tableBorder
            }
          })
        }
      },
      // Dropdown Menu & SubMenu
      {
        // submenu of table filter dropdown
        [`${antCls}-dropdown ${tableFilterDropdownPrefixCls}, ${tableFilterDropdownPrefixCls}-submenu`]: {
          // Checkbox
          [`${antCls}-checkbox-wrapper + span`]: {
            paddingInlineStart: paddingXS,
            color: colorText
          },
          [`> ul`]: {
            maxHeight: "calc(100vh - 130px)",
            overflowX: "hidden",
            overflowY: "auto"
          }
        }
      }
    ];
  };
  var filter_default = genFilterStyle;

  // node_modules/antd/es/table/style/fixed.js
  var genFixedStyle = (token2) => {
    const {
      componentCls,
      lineWidth,
      colorSplit,
      motionDurationSlow,
      zIndexTableFixed,
      tableBg,
      zIndexTableSticky,
      calc
    } = token2;
    const shadowColor = colorSplit;
    return {
      [`${componentCls}-wrapper`]: {
        [`
        ${componentCls}-cell-fix-left,
        ${componentCls}-cell-fix-right
      `]: {
          position: "sticky !important",
          zIndex: zIndexTableFixed,
          background: tableBg
        },
        [`
        ${componentCls}-cell-fix-left-first::after,
        ${componentCls}-cell-fix-left-last::after
      `]: {
          position: "absolute",
          top: 0,
          right: {
            _skip_check_: true,
            value: 0
          },
          bottom: calc(lineWidth).mul(-1).equal(),
          width: 30,
          transform: "translateX(100%)",
          transition: `box-shadow ${motionDurationSlow}`,
          content: '""',
          pointerEvents: "none"
        },
        [`${componentCls}-cell-fix-left-all::after`]: {
          display: "none"
        },
        [`
        ${componentCls}-cell-fix-right-first::after,
        ${componentCls}-cell-fix-right-last::after
      `]: {
          position: "absolute",
          top: 0,
          bottom: calc(lineWidth).mul(-1).equal(),
          left: {
            _skip_check_: true,
            value: 0
          },
          width: 30,
          transform: "translateX(-100%)",
          transition: `box-shadow ${motionDurationSlow}`,
          content: '""',
          pointerEvents: "none"
        },
        [`${componentCls}-container`]: {
          position: "relative",
          "&::before, &::after": {
            position: "absolute",
            top: 0,
            bottom: 0,
            zIndex: calc(zIndexTableSticky).add(1).equal({
              unit: false
            }),
            width: 30,
            transition: `box-shadow ${motionDurationSlow}`,
            content: '""',
            pointerEvents: "none"
          },
          "&::before": {
            insetInlineStart: 0
          },
          "&::after": {
            insetInlineEnd: 0
          }
        },
        [`${componentCls}-ping-left`]: {
          [`&:not(${componentCls}-has-fix-left) ${componentCls}-container::before`]: {
            boxShadow: `inset 10px 0 8px -8px ${shadowColor}`
          },
          [`
          ${componentCls}-cell-fix-left-first::after,
          ${componentCls}-cell-fix-left-last::after
        `]: {
            boxShadow: `inset 10px 0 8px -8px ${shadowColor}`
          },
          [`${componentCls}-cell-fix-left-last::before`]: {
            backgroundColor: "transparent !important"
          }
        },
        [`${componentCls}-ping-right`]: {
          [`&:not(${componentCls}-has-fix-right) ${componentCls}-container::after`]: {
            boxShadow: `inset -10px 0 8px -8px ${shadowColor}`
          },
          [`
          ${componentCls}-cell-fix-right-first::after,
          ${componentCls}-cell-fix-right-last::after
        `]: {
            boxShadow: `inset -10px 0 8px -8px ${shadowColor}`
          }
        }
      }
    };
  };
  var fixed_default = genFixedStyle;

  // node_modules/antd/es/table/style/pagination.js
  var genPaginationStyle2 = (token2) => {
    const {
      componentCls,
      antCls,
      margin
    } = token2;
    return {
      [`${componentCls}-wrapper`]: {
        // ========================== Pagination ==========================
        [`${componentCls}-pagination${antCls}-pagination`]: {
          margin: `${unit(margin)} 0`
        },
        [`${componentCls}-pagination`]: {
          display: "flex",
          flexWrap: "wrap",
          rowGap: token2.paddingXS,
          "> *": {
            flex: "none"
          },
          "&-left": {
            justifyContent: "flex-start"
          },
          "&-center": {
            justifyContent: "center"
          },
          "&-right": {
            justifyContent: "flex-end"
          }
        }
      }
    };
  };
  var pagination_default2 = genPaginationStyle2;

  // node_modules/antd/es/table/style/radius.js
  var genRadiusStyle = (token2) => {
    const {
      componentCls,
      tableRadius
    } = token2;
    return {
      [`${componentCls}-wrapper`]: {
        [componentCls]: {
          // https://github.com/ant-design/ant-design/issues/39115#issuecomment-1362314574
          [`${componentCls}-title, ${componentCls}-header`]: {
            borderRadius: `${unit(tableRadius)} ${unit(tableRadius)} 0 0`
          },
          [`${componentCls}-title + ${componentCls}-container`]: {
            borderStartStartRadius: 0,
            borderStartEndRadius: 0,
            // https://github.com/ant-design/ant-design/issues/41975
            [`${componentCls}-header, table`]: {
              borderRadius: 0
            },
            "table > thead > tr:first-child": {
              "th:first-child, th:last-child, td:first-child, td:last-child": {
                borderRadius: 0
              }
            }
          },
          "&-container": {
            borderStartStartRadius: tableRadius,
            borderStartEndRadius: tableRadius,
            "table > thead > tr:first-child": {
              "> *:first-child": {
                borderStartStartRadius: tableRadius
              },
              "> *:last-child": {
                borderStartEndRadius: tableRadius
              }
            }
          },
          "&-footer": {
            borderRadius: `0 0 ${unit(tableRadius)} ${unit(tableRadius)}`
          }
        }
      }
    };
  };
  var radius_default = genRadiusStyle;

  // node_modules/antd/es/table/style/rtl.js
  var genStyle = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      [`${componentCls}-wrapper-rtl`]: {
        direction: "rtl",
        table: {
          direction: "rtl"
        },
        [`${componentCls}-pagination-left`]: {
          justifyContent: "flex-end"
        },
        [`${componentCls}-pagination-right`]: {
          justifyContent: "flex-start"
        },
        [`${componentCls}-row-expand-icon`]: {
          float: "right",
          "&::after": {
            transform: "rotate(-90deg)"
          },
          "&-collapsed::before": {
            transform: "rotate(180deg)"
          },
          "&-collapsed::after": {
            transform: "rotate(0deg)"
          }
        },
        [`${componentCls}-container`]: {
          "&::before": {
            insetInlineStart: "unset",
            insetInlineEnd: 0
          },
          "&::after": {
            insetInlineStart: 0,
            insetInlineEnd: "unset"
          },
          [`${componentCls}-row-indent`]: {
            float: "right"
          }
        }
      }
    };
  };
  var rtl_default2 = genStyle;

  // node_modules/antd/es/table/style/selection.js
  var genSelectionStyle = (token2) => {
    const {
      componentCls,
      antCls,
      iconCls,
      fontSizeIcon,
      padding,
      paddingXS,
      headerIconColor,
      headerIconHoverColor,
      tableSelectionColumnWidth,
      tableSelectedRowBg,
      tableSelectedRowHoverBg,
      tableRowHoverBg,
      tablePaddingHorizontal,
      calc
    } = token2;
    return {
      [`${componentCls}-wrapper`]: {
        // ========================== Selections ==========================
        [`${componentCls}-selection-col`]: {
          width: tableSelectionColumnWidth,
          [`&${componentCls}-selection-col-with-dropdown`]: {
            width: calc(tableSelectionColumnWidth).add(fontSizeIcon).add(calc(padding).div(4)).equal()
          }
        },
        [`${componentCls}-bordered ${componentCls}-selection-col`]: {
          width: calc(tableSelectionColumnWidth).add(calc(paddingXS).mul(2)).equal(),
          [`&${componentCls}-selection-col-with-dropdown`]: {
            width: calc(tableSelectionColumnWidth).add(fontSizeIcon).add(calc(padding).div(4)).add(calc(paddingXS).mul(2)).equal()
          }
        },
        [`
        table tr th${componentCls}-selection-column,
        table tr td${componentCls}-selection-column,
        ${componentCls}-selection-column
      `]: {
          paddingInlineEnd: token2.paddingXS,
          paddingInlineStart: token2.paddingXS,
          textAlign: "center",
          [`${antCls}-radio-wrapper`]: {
            marginInlineEnd: 0
          }
        },
        [`table tr th${componentCls}-selection-column${componentCls}-cell-fix-left`]: {
          zIndex: token2.zIndexTableFixed + 1
        },
        [`table tr th${componentCls}-selection-column::after`]: {
          backgroundColor: "transparent !important"
        },
        [`${componentCls}-selection`]: {
          position: "relative",
          display: "inline-flex",
          flexDirection: "column"
        },
        [`${componentCls}-selection-extra`]: {
          position: "absolute",
          top: 0,
          zIndex: 1,
          cursor: "pointer",
          transition: `all ${token2.motionDurationSlow}`,
          marginInlineStart: "100%",
          paddingInlineStart: unit(calc(tablePaddingHorizontal).div(4).equal()),
          [iconCls]: {
            color: headerIconColor,
            fontSize: fontSizeIcon,
            verticalAlign: "baseline",
            "&:hover": {
              color: headerIconHoverColor
            }
          }
        },
        // ============================= Rows =============================
        [`${componentCls}-tbody`]: {
          [`${componentCls}-row`]: {
            [`&${componentCls}-row-selected`]: {
              [`> ${componentCls}-cell`]: {
                background: tableSelectedRowBg,
                "&-row-hover": {
                  background: tableSelectedRowHoverBg
                }
              }
            },
            [`> ${componentCls}-cell-row-hover`]: {
              background: tableRowHoverBg
            }
          }
        }
      }
    };
  };
  var selection_default = genSelectionStyle;

  // node_modules/antd/es/table/style/size.js
  var genSizeStyle4 = (token2) => {
    const {
      componentCls,
      tableExpandColumnWidth,
      calc
    } = token2;
    const getSizeStyle = (size, paddingVertical, paddingHorizontal, fontSize) => ({
      [`${componentCls}${componentCls}-${size}`]: {
        fontSize,
        [`
        ${componentCls}-title,
        ${componentCls}-footer,
        ${componentCls}-cell,
        ${componentCls}-thead > tr > th,
        ${componentCls}-tbody > tr > th,
        ${componentCls}-tbody > tr > td,
        tfoot > tr > th,
        tfoot > tr > td
      `]: {
          padding: `${unit(paddingVertical)} ${unit(paddingHorizontal)}`
        },
        [`${componentCls}-filter-trigger`]: {
          marginInlineEnd: unit(calc(paddingHorizontal).div(2).mul(-1).equal())
        },
        [`${componentCls}-expanded-row-fixed`]: {
          margin: `${unit(calc(paddingVertical).mul(-1).equal())} ${unit(calc(paddingHorizontal).mul(-1).equal())}`
        },
        [`${componentCls}-tbody`]: {
          // ========================= Nest Table ===========================
          [`${componentCls}-wrapper:only-child ${componentCls}`]: {
            marginBlock: unit(calc(paddingVertical).mul(-1).equal()),
            marginInline: `${unit(calc(tableExpandColumnWidth).sub(paddingHorizontal).equal())} ${unit(calc(paddingHorizontal).mul(-1).equal())}`
          }
        },
        // https://github.com/ant-design/ant-design/issues/35167
        [`${componentCls}-selection-extra`]: {
          paddingInlineStart: unit(calc(paddingHorizontal).div(4).equal())
        }
      }
    });
    return {
      [`${componentCls}-wrapper`]: Object.assign(Object.assign({}, getSizeStyle("middle", token2.tablePaddingVerticalMiddle, token2.tablePaddingHorizontalMiddle, token2.tableFontSizeMiddle)), getSizeStyle("small", token2.tablePaddingVerticalSmall, token2.tablePaddingHorizontalSmall, token2.tableFontSizeSmall))
    };
  };
  var size_default = genSizeStyle4;

  // node_modules/antd/es/table/style/sorter.js
  var genSorterStyle = (token2) => {
    const {
      componentCls,
      marginXXS,
      fontSizeIcon,
      headerIconColor,
      headerIconHoverColor
    } = token2;
    return {
      [`${componentCls}-wrapper`]: {
        [`${componentCls}-thead th${componentCls}-column-has-sorters`]: {
          outline: "none",
          cursor: "pointer",
          transition: `all ${token2.motionDurationSlow}`,
          "&:hover": {
            background: token2.tableHeaderSortHoverBg,
            "&::before": {
              backgroundColor: "transparent !important"
            }
          },
          "&:focus-visible": {
            color: token2.colorPrimary
          },
          // https://github.com/ant-design/ant-design/issues/30969
          [`
          &${componentCls}-cell-fix-left:hover,
          &${componentCls}-cell-fix-right:hover
        `]: {
            background: token2.tableFixedHeaderSortActiveBg
          }
        },
        [`${componentCls}-thead th${componentCls}-column-sort`]: {
          background: token2.tableHeaderSortBg,
          "&::before": {
            backgroundColor: "transparent !important"
          }
        },
        [`td${componentCls}-column-sort`]: {
          background: token2.tableBodySortBg
        },
        [`${componentCls}-column-title`]: {
          position: "relative",
          zIndex: 1,
          flex: 1
        },
        [`${componentCls}-column-sorters`]: {
          display: "flex",
          flex: "auto",
          alignItems: "center",
          justifyContent: "space-between",
          "&::after": {
            position: "absolute",
            inset: 0,
            width: "100%",
            height: "100%",
            content: '""'
          }
        },
        [`${componentCls}-column-sorter`]: {
          marginInlineStart: marginXXS,
          color: headerIconColor,
          fontSize: 0,
          transition: `color ${token2.motionDurationSlow}`,
          "&-inner": {
            display: "inline-flex",
            flexDirection: "column",
            alignItems: "center"
          },
          "&-up, &-down": {
            fontSize: fontSizeIcon,
            "&.active": {
              color: token2.colorPrimary
            }
          },
          [`${componentCls}-column-sorter-up + ${componentCls}-column-sorter-down`]: {
            marginTop: "-0.3em"
          }
        },
        [`${componentCls}-column-sorters:hover ${componentCls}-column-sorter`]: {
          color: headerIconHoverColor
        }
      }
    };
  };
  var sorter_default = genSorterStyle;

  // node_modules/antd/es/table/style/sticky.js
  var genStickyStyle = (token2) => {
    const {
      componentCls,
      opacityLoading,
      tableScrollThumbBg,
      tableScrollThumbBgHover,
      tableScrollThumbSize,
      tableScrollBg,
      zIndexTableSticky,
      stickyScrollBarBorderRadius,
      lineWidth,
      lineType,
      tableBorderColor
    } = token2;
    const tableBorder = `${unit(lineWidth)} ${lineType} ${tableBorderColor}`;
    return {
      [`${componentCls}-wrapper`]: {
        [`${componentCls}-sticky`]: {
          "&-holder": {
            position: "sticky",
            zIndex: zIndexTableSticky,
            background: token2.colorBgContainer
          },
          "&-scroll": {
            position: "sticky",
            bottom: 0,
            height: `${unit(tableScrollThumbSize)} !important`,
            zIndex: zIndexTableSticky,
            display: "flex",
            alignItems: "center",
            background: tableScrollBg,
            borderTop: tableBorder,
            opacity: opacityLoading,
            "&:hover": {
              transformOrigin: "center bottom"
            },
            // fake scrollbar style of sticky
            "&-bar": {
              height: tableScrollThumbSize,
              backgroundColor: tableScrollThumbBg,
              borderRadius: stickyScrollBarBorderRadius,
              transition: `all ${token2.motionDurationSlow}, transform none`,
              position: "absolute",
              bottom: 0,
              "&:hover, &-active": {
                backgroundColor: tableScrollThumbBgHover
              }
            }
          }
        }
      }
    };
  };
  var sticky_default = genStickyStyle;

  // node_modules/antd/es/table/style/summary.js
  var genSummaryStyle = (token2) => {
    const {
      componentCls,
      lineWidth,
      tableBorderColor,
      calc
    } = token2;
    const tableBorder = `${unit(lineWidth)} ${token2.lineType} ${tableBorderColor}`;
    return {
      [`${componentCls}-wrapper`]: {
        [`${componentCls}-summary`]: {
          position: "relative",
          zIndex: token2.zIndexTableFixed,
          background: token2.tableBg,
          "> tr": {
            "> th, > td": {
              borderBottom: tableBorder
            }
          }
        },
        [`div${componentCls}-summary`]: {
          boxShadow: `0 ${unit(calc(lineWidth).mul(-1).equal())} 0 ${tableBorderColor}`
        }
      }
    };
  };
  var summary_default = genSummaryStyle;

  // node_modules/antd/es/table/style/virtual.js
  var genVirtualStyle = (token2) => {
    const {
      componentCls,
      motionDurationMid,
      lineWidth,
      lineType,
      tableBorderColor,
      calc
    } = token2;
    const tableBorder = `${unit(lineWidth)} ${lineType} ${tableBorderColor}`;
    const rowCellCls = `${componentCls}-expanded-row-cell`;
    return {
      [`${componentCls}-wrapper`]: {
        // ========================== Row ==========================
        [`${componentCls}-tbody-virtual`]: {
          [`${componentCls}-row`]: {
            display: "flex",
            boxSizing: "border-box",
            width: "100%"
          },
          [`${componentCls}-cell`]: {
            borderBottom: tableBorder,
            transition: `background ${motionDurationMid}`
          },
          [`${componentCls}-expanded-row`]: {
            [`${rowCellCls}${rowCellCls}-fixed`]: {
              position: "sticky",
              insetInlineStart: 0,
              overflow: "hidden",
              width: `calc(var(--virtual-width) - ${unit(lineWidth)})`,
              borderInlineEnd: "none"
            }
          }
        },
        // ======================== Border =========================
        [`${componentCls}-bordered`]: {
          [`${componentCls}-tbody-virtual`]: {
            "&:after": {
              content: '""',
              insetInline: 0,
              bottom: 0,
              borderBottom: tableBorder,
              position: "absolute"
            },
            [`${componentCls}-cell`]: {
              borderInlineEnd: tableBorder,
              [`&${componentCls}-cell-fix-right-first:before`]: {
                content: '""',
                position: "absolute",
                insetBlock: 0,
                insetInlineStart: calc(lineWidth).mul(-1).equal(),
                borderInlineStart: tableBorder
              }
            }
          },
          // Empty placeholder
          [`&${componentCls}-virtual`]: {
            [`${componentCls}-placeholder ${componentCls}-cell`]: {
              borderInlineEnd: tableBorder,
              borderBottom: tableBorder
            }
          }
        }
      }
    };
  };
  var virtual_default = genVirtualStyle;

  // node_modules/antd/es/table/style/index.js
  var genTableStyle = (token2) => {
    const {
      componentCls,
      fontWeightStrong,
      tablePaddingVertical,
      tablePaddingHorizontal,
      tableExpandColumnWidth,
      lineWidth,
      lineType,
      tableBorderColor,
      tableFontSize,
      tableBg,
      tableRadius,
      tableHeaderTextColor,
      motionDurationMid,
      tableHeaderBg,
      tableHeaderCellSplitColor,
      tableFooterTextColor,
      tableFooterBg,
      calc
    } = token2;
    const tableBorder = `${unit(lineWidth)} ${lineType} ${tableBorderColor}`;
    return {
      [`${componentCls}-wrapper`]: Object.assign(Object.assign({
        clear: "both",
        maxWidth: "100%"
      }, clearFix()), {
        [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
          fontSize: tableFontSize,
          background: tableBg,
          borderRadius: `${unit(tableRadius)} ${unit(tableRadius)} 0 0`
        }),
        // https://github.com/ant-design/ant-design/issues/17611
        table: {
          width: "100%",
          textAlign: "start",
          borderRadius: `${unit(tableRadius)} ${unit(tableRadius)} 0 0`,
          borderCollapse: "separate",
          borderSpacing: 0
        },
        // ============================= Cell ==============================
        [`
          ${componentCls}-cell,
          ${componentCls}-thead > tr > th,
          ${componentCls}-tbody > tr > th,
          ${componentCls}-tbody > tr > td,
          tfoot > tr > th,
          tfoot > tr > td
        `]: {
          position: "relative",
          padding: `${unit(tablePaddingVertical)} ${unit(tablePaddingHorizontal)}`,
          overflowWrap: "break-word"
        },
        // ============================ Title =============================
        [`${componentCls}-title`]: {
          padding: `${unit(tablePaddingVertical)} ${unit(tablePaddingHorizontal)}`
        },
        // ============================ Header ============================
        [`${componentCls}-thead`]: {
          [`
          > tr > th,
          > tr > td
        `]: {
            position: "relative",
            color: tableHeaderTextColor,
            fontWeight: fontWeightStrong,
            textAlign: "start",
            background: tableHeaderBg,
            borderBottom: tableBorder,
            transition: `background ${motionDurationMid} ease`,
            "&[colspan]:not([colspan='1'])": {
              textAlign: "center"
            },
            [`&:not(:last-child):not(${componentCls}-selection-column):not(${componentCls}-row-expand-icon-cell):not([colspan])::before`]: {
              position: "absolute",
              top: "50%",
              insetInlineEnd: 0,
              width: 1,
              height: "1.6em",
              backgroundColor: tableHeaderCellSplitColor,
              transform: "translateY(-50%)",
              transition: `background-color ${motionDurationMid}`,
              content: '""'
            }
          },
          "> tr:not(:last-child) > th[colspan]": {
            borderBottom: 0
          }
        },
        // ============================ Body ============================
        [`${componentCls}-tbody`]: {
          "> tr": {
            [`> th, > td`]: {
              transition: `background ${motionDurationMid}, border-color ${motionDurationMid}`,
              borderBottom: tableBorder,
              // ========================= Nest Table ===========================
              [`
              > ${componentCls}-wrapper:only-child,
              > ${componentCls}-expanded-row-fixed > ${componentCls}-wrapper:only-child
            `]: {
                [componentCls]: {
                  marginBlock: unit(calc(tablePaddingVertical).mul(-1).equal()),
                  marginInline: `${unit(calc(tableExpandColumnWidth).sub(tablePaddingHorizontal).equal())}
                ${unit(calc(tablePaddingHorizontal).mul(-1).equal())}`,
                  [`${componentCls}-tbody > tr:last-child > td`]: {
                    borderBottom: 0,
                    "&:first-child, &:last-child": {
                      borderRadius: 0
                    }
                  }
                }
              }
            },
            "> th": {
              position: "relative",
              color: tableHeaderTextColor,
              fontWeight: fontWeightStrong,
              textAlign: "start",
              background: tableHeaderBg,
              borderBottom: tableBorder,
              transition: `background ${motionDurationMid} ease`
            }
          }
        },
        // ============================ Footer ============================
        [`${componentCls}-footer`]: {
          padding: `${unit(tablePaddingVertical)} ${unit(tablePaddingHorizontal)}`,
          color: tableFooterTextColor,
          background: tableFooterBg
        }
      })
    };
  };
  var prepareComponentToken18 = (token2) => {
    const {
      colorFillAlter,
      colorBgContainer,
      colorTextHeading,
      colorFillSecondary,
      colorFillContent,
      controlItemBgActive,
      controlItemBgActiveHover,
      padding,
      paddingSM,
      paddingXS,
      colorBorderSecondary,
      borderRadiusLG,
      controlHeight,
      colorTextPlaceholder,
      fontSize,
      fontSizeSM,
      lineHeight,
      lineWidth,
      colorIcon,
      colorIconHover,
      opacityLoading,
      controlInteractiveSize
    } = token2;
    const colorFillSecondarySolid = new TinyColor(colorFillSecondary).onBackground(colorBgContainer).toHexShortString();
    const colorFillContentSolid = new TinyColor(colorFillContent).onBackground(colorBgContainer).toHexShortString();
    const colorFillAlterSolid = new TinyColor(colorFillAlter).onBackground(colorBgContainer).toHexShortString();
    const baseColorAction = new TinyColor(colorIcon);
    const baseColorActionHover = new TinyColor(colorIconHover);
    const expandIconHalfInner = controlInteractiveSize / 2 - lineWidth;
    const expandIconSize = expandIconHalfInner * 2 + lineWidth * 3;
    return {
      headerBg: colorFillAlterSolid,
      headerColor: colorTextHeading,
      headerSortActiveBg: colorFillSecondarySolid,
      headerSortHoverBg: colorFillContentSolid,
      bodySortBg: colorFillAlterSolid,
      rowHoverBg: colorFillAlterSolid,
      rowSelectedBg: controlItemBgActive,
      rowSelectedHoverBg: controlItemBgActiveHover,
      rowExpandedBg: colorFillAlter,
      cellPaddingBlock: padding,
      cellPaddingInline: padding,
      cellPaddingBlockMD: paddingSM,
      cellPaddingInlineMD: paddingXS,
      cellPaddingBlockSM: paddingXS,
      cellPaddingInlineSM: paddingXS,
      borderColor: colorBorderSecondary,
      headerBorderRadius: borderRadiusLG,
      footerBg: colorFillAlterSolid,
      footerColor: colorTextHeading,
      cellFontSize: fontSize,
      cellFontSizeMD: fontSize,
      cellFontSizeSM: fontSize,
      headerSplitColor: colorBorderSecondary,
      fixedHeaderSortActiveBg: colorFillSecondarySolid,
      headerFilterHoverBg: colorFillContent,
      filterDropdownMenuBg: colorBgContainer,
      filterDropdownBg: colorBgContainer,
      expandIconBg: colorBgContainer,
      selectionColumnWidth: controlHeight,
      stickyScrollBarBg: colorTextPlaceholder,
      stickyScrollBarBorderRadius: 100,
      expandIconMarginTop: (fontSize * lineHeight - lineWidth * 3) / 2 - Math.ceil((fontSizeSM * 1.4 - lineWidth * 3) / 2),
      headerIconColor: baseColorAction.clone().setAlpha(baseColorAction.getAlpha() * opacityLoading).toRgbString(),
      headerIconHoverColor: baseColorActionHover.clone().setAlpha(baseColorActionHover.getAlpha() * opacityLoading).toRgbString(),
      expandIconHalfInner,
      expandIconSize,
      expandIconScale: controlInteractiveSize / expandIconSize
    };
  };
  var style_default23 = genStyleHooks("Table", (token2) => {
    const {
      colorTextHeading,
      colorSplit,
      colorBgContainer,
      controlInteractiveSize: checkboxSize,
      headerBg,
      headerColor,
      headerSortActiveBg,
      headerSortHoverBg,
      bodySortBg,
      rowHoverBg,
      rowSelectedBg,
      rowSelectedHoverBg,
      rowExpandedBg,
      cellPaddingBlock,
      cellPaddingInline,
      cellPaddingBlockMD,
      cellPaddingInlineMD,
      cellPaddingBlockSM,
      cellPaddingInlineSM,
      borderColor,
      footerBg,
      footerColor,
      headerBorderRadius,
      cellFontSize,
      cellFontSizeMD,
      cellFontSizeSM,
      headerSplitColor,
      fixedHeaderSortActiveBg,
      headerFilterHoverBg,
      filterDropdownBg,
      expandIconBg,
      selectionColumnWidth,
      stickyScrollBarBg,
      calc
    } = token2;
    const zIndexTableFixed = 2;
    const tableToken = merge2(token2, {
      tableFontSize: cellFontSize,
      tableBg: colorBgContainer,
      tableRadius: headerBorderRadius,
      tablePaddingVertical: cellPaddingBlock,
      tablePaddingHorizontal: cellPaddingInline,
      tablePaddingVerticalMiddle: cellPaddingBlockMD,
      tablePaddingHorizontalMiddle: cellPaddingInlineMD,
      tablePaddingVerticalSmall: cellPaddingBlockSM,
      tablePaddingHorizontalSmall: cellPaddingInlineSM,
      tableBorderColor: borderColor,
      tableHeaderTextColor: headerColor,
      tableHeaderBg: headerBg,
      tableFooterTextColor: footerColor,
      tableFooterBg: footerBg,
      tableHeaderCellSplitColor: headerSplitColor,
      tableHeaderSortBg: headerSortActiveBg,
      tableHeaderSortHoverBg: headerSortHoverBg,
      tableBodySortBg: bodySortBg,
      tableFixedHeaderSortActiveBg: fixedHeaderSortActiveBg,
      tableHeaderFilterActiveBg: headerFilterHoverBg,
      tableFilterDropdownBg: filterDropdownBg,
      tableRowHoverBg: rowHoverBg,
      tableSelectedRowBg: rowSelectedBg,
      tableSelectedRowHoverBg: rowSelectedHoverBg,
      zIndexTableFixed,
      zIndexTableSticky: zIndexTableFixed + 1,
      tableFontSizeMiddle: cellFontSizeMD,
      tableFontSizeSmall: cellFontSizeSM,
      tableSelectionColumnWidth: selectionColumnWidth,
      tableExpandIconBg: expandIconBg,
      tableExpandColumnWidth: calc(checkboxSize).add(calc(token2.padding).mul(2)).equal(),
      tableExpandedRowBg: rowExpandedBg,
      // Dropdown
      tableFilterDropdownWidth: 120,
      tableFilterDropdownHeight: 264,
      tableFilterDropdownSearchWidth: 140,
      // Virtual Scroll Bar
      tableScrollThumbSize: 8,
      // Mac scroll bar size
      tableScrollThumbBg: stickyScrollBarBg,
      tableScrollThumbBgHover: colorTextHeading,
      tableScrollBg: colorSplit
    });
    return [genTableStyle(tableToken), pagination_default2(tableToken), summary_default(tableToken), sorter_default(tableToken), filter_default(tableToken), bordered_default2(tableToken), radius_default(tableToken), expand_default(tableToken), summary_default(tableToken), empty_default3(tableToken), selection_default(tableToken), fixed_default(tableToken), sticky_default(tableToken), ellipsis_default(tableToken), size_default(tableToken), rtl_default2(tableToken), virtual_default(tableToken)];
  }, prepareComponentToken18, {
    unitless: {
      expandIconScale: true
    }
  });

  // node_modules/antd/es/table/InternalTable.js
  var EMPTY_LIST5 = [];
  var InternalTable = (props, ref) => {
    const {
      prefixCls: customizePrefixCls,
      className,
      rootClassName,
      style: style2,
      size: customizeSize,
      bordered,
      dropdownPrefixCls: customizeDropdownPrefixCls,
      dataSource,
      pagination,
      rowSelection,
      rowKey = "key",
      rowClassName,
      columns,
      children,
      childrenColumnName: legacyChildrenColumnName,
      onChange,
      getPopupContainer,
      loading,
      expandIcon,
      expandable,
      expandedRowRender,
      expandIconColumnIndex,
      indentSize,
      scroll,
      sortDirections,
      locale: locale9,
      showSorterTooltip = true,
      virtual
    } = props;
    const warning8 = devUseWarning("Table");
    if (true) {
      true ? warning8(!(typeof rowKey === "function" && rowKey.length > 1), "usage", "`index` parameter of `rowKey` function is deprecated. There is no guarantee that it will work as expected.") : void 0;
    }
    const baseColumns = React390.useMemo(() => columns || convertChildrenToColumns(children), [columns, children]);
    const needResponsive = React390.useMemo(() => baseColumns.some((col) => col.responsive), [baseColumns]);
    const screens = useBreakpoint_default(needResponsive);
    const mergedColumns = React390.useMemo(() => {
      const matched = new Set(Object.keys(screens).filter((m) => screens[m]));
      return baseColumns.filter((c) => !c.responsive || c.responsive.some((r2) => matched.has(r2)));
    }, [baseColumns, screens]);
    const tableProps = omit(props, ["className", "style", "columns"]);
    const {
      locale: contextLocale = en_US_default6,
      direction,
      table,
      renderEmpty,
      getPrefixCls,
      getPopupContainer: getContextPopupContainer
    } = React390.useContext(ConfigContext);
    const mergedSize = useSize_default(customizeSize);
    const tableLocale = Object.assign(Object.assign({}, contextLocale.Table), locale9);
    const rawData = dataSource || EMPTY_LIST5;
    const prefixCls = getPrefixCls("table", customizePrefixCls);
    const dropdownPrefixCls = getPrefixCls("dropdown", customizeDropdownPrefixCls);
    const [, token2] = useToken();
    const rootCls = useCSSVarCls_default(prefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default23(prefixCls, rootCls);
    const mergedExpandable = Object.assign({
      childrenColumnName: legacyChildrenColumnName,
      expandIconColumnIndex
    }, expandable);
    const {
      childrenColumnName = "children"
    } = mergedExpandable;
    const expandType = React390.useMemo(() => {
      if (rawData.some((item) => item === null || item === void 0 ? void 0 : item[childrenColumnName])) {
        return "nest";
      }
      if (expandedRowRender || expandable && expandable.expandedRowRender) {
        return "row";
      }
      return null;
    }, [rawData]);
    const internalRefs = {
      body: React390.useRef()
    };
    const getContainerWidth = useContainerWidth(prefixCls);
    const rootRef = React390.useRef(null);
    const tblRef = React390.useRef(null);
    useProxyImperativeHandle(ref, () => Object.assign(Object.assign({}, tblRef.current), {
      nativeElement: rootRef.current
    }));
    const getRowKey = React390.useMemo(() => {
      if (typeof rowKey === "function") {
        return rowKey;
      }
      return (record) => record === null || record === void 0 ? void 0 : record[rowKey];
    }, [rowKey]);
    const [getRecordByKey] = useLazyKVMap(rawData, childrenColumnName, getRowKey);
    const changeEventInfo = {};
    const triggerOnChange = function(info, action) {
      let reset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var _a, _b, _c;
      const changeInfo = Object.assign(Object.assign({}, changeEventInfo), info);
      if (reset) {
        (_a = changeEventInfo.resetPagination) === null || _a === void 0 ? void 0 : _a.call(changeEventInfo);
        if ((_b = changeInfo.pagination) === null || _b === void 0 ? void 0 : _b.current) {
          changeInfo.pagination.current = 1;
        }
        if (pagination && pagination.onChange) {
          pagination.onChange(1, (_c = changeInfo.pagination) === null || _c === void 0 ? void 0 : _c.pageSize);
        }
      }
      if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {
        scrollTo(0, {
          getContainer: () => internalRefs.body.current
        });
      }
      onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {
        currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates, childrenColumnName),
        action
      });
    };
    const onSorterChange = (sorter, sorterStates) => {
      triggerOnChange({
        sorter,
        sorterStates
      }, "sort", false);
    };
    const [transformSorterColumns, sortStates, sorterTitleProps, getSorters] = useFilterSorter({
      prefixCls,
      mergedColumns,
      onSorterChange,
      sortDirections: sortDirections || ["ascend", "descend"],
      tableLocale,
      showSorterTooltip
    });
    const sortedData = React390.useMemo(() => getSortData(rawData, sortStates, childrenColumnName), [rawData, sortStates]);
    changeEventInfo.sorter = getSorters();
    changeEventInfo.sorterStates = sortStates;
    const onFilterChange = (filters2, filterStates2) => {
      triggerOnChange({
        filters: filters2,
        filterStates: filterStates2
      }, "filter", true);
    };
    const [transformFilterColumns, filterStates, filters] = useFilter_default({
      prefixCls,
      locale: tableLocale,
      dropdownPrefixCls,
      mergedColumns,
      onFilterChange,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      rootClassName: (0, import_classnames138.default)(rootClassName, rootCls)
    });
    const mergedData = getFilterData(sortedData, filterStates, childrenColumnName);
    changeEventInfo.filters = filters;
    changeEventInfo.filterStates = filterStates;
    const columnTitleProps = React390.useMemo(() => {
      const mergedFilters = {};
      Object.keys(filters).forEach((filterKey) => {
        if (filters[filterKey] !== null) {
          mergedFilters[filterKey] = filters[filterKey];
        }
      });
      return Object.assign(Object.assign({}, sorterTitleProps), {
        filters: mergedFilters
      });
    }, [sorterTitleProps, filters]);
    const [transformTitleColumns] = useTitleColumns(columnTitleProps);
    const onPaginationChange = (current2, pageSize) => {
      triggerOnChange({
        pagination: Object.assign(Object.assign({}, changeEventInfo.pagination), {
          current: current2,
          pageSize
        })
      }, "paginate");
    };
    const [mergedPagination, resetPagination] = usePagination_default(mergedData.length, onPaginationChange, pagination);
    changeEventInfo.pagination = pagination === false ? {} : getPaginationParam(mergedPagination, pagination);
    changeEventInfo.resetPagination = resetPagination;
    const pageData = React390.useMemo(() => {
      if (pagination === false || !mergedPagination.pageSize) {
        return mergedData;
      }
      const {
        current: current2 = 1,
        total,
        pageSize = DEFAULT_PAGE_SIZE
      } = mergedPagination;
      true ? warning8(current2 > 0, "usage", "`current` should be positive number.") : void 0;
      if (mergedData.length < total) {
        if (mergedData.length > pageSize) {
          true ? warning8(false, "usage", "`dataSource` length is less than `pagination.total` but large than `pagination.pageSize`. Please make sure your config correct data with async mode.") : void 0;
          return mergedData.slice((current2 - 1) * pageSize, current2 * pageSize);
        }
        return mergedData;
      }
      return mergedData.slice((current2 - 1) * pageSize, current2 * pageSize);
    }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]);
    const [transformSelectionColumns, selectedKeySet] = useSelection_default({
      prefixCls,
      data: mergedData,
      pageData,
      getRowKey,
      getRecordByKey,
      expandType,
      childrenColumnName,
      locale: tableLocale,
      getPopupContainer: getPopupContainer || getContextPopupContainer
    }, rowSelection);
    const internalRowClassName = (record, index2, indent) => {
      let mergedRowClassName;
      if (typeof rowClassName === "function") {
        mergedRowClassName = (0, import_classnames138.default)(rowClassName(record, index2, indent));
      } else {
        mergedRowClassName = (0, import_classnames138.default)(rowClassName);
      }
      return (0, import_classnames138.default)({
        [`${prefixCls}-row-selected`]: selectedKeySet.has(getRowKey(record, index2))
      }, mergedRowClassName);
    };
    mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon;
    mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || ExpandIcon_default(tableLocale);
    if (expandType === "nest" && mergedExpandable.expandIconColumnIndex === void 0) {
      mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;
    } else if (mergedExpandable.expandIconColumnIndex > 0 && rowSelection) {
      mergedExpandable.expandIconColumnIndex -= 1;
    }
    if (typeof mergedExpandable.indentSize !== "number") {
      mergedExpandable.indentSize = typeof indentSize === "number" ? indentSize : 15;
    }
    const transformColumns = React390.useCallback((innerColumns) => transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns)))), [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);
    let topPaginationNode;
    let bottomPaginationNode;
    if (pagination !== false && (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.total)) {
      let paginationSize;
      if (mergedPagination.size) {
        paginationSize = mergedPagination.size;
      } else {
        paginationSize = mergedSize === "small" || mergedSize === "middle" ? "small" : void 0;
      }
      const renderPagination = (position3) => /* @__PURE__ */ React390.createElement(pagination_default, Object.assign({}, mergedPagination, {
        className: (0, import_classnames138.default)(`${prefixCls}-pagination ${prefixCls}-pagination-${position3}`, mergedPagination.className),
        size: paginationSize
      }));
      const defaultPosition = direction === "rtl" ? "left" : "right";
      const {
        position: position2
      } = mergedPagination;
      if (position2 !== null && Array.isArray(position2)) {
        const topPos = position2.find((p) => p.includes("top"));
        const bottomPos = position2.find((p) => p.includes("bottom"));
        const isDisable = position2.every((p) => `${p}` === "none");
        if (!topPos && !bottomPos && !isDisable) {
          bottomPaginationNode = renderPagination(defaultPosition);
        }
        if (topPos) {
          topPaginationNode = renderPagination(topPos.toLowerCase().replace("top", ""));
        }
        if (bottomPos) {
          bottomPaginationNode = renderPagination(bottomPos.toLowerCase().replace("bottom", ""));
        }
      } else {
        bottomPaginationNode = renderPagination(defaultPosition);
      }
    }
    let spinProps;
    if (typeof loading === "boolean") {
      spinProps = {
        spinning: loading
      };
    } else if (typeof loading === "object") {
      spinProps = Object.assign({
        spinning: true
      }, loading);
    }
    const wrapperClassNames = (0, import_classnames138.default)(cssVarCls, rootCls, `${prefixCls}-wrapper`, table === null || table === void 0 ? void 0 : table.className, {
      [`${prefixCls}-wrapper-rtl`]: direction === "rtl"
    }, className, rootClassName, hashId);
    const mergedStyle = Object.assign(Object.assign({}, table === null || table === void 0 ? void 0 : table.style), style2);
    const emptyText = locale9 && locale9.emptyText || (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty("Table")) || /* @__PURE__ */ React390.createElement(defaultRenderEmpty_default, {
      componentName: "Table"
    });
    const TableComponent = virtual ? VirtualTable_default2 : RcTable_default;
    const virtualProps = {};
    const listItemHeight = React390.useMemo(() => {
      const {
        fontSize,
        lineHeight,
        padding,
        paddingXS,
        paddingSM
      } = token2;
      const fontHeight = Math.floor(fontSize * lineHeight);
      switch (mergedSize) {
        case "large":
          return padding * 2 + fontHeight;
        case "small":
          return paddingXS * 2 + fontHeight;
        default:
          return paddingSM * 2 + fontHeight;
      }
    }, [token2, mergedSize]);
    if (virtual) {
      virtualProps.listItemHeight = listItemHeight;
    }
    return wrapCSSVar(/* @__PURE__ */ React390.createElement("div", {
      ref: rootRef,
      className: wrapperClassNames,
      style: mergedStyle
    }, /* @__PURE__ */ React390.createElement(spin_default, Object.assign({
      spinning: false
    }, spinProps), topPaginationNode, /* @__PURE__ */ React390.createElement(TableComponent, Object.assign({}, virtualProps, tableProps, {
      ref: tblRef,
      columns: mergedColumns,
      direction,
      expandable: mergedExpandable,
      prefixCls,
      className: (0, import_classnames138.default)({
        [`${prefixCls}-middle`]: mergedSize === "middle",
        [`${prefixCls}-small`]: mergedSize === "small",
        [`${prefixCls}-bordered`]: bordered,
        [`${prefixCls}-empty`]: rawData.length === 0
      }, cssVarCls, rootCls, hashId),
      data: pageData,
      rowKey: getRowKey,
      rowClassName: internalRowClassName,
      emptyText,
      // Internal
      internalHooks: INTERNAL_HOOKS,
      internalRefs,
      transformColumns,
      getContainerWidth
    })), bottomPaginationNode)));
  };
  var InternalTable_default = /* @__PURE__ */ React390.forwardRef(InternalTable);

  // node_modules/antd/es/table/Table.js
  var Table2 = (props, ref) => {
    const renderTimesRef = React391.useRef(0);
    renderTimesRef.current += 1;
    return /* @__PURE__ */ React391.createElement(InternalTable_default, Object.assign({}, props, {
      ref,
      _renderTimes: renderTimesRef.current
    }));
  };
  var ForwardTable = /* @__PURE__ */ React391.forwardRef(Table2);
  ForwardTable.SELECTION_COLUMN = SELECTION_COLUMN;
  ForwardTable.EXPAND_COLUMN = EXPAND_COLUMN;
  ForwardTable.SELECTION_ALL = SELECTION_ALL;
  ForwardTable.SELECTION_INVERT = SELECTION_INVERT;
  ForwardTable.SELECTION_NONE = SELECTION_NONE;
  ForwardTable.Column = Column_default2;
  ForwardTable.ColumnGroup = ColumnGroup_default2;
  ForwardTable.Summary = FooterComponents;
  if (true) {
    ForwardTable.displayName = "Table";
  }
  var Table_default2 = ForwardTable;

  // node_modules/antd/es/table/index.js
  var table_default = Table_default2;

  // node_modules/antd/es/_util/transButton.js
  var React392 = __toESM(require_react());
  var __rest48 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var inlineStyle = {
    border: 0,
    background: "transparent",
    padding: 0,
    lineHeight: "inherit",
    display: "inline-block"
  };
  var TransButton = /* @__PURE__ */ React392.forwardRef((props, ref) => {
    const onKeyDown2 = (event) => {
      const {
        keyCode
      } = event;
      if (keyCode === KeyCode_default.ENTER) {
        event.preventDefault();
      }
    };
    const onKeyUp = (event) => {
      const {
        keyCode
      } = event;
      const {
        onClick
      } = props;
      if (keyCode === KeyCode_default.ENTER && onClick) {
        onClick();
      }
    };
    const {
      style: style2,
      noStyle,
      disabled
    } = props, restProps = __rest48(props, ["style", "noStyle", "disabled"]);
    let mergedStyle = {};
    if (!noStyle) {
      mergedStyle = Object.assign({}, inlineStyle);
    }
    if (disabled) {
      mergedStyle.pointerEvents = "none";
    }
    mergedStyle = Object.assign(Object.assign({}, mergedStyle), style2);
    return /* @__PURE__ */ React392.createElement("div", Object.assign({
      role: "button",
      tabIndex: 0,
      ref
    }, restProps, {
      onKeyDown: onKeyDown2,
      onKeyUp,
      style: mergedStyle
    }));
  });
  var transButton_default = TransButton;

  // node_modules/antd/es/typography/Link.js
  var React403 = __toESM(require_react());

  // node_modules/antd/es/typography/Base/index.js
  var React402 = __toESM(require_react());

  // node_modules/@ant-design/icons/es/icons/CopyOutlined.js
  var React393 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/CopyOutlined.js
  var CopyOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z" } }] }, "name": "copy", "theme": "outlined" };
  var CopyOutlined_default = CopyOutlined;

  // node_modules/@ant-design/icons/es/icons/CopyOutlined.js
  var CopyOutlined2 = function CopyOutlined3(props, ref) {
    return /* @__PURE__ */ React393.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: CopyOutlined_default
    }));
  };
  if (true) {
    CopyOutlined2.displayName = "CopyOutlined";
  }
  var CopyOutlined_default2 = /* @__PURE__ */ React393.forwardRef(CopyOutlined2);

  // node_modules/@ant-design/icons/es/icons/EditOutlined.js
  var React394 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js
  var EditOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z" } }] }, "name": "edit", "theme": "outlined" };
  var EditOutlined_default = EditOutlined;

  // node_modules/@ant-design/icons/es/icons/EditOutlined.js
  var EditOutlined2 = function EditOutlined3(props, ref) {
    return /* @__PURE__ */ React394.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: EditOutlined_default
    }));
  };
  if (true) {
    EditOutlined2.displayName = "EditOutlined";
  }
  var EditOutlined_default2 = /* @__PURE__ */ React394.forwardRef(EditOutlined2);

  // node_modules/antd/es/typography/Base/index.js
  var import_classnames141 = __toESM(require_classnames());
  var import_copy_to_clipboard = __toESM(require_copy_to_clipboard());

  // node_modules/@ant-design/icons/es/icons/EnterOutlined.js
  var React395 = __toESM(require_react());

  // node_modules/@ant-design/icons-svg/es/asn/EnterOutlined.js
  var EnterOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 000 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z" } }] }, "name": "enter", "theme": "outlined" };
  var EnterOutlined_default = EnterOutlined;

  // node_modules/@ant-design/icons/es/icons/EnterOutlined.js
  var EnterOutlined2 = function EnterOutlined3(props, ref) {
    return /* @__PURE__ */ React395.createElement(AntdIcon_default, _extends({}, props, {
      ref,
      icon: EnterOutlined_default
    }));
  };
  if (true) {
    EnterOutlined2.displayName = "EnterOutlined";
  }
  var EnterOutlined_default2 = /* @__PURE__ */ React395.forwardRef(EnterOutlined2);

  // node_modules/antd/es/typography/Editable.js
  var import_classnames139 = __toESM(require_classnames());
  var React396 = __toESM(require_react());

  // node_modules/antd/es/typography/style/mixins.js
  var getTitleStyle = (fontSize, lineHeight, color, token2) => {
    const {
      titleMarginBottom,
      fontWeightStrong
    } = token2;
    return {
      marginBottom: titleMarginBottom,
      color,
      fontWeight: fontWeightStrong,
      fontSize,
      lineHeight
    };
  };
  var getTitleStyles = (token2) => {
    const headings = [1, 2, 3, 4, 5];
    const styles = {};
    headings.forEach((headingLevel) => {
      styles[`
      h${headingLevel}&,
      div&-h${headingLevel},
      div&-h${headingLevel} > textarea,
      h${headingLevel}
    `] = getTitleStyle(token2[`fontSizeHeading${headingLevel}`], token2[`lineHeightHeading${headingLevel}`], token2.colorTextHeading, token2);
    });
    return styles;
  };
  var getLinkStyles = (token2) => {
    const {
      componentCls
    } = token2;
    return {
      "a&, a": Object.assign(Object.assign({}, operationUnit(token2)), {
        textDecoration: token2.linkDecoration,
        "&:active, &:hover": {
          textDecoration: token2.linkHoverDecoration
        },
        [`&[disabled], &${componentCls}-disabled`]: {
          color: token2.colorTextDisabled,
          cursor: "not-allowed",
          "&:active, &:hover": {
            color: token2.colorTextDisabled
          },
          "&:active": {
            pointerEvents: "none"
          }
        }
      })
    };
  };
  var getResetStyles = (token2) => ({
    code: {
      margin: "0 0.2em",
      paddingInline: "0.4em",
      paddingBlock: "0.2em 0.1em",
      fontSize: "85%",
      fontFamily: token2.fontFamilyCode,
      background: "rgba(150, 150, 150, 0.1)",
      border: "1px solid rgba(100, 100, 100, 0.2)",
      borderRadius: 3
    },
    kbd: {
      margin: "0 0.2em",
      paddingInline: "0.4em",
      paddingBlock: "0.15em 0.1em",
      fontSize: "90%",
      fontFamily: token2.fontFamilyCode,
      background: "rgba(150, 150, 150, 0.06)",
      border: "1px solid rgba(100, 100, 100, 0.2)",
      borderBottomWidth: 2,
      borderRadius: 3
    },
    mark: {
      padding: 0,
      // FIXME hardcode in v4
      backgroundColor: gold[2]
    },
    "u, ins": {
      textDecoration: "underline",
      textDecorationSkipInk: "auto"
    },
    "s, del": {
      textDecoration: "line-through"
    },
    strong: {
      fontWeight: 600
    },
    // list
    "ul, ol": {
      marginInline: 0,
      marginBlock: "0 1em",
      padding: 0,
      li: {
        marginInline: "20px 0",
        marginBlock: 0,
        paddingInline: "4px 0",
        paddingBlock: 0
      }
    },
    ul: {
      listStyleType: "circle",
      ul: {
        listStyleType: "disc"
      }
    },
    ol: {
      listStyleType: "decimal"
    },
    // pre & block
    "pre, blockquote": {
      margin: "1em 0"
    },
    pre: {
      padding: "0.4em 0.6em",
      whiteSpace: "pre-wrap",
      wordWrap: "break-word",
      background: "rgba(150, 150, 150, 0.1)",
      border: "1px solid rgba(100, 100, 100, 0.2)",
      borderRadius: 3,
      fontFamily: token2.fontFamilyCode,
      // Compatible for marked
      code: {
        display: "inline",
        margin: 0,
        padding: 0,
        fontSize: "inherit",
        fontFamily: "inherit",
        background: "transparent",
        border: 0
      }
    },
    blockquote: {
      paddingInline: "0.6em 0",
      paddingBlock: 0,
      borderInlineStart: "4px solid rgba(100, 100, 100, 0.2)",
      opacity: 0.85
    }
  });
  var getEditableStyles = (token2) => {
    const {
      componentCls,
      paddingSM
    } = token2;
    const inputShift = paddingSM;
    return {
      "&-edit-content": {
        position: "relative",
        "div&": {
          insetInlineStart: token2.calc(token2.paddingSM).mul(-1).equal(),
          marginTop: token2.calc(inputShift).mul(-1).equal(),
          marginBottom: `calc(1em - ${unit(inputShift)})`
        },
        [`${componentCls}-edit-content-confirm`]: {
          position: "absolute",
          insetInlineEnd: token2.calc(token2.marginXS).add(2).equal(),
          insetBlockEnd: token2.marginXS,
          color: token2.colorTextDescription,
          // default style
          fontWeight: "normal",
          fontSize: token2.fontSize,
          fontStyle: "normal",
          pointerEvents: "none"
        },
        textarea: {
          margin: "0!important",
          // Fix Editable Textarea flash in Firefox
          MozTransition: "none",
          height: "1em"
        }
      }
    };
  };
  var getCopyableStyles = (token2) => ({
    [`${token2.componentCls}-copy-success`]: {
      [`
    &,
    &:hover,
    &:focus`]: {
        color: token2.colorSuccess
      }
    },
    [`${token2.componentCls}-copy-icon-only`]: {
      marginInlineStart: 0
    }
  });
  var getEllipsisStyles = () => ({
    [`
  a&-ellipsis,
  span&-ellipsis
  `]: {
      display: "inline-block",
      maxWidth: "100%"
    },
    "&-single-line": {
      whiteSpace: "nowrap"
    },
    "&-ellipsis-single-line": {
      overflow: "hidden",
      textOverflow: "ellipsis",
      // https://blog.csdn.net/iefreer/article/details/50421025
      "a&, span&": {
        verticalAlign: "bottom"
      },
      "> code": {
        paddingBlock: 0,
        maxWidth: "calc(100% - 1.2em)",
        display: "inline-block",
        overflow: "hidden",
        textOverflow: "ellipsis",
        verticalAlign: "bottom",
        // https://github.com/ant-design/ant-design/issues/45953
        boxSizing: "content-box"
      }
    },
    "&-ellipsis-multiple-line": {
      display: "-webkit-box",
      overflow: "hidden",
      WebkitLineClamp: 3,
      WebkitBoxOrient: "vertical"
    }
  });

  // node_modules/antd/es/typography/style/index.js
  var genTypographyStyle = (token2) => {
    const {
      componentCls,
      titleMarginTop
    } = token2;
    return {
      [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
        color: token2.colorText,
        wordBreak: "break-word",
        lineHeight: token2.lineHeight,
        [`&${componentCls}-secondary`]: {
          color: token2.colorTextDescription
        },
        [`&${componentCls}-success`]: {
          color: token2.colorSuccess
        },
        [`&${componentCls}-warning`]: {
          color: token2.colorWarning
        },
        [`&${componentCls}-danger`]: {
          color: token2.colorError,
          "a&:active, a&:focus": {
            color: token2.colorErrorActive
          },
          "a&:hover": {
            color: token2.colorErrorHover
          }
        },
        [`&${componentCls}-disabled`]: {
          color: token2.colorTextDisabled,
          cursor: "not-allowed",
          userSelect: "none"
        },
        [`
        div&,
        p
      `]: {
          marginBottom: "1em"
        }
      }, getTitleStyles(token2)), {
        [`
      & + h1${componentCls},
      & + h2${componentCls},
      & + h3${componentCls},
      & + h4${componentCls},
      & + h5${componentCls}
      `]: {
          marginTop: titleMarginTop
        },
        [`
      div,
      ul,
      li,
      p,
      h1,
      h2,
      h3,
      h4,
      h5`]: {
          [`
        + h1,
        + h2,
        + h3,
        + h4,
        + h5
        `]: {
            marginTop: titleMarginTop
          }
        }
      }), getResetStyles(token2)), getLinkStyles(token2)), {
        // Operation
        [`
        ${componentCls}-expand,
        ${componentCls}-edit,
        ${componentCls}-copy
      `]: Object.assign(Object.assign({}, operationUnit(token2)), {
          marginInlineStart: token2.marginXXS
        })
      }), getEditableStyles(token2)), getCopyableStyles(token2)), getEllipsisStyles()), {
        "&-rtl": {
          direction: "rtl"
        }
      })
    };
  };
  var prepareComponentToken19 = () => ({
    titleMarginTop: "1.2em",
    titleMarginBottom: "0.5em"
  });
  var style_default24 = genStyleHooks("Typography", (token2) => [genTypographyStyle(token2)], prepareComponentToken19);

  // node_modules/antd/es/typography/Editable.js
  var Editable = (props) => {
    const {
      prefixCls,
      "aria-label": ariaLabel,
      className,
      style: style2,
      direction,
      maxLength,
      autoSize = true,
      value,
      onSave,
      onCancel,
      onEnd,
      component,
      enterIcon = /* @__PURE__ */ React396.createElement(EnterOutlined_default2, null)
    } = props;
    const ref = React396.useRef(null);
    const inComposition = React396.useRef(false);
    const lastKeyCode = React396.useRef();
    const [current2, setCurrent] = React396.useState(value);
    React396.useEffect(() => {
      setCurrent(value);
    }, [value]);
    React396.useEffect(() => {
      if (ref.current && ref.current.resizableTextArea) {
        const {
          textArea
        } = ref.current.resizableTextArea;
        textArea.focus();
        const {
          length: length2
        } = textArea.value;
        textArea.setSelectionRange(length2, length2);
      }
    }, []);
    const onChange = (_ref) => {
      let {
        target
      } = _ref;
      setCurrent(target.value.replace(/[\n\r]/g, ""));
    };
    const onCompositionStart = () => {
      inComposition.current = true;
    };
    const onCompositionEnd = () => {
      inComposition.current = false;
    };
    const onKeyDown2 = (_ref2) => {
      let {
        keyCode
      } = _ref2;
      if (inComposition.current)
        return;
      lastKeyCode.current = keyCode;
    };
    const confirmChange = () => {
      onSave(current2.trim());
    };
    const onKeyUp = (_ref3) => {
      let {
        keyCode,
        ctrlKey,
        altKey,
        metaKey,
        shiftKey
      } = _ref3;
      if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {
        if (keyCode === KeyCode_default.ENTER) {
          confirmChange();
          onEnd === null || onEnd === void 0 ? void 0 : onEnd();
        } else if (keyCode === KeyCode_default.ESC) {
          onCancel();
        }
      }
    };
    const onBlur = () => {
      confirmChange();
    };
    const textClassName = component ? `${prefixCls}-${component}` : "";
    const [wrapCSSVar, hashId, cssVarCls] = style_default24(prefixCls);
    const textAreaClassName = (0, import_classnames139.default)(prefixCls, `${prefixCls}-edit-content`, {
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, className, textClassName, hashId, cssVarCls);
    return wrapCSSVar(/* @__PURE__ */ React396.createElement("div", {
      className: textAreaClassName,
      style: style2
    }, /* @__PURE__ */ React396.createElement(TextArea_default2, {
      ref,
      maxLength,
      value: current2,
      onChange,
      onKeyDown: onKeyDown2,
      onKeyUp,
      onCompositionStart,
      onCompositionEnd,
      onBlur,
      "aria-label": ariaLabel,
      rows: 1,
      autoSize
    }), enterIcon !== null ? cloneElement4(enterIcon, {
      className: `${prefixCls}-edit-content-confirm`
    }) : null));
  };
  var Editable_default = Editable;

  // node_modules/antd/es/typography/hooks/useMergedConfig.js
  var React397 = __toESM(require_react());
  function useMergedConfig(propConfig, templateConfig) {
    return React397.useMemo(() => {
      const support = !!propConfig;
      return [support, Object.assign(Object.assign({}, templateConfig), support && typeof propConfig === "object" ? propConfig : null)];
    }, [propConfig]);
  }

  // node_modules/antd/es/typography/hooks/useUpdatedEffect.js
  var React398 = __toESM(require_react());
  var useUpdatedEffect = (callback, conditions) => {
    const mountRef = React398.useRef(false);
    React398.useEffect(() => {
      if (mountRef.current) {
        callback();
      } else {
        mountRef.current = true;
      }
    }, conditions);
  };
  var useUpdatedEffect_default = useUpdatedEffect;

  // node_modules/antd/es/typography/Typography.js
  var React399 = __toESM(require_react());
  var import_classnames140 = __toESM(require_classnames());
  var __rest49 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Typography = /* @__PURE__ */ React399.forwardRef((props, ref) => {
    const {
      prefixCls: customizePrefixCls,
      component: Component11 = "article",
      className,
      rootClassName,
      setContentRef,
      children,
      direction: typographyDirection,
      style: style2
    } = props, restProps = __rest49(props, ["prefixCls", "component", "className", "rootClassName", "setContentRef", "children", "direction", "style"]);
    const {
      getPrefixCls,
      direction: contextDirection,
      typography
    } = React399.useContext(ConfigContext);
    const direction = typographyDirection !== null && typographyDirection !== void 0 ? typographyDirection : contextDirection;
    let mergedRef = ref;
    if (setContentRef) {
      mergedRef = composeRef(ref, setContentRef);
    }
    if (true) {
      const warning8 = devUseWarning("Typography");
      warning8.deprecated(!setContentRef, "setContentRef", "ref");
    }
    const prefixCls = getPrefixCls("typography", customizePrefixCls);
    const [wrapCSSVar, hashId, cssVarCls] = style_default24(prefixCls);
    const componentClassName = (0, import_classnames140.default)(prefixCls, typography === null || typography === void 0 ? void 0 : typography.className, {
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, className, rootClassName, hashId, cssVarCls);
    const mergedStyle = Object.assign(Object.assign({}, typography === null || typography === void 0 ? void 0 : typography.style), style2);
    return wrapCSSVar(
      // @ts-expect-error: Expression produces a union type that is too complex to represent.
      /* @__PURE__ */ React399.createElement(Component11, Object.assign({
        className: componentClassName,
        style: mergedStyle,
        ref: mergedRef
      }, restProps), children)
    );
  });
  if (true) {
    Typography.displayName = "Typography";
  }
  var Typography_default = Typography;

  // node_modules/antd/es/typography/Base/Ellipsis.js
  var React400 = __toESM(require_react());
  function cuttable(node2) {
    const type4 = typeof node2;
    return type4 === "string" || type4 === "number";
  }
  function getNodesLen(nodeList) {
    let totalLen = 0;
    nodeList.forEach((node2) => {
      if (cuttable(node2)) {
        totalLen += String(node2).length;
      } else {
        totalLen += 1;
      }
    });
    return totalLen;
  }
  function sliceNodes(nodeList, len) {
    let currLen = 0;
    const currentNodeList = [];
    for (let i = 0; i < nodeList.length; i += 1) {
      if (currLen === len) {
        return currentNodeList;
      }
      const node2 = nodeList[i];
      const canCut = cuttable(node2);
      const nodeLen = canCut ? String(node2).length : 1;
      const nextLen = currLen + nodeLen;
      if (nextLen > len) {
        const restLen = len - currLen;
        currentNodeList.push(String(node2).slice(0, restLen));
        return currentNodeList;
      }
      currentNodeList.push(node2);
      currLen = nextLen;
    }
    return nodeList;
  }
  var NONE = 0;
  var PREPARE = 1;
  var WALKING = 2;
  var DONE_WITH_ELLIPSIS = 3;
  var DONE_WITHOUT_ELLIPSIS = 4;
  var Ellipsis = (_ref) => {
    let {
      enabledMeasure,
      children,
      text,
      width,
      fontSize,
      rows,
      onEllipsis
    } = _ref;
    const [[startLen, midLen, endLen], setCutLength] = React400.useState([0, 0, 0]);
    const [lastLen, setLastLen] = React400.useState(0);
    const [walkingState, setWalkingState] = React400.useState(NONE);
    const [singleRowHeight, setSingleRowHeight] = React400.useState(0);
    const singleRowRef = React400.useRef(null);
    const midRowRef = React400.useRef(null);
    const nodeList = React400.useMemo(() => toArray(text), [text]);
    const totalLen = React400.useMemo(() => getNodesLen(nodeList), [nodeList]);
    const mergedChildren = React400.useMemo(() => {
      if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {
        if (lastLen && walkingState !== DONE_WITHOUT_ELLIPSIS && enabledMeasure)
          return children(sliceNodes(nodeList, lastLen), lastLen < totalLen);
        return children(nodeList, false);
      }
      return children(sliceNodes(nodeList, midLen), midLen < totalLen);
    }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]);
    useLayoutEffect_default(() => {
      if (enabledMeasure && width && fontSize && totalLen) {
        setWalkingState(PREPARE);
        setCutLength([0, Math.ceil(totalLen / 2), totalLen]);
      }
    }, [enabledMeasure, width, fontSize, text, totalLen, rows]);
    useLayoutEffect_default(() => {
      var _a;
      if (walkingState === PREPARE) {
        setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);
      }
    }, [walkingState]);
    useLayoutEffect_default(() => {
      var _a, _b;
      if (singleRowHeight) {
        if (walkingState === PREPARE) {
          const midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;
          const maxHeight = rows * singleRowHeight;
          if (midHeight <= maxHeight) {
            setWalkingState(DONE_WITHOUT_ELLIPSIS);
            onEllipsis(false);
          } else {
            setWalkingState(WALKING);
          }
        } else if (walkingState === WALKING) {
          if (startLen !== endLen) {
            const midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;
            const maxHeight = rows * singleRowHeight;
            let nextStartLen = startLen;
            let nextEndLen = endLen;
            if (startLen === endLen - 1) {
              nextEndLen = startLen;
            } else if (midHeight <= maxHeight) {
              nextStartLen = midLen;
            } else {
              nextEndLen = midLen;
            }
            const nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);
            setCutLength([nextStartLen, nextMidLen, nextEndLen]);
          } else {
            setWalkingState(DONE_WITH_ELLIPSIS);
            setLastLen(midLen);
            onEllipsis(true);
          }
        }
      }
    }, [walkingState, startLen, endLen, rows, singleRowHeight]);
    const measureStyle = {
      width,
      whiteSpace: "normal",
      margin: 0,
      padding: 0
    };
    const renderMeasure = (content, ref, style2) => /* @__PURE__ */ React400.createElement("span", {
      "aria-hidden": true,
      ref,
      style: Object.assign({
        position: "fixed",
        display: "block",
        left: 0,
        top: 0,
        zIndex: -9999,
        visibility: "hidden",
        pointerEvents: "none",
        fontSize: Math.ceil(fontSize / 2) * 2
      }, style2)
    }, content);
    const renderMeasureSlice = (len, ref) => {
      const sliceNodeList = sliceNodes(nodeList, len);
      return renderMeasure(children(sliceNodeList, true), ref, measureStyle);
    };
    return /* @__PURE__ */ React400.createElement(React400.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /* @__PURE__ */ React400.createElement(React400.Fragment, null, renderMeasure("lg", singleRowRef, {
      wordBreak: "keep-all",
      whiteSpace: "nowrap"
    }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));
  };
  if (true) {
    Ellipsis.displayName = "Ellipsis";
  }
  var Ellipsis_default = Ellipsis;

  // node_modules/antd/es/typography/Base/EllipsisTooltip.js
  var React401 = __toESM(require_react());
  var EllipsisTooltip = (_ref) => {
    let {
      enabledEllipsis,
      isEllipsis,
      children,
      tooltipProps
    } = _ref;
    if (!(tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.title) || !enabledEllipsis) {
      return children;
    }
    return /* @__PURE__ */ React401.createElement(tooltip_default, Object.assign({
      open: isEllipsis ? void 0 : false
    }, tooltipProps), children);
  };
  if (true) {
    EllipsisTooltip.displayName = "EllipsisTooltip";
  }
  var EllipsisTooltip_default = EllipsisTooltip;

  // node_modules/antd/es/typography/Base/index.js
  var __rest50 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  function wrapperDecorations(_ref, content) {
    let {
      mark,
      code,
      underline,
      delete: del,
      strong,
      keyboard,
      italic
    } = _ref;
    let currentContent = content;
    function wrap(tag, needed) {
      if (!needed) {
        return;
      }
      currentContent = /* @__PURE__ */ React402.createElement(tag, {}, currentContent);
    }
    wrap("strong", strong);
    wrap("u", underline);
    wrap("del", del);
    wrap("code", code);
    wrap("mark", mark);
    wrap("kbd", keyboard);
    wrap("i", italic);
    return currentContent;
  }
  function getNode(dom, defaultNode, needDom) {
    if (dom === true || dom === void 0) {
      return defaultNode;
    }
    return dom || needDom && defaultNode;
  }
  function toList(val) {
    if (val === false) {
      return [false, false];
    }
    return Array.isArray(val) ? val : [val];
  }
  var ELLIPSIS_STR = "...";
  var Base = /* @__PURE__ */ React402.forwardRef((props, ref) => {
    var _a, _b, _c;
    const {
      prefixCls: customizePrefixCls,
      className,
      style: style2,
      type: type4,
      disabled,
      children,
      ellipsis,
      editable,
      copyable,
      component,
      title
    } = props, restProps = __rest50(props, ["prefixCls", "className", "style", "type", "disabled", "children", "ellipsis", "editable", "copyable", "component", "title"]);
    const {
      getPrefixCls,
      direction
    } = React402.useContext(ConfigContext);
    const [textLocale] = useLocale_default("Text");
    const typographyRef = React402.useRef(null);
    const editIconRef = React402.useRef(null);
    const prefixCls = getPrefixCls("typography", customizePrefixCls);
    const textProps = omit(restProps, ["mark", "code", "delete", "underline", "strong", "keyboard", "italic"]);
    const [enableEdit, editConfig] = useMergedConfig(editable);
    const [editing, setEditing] = useMergedState(false, {
      value: editConfig.editing
    });
    const {
      triggerType = ["icon"]
    } = editConfig;
    const triggerEdit = (edit) => {
      var _a2;
      if (edit) {
        (_a2 = editConfig.onStart) === null || _a2 === void 0 ? void 0 : _a2.call(editConfig);
      }
      setEditing(edit);
    };
    useUpdatedEffect_default(() => {
      var _a2;
      if (!editing) {
        (_a2 = editIconRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      }
    }, [editing]);
    const onEditClick = (e3) => {
      e3 === null || e3 === void 0 ? void 0 : e3.preventDefault();
      triggerEdit(true);
    };
    const onEditChange = (value) => {
      var _a2;
      (_a2 = editConfig.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(editConfig, value);
      triggerEdit(false);
    };
    const onEditCancel = () => {
      var _a2;
      (_a2 = editConfig.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(editConfig);
      triggerEdit(false);
    };
    const [enableCopy, copyConfig] = useMergedConfig(copyable);
    const [copied, setCopied] = React402.useState(false);
    const copyIdRef = React402.useRef(null);
    const copyOptions = {};
    if (copyConfig.format) {
      copyOptions.format = copyConfig.format;
    }
    const cleanCopyId = () => {
      if (copyIdRef.current) {
        clearTimeout(copyIdRef.current);
      }
    };
    const onCopyClick = (e3) => {
      var _a2;
      e3 === null || e3 === void 0 ? void 0 : e3.preventDefault();
      e3 === null || e3 === void 0 ? void 0 : e3.stopPropagation();
      (0, import_copy_to_clipboard.default)(copyConfig.text || String(children) || "", copyOptions);
      setCopied(true);
      cleanCopyId();
      copyIdRef.current = setTimeout(() => {
        setCopied(false);
      }, 3e3);
      (_a2 = copyConfig.onCopy) === null || _a2 === void 0 ? void 0 : _a2.call(copyConfig, e3);
    };
    React402.useEffect(() => cleanCopyId, []);
    const [isLineClampSupport, setIsLineClampSupport] = React402.useState(false);
    const [isTextOverflowSupport, setIsTextOverflowSupport] = React402.useState(false);
    const [expanded, setExpanded] = React402.useState(false);
    const [isJsEllipsis, setIsJsEllipsis] = React402.useState(false);
    const [isNativeEllipsis, setIsNativeEllipsis] = React402.useState(false);
    const [isNativeVisible, setIsNativeVisible] = React402.useState(true);
    const [enableEllipsis, ellipsisConfig] = useMergedConfig(ellipsis, {
      expandable: false
    });
    const mergedEnableEllipsis = enableEllipsis && !expanded;
    const {
      rows = 1
    } = ellipsisConfig;
    const needMeasureEllipsis = React402.useMemo(() => (
      // Disable ellipsis
      !mergedEnableEllipsis || // Provide suffix
      ellipsisConfig.suffix !== void 0 || ellipsisConfig.onEllipsis || // Can't use css ellipsis since we need to provide the place for button
      ellipsisConfig.expandable || enableEdit || enableCopy
    ), [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);
    useLayoutEffect_default(() => {
      if (enableEllipsis && !needMeasureEllipsis) {
        setIsLineClampSupport(isStyleSupport("webkitLineClamp"));
        setIsTextOverflowSupport(isStyleSupport("textOverflow"));
      }
    }, [needMeasureEllipsis, enableEllipsis]);
    const cssEllipsis = React402.useMemo(() => {
      if (needMeasureEllipsis) {
        return false;
      }
      if (rows === 1) {
        return isTextOverflowSupport;
      }
      return isLineClampSupport;
    }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);
    const isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);
    const cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;
    const cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;
    const onExpandClick = (e3) => {
      var _a2;
      setExpanded(true);
      (_a2 = ellipsisConfig.onExpand) === null || _a2 === void 0 ? void 0 : _a2.call(ellipsisConfig, e3);
    };
    const [ellipsisWidth, setEllipsisWidth] = React402.useState(0);
    const [ellipsisFontSize, setEllipsisFontSize] = React402.useState(0);
    const onResize2 = (_ref2, element) => {
      let {
        offsetWidth
      } = _ref2;
      var _a2;
      setEllipsisWidth(offsetWidth);
      setEllipsisFontSize(parseInt((_a2 = window.getComputedStyle) === null || _a2 === void 0 ? void 0 : _a2.call(window, element).fontSize, 10) || 0);
    };
    const onJsEllipsis = (jsEllipsis) => {
      var _a2;
      setIsJsEllipsis(jsEllipsis);
      if (isJsEllipsis !== jsEllipsis) {
        (_a2 = ellipsisConfig.onEllipsis) === null || _a2 === void 0 ? void 0 : _a2.call(ellipsisConfig, jsEllipsis);
      }
    };
    React402.useEffect(() => {
      const textEle = typographyRef.current;
      if (enableEllipsis && cssEllipsis && textEle) {
        const currentEllipsis = cssLineClamp ? textEle.offsetHeight < textEle.scrollHeight : textEle.offsetWidth < textEle.scrollWidth;
        if (isNativeEllipsis !== currentEllipsis) {
          setIsNativeEllipsis(currentEllipsis);
        }
      }
    }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible, ellipsisWidth]);
    React402.useEffect(() => {
      const textEle = typographyRef.current;
      if (typeof IntersectionObserver === "undefined" || !textEle || !cssEllipsis || !mergedEnableEllipsis) {
        return;
      }
      const observer = new IntersectionObserver(() => {
        setIsNativeVisible(!!textEle.offsetParent);
      });
      observer.observe(textEle);
      return () => {
        observer.disconnect();
      };
    }, [cssEllipsis, mergedEnableEllipsis]);
    let tooltipProps = {};
    if (ellipsisConfig.tooltip === true) {
      tooltipProps = {
        title: (_a = editConfig.text) !== null && _a !== void 0 ? _a : children
      };
    } else if (/* @__PURE__ */ React402.isValidElement(ellipsisConfig.tooltip)) {
      tooltipProps = {
        title: ellipsisConfig.tooltip
      };
    } else if (typeof ellipsisConfig.tooltip === "object") {
      tooltipProps = Object.assign({
        title: (_b = editConfig.text) !== null && _b !== void 0 ? _b : children
      }, ellipsisConfig.tooltip);
    } else {
      tooltipProps = {
        title: ellipsisConfig.tooltip
      };
    }
    const topAriaLabel = React402.useMemo(() => {
      const isValid = (val) => ["string", "number"].includes(typeof val);
      if (!enableEllipsis || cssEllipsis) {
        return void 0;
      }
      if (isValid(editConfig.text)) {
        return editConfig.text;
      }
      if (isValid(children)) {
        return children;
      }
      if (isValid(title)) {
        return title;
      }
      if (isValid(tooltipProps.title)) {
        return tooltipProps.title;
      }
      return void 0;
    }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);
    if (editing) {
      return /* @__PURE__ */ React402.createElement(Editable_default, {
        value: (_c = editConfig.text) !== null && _c !== void 0 ? _c : typeof children === "string" ? children : "",
        onSave: onEditChange,
        onCancel: onEditCancel,
        onEnd: editConfig.onEnd,
        prefixCls,
        className,
        style: style2,
        direction,
        component,
        maxLength: editConfig.maxLength,
        autoSize: editConfig.autoSize,
        enterIcon: editConfig.enterIcon
      });
    }
    const renderExpand = () => {
      const {
        expandable,
        symbol
      } = ellipsisConfig;
      if (!expandable)
        return null;
      let expandContent;
      if (symbol) {
        expandContent = symbol;
      } else {
        expandContent = textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand;
      }
      return /* @__PURE__ */ React402.createElement("a", {
        key: "expand",
        className: `${prefixCls}-expand`,
        onClick: onExpandClick,
        "aria-label": textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand
      }, expandContent);
    };
    const renderEdit = () => {
      if (!enableEdit)
        return;
      const {
        icon,
        tooltip
      } = editConfig;
      const editTitle = toArray(tooltip)[0] || (textLocale === null || textLocale === void 0 ? void 0 : textLocale.edit);
      const ariaLabel = typeof editTitle === "string" ? editTitle : "";
      return triggerType.includes("icon") ? /* @__PURE__ */ React402.createElement(tooltip_default, {
        key: "edit",
        title: tooltip === false ? "" : editTitle
      }, /* @__PURE__ */ React402.createElement(transButton_default, {
        ref: editIconRef,
        className: `${prefixCls}-edit`,
        onClick: onEditClick,
        "aria-label": ariaLabel
      }, icon || /* @__PURE__ */ React402.createElement(EditOutlined_default2, {
        role: "button"
      }))) : null;
    };
    const renderCopy = () => {
      if (!enableCopy) {
        return null;
      }
      const {
        tooltips,
        icon
      } = copyConfig;
      const tooltipNodes = toList(tooltips);
      const iconNodes = toList(icon);
      const copyTitle = copied ? getNode(tooltipNodes[1], textLocale === null || textLocale === void 0 ? void 0 : textLocale.copied) : getNode(tooltipNodes[0], textLocale === null || textLocale === void 0 ? void 0 : textLocale.copy);
      const systemStr = copied ? textLocale === null || textLocale === void 0 ? void 0 : textLocale.copied : textLocale === null || textLocale === void 0 ? void 0 : textLocale.copy;
      const ariaLabel = typeof copyTitle === "string" ? copyTitle : systemStr;
      return /* @__PURE__ */ React402.createElement(tooltip_default, {
        key: "copy",
        title: copyTitle
      }, /* @__PURE__ */ React402.createElement(transButton_default, {
        className: (0, import_classnames141.default)(`${prefixCls}-copy`, {
          [`${prefixCls}-copy-success`]: copied,
          [`${prefixCls}-copy-icon-only`]: children === null || children === void 0
        }),
        onClick: onCopyClick,
        "aria-label": ariaLabel
      }, copied ? getNode(iconNodes[1], /* @__PURE__ */ React402.createElement(CheckOutlined_default2, null), true) : getNode(iconNodes[0], /* @__PURE__ */ React402.createElement(CopyOutlined_default2, null), true)));
    };
    const renderOperations = (renderExpanded) => [renderExpanded && renderExpand(), renderEdit(), renderCopy()];
    const renderEllipsis = (needEllipsis) => [needEllipsis && /* @__PURE__ */ React402.createElement("span", {
      "aria-hidden": true,
      key: "ellipsis"
    }, ELLIPSIS_STR), ellipsisConfig.suffix, renderOperations(needEllipsis)];
    return /* @__PURE__ */ React402.createElement(es_default, {
      onResize: onResize2,
      disabled: !mergedEnableEllipsis
    }, (resizeRef) => /* @__PURE__ */ React402.createElement(EllipsisTooltip_default, {
      tooltipProps,
      enabledEllipsis: mergedEnableEllipsis,
      isEllipsis: isMergedEllipsis
    }, /* @__PURE__ */ React402.createElement(Typography_default, Object.assign({
      className: (0, import_classnames141.default)({
        [`${prefixCls}-${type4}`]: type4,
        [`${prefixCls}-disabled`]: disabled,
        [`${prefixCls}-ellipsis`]: enableEllipsis,
        [`${prefixCls}-single-line`]: mergedEnableEllipsis && rows === 1,
        [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,
        [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp
      }, className),
      prefixCls: customizePrefixCls,
      style: Object.assign(Object.assign({}, style2), {
        WebkitLineClamp: cssLineClamp ? rows : void 0
      }),
      component,
      ref: composeRef(resizeRef, typographyRef, ref),
      direction,
      onClick: triggerType.includes("text") ? onEditClick : void 0,
      "aria-label": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),
      title
    }, textProps), /* @__PURE__ */ React402.createElement(Ellipsis_default, {
      enabledMeasure: mergedEnableEllipsis && !cssEllipsis,
      text: children,
      rows,
      width: ellipsisWidth,
      fontSize: ellipsisFontSize,
      onEllipsis: onJsEllipsis
    }, (node2, needEllipsis) => {
      let renderNode = node2;
      if (node2.length && needEllipsis && topAriaLabel) {
        renderNode = /* @__PURE__ */ React402.createElement("span", {
          key: "show-content",
          "aria-hidden": true
        }, renderNode);
      }
      const wrappedContext = wrapperDecorations(props, /* @__PURE__ */ React402.createElement(React402.Fragment, null, renderNode, renderEllipsis(needEllipsis)));
      return wrappedContext;
    }))));
  });
  var Base_default = Base;

  // node_modules/antd/es/typography/Link.js
  var __rest51 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Link = /* @__PURE__ */ React403.forwardRef((_a, ref) => {
    var {
      ellipsis,
      rel
    } = _a, restProps = __rest51(_a, ["ellipsis", "rel"]);
    if (true) {
      const warning8 = devUseWarning("Typography.Link");
      true ? warning8(typeof ellipsis !== "object", "usage", "`ellipsis` only supports boolean value.") : void 0;
    }
    const mergedProps = Object.assign(Object.assign({}, restProps), {
      rel: rel === void 0 && restProps.target === "_blank" ? "noopener noreferrer" : rel
    });
    delete mergedProps.navigate;
    return /* @__PURE__ */ React403.createElement(Base_default, Object.assign({}, mergedProps, {
      ref,
      ellipsis: !!ellipsis,
      component: "a"
    }));
  });
  var Link_default = Link;

  // node_modules/antd/es/typography/Paragraph.js
  var React404 = __toESM(require_react());
  var Paragraph2 = /* @__PURE__ */ React404.forwardRef((props, ref) => /* @__PURE__ */ React404.createElement(Base_default, Object.assign({
    ref
  }, props, {
    component: "div"
  })));
  var Paragraph_default2 = Paragraph2;

  // node_modules/antd/es/typography/Text.js
  var React405 = __toESM(require_react());
  var __rest52 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var Text = (_a, ref) => {
    var {
      ellipsis
    } = _a, restProps = __rest52(_a, ["ellipsis"]);
    const mergedEllipsis = React405.useMemo(() => {
      if (ellipsis && typeof ellipsis === "object") {
        return omit(ellipsis, ["expandable", "rows"]);
      }
      return ellipsis;
    }, [ellipsis]);
    if (true) {
      const warning8 = devUseWarning("Typography.Text");
      true ? warning8(typeof ellipsis !== "object" || !ellipsis || !("expandable" in ellipsis) && !("rows" in ellipsis), "usage", "`ellipsis` do not support `expandable` or `rows` props.") : void 0;
    }
    return /* @__PURE__ */ React405.createElement(Base_default, Object.assign({
      ref
    }, restProps, {
      ellipsis: mergedEllipsis,
      component: "span"
    }));
  };
  var Text_default = /* @__PURE__ */ React405.forwardRef(Text);

  // node_modules/antd/es/typography/Title.js
  var React406 = __toESM(require_react());
  var __rest53 = function(s, e3) {
    var t2 = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e3.indexOf(p) < 0)
        t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  };
  var TITLE_ELE_LIST = [1, 2, 3, 4, 5];
  var Title2 = /* @__PURE__ */ React406.forwardRef((props, ref) => {
    const {
      level = 1
    } = props, restProps = __rest53(props, ["level"]);
    let component;
    if (true) {
      const warning8 = devUseWarning("Typography.Title");
      true ? warning8(TITLE_ELE_LIST.includes(level), "usage", "Title only accept `1 | 2 | 3 | 4 | 5` as `level` value. And `5` need 4.6.0+ version.") : void 0;
    }
    if (TITLE_ELE_LIST.includes(level)) {
      component = `h${level}`;
    } else {
      component = "h1";
    }
    return /* @__PURE__ */ React406.createElement(Base_default, Object.assign({
      ref
    }, restProps, {
      component
    }));
  });
  var Title_default2 = Title2;

  // node_modules/antd/es/typography/index.js
  var Typography2 = Typography_default;
  Typography2.Text = Text_default;
  Typography2.Link = Link_default;
  Typography2.Title = Title_default2;
  Typography2.Paragraph = Paragraph_default2;
  var typography_default = Typography2;

  // app/javascript/components/router/AppRouter.jsx
  var import_react136 = __toESM(require_react());

  // node_modules/react-router-dom/dist/index.js
  var React408 = __toESM(require_react());
  var ReactDOM4 = __toESM(require_react_dom());

  // node_modules/react-router/dist/index.js
  var React407 = __toESM(require_react());

  // node_modules/@remix-run/router/dist/router.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search,
        hash
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search,
          hash
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning7(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e3) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location2, index2) {
    return {
      usr: location2.state,
      key: location2.key,
      idx: index2
    };
  }
  function createLocation(current2, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location2 = _extends3({
      pathname: typeof current2 === "string" ? current2 : current2.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location2;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = _ref;
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
  }
  function parsePath(path2) {
    let parsedPath = {};
    if (path2) {
      let hashIndex = path2.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path2.substr(hashIndex);
        path2 = path2.substr(0, hashIndex);
      }
      let searchIndex = path2.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path2.substr(searchIndex);
        path2 = path2.substr(0, searchIndex);
      }
      if (path2) {
        parsedPath.pathname = path2;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener2 = null;
    let index2 = getIndex();
    if (index2 == null) {
      index2 = 0;
      globalHistory.replaceState(_extends3({}, globalHistory.state, {
        idx: index2
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index2;
      index2 = nextIndex;
      if (listener2) {
        listener2({
          action,
          location: history2.location,
          delta
        });
      }
    }
    function push(to, state) {
      action = Action.Push;
      let location2 = createLocation(history2.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index2 = getIndex() + 1;
      let historyState = getHistoryState(location2, index2);
      let url2 = history2.createHref(location2);
      try {
        globalHistory.pushState(historyState, "", url2);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url2);
      }
      if (v5Compat && listener2) {
        listener2({
          action,
          location: history2.location,
          delta: 1
        });
      }
    }
    function replace2(to, state) {
      action = Action.Replace;
      let location2 = createLocation(history2.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index2 = getIndex();
      let historyState = getHistoryState(location2, index2);
      let url2 = history2.createHref(location2);
      globalHistory.replaceState(historyState, "", url2);
      if (v5Compat && listener2) {
        listener2({
          action,
          location: history2.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base);
    }
    let history2 = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener2) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener2 = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener2 = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url2 = createURL(to);
        return {
          pathname: url2.pathname,
          search: url2.search,
          hash: url2.hash
        };
      },
      push,
      replace: replace2,
      go(n2) {
        return globalHistory.go(n2);
      }
    };
    return history2;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location2.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches2 = null;
    for (let i = 0; matches2 == null && i < branches.length; ++i) {
      matches2 = matchRouteBranch(
        branches[i],
        // Incoming pathnames are generally encoded from either window.location
        // or from router.navigate, but we want to match against the unencoded
        // paths in the route definitions.  Memory router locations won't be
        // encoded here but there also shouldn't be anything to decode so this
        // should be a safe operation.  This avoids needing matchRoutes to be
        // history-aware.
        safelyDecodeURI(pathname)
      );
    }
    return matches2;
  }
  function convertRouteMatchToUiMatch(match2, loaderData) {
    let {
      route,
      pathname,
      params
    } = match2;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index2, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path2 = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path2 + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path2);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path: path2,
        score: computeScore(path2, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index2) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index2);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index2, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path2) {
    let segments = path2.split("/");
    if (segments.length === 0)
      return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required4 = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required4, ""] : [required4];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required4 : [required4, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path2.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s) => s === "*";
  function computeScore(path2, index2) {
    let segments = path2.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n2, i) => n2 === b[i]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname) {
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches2 = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end
      }, remainingPathname);
      if (!match2)
        return null;
      Object.assign(matchedParams, match2.params);
      let route = meta.route;
      matches2.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match2.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
        route
      });
      if (match2.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
      }
    }
    return matches2;
  }
  function matchPath(pattern4, pathname) {
    if (typeof pattern4 === "string") {
      pattern4 = {
        path: pattern4,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, compiledParams] = compilePath(pattern4.path, pattern4.caseSensitive, pattern4.end);
    let match2 = pathname.match(matcher);
    if (!match2)
      return null;
    let matchedPathname = match2[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match2.slice(1);
    let params = compiledParams.reduce((memo13, _ref, index2) => {
      let {
        paramName,
        isOptional
      } = _ref;
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index2];
      if (isOptional && !value) {
        memo13[paramName] = void 0;
      } else {
        memo13[paramName] = safelyDecodeURIComponent(value || "", paramName);
      }
      return memo13;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern: pattern4
    };
  }
  function compilePath(path2, caseSensitive, end) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end === void 0) {
      end = true;
    }
    warning7(path2 === "*" || !path2.endsWith("*") || path2.endsWith("/*"), 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".'));
    let params = [];
    let regexpSource = "^" + path2.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
      params.push({
        paramName,
        isOptional: isOptional != null
      });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    });
    if (path2.endsWith("*")) {
      params.push({
        paramName: "*"
      });
      regexpSource += path2 === "*" || path2 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path2 !== "" && path2 !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function safelyDecodeURI(value) {
    try {
      return decodeURI(value);
    } catch (error) {
      warning7(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function safelyDecodeURIComponent(value, paramName) {
    try {
      return decodeURIComponent(value);
    } catch (error) {
      warning7(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search = "",
      hash = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char2, field, dest, path2) {
    return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path2) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches2) {
    return matches2.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
  }
  function getResolveToMatches(matches2, v7_relativeSplatPath) {
    let pathMatches = getPathContributingMatches(matches2);
    if (v7_relativeSplatPath) {
      return pathMatches.map((match2, idx) => idx === matches2.length - 1 ? match2.pathname : match2.pathnameBase);
    }
    return pathMatches.map((match2) => match2.pathnameBase);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends3({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from2;
    if (toPathname == null) {
      from2 = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path2 = resolvePath(to, from2);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path2.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path2.pathname += "/";
    }
    return path2;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

  // node_modules/react-router/dist/index.js
  function _extends4() {
    _extends4 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React407.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React407.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React407.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React407.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React407.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React407.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React407.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React407.useContext(NavigationContext);
    let {
      hash,
      pathname,
      search
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search,
      hash
    });
  }
  function useInRouterContext() {
    return React407.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React407.useContext(LocationContext).location;
  }
  var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
  function useIsomorphicLayoutEffect3(cb) {
    let isStatic = React407.useContext(NavigationContext).static;
    if (!isStatic) {
      React407.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React407.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let dataRouterContext = React407.useContext(DataRouterContext);
    let {
      basename,
      future,
      navigator: navigator2
    } = React407.useContext(NavigationContext);
    let {
      matches: matches2
    } = React407.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2, future.v7_relativeSplatPath));
    let activeRef = React407.useRef(false);
    useIsomorphicLayoutEffect3(() => {
      activeRef.current = true;
    });
    let navigate = React407.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning7(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path2 = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename !== "/") {
        path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path2, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      future
    } = React407.useContext(NavigationContext);
    let {
      matches: matches2
    } = React407.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2, future.v7_relativeSplatPath));
    return React407.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2
    } = React407.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React407.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce2(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location2;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location2 = parsedLocationArg;
    } else {
      location2 = locationFromContext;
    }
    let pathname = location2.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches2 = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning7(parentRoute || matches2 != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" ') : void 0;
      true ? warning7(matches2 == null || matches2[matches2.length - 1].route.element !== void 0 || matches2[matches2.length - 1].route.Component !== void 0 || matches2[matches2.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches2 && matches2.map((match2) => Object.assign({}, match2, {
      params: Object.assign({}, parentParams, match2.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
      ]),
      pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
      ])
    })), parentMatches, dataRouterState, future);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React407.createElement(LocationContext.Provider, {
        value: {
          location: _extends4({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location2),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error);
      devInfo = /* @__PURE__ */ React407.createElement(React407.Fragment, null, /* @__PURE__ */ React407.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React407.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React407.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React407.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React407.createElement(React407.Fragment, null, /* @__PURE__ */ React407.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React407.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React407.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React407.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React407.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return {
        error
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error !== void 0 ? props.error : state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React407.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React407.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match: match2,
      children
    } = _ref;
    let dataRouterContext = React407.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
    }
    return /* @__PURE__ */ React407.createElement(RouteContext.Provider, {
      value: routeContext
    }, children);
  }
  function _renderMatches(matches2, parentMatches, dataRouterState, future) {
    var _dataRouterState2;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (future === void 0) {
      future = null;
    }
    if (matches2 == null) {
      var _dataRouterState;
      if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
        matches2 = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches2;
    let errors2 = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors2 != null) {
      let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors2 == null ? void 0 : errors2[m.route.id]));
      !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors2).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState && future && future.v7_partialHydration) {
      for (let i = 0; i < renderedMatches.length; i++) {
        let match2 = renderedMatches[i];
        if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
          fallbackIndex = i;
        }
        if (match2.route.id) {
          let {
            loaderData,
            errors: errors3
          } = dataRouterState;
          let needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors3 || errors3[match2.route.id] === void 0);
          if (match2.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match2, index2) => {
      let error;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error = errors2 && match2.route.id ? errors2[match2.route.id] : void 0;
        errorElement = match2.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index2 === 0) {
            warningOnce2("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index2) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match2.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches3 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
      let getChildren = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match2.route.Component) {
          children = /* @__PURE__ */ React407.createElement(match2.route.Component, null);
        } else if (match2.route.element) {
          children = match2.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React407.createElement(RenderedRoute, {
          match: match2,
          routeContext: {
            outlet,
            matches: matches3,
            isDataRoute: dataRouterState != null
          },
          children
        });
      };
      return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ React407.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren(),
        routeContext: {
          outlet: null,
          matches: matches3,
          isDataRoute: true
        }
      }) : getChildren();
    }, null);
  }
  var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
    return DataRouterHook3;
  }(DataRouterHook || {});
  var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
    return DataRouterStateHook3;
  }(DataRouterStateHook || {});
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React407.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React407.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React407.useContext(RouteContext);
    !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches: matches2,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React407.useMemo(() => matches2.map((m) => convertRouteMatchToUiMatch(m, loaderData)), [matches2, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error = React407.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error !== void 0) {
      return error;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React407.useRef(false);
    useIsomorphicLayoutEffect3(() => {
      activeRef.current = true;
    });
    let navigate = React407.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning7(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends4({
          fromRouteId: id
        }, options));
      }
    }, [router, id]);
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce2(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      true ? warning7(false, message) : void 0;
    }
  }
  var START_TRANSITION = "startTransition";
  var startTransitionImpl = React407[START_TRANSITION];
  function Route(_props) {
    true ? invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.") : invariant(false);
  }
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false,
      future
    } = _ref5;
    !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React407.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: _extends4({
        v7_relativeSplatPath: false
      }, future)
    }), [basename, future, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React407.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash, state, key, navigationType]);
    true ? warning7(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React407.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React407.createElement(LocationContext.Provider, {
      children,
      value: locationContext
    }));
  }
  function Routes(_ref6) {
    let {
      children,
      location: location2
    } = _ref6;
    return useRoutes(createRoutesFromChildren(children), location2);
  }
  var neverSettledPromise = new Promise(() => {
  });
  function createRoutesFromChildren(children, parentPath) {
    if (parentPath === void 0) {
      parentPath = [];
    }
    let routes = [];
    React407.Children.forEach(children, (element, index2) => {
      if (!/* @__PURE__ */ React407.isValidElement(element)) {
        return;
      }
      let treePath = [...parentPath, index2];
      if (element.type === React407.Fragment) {
        routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
        return;
      }
      !(element.type === Route) ? true ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant(false) : void 0;
      !(!element.props.index || !element.props.children) ? true ? invariant(false, "An index route cannot have child routes.") : invariant(false) : void 0;
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        Component: element.props.Component,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        errorElement: element.props.errorElement,
        ErrorBoundary: element.props.ErrorBoundary,
        hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle,
        lazy: element.props.lazy
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(element.props.children, treePath);
      }
      routes.push(route);
    });
    return routes;
  }

  // node_modules/react-router-dom/dist/index.js
  function _extends5() {
    _extends5 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends5.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object4) {
    return object4 != null && typeof object4.tagName === "string";
  }
  function isButtonElement(object4) {
    return isHtmlElement(object4) && object4.tagName.toLowerCase() === "button";
  }
  function isFormElement(object4) {
    return isHtmlElement(object4) && object4.tagName.toLowerCase() === "form";
  }
  function isInputElement(object4) {
    return isHtmlElement(object4) && object4.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e3) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      true ? warning7(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method4;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method4 = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method4 = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let {
          name,
          type: type4,
          value
        } = target;
        if (type4 === "image") {
          let prefix = name ? name + "." : "";
          formData.append(prefix + "x", "0");
          formData.append(prefix + "y", "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method4 = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return {
      action,
      method: method4.toLowerCase(),
      encType,
      formData,
      body
    };
  }
  var _excluded53 = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"];
  var _excluded213 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "unstable_viewTransition", "children"];
  var _excluded310 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "unstable_viewTransition"];
  var ViewTransitionContext = /* @__PURE__ */ React408.createContext({
    isTransitioning: false
  });
  if (true) {
    ViewTransitionContext.displayName = "ViewTransition";
  }
  var FetchersContext = /* @__PURE__ */ React408.createContext(/* @__PURE__ */ new Map());
  if (true) {
    FetchersContext.displayName = "Fetchers";
  }
  var START_TRANSITION2 = "startTransition";
  var startTransitionImpl2 = React408[START_TRANSITION2];
  var FLUSH_SYNC = "flushSync";
  var flushSyncImpl = ReactDOM4[FLUSH_SYNC];
  var USE_ID = "useId";
  var useIdImpl = React408[USE_ID];
  function BrowserRouter(_ref4) {
    let {
      basename,
      children,
      future,
      window: window2
    } = _ref4;
    let historyRef = React408.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history2 = historyRef.current;
    let [state, setStateImpl] = React408.useState({
      action: history2.action,
      location: history2.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React408.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React408.useLayoutEffect(() => history2.listen(setState), [history2, setState]);
    return /* @__PURE__ */ React408.createElement(Router, {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history2,
      future
    });
  }
  function HistoryRouter(_ref6) {
    let {
      basename,
      children,
      future,
      history: history2
    } = _ref6;
    let [state, setStateImpl] = React408.useState({
      action: history2.action,
      location: history2.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React408.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React408.useLayoutEffect(() => history2.listen(setState), [history2, setState]);
    return /* @__PURE__ */ React408.createElement(Router, {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history2,
      future
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link2 = /* @__PURE__ */ React408.forwardRef(function LinkWithRef(_ref7, ref) {
    let {
      onClick,
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset,
      unstable_viewTransition
    } = _ref7, rest = _objectWithoutPropertiesLoose2(_ref7, _excluded53);
    let {
      basename
    } = React408.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
      absoluteHref = to;
      if (isBrowser2) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path2 = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path2 != null) {
            to = path2 + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e3) {
          true ? warning7(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative,
      unstable_viewTransition
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React408.createElement("a", _extends5({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref,
        target
      }))
    );
  });
  if (true) {
    Link2.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React408.forwardRef(function NavLinkWithRef(_ref8, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      unstable_viewTransition,
      children
    } = _ref8, rest = _objectWithoutPropertiesLoose2(_ref8, _excluded213);
    let path2 = useResolvedPath(to, {
      relative: rest.relative
    });
    let location2 = useLocation();
    let routerState = React408.useContext(DataRouterStateContext);
    let {
      navigator: navigator2,
      basename
    } = React408.useContext(NavigationContext);
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useViewTransitionState(path2) && unstable_viewTransition === true;
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path2).pathname : path2.pathname;
    let locationPathname = location2.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) {
      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
    }
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive2 = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
      isActive: isActive2,
      isPending,
      isTransitioning
    };
    let ariaCurrent = isActive2 ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp(renderProps);
    } else {
      className = [classNameProp, isActive2 ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
    }
    let style2 = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /* @__PURE__ */ React408.createElement(Link2, _extends5({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style: style2,
      to,
      unstable_viewTransition
    }), typeof children === "function" ? children(renderProps) : children);
  });
  if (true) {
    NavLink.displayName = "NavLink";
  }
  var Form5 = /* @__PURE__ */ React408.forwardRef((_ref9, forwardedRef) => {
    let {
      fetcherKey,
      navigate,
      reloadDocument,
      replace: replace2,
      state,
      method: method4 = defaultMethod,
      action,
      onSubmit,
      relative,
      preventScrollReset,
      unstable_viewTransition
    } = _ref9, props = _objectWithoutPropertiesLoose2(_ref9, _excluded310);
    let submit = useSubmit();
    let formAction = useFormAction(action, {
      relative
    });
    let formMethod = method4.toLowerCase() === "get" ? "get" : "post";
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method4;
      submit(submitter || event.currentTarget, {
        fetcherKey,
        method: submitMethod,
        navigate,
        replace: replace2,
        state,
        relative,
        preventScrollReset,
        unstable_viewTransition
      });
    };
    return /* @__PURE__ */ React408.createElement("form", _extends5({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    Form5.displayName = "Form";
  }
  function ScrollRestoration(_ref10) {
    let {
      getKey: getKey3,
      storageKey
    } = _ref10;
    useScrollRestoration({
      getKey: getKey3,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmit"] = "useSubmit";
    DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook3["UseFetcher"] = "useFetcher";
    DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetcher"] = "useFetcher";
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React408.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React408.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative,
      unstable_viewTransition
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location2 = useLocation();
    let path2 = useResolvedPath(to, {
      relative
    });
    return React408.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path2);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          unstable_viewTransition
        });
      }
    }, [location2, navigate, path2, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);
  }
  function validateClientSideSubmission() {
    if (typeof document === "undefined") {
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    }
  }
  var fetcherId = 0;
  var getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
  function useSubmit() {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmit);
    let {
      basename
    } = React408.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React408.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      validateClientSideSubmission();
      let {
        action,
        method: method4,
        encType,
        formData,
        body
      } = getFormSubmissionInfo(target, basename);
      if (options.navigate === false) {
        let key = options.fetcherKey || getUniqueFetcherId();
        router.fetch(key, currentRouteId, options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method4,
          formEncType: options.encType || encType,
          unstable_flushSync: options.unstable_flushSync
        });
      } else {
        router.navigate(options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method4,
          formEncType: options.encType || encType,
          replace: options.replace,
          state: options.state,
          fromRouteId: currentRouteId,
          unstable_flushSync: options.unstable_flushSync,
          unstable_viewTransition: options.unstable_viewTransition
        });
      }
    }, [router, basename, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename
    } = React408.useContext(NavigationContext);
    let routeContext = React408.useContext(RouteContext);
    !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
    let [match2] = routeContext.matches.slice(-1);
    let path2 = _extends5({}, useResolvedPath(action ? action : ".", {
      relative
    }));
    let location2 = useLocation();
    if (action == null) {
      path2.search = location2.search;
      let params = new URLSearchParams(path2.search);
      if (params.has("index") && params.get("index") === "") {
        params.delete("index");
        path2.search = params.toString() ? "?" + params.toString() : "";
      }
    }
    if ((!action || action === ".") && match2.route.index) {
      path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path2.pathname = path2.pathname === "/" ? basename : joinPaths([basename, path2.pathname]);
    }
    return createPath(path2);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp4) {
    let {
      getKey: getKey3,
      storageKey
    } = _temp4 === void 0 ? {} : _temp4;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let {
      basename
    } = React408.useContext(NavigationContext);
    let location2 = useLocation();
    let matches2 = useMatches();
    let navigation = useNavigation();
    React408.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React408.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey3 ? getKey3(location2, matches2) : null) || location2.key;
        savedScrollPositions[key] = window.scrollY;
      }
      try {
        sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      } catch (error) {
        true ? warning7(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").") : void 0;
      }
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey3, navigation.state, location2, matches2]));
    if (typeof document !== "undefined") {
      React408.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e3) {
        }
      }, [storageKey]);
      React408.useLayoutEffect(() => {
        let getKeyWithoutBasename = getKey3 && basename !== "/" ? (location3, matches3) => getKey3(
          // Strip the basename to match useLocation()
          _extends5({}, location3, {
            pathname: stripBasename(location3.pathname, basename) || location3.pathname
          }),
          matches3
        ) : getKey3;
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey3]);
      React408.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location2.hash) {
          let el = document.getElementById(decodeURIComponent(location2.hash.slice(1)));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location2, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React408.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let vtContext = React408.useContext(ViewTransitionContext);
    !(vtContext != null) ? true ? invariant(false, "`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant(false) : void 0;
    let {
      basename
    } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
    let path2 = useResolvedPath(to, {
      relative: opts.relative
    });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path2.pathname, nextPath) != null || matchPath(path2.pathname, currentPath) != null;
  }

  // app/javascript/pages/LoginPage.jsx
  var import_react116 = __toESM(require_react());

  // app/javascript/components/auth/LoginComponent.jsx
  var import_react115 = __toESM(require_react());

  // app/javascript/hooks/userAuth.js
  var import_react114 = __toESM(require_react());

  // app/javascript/contexts/auth.context.js
  var import_react113 = __toESM(require_react());

  // app/javascript/utils/helper.js
  var makeHttpReq = async (url2, options = {}) => {
    try {
      const res = await fetch(url2, { ...options });
      const data = await res.json();
      return { status: res.status, data };
    } catch (e3) {
      console.log(`Something went wrong  ${e3}`);
    }
  };
  var hasError = (status) => status >= 400 && status <= 600;
  var arrayIsEmpty = (arr) => arr?.length === 0;
  var arrayIsNotEmpty = (arr) => !arrayIsEmpty(arr);
  var makeURLOptions = (body, method4 = "GET") => ({
    method: method4,
    headers: {
      "content-type": "application/json"
    },
    ...method4 !== "GET" && arrayIsNotEmpty(Object.keys(body)) && { body: JSON.stringify(body) }
  });
  var makeURLOptionsWtoken = (token2, body = {}, method4 = "GET") => ({
    ...makeURLOptions(body, method4),
    headers: {
      ...makeURLOptions(body, method4).headers,
      authorization: `Bearer ${token2}`
    }
  });
  var falsy = (d) => d === void 0 || d === null;
  var isEmpty = (d) => d?.toString().trim().length === 0;
  var getAuthUser = () => {
    const email2 = localStorage.getItem("username");
    const token2 = localStorage.getItem("token");
    return falsy(email2) || falsy(token2) || isEmpty(email2) || isEmpty(token2) ? { email: null, token: null } : { email: email2, token: token2 };
  };
  var getAuthUsername = () => getAuthUser()?.username;
  var getAuthUserToken2 = () => getAuthUser()?.token;
  var saveAuthUser = (email2, token2) => {
    localStorage.setItem("username", email2);
    localStorage.setItem("token", token2);
  };
  var clearStorage = () => localStorage.clear();

  // app/javascript/contexts/auth.reducer.js
  var initialAuthState = {
    authUsername: getAuthUsername(),
    token: getAuthUserToken2(),
    loginErrors: null,
    signupErrors: null
  };
  var AuthReducer = (state = initialAuthState, action) => {
    switch (action.type) {
      case "Login":
        return {
          ...state,
          authUserEmail: action.payload.email,
          token: action.payload.token,
          loginErrors: null
        };
      case "Signup":
        return {
          ...state,
          loginErrors: null,
          signupErrors: null
        };
      case "Logout":
        return { ...state, loginErrors: null, signupErrors: null };
      case "Error":
        return {
          ...state,
          authUserEmail: "",
          token: "",
          loginErrors: action?.loginErrors ?? null,
          signupErrors: action?.signupErrors ?? null
        };
      default:
        return state;
    }
  };

  // app/javascript/contexts/auth.context.js
  var AuthContext = (0, import_react113.createContext)(initialAuthState);

  // app/javascript/hooks/userAuth.js
  var useAuth = () => {
    return (0, import_react114.useContext)(AuthContext);
  };

  // app/javascript/utils/content/jp.json
  var jp_default = {
    SiteInfo: {
      title: "\u5009\u5EAB\u7BA1\u7406\u30B7\u30B9\u30C6\u30E0",
      description: "\u5009\u5EAB\u7BA1\u7406\u30B7\u30B9\u30C6\u30E0"
    },
    LoginFields: {
      username: "\u30ED\u30B0\u30A4\u30F3ID",
      password: "\u30D1\u30B9\u30EF\u30FC\u30C9",
      rememberme: "remember me"
    },
    buttons: {
      login: "\u30ED\u30B0\u30A4\u30F3",
      register: "\u65B0\u898F\u767B\u9332",
      change: "\u5909\u66F4",
      delete: "\u524A\u9664",
      signUp: "\u65B0\u898F\u767B\u9332",
      csvExchange: "CSV\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
      confirmDeparture: "\u51FA\u5EAB\u78BA\u5B9A",
      next: "\u6B21\u3078",
      newPost: "\u65B0\u898F\u767A\u884C",
      list: "\u4E00\u89A7",
      detail: "\u660E\u7D30"
    },
    CardTopics: [
      "\uFF11\uFF0E\u5165\u5EAB\u51E6\u7406",
      "\uFF14\uFF0E\u5165\u91D1\u51E6\u7406",
      "\uFF12\uFF0E\u51FA\u5EAB\u51E6\u7406",
      "\uFF15\uFF0E\u8ACB\u6C42\u51E6\u7406",
      "\uFF13\uFF0E\u5009\u5EAB\u7BA1\u7406",
      "\uFF16\uFF0E\u30DE\u30B9\u30BF\u4FDD\u5B88"
    ],
    Navigations: [
      {
        label: "TOP",
        key: "/",
        url: "/"
      },
      {
        label: "\u5165\u5EAB\u51E6\u7406",
        key: "/in_process",
        url: "/in_process"
      },
      {
        label: "\u51FA\u5EAB\u51E6\u7406",
        key: "/configout_process",
        url: "/out_process"
      },
      {
        label: "\u5728\u5EAB\u7BA1\u7406",
        key: "/inventory_control",
        url: "/inventory_control"
      },
      {
        label: "\u5165\u91D1\u51E6\u7406",
        key: "/deposit_process",
        url: "/deposit_process"
      },
      {
        label: "\u8ACB\u6C42\u51E6\u7406",
        key: "/billing_process",
        url: "/billing_process"
      },
      {
        label: "\u30DE\u30B9\u30BF\u4FDD\u5B88",
        key: "/maintenence",
        url: "/maintenence"
      }
    ],
    IncomePageJp: {
      addition: "\u8FFD\u52A0",
      lotNumber: "\u30ED\u30C3\u30C8\u756A\u53F7",
      weight: "\u91CD\u91CF",
      itemNumber: "\u5165\u5EAB\u6570",
      cargoPrice: "\u8377\u5F79\u5358\u4FA1",
      storagePrice: "\u4FDD\u7BA1\u5358\u4FA1",
      packing: "\u8377\u59FF",
      productName: "\u54C1\u540D",
      productNumber: "\u54C1\u756A",
      search: "\u691C\u7D22",
      receiptDate: "\u5165\u5EAB\u65E5",
      shipper: "\u8377\u4E3B",
      warehouse: "\u5009\u5EAB"
    },
    OutputPage: {
      departureDate: "\u51FA\u5EAB\u65E5",
      libraryNumber: "\u73FE\u5728\u5EAB\u6570",
      shipmentNumber: "\u51FA\u5EAB\u6570"
    },
    DepositPage: {
      payDay: "\u5165\u91D1\u65E5",
      payDayFrom: "\u5165\u91D1\u65E5From",
      payDayTo: "\u5165\u91D1\u65E5To",
      shipperName: "\u8377\u4E3B\u540D",
      processingDate: "\u51E6\u7406\u65E5",
      processingDateFrom: "\u51E6\u7406\u65E5From",
      processingDateTo: "\u51E6\u7406\u65E5To"
    },
    Modal: {
      depositRegist: "\u5165\u91D1\u767B\u9332",
      shipperId: "\u8377\u4E3Bid",
      depositDate: "\u5165\u91D1\u5E74\u6708\u65E5",
      depositAmount: "\u5165\u91D1\u984D"
    },
    BillingPage: {
      yearMonth: "\u5E74\u6708",
      closingDate: "\u7DE0\u65E5",
      number: "\u4EF6\u6570",
      targetPeriod: "\u5BFE\u8C61\u671F\u9593",
      list: "\u4E00\u89A7",
      detail: "\u660E\u7D30"
    },
    messages: {
      type_username: "Please input your username!",
      type_password: "Please input your password!"
    }
  };

  // app/javascript/components/auth/LoginComponent.jsx
  var { Title: Title3 } = typography_default;
  var LoginForm = () => {
    const {
      state: { loginErrors },
      loginAction: loginAction2
    } = useAuth();
    const onFinishFailed = (errorInfo) => {
      console.log("Failed:", errorInfo);
    };
    const onFormSubmit = ({ username, password }) => {
      console.log("username", username);
      console.log("password", password);
      loginAction2({ username, password });
    };
    return /* @__PURE__ */ import_react115.default.createElement("div", { style: { width: 350 }, className: "mx-auto" }, /* @__PURE__ */ import_react115.default.createElement("div", { className: "py-18 flex flex-col justify-center h-full min-h-screen gap-6 mt-12 xs:gap-7 xs:mt-0 sm" }, /* @__PURE__ */ import_react115.default.createElement(card_default, { style: { width: 400 }, className: "py-4" }, /* @__PURE__ */ import_react115.default.createElement(
      Title3,
      {
        level: 4,
        className: "text-center",
        style: { marginTop: 10, marginBottom: 50 }
      },
      jp_default.SiteInfo.title
    ), loginErrors && /* @__PURE__ */ import_react115.default.createElement("p", null, loginErrors), /* @__PURE__ */ import_react115.default.createElement(
      form_default,
      {
        name: "basic",
        labelCol: { span: 8 },
        wrapperCol: { span: 16 },
        style: { maxWidth: 600 },
        initialValues: { remember: true },
        onFinish: onFormSubmit,
        onFinishFailed,
        autoComplete: "off"
      },
      /* @__PURE__ */ import_react115.default.createElement(
        form_default.Item,
        {
          label: jp_default.LoginFields.username,
          name: "username",
          rules: [
            { required: true, message: jp_default.messages.type_username }
          ]
        },
        /* @__PURE__ */ import_react115.default.createElement(input_default, null)
      ),
      /* @__PURE__ */ import_react115.default.createElement(
        form_default.Item,
        {
          label: jp_default.LoginFields.password,
          name: "password",
          rules: [
            { required: true, message: jp_default.messages.type_password }
          ]
        },
        /* @__PURE__ */ import_react115.default.createElement(input_default.Password, null)
      ),
      /* @__PURE__ */ import_react115.default.createElement(
        form_default.Item,
        {
          valuePropName: "checked",
          wrapperCol: { offset: 8, span: 16 }
        },
        /* @__PURE__ */ import_react115.default.createElement(checkbox_default, null, "Remember me")
      ),
      /* @__PURE__ */ import_react115.default.createElement(form_default.Item, { wrapperCol: { offset: 8, span: 16 } }, /* @__PURE__ */ import_react115.default.createElement(button_default2, { type: "primary", htmlType: "submit" }, jp_default.buttons.login), /* @__PURE__ */ import_react115.default.createElement("small", { style: { marginLeft: 20 } }, /* @__PURE__ */ import_react115.default.createElement("a", { href: "/signup" }, jp_default.buttons.register)))
    ))));
  };
  var LoginComponent_default = LoginForm;

  // app/javascript/pages/LoginPage.jsx
  var LoginPage = () => {
    const token2 = (0, import_react116.useMemo)(() => getAuthUser().token, [getAuthUser().token]);
    (0, import_react116.useEffect)(() => {
      if (!falsy(token2)) {
        return;
      }
    }, [token2]);
    return /* @__PURE__ */ import_react116.default.createElement(import_react116.default.Fragment, null, /* @__PURE__ */ import_react116.default.createElement(LoginComponent_default, null));
  };
  var LoginPage_default = LoginPage;

  // app/javascript/pages/TopPage.jsx
  var import_react120 = __toESM(require_react());

  // app/javascript/components/layouts/Header/Navbar.tsx
  var import_react117 = __toESM(require_react());

  // app/javascript/utils/content/index.ts
  var siteInfo = {
    title: "\u5009\u5EAB\u7BA1\u7406\u30B7\u30B9\u30C6\u30E0"
  };
  var cardTopics = [
    "\uFF11\uFF0E\u5165\u5EAB\u51E6\u7406",
    "\uFF14\uFF0E\u5165\u91D1\u51E6\u7406",
    "\uFF12\uFF0E\u51FA\u5EAB\u51E6\u7406",
    "\uFF15\uFF0E\u8ACB\u6C42\u51E6\u7406",
    "\uFF13\uFF0E\u5009\u5EAB\u7BA1\u7406",
    "\uFF16\uFF0E\u30DE\u30B9\u30BF\u4FDD\u5B88"
  ];
  var navigations = [
    {
      label: "TOP",
      key: "/",
      url: "/"
    },
    {
      label: "\u5165\u5EAB\u51E6\u7406",
      key: "/in_process",
      url: "/in_process"
    },
    {
      label: "\u51FA\u5EAB\u51E6\u7406",
      key: "/out_process",
      url: "/out_process"
    },
    {
      label: "\u5728\u5EAB\u7BA1\u7406",
      key: "/inventory_control",
      url: "/inventory_control"
    },
    {
      label: "\u5165\u91D1\u51E6\u7406",
      key: "/deposit_process",
      url: "/deposit_process"
    },
    {
      label: "\u8ACB\u6C42\u51E6\u7406",
      key: "/billing_process",
      url: "/billing_process"
    },
    {
      label: "\u30DE\u30B9\u30BF\u4FDD\u5B88",
      key: "/maintenence",
      url: "/maintenence"
    }
  ];

  // app/javascript/components/layouts/Header/Navbar.tsx
  var NavbarSection = () => {
    const [currentMenu, setCurrentMenu] = (0, import_react117.useState)({});
    const [selectedKeys, setSelectedKeys] = (0, import_react117.useState)([]);
    const { Header: Header5 } = layout_default2;
    const { Title: Title5 } = typography_default;
    const navigate = useNavigate();
    const handleMenuClick = ({ key }) => {
      const { url: url2 } = navigations.find((item) => item.key === key) || {};
      if (url2) {
        navigate(url2);
      }
    };
    const location2 = useLocation();
    (0, import_react117.useEffect)(() => {
    }, [location2]);
    return /* @__PURE__ */ import_react117.default.createElement(layout_default2, null, /* @__PURE__ */ import_react117.default.createElement(
      Header5,
      {
        style: {
          display: "flex",
          alignItems: "right",
          backgroundColor: "#fff"
        }
      },
      /* @__PURE__ */ import_react117.default.createElement("div", { className: "demo-logo ", style: { marginRight: "100px" } }, /* @__PURE__ */ import_react117.default.createElement(Title5, { level: 4, style: { marginTop: 15 } }, siteInfo.title)),
      /* @__PURE__ */ import_react117.default.createElement(
        menu_default2,
        {
          theme: "light",
          mode: "horizontal",
          defaultSelectedKeys: ["/"],
          items: navigations,
          style: { flex: 1, minWidth: 0 },
          onClick: handleMenuClick
        }
      )
    ));
  };
  var Navbar_default = NavbarSection;

  // app/javascript/components/layouts/Footer/Index.tsx
  var import_react118 = __toESM(require_react());
  var { Footer: Footer4 } = layout_default2;
  var FooterSection = () => {
    return /* @__PURE__ */ import_react118.default.createElement(Footer4, { style: { textAlign: "center" } }, "Soko Kanri system");
  };
  var Index_default = FooterSection;

  // app/javascript/components/Top/SectionCard.tsx
  var import_react119 = __toESM(require_react());
  var SectionCard = ({ span, title }) => /* @__PURE__ */ import_react119.default.createElement(import_react119.default.Fragment, null, /* @__PURE__ */ import_react119.default.createElement(
    col_default2,
    {
      span,
      style: {
        margin: 20
      }
    },
    /* @__PURE__ */ import_react119.default.createElement(card_default, { bordered: false }, title)
  ));
  var SectionCard_default = SectionCard;

  // app/javascript/pages/TopPage.jsx
  var { Title: Title4, Paragraph: Paragraph3, Text: Text2, Link: Link3 } = typography_default;
  var { Header: Header4, Content: Content3, Footer: Footer5 } = layout_default2;
  var Top = () => {
    return /* @__PURE__ */ import_react120.default.createElement("div", null, /* @__PURE__ */ import_react120.default.createElement(Navbar_default, null), /* @__PURE__ */ import_react120.default.createElement(
      Content3,
      {
        style: { width: 1024 },
        className: "mx-auto flex flex-col justify-content content-h"
      },
      /* @__PURE__ */ import_react120.default.createElement(
        row_default2,
        {
          className: "my-8",
          style: {
            margin: 20,
            marginTop: 100
          }
        },
        cardTopics.map((item, i) => /* @__PURE__ */ import_react120.default.createElement(SectionCard_default, { title: item, span: 8, key: i }))
      )
    ), /* @__PURE__ */ import_react120.default.createElement(Index_default, null));
  };
  var TopPage_default = Top;

  // app/javascript/pages/IncomePage.jsx
  var import_react122 = __toESM(require_react());

  // app/javascript/components/Income/IncomeTable.jsx
  var import_react121 = __toESM(require_react());
  var IncomeTable = ({ data, editRow, deleteRow }) => {
    const columns = [
      {
        title: "\u54C1\u756A",
        dataIndex: "product_id",
        key: "product_id",
        render: (text) => /* @__PURE__ */ import_react121.default.createElement("a", null, text)
      },
      {
        title: "\u54C1\u540D",
        dataIndex: "product_name",
        key: "product_name"
      },
      {
        title: "\u8377\u59FF",
        dataIndex: "product_type",
        key: "product_type"
      },
      {
        title: "\u30ED\u30C3\u30C8\u756A\u53F7",
        dataIndex: "lotNumber",
        key: "lotNumber"
      },
      {
        title: "\u91CD\u91CF",
        dataIndex: "weight",
        key: "weight"
      },
      {
        title: "\u6570\u91CF",
        dataIndex: "stock",
        key: "stock"
      },
      {
        title: "Action",
        key: "action",
        render: (_, record) => /* @__PURE__ */ import_react121.default.createElement(space_default, { size: "small" }, /* @__PURE__ */ import_react121.default.createElement(button_default2, { onClick: () => editRow(record.product_id) }, jp_default.buttons.change), /* @__PURE__ */ import_react121.default.createElement(button_default2, { onClick: () => deleteRow(record.product_id) }, jp_default.buttons.delete))
      }
    ];
    return /* @__PURE__ */ import_react121.default.createElement(table_default, { columns, dataSource: data, pagination: false });
  };
  var IncomeTable_default = IncomeTable;

  // node_modules/rc-picker/es/locale/ja_JP.js
  var locale6 = {
    locale: "ja_JP",
    today: "\u4ECA\u65E5",
    now: "\u73FE\u5728\u6642\u523B",
    backToToday: "\u4ECA\u65E5\u306B\u623B\u308B",
    ok: "\u6C7A\u5B9A",
    timeSelect: "\u6642\u9593\u3092\u9078\u629E",
    dateSelect: "\u65E5\u6642\u3092\u9078\u629E",
    weekSelect: "\u9031\u3092\u9078\u629E",
    clear: "\u30AF\u30EA\u30A2",
    month: "\u6708",
    year: "\u5E74",
    previousMonth: "\u524D\u6708 (\u30DA\u30FC\u30B8\u30A2\u30C3\u30D7\u30AD\u30FC)",
    nextMonth: "\u7FCC\u6708 (\u30DA\u30FC\u30B8\u30C0\u30A6\u30F3\u30AD\u30FC)",
    monthSelect: "\u6708\u3092\u9078\u629E",
    yearSelect: "\u5E74\u3092\u9078\u629E",
    decadeSelect: "\u5E74\u4EE3\u3092\u9078\u629E",
    yearFormat: "YYYY\u5E74",
    dayFormat: "D\u65E5",
    dateFormat: "YYYY\u5E74M\u6708D\u65E5",
    dateTimeFormat: "YYYY\u5E74M\u6708D\u65E5 HH\u6642mm\u5206ss\u79D2",
    previousYear: "\u524D\u5E74 (Control\u3092\u62BC\u3057\u306A\u304C\u3089\u5DE6\u30AD\u30FC)",
    nextYear: "\u7FCC\u5E74 (Control\u3092\u62BC\u3057\u306A\u304C\u3089\u53F3\u30AD\u30FC)",
    previousDecade: "\u524D\u306E\u5E74\u4EE3",
    nextDecade: "\u6B21\u306E\u5E74\u4EE3",
    previousCentury: "\u524D\u306E\u4E16\u7D00",
    nextCentury: "\u6B21\u306E\u4E16\u7D00"
  };
  var ja_JP_default = locale6;

  // node_modules/antd/es/time-picker/locale/ja_JP.js
  var locale7 = {
    placeholder: "\u6642\u9593\u3092\u9078\u629E",
    rangePlaceholder: ["\u958B\u59CB\u6642\u9593", "\u7D42\u4E86\u6642\u9593"]
  };
  var ja_JP_default2 = locale7;

  // node_modules/antd/es/date-picker/locale/ja_JP.js
  var locale8 = {
    lang: Object.assign({
      placeholder: "\u65E5\u4ED8\u3092\u9078\u629E",
      rangePlaceholder: ["\u958B\u59CB\u65E5\u4ED8", "\u7D42\u4E86\u65E5\u4ED8"]
    }, ja_JP_default),
    timePickerLocale: Object.assign({}, ja_JP_default2)
  };
  var ja_JP_default3 = locale8;

  // app/javascript/pages/IncomePage.jsx
  var import_react123 = __toESM(require_react());
  var { Search: Search2 } = input_default;
  var { Content: Content4 } = layout_default2;
  var IncomePage = () => {
    const storeOptions = [
      { value: 0, label: "\u4E00\u822C\u5009\u5EAB" },
      { value: 1, label: "\u7DE8\u96C6" },
      { value: 2, label: "\u524A\u9664" },
      { value: 3, label: "\u4EE3\u66FF\u30C6\u30AD\u30B9\u30C8" }
    ];
    const shipperOptions = [
      { value: 0, label: "\u682A\u5F0F\u4F1A\u793EXXXXXX\uFF08\u25CB\u25CB\u5009\u5EAB\u88FD\u54C1\uFF09" },
      { value: 1, label: "\u7DE8\u96C6" },
      { value: 2, label: "\u524A\u9664" },
      { value: 2, label: "\u4EE3\u66FF\u30C6\u30AD\u30B9\u30C8" }
    ];
    const products = [
      {
        product_id: "1",
        product_name: "product name 1",
        product_type: "project type 1",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "1"
      },
      {
        product_id: "2",
        product_name: "product name 2",
        product_type: "project type 2",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "2"
      },
      {
        product_id: "3",
        product_name: "product name 3",
        product_type: "project type 3",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "3"
      },
      {
        product_id: "4",
        product_name: "product name 4",
        product_type: "project type 4",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "4"
      },
      {
        product_id: "5",
        product_name: "product name 5",
        product_type: "project type 5",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "5"
      }
    ];
    const [data, setData] = (0, import_react123.useState)([]);
    const [storeVal, setStoreVal] = (0, import_react123.useState)(storeOptions[0]);
    const [shipperVal, setShipperVal] = (0, import_react123.useState)(shipperOptions[0]);
    const [receiptDate, setReceiptDate] = (0, import_react123.useState)();
    const [searchResult, setSearchResult] = (0, import_react123.useState)({});
    const selStoreChange = (value) => {
      setStoreVal(storeOptions[value]);
    };
    const selShipperChange = (value) => {
      setShipperVal(shipperOptions[value]);
    };
    const onChangeDate = (date4, dateString) => {
      setReceiptDate(dateString);
    };
    const onSearch = (value, _e, info) => {
      const result = products.filter((product) => product.product_id == value)[0];
      console.log(result);
      setSearchResult(result);
    };
    const editRow = (idx) => {
      console.log("edit", idx);
    };
    const deleteRow = (id) => {
      const newData = data.slice();
      console.log("delete", id);
      const delData = newData.filter((data2) => data2.product_id == id)[0];
      console.log(delData);
      const index2 = newData.indexOf(delData);
      console.log("========", index2);
      newData.splice(index2, 1);
      console.log("========", newData);
      setData(newData);
    };
    const insertData = () => {
      const newData = data.slice();
      newData.push(searchResult);
      setData(newData);
      console.log(data);
    };
    return /* @__PURE__ */ import_react122.default.createElement("div", null, /* @__PURE__ */ import_react122.default.createElement(Navbar_default, null), /* @__PURE__ */ import_react122.default.createElement(
      Content4,
      {
        style: { width: 1280 },
        className: "mx-auto flex flex-col justify-content content-h"
      },
      /* @__PURE__ */ import_react122.default.createElement(
        "div",
        {
          name: "basic",
          initialValues: { remember: true },
          autoComplete: "off",
          style: { margin: "50px 0 0px 0" }
        },
        /* @__PURE__ */ import_react122.default.createElement(space_default, { style: { display: "flex", flexDirection: "column", alignItems: "flex-start" } }, /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.warehouse,
            name: "username",
            style: { display: "inline-block", width: 200, marginBottom: 0 }
          },
          /* @__PURE__ */ import_react122.default.createElement(
            select_default,
            {
              defaultValue: storeVal.label,
              onChange: selStoreChange,
              style: { width: 140, marginLeft: 14 },
              options: storeOptions
            }
          )
        ), /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.shipper,
            name: "username",
            style: { display: "", width: 500, marginBottom: 0, flexFlow: "nowrap" }
          },
          /* @__PURE__ */ import_react122.default.createElement(
            select_default,
            {
              defaultValue: shipperVal.label,
              style: { width: 300, marginLeft: 14 },
              onChange: selShipperChange,
              options: shipperOptions
            }
          )
        ), /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.receiptDate,
            name: "username",
            style: {
              display: "inline-block",
              width: 250,
              marginLeft: 0,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react122.default.createElement(date_picker_default, { value: receiptDate, onChange: onChangeDate, locale: ja_JP_default3 })
        )),
        /* @__PURE__ */ import_react122.default.createElement(divider_default, null),
        /* @__PURE__ */ import_react122.default.createElement("div", null, /* @__PURE__ */ import_react122.default.createElement(space_default, { direction: "horizontal", style: { margin: "0 0 20px 0" } }, /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.productNumber,
            name: "username",
            style: {
              display: "inline-block",
              width: 350,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react122.default.createElement(
            Search2,
            {
              placeholder: jp_default.IncomePageJp.productNumber,
              allowClear: true,
              style: { marginLeft: 15 },
              enterButton: "\u691C\u7D22",
              value: searchResult.product_id,
              onSearch
            }
          )
        ))),
        /* @__PURE__ */ import_react122.default.createElement("div", null, /* @__PURE__ */ import_react122.default.createElement(space_default, { direction: "horizontal", style: { margin: "0 0 20px 0" } }, /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.productName,
            name: "username",
            style: {
              display: "inline-block",
              width: 250,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react122.default.createElement(space_default.Compact, null, /* @__PURE__ */ import_react122.default.createElement(
            input_default,
            {
              placeholder: jp_default.IncomePageJp.productName,
              style: { marginLeft: 15 },
              value: searchResult.product_name
            }
          ))
        ), /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.packing,
            name: "username",
            style: {
              display: "inline-block",
              width: 250,
              marginLeft: 30,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react122.default.createElement(space_default.Compact, null, /* @__PURE__ */ import_react122.default.createElement(input_default, { placeholder: jp_default.IncomePageJp.packing, value: searchResult.product_type }))
        ), /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.packing,
            name: "username",
            style: {
              display: "inline-block",
              width: 450,
              marginLeft: 30,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react122.default.createElement(space_default.Compact, null, /* @__PURE__ */ import_react122.default.createElement(
            input_default,
            {
              style: { width: 100 },
              placeholder: jp_default.IncomePageJp.cargoPrice,
              value: searchResult.cargoPrice
            }
          ), /* @__PURE__ */ import_react122.default.createElement(input_default, { style: { width: 80 } }), /* @__PURE__ */ import_react122.default.createElement(input_default, { style: { width: 100 }, placeholder: jp_default.IncomePageJp.storagePrice, value: searchResult.storagePrice }))
        )), /* @__PURE__ */ import_react122.default.createElement(space_default, null, /* @__PURE__ */ import_react122.default.createElement(
          form_default.Item,
          {
            style: {
              display: "inline-block",
              width: 400,
              marginLeft: 55,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react122.default.createElement(input_default, { style: { width: 150 }, placeholder: jp_default.IncomePageJp.lotNumber, value: searchResult.lotNumber }),
          /* @__PURE__ */ import_react122.default.createElement(input_default, { style: { width: 100 }, placeholder: jp_default.IncomePageJp.weight + "(kg)", value: searchResult.weight }),
          /* @__PURE__ */ import_react122.default.createElement(input_default, { style: { width: 100 }, placeholder: jp_default.IncomePageJp.itemNumber, value: searchResult.stock })
        ), /* @__PURE__ */ import_react122.default.createElement(button_default2, { onClick: insertData, style: { fontWeight: "bold", width: "100px", fontSize: "15px" } }, jp_default.IncomePageJp.addition))),
        /* @__PURE__ */ import_react122.default.createElement(divider_default, null)
      ),
      /* @__PURE__ */ import_react122.default.createElement(
        IncomeTable_default,
        {
          data,
          editRow,
          deleteRow,
          pagination: false
        }
      ),
      /* @__PURE__ */ import_react122.default.createElement("div", { style: { height: 15 } }),
      /* @__PURE__ */ import_react122.default.createElement("div", { style: { justifyContent: "flex-end", display: "flex" } }, /* @__PURE__ */ import_react122.default.createElement(button_default2, { style: { width: 150 } }, jp_default.buttons.csvExchange), /* @__PURE__ */ import_react122.default.createElement("div", { style: { width: 40 } }), /* @__PURE__ */ import_react122.default.createElement(button_default2, { style: { width: 150 } }, jp_default.buttons.confirmDeparture))
    ), /* @__PURE__ */ import_react122.default.createElement(Index_default, null));
  };
  var IncomePage_default = IncomePage;

  // app/javascript/contexts/AuthContextProvider.js
  var import_react124 = __toESM(require_react());

  // app/javascript/utils/contants.js
  var baseUrl = "http://127.0.0.0:3000/api/";
  var loginURL = baseUrl + "login";
  var signupURL = baseUrl + "register";
  var secretsURL = baseUrl + "secrets";
  var verifyAuthURL = baseUrl + "verify";
  var logoutURL = baseUrl + "logout";

  // app/javascript/services/services.js
  var verifyAuth = async (token2 = getAuthUserToken()) => makeHttpReq(verifyAuthURL, makeURLOptionsWtoken(token2));
  var login = async (payload) => {
    makeHttpReq(loginURL, makeURLOptions(payload, "POST"));
  };
  var signup = async (payload) => makeHttpReq(signupURL, makeURLOptions(payload, "POST"));
  var logout = async () => makeHttpReq(logoutURL, makeURLOptionsWtoken(getAuthUserToken(), {}, "POST"));
  var services = {
    signup,
    login,
    logout,
    verifyAuth
    // addNewSecret,
    // getSecrets,
    // deleteSecret,
  };
  var services_default = services;

  // app/javascript/contexts/auth.actions.js
  var handleLoginErrorAction = (res) => (dispatch2) => dispatch2({
    type: "Error",
    loginErrors: res?.data?.msg ?? "Something went wrong"
  });
  var handleSignupErrorAction = (res) => (dispatch2) => dispatch2({
    type: "Error",
    signupErrors: res?.data?.msg ?? "Something went wrong"
  });
  var signupAction = (res) => (dispatch2) => {
    dispatch2({
      type: "Signup",
      payload: {
        email: res?.data?.payload?.email,
        token: res?.data?.payload?.token
      }
    });
  };
  var loginAction = (res) => (dispatch2) => {
    dispatch2({
      type: "Login",
      payload: {
        username: res?.data?.payload?.username,
        token: res?.data?.payload?.token
      }
    });
    saveAuthUser(res?.data?.payload?.email, res?.data?.payload?.token);
  };
  var logoutAction = (dispatch2) => {
    clearStorage();
    dispatch2({ type: "Logout" });
  };
  var authActions = {
    signupAction,
    loginAction,
    logoutAction,
    handleLoginErrorAction,
    handleSignupErrorAction
  };
  var auth_actions_default = authActions;

  // app/javascript/contexts/AuthContextProvider.js
  var AuthContextProvider = ({ children }) => {
    const [state, dispatch2] = (0, import_react124.useReducer)(AuthReducer, initialAuthState);
    const loginAction2 = async (payload) => {
      const res = await services_default.login(payload);
      if (!hasError(res?.status)) {
        auth_actions_default.loginAction(res)(dispatch2);
      } else {
        auth_actions_default.handleLoginErrorAction(res)(dispatch2);
      }
    };
    const signupAction2 = async (payload) => {
      const res = await services_default.signup(payload);
      if (!hasError(res?.status)) {
        auth_actions_default.signupAction(res)(dispatch2);
      } else {
        auth_actions_default.handleSignupErrorAction(res)(dispatch2);
      }
    };
    const logoutAction2 = async () => {
      const res = await services_default.logout();
      if (res?.data?.ok) {
        auth_actions_default.logoutAction(dispatch2);
      }
    };
    return /* @__PURE__ */ import_react124.default.createElement(
      AuthContext.Provider,
      {
        value: {
          state,
          signupAction: signupAction2,
          loginAction: loginAction2,
          logoutAction: logoutAction2
        }
      },
      children
    );
  };
  var AuthContextProvider_default = AuthContextProvider;

  // app/javascript/pages/OutputPage.jsx
  var import_react125 = __toESM(require_react());
  var import_react126 = __toESM(require_react());
  var { Search: Search3 } = input_default;
  var { Content: Content5 } = layout_default2;
  var OutputPage = () => {
    const storeOptions = [
      { value: 0, label: "\u4E00\u822C\u5009\u5EAB" },
      { value: 1, label: "\u7DE8\u96C6" },
      { value: 2, label: "\u524A\u9664" },
      { value: 3, label: "\u4EE3\u66FF\u30C6\u30AD\u30B9\u30C8" }
    ];
    const shipperOptions = [
      { value: 0, label: "\u682A\u5F0F\u4F1A\u793EXXXXXX\uFF08\u25CB\u25CB\u5009\u5EAB\u88FD\u54C1\uFF09" },
      { value: 1, label: "\u7DE8\u96C6" },
      { value: 2, label: "\u524A\u9664" },
      { value: 2, label: "\u4EE3\u66FF\u30C6\u30AD\u30B9\u30C8" }
    ];
    const products = [
      {
        product_id: "1",
        product_name: "product name 1",
        product_type: "project type 1",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "1"
      },
      {
        product_id: "2",
        product_name: "product name 2",
        product_type: "project type 2",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "2"
      },
      {
        product_id: "3",
        product_name: "product name 3",
        product_type: "project type 3",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "3"
      },
      {
        product_id: "4",
        product_name: "product name 4",
        product_type: "project type 4",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "4"
      },
      {
        product_id: "5",
        product_name: "product name 5",
        product_type: "project type 5",
        cargoPrice: "100",
        storagePrice: "200",
        lotNumber: "123123123",
        weight: "100",
        stock: "200",
        action: ["messages.buttons.change", "messages.buttons.delete"],
        key: "5"
      }
    ];
    const [data, setData] = (0, import_react126.useState)([]);
    const [storeVal, setStoreVal] = (0, import_react126.useState)(storeOptions[0]);
    const [shipperVal, setShipperVal] = (0, import_react126.useState)(shipperOptions[0]);
    const [receiptDate, setReceiptDate] = (0, import_react126.useState)();
    const [searchResult, setSearchResult] = (0, import_react126.useState)({});
    const handleSubmit = (e3) => {
    };
    const selStoreChange = (value) => {
      setStoreVal(storeOptions[value]);
    };
    const selShipperChange = (value) => {
      setShipperVal(shipperOptions[value]);
    };
    const onChangeDate = (date4, dateString) => {
      setReceiptDate(dateString);
    };
    const onSearch = (value, _e, info) => {
      const result = products.filter((product) => product.product_id == value)[0];
      console.log(result);
      setSearchResult(result);
    };
    const editRow = (id) => {
      console.log("edit", id);
    };
    const deleteRow = (id) => {
      const newData = data.slice();
      console.log("delete", id);
      const delData = newData.filter((data2) => data2.product_id == id)[0];
      console.log(delData);
      const index2 = newData.indexOf(delData);
      console.log("========", index2);
      newData.splice(index2, 1);
      console.log("========", newData);
      setData(newData);
    };
    const insertData = () => {
      const newData = data.slice();
      newData.push(searchResult);
      setData(newData);
      console.log(data);
    };
    return /* @__PURE__ */ import_react125.default.createElement("div", null, /* @__PURE__ */ import_react125.default.createElement(Navbar_default, null), /* @__PURE__ */ import_react125.default.createElement(
      Content5,
      {
        style: { width: 1280 },
        className: "mx-auto flex flex-col justify-content content-h"
      },
      /* @__PURE__ */ import_react125.default.createElement(
        "div",
        {
          name: "basic",
          initialValues: { remember: true },
          autoComplete: "off",
          style: { margin: "50px 0 0px 0" }
        },
        /* @__PURE__ */ import_react125.default.createElement(space_default, { style: { display: "flex", flexDirection: "column", alignItems: "flex-start" } }, /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.warehouse,
            name: "username",
            style: { display: "inline-block", width: 200, marginBottom: 0 }
          },
          /* @__PURE__ */ import_react125.default.createElement(
            select_default,
            {
              defaultValue: storeVal.label,
              onChange: selStoreChange,
              style: { width: 140, marginLeft: 14 },
              options: storeOptions
            }
          )
        ), /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.shipper,
            name: "username",
            style: { display: "", width: 500, marginBottom: 0, flexFlow: "nowrap" }
          },
          /* @__PURE__ */ import_react125.default.createElement(
            select_default,
            {
              defaultValue: shipperVal.label,
              style: { width: 300, marginLeft: 14 },
              onChange: selShipperChange,
              options: shipperOptions
            }
          )
        ), /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.receiptDate,
            name: "username",
            style: {
              display: "inline-block",
              width: 250,
              marginLeft: 0,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react125.default.createElement(date_picker_default, { value: receiptDate, onChange: onChangeDate, locale: ja_JP_default3 })
        )),
        /* @__PURE__ */ import_react125.default.createElement(divider_default, null),
        /* @__PURE__ */ import_react125.default.createElement("div", null, /* @__PURE__ */ import_react125.default.createElement(space_default, { direction: "horizontal", style: { margin: "0 0 20px 0" } }, /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.productNumber,
            name: "username",
            style: {
              display: "inline-block",
              width: 350,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react125.default.createElement(
            select_default,
            {
              placeholder: jp_default.IncomePageJp.productNumber,
              allowClear: true,
              style: { marginLeft: 15, width: 200 },
              enterButton: "\u691C\u7D22",
              value: searchResult.product_id
            }
          )
        ))),
        /* @__PURE__ */ import_react125.default.createElement("div", null, /* @__PURE__ */ import_react125.default.createElement(space_default, { direction: "horizontal", style: { margin: "0 0 20px 0" } }, /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.productName,
            name: "username",
            style: {
              display: "inline-block",
              width: 350,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react125.default.createElement(space_default.Compact, null, /* @__PURE__ */ import_react125.default.createElement(
            input_default,
            {
              placeholder: jp_default.IncomePageJp.productName,
              style: { marginLeft: 15, width: 250 },
              value: searchResult.product_name
            }
          ))
        ), /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.packing,
            name: "username",
            style: {
              display: "inline-block",
              width: 250,
              marginLeft: 30,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react125.default.createElement(space_default.Compact, null, /* @__PURE__ */ import_react125.default.createElement(input_default, { placeholder: jp_default.IncomePageJp.packing, value: searchResult.product_type }))
        ), /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.packing,
            name: "username",
            style: {
              display: "inline-block",
              width: 450,
              marginLeft: 30,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react125.default.createElement(space_default.Compact, null, /* @__PURE__ */ import_react125.default.createElement(
            input_default,
            {
              style: { width: 100 },
              placeholder: jp_default.IncomePageJp.cargoPrice,
              value: searchResult.cargoPrice
            }
          ), /* @__PURE__ */ import_react125.default.createElement(input_default, { style: { width: 80 } }), /* @__PURE__ */ import_react125.default.createElement(input_default, { style: { width: 100 }, placeholder: jp_default.IncomePageJp.storagePrice, value: searchResult.storagePrice }))
        )), /* @__PURE__ */ import_react125.default.createElement(space_default, null, /* @__PURE__ */ import_react125.default.createElement(
          form_default.Item,
          {
            style: {
              display: "flexs",
              width: 700,
              marginLeft: 55,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react125.default.createElement(date_picker_default, { value: receiptDate, onChange: onChangeDate, locale: ja_JP_default3 }),
          /* @__PURE__ */ import_react125.default.createElement(
            select_default,
            {
              style: { width: 200 },
              placeholder: jp_default.IncomePageJp.lotNumber
            }
          ),
          /* @__PURE__ */ import_react125.default.createElement(
            input_default,
            {
              style: {
                width: 100,
                marginLeft: 20,
                marginBottom: 0
              },
              placeholder: jp_default.OutputPage.libraryNumber,
              value: searchResult.weight
            }
          ),
          /* @__PURE__ */ import_react125.default.createElement(
            input_default,
            {
              style: { width: 100, marginBottom: 0 },
              placeholder: jp_default.OutputPage.shipmentNumber,
              value: searchResult.stock
            }
          )
        ), /* @__PURE__ */ import_react125.default.createElement(button_default2, { onClick: insertData, style: { fontWeight: "bold", width: "100px", fontSize: "15px" } }, jp_default.IncomePageJp.addition))),
        /* @__PURE__ */ import_react125.default.createElement(divider_default, null)
      ),
      /* @__PURE__ */ import_react125.default.createElement(
        IncomeTable_default,
        {
          data,
          editRow,
          deleteRow,
          pagination: false
        }
      ),
      /* @__PURE__ */ import_react125.default.createElement("div", { style: { height: 15 } }),
      /* @__PURE__ */ import_react125.default.createElement("div", { style: { justifyContent: "flex-end", display: "flex" } }, /* @__PURE__ */ import_react125.default.createElement(button_default2, { style: { width: 150 } }, jp_default.buttons.csvExchange), /* @__PURE__ */ import_react125.default.createElement("div", { style: { width: 40 } }), /* @__PURE__ */ import_react125.default.createElement(button_default2, { style: { width: 150 } }, jp_default.buttons.confirmDeparture))
    ), /* @__PURE__ */ import_react125.default.createElement(Index_default, null));
  };
  var OutputPage_default = OutputPage;

  // app/javascript/pages/InventoryPage.jsx
  var import_react128 = __toESM(require_react());

  // app/javascript/components/Inventory/InventoryTable.jsx
  var import_react127 = __toESM(require_react());
  var IncomeTable2 = ({ data, editRow, deleteRow }) => {
    const columns = [
      {
        title: "\u54C1\u756A",
        dataIndex: "product_id",
        key: "product_id",
        render: (text) => /* @__PURE__ */ import_react127.default.createElement("a", null, text)
      },
      {
        title: "\u54C1\u540D",
        dataIndex: "product_name",
        key: "product_name"
      },
      {
        title: "\u8377\u59FF",
        dataIndex: "product_type",
        key: "product_type"
      },
      {
        title: "\u30ED\u30C3\u30C8\u756A\u53F7",
        dataIndex: "lotNumber",
        key: "lotNumber"
      },
      {
        title: "\u6570\u91CF",
        dataIndex: "weight",
        key: "weight"
      },
      {
        title: "\u5165\u5EAB\u65E5",
        dataIndex: "stock",
        key: "stock"
      }
    ];
    return /* @__PURE__ */ import_react127.default.createElement(table_default, { columns, dataSource: data, pagination: false });
  };
  var InventoryTable_default = IncomeTable2;

  // app/javascript/pages/InventoryPage.jsx
  var import_react129 = __toESM(require_react());
  var { Search: Search4 } = input_default;
  var { Content: Content6 } = layout_default2;
  var InventoryPage = () => {
    return /* @__PURE__ */ import_react128.default.createElement("div", null, /* @__PURE__ */ import_react128.default.createElement(Navbar_default, null), /* @__PURE__ */ import_react128.default.createElement(
      Content6,
      {
        style: { width: 1280 },
        className: "mx-auto flex flex-col justify-content content-h"
      },
      /* @__PURE__ */ import_react128.default.createElement(
        "div",
        {
          name: "basic",
          initialValues: { remember: true },
          autoComplete: "off",
          style: { margin: "50px 0 0px 0" }
        },
        /* @__PURE__ */ import_react128.default.createElement(space_default, { style: { display: "flex", flexDirection: "column", alignItems: "flex-start" } }, /* @__PURE__ */ import_react128.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.warehouse,
            name: "username",
            style: { display: "inline-block", width: 200, marginBottom: 0 }
          },
          /* @__PURE__ */ import_react128.default.createElement(
            select_default,
            {
              style: { width: 140, marginLeft: 14 }
            }
          )
        ), /* @__PURE__ */ import_react128.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.shipper,
            name: "username",
            style: { display: "", width: 500, marginBottom: 0, flexFlow: "nowrap" }
          },
          /* @__PURE__ */ import_react128.default.createElement(
            select_default,
            {
              style: { width: 300, marginLeft: 14 }
            }
          )
        ), /* @__PURE__ */ import_react128.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.receiptDate,
            name: "username",
            style: {
              display: "inline-block",
              width: 800,
              marginLeft: 0,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react128.default.createElement(date_picker_default, { locale: ja_JP_default3 }),
          /* @__PURE__ */ import_react128.default.createElement(
            Search4,
            {
              placeholder: jp_default.IncomePageJp.productNumber,
              allowClear: true,
              style: { marginLeft: 15, width: 200 },
              enterButton: "\u691C\u7D22"
            }
          ),
          /* @__PURE__ */ import_react128.default.createElement(button_default2, { style: { width: 150, marginLeft: 150 } }, jp_default.buttons.csvExchange)
        ))
      ),
      /* @__PURE__ */ import_react128.default.createElement(divider_default, null),
      /* @__PURE__ */ import_react128.default.createElement(InventoryTable_default, null)
    ), /* @__PURE__ */ import_react128.default.createElement(Index_default, null));
  };
  var InventoryPage_default = InventoryPage;

  // app/javascript/pages/DepositPage.jsx
  var import_react131 = __toESM(require_react());

  // app/javascript/components/Deposit/DepositTable.jsx
  var import_react130 = __toESM(require_react());
  var DepositTable = ({ data, editRow, deleteRow }) => {
    const columns = [
      {
        title: "\u5165\u91D1\u65E5",
        dataIndex: "product_payDay",
        key: "product_payDay",
        render: (text) => /* @__PURE__ */ import_react130.default.createElement("a", null, text)
      },
      {
        title: "\u8377\u4E3B\u30B3\u30FC\u30C9",
        dataIndex: "product_shipperCode",
        key: "product_shipperCode"
      },
      {
        title: "\u8377\u4E3B\u540D",
        dataIndex: "product_name",
        key: "product_name"
      },
      {
        title: "\u5165\u91D1\u984D",
        dataIndex: "depositAmount",
        key: "depositAmount"
      },
      {
        title: "\u6458\u8981",
        dataIndex: "abstract",
        key: "abstract"
      },
      {
        title: "\u51E6\u7406\u65E5\u6642",
        dataIndex: "processingDataTime",
        key: "processingDataTime"
      },
      {
        title: "Action",
        key: "action",
        render: (_, record) => /* @__PURE__ */ import_react130.default.createElement(space_default, { size: "small" }, /* @__PURE__ */ import_react130.default.createElement(Button, { onClick: () => editRow(record.product_id) }, jp_default.buttons.delete))
      }
    ];
    return /* @__PURE__ */ import_react130.default.createElement(table_default, { columns, dataSource: data, pagination: false });
  };
  var DepositTable_default = DepositTable;

  // app/javascript/pages/DepositPage.jsx
  var import_react132 = __toESM(require_react());
  var { Search: Search5 } = input_default;
  var { Content: Content7 } = layout_default2;
  var DepositPage = () => {
    const [isModalOpen, setIsModalOpen] = (0, import_react132.useState)(false);
    const showModal = () => {
      setIsModalOpen(true);
    };
    const handleOk = () => {
      setIsModalOpen(false);
    };
    const handleCancel = () => {
      setIsModalOpen(false);
    };
    return /* @__PURE__ */ import_react131.default.createElement("div", null, /* @__PURE__ */ import_react131.default.createElement(Navbar_default, null), /* @__PURE__ */ import_react131.default.createElement(
      Content7,
      {
        style: { width: 1280 },
        className: "mx-auto flex flex-col justify-content content-h"
      },
      /* @__PURE__ */ import_react131.default.createElement(
        "div",
        {
          name: "basic",
          initialValues: { remember: true },
          autoComplete: "off",
          style: { margin: "50px 0 0px 0" }
        },
        /* @__PURE__ */ import_react131.default.createElement("div", null, /* @__PURE__ */ import_react131.default.createElement(button_default2, { onClick: showModal }, jp_default.buttons.signUp), /* @__PURE__ */ import_react131.default.createElement(
          modal_default,
          {
            title: jp_default.Modal.depositRegist,
            open: isModalOpen,
            onOk: handleOk,
            onCancel: handleCancel,
            footer: [
              /* @__PURE__ */ import_react131.default.createElement(button_default2, { key: "ok", onClick: handleOk }, jp_default.buttons.change),
              /* @__PURE__ */ import_react131.default.createElement(button_default2, { key: "cancel", onClick: handleCancel }, jp_default.buttons.delete)
            ]
          },
          /* @__PURE__ */ import_react131.default.createElement("div", null, /* @__PURE__ */ import_react131.default.createElement(
            form_default.Item,
            {
              label: jp_default.Modal.shipperId,
              name: "shipperId",
              style: { display: "inline-block", width: 300, marginBottom: 0 }
            },
            /* @__PURE__ */ import_react131.default.createElement(
              select_default,
              {
                style: { width: 150, marginLeft: 45 }
              }
            )
          ), /* @__PURE__ */ import_react131.default.createElement(
            form_default.Item,
            {
              label: jp_default.DepositPage.shipperName,
              name: "shipperName",
              style: { display: "", width: 400, marginBottom: 0, flexFlow: "nowrap" }
            },
            /* @__PURE__ */ import_react131.default.createElement(
              input_default,
              {
                style: { width: 200, marginLeft: 43 }
              }
            )
          ), /* @__PURE__ */ import_react131.default.createElement(divider_default, null), /* @__PURE__ */ import_react131.default.createElement(
            form_default.Item,
            {
              name: "depositDate",
              label: jp_default.Modal.depositDate,
              style: {
                display: "inline-block",
                width: 400,
                marginBottom: 0
              }
            },
            /* @__PURE__ */ import_react131.default.createElement(date_picker_default, { placeholder: jp_default.Modal.depositDate, style: { marginLeft: 15, width: 150 }, locale: ja_JP_default3 })
          ), /* @__PURE__ */ import_react131.default.createElement(
            form_default.Item,
            {
              label: jp_default.Modal.depositAmount,
              name: "shipperName",
              style: { display: "", width: 400, marginBottom: 0, flexFlow: "nowrap" }
            },
            /* @__PURE__ */ import_react131.default.createElement(
              input_default,
              {
                style: { width: 150, marginLeft: 43 }
              }
            )
          ))
        )),
        /* @__PURE__ */ import_react131.default.createElement("div", { style: { height: 50 } }),
        /* @__PURE__ */ import_react131.default.createElement(
          form_default.Item,
          {
            label: jp_default.DepositPage.payDay,
            name: "username",
            style: {
              display: "inline-block",
              width: 800,
              marginLeft: 0,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react131.default.createElement(date_picker_default, { placeholder: jp_default.DepositPage.payDayFrom, locale: ja_JP_default3 }),
          /* @__PURE__ */ import_react131.default.createElement("span", null, "\uFF5E"),
          /* @__PURE__ */ import_react131.default.createElement(date_picker_default, { placeholder: jp_default.DepositPage.payDayTo, locale: ja_JP_default3 })
        ),
        /* @__PURE__ */ import_react131.default.createElement("div", { style: { height: 15 } }),
        /* @__PURE__ */ import_react131.default.createElement(
          form_default.Item,
          {
            label: jp_default.IncomePageJp.shipper,
            name: "username",
            style: { display: "", width: 300, marginBottom: 0, flexFlow: "nowrap" }
          },
          /* @__PURE__ */ import_react131.default.createElement(
            select_default,
            {
              style: { width: 200, marginLeft: 14 },
              placeholder: jp_default.DepositPage.shipperName
            }
          )
        ),
        /* @__PURE__ */ import_react131.default.createElement("div", { style: { height: 15 } }),
        /* @__PURE__ */ import_react131.default.createElement(
          form_default.Item,
          {
            label: jp_default.DepositPage.processingDate,
            name: "username",
            style: {
              display: "inline-block",
              width: 1e3,
              marginLeft: 0,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react131.default.createElement(date_picker_default, { placeholder: jp_default.DepositPage.processingDateFrom, locale: ja_JP_default3 }),
          /* @__PURE__ */ import_react131.default.createElement("span", null, "\uFF5E"),
          /* @__PURE__ */ import_react131.default.createElement(date_picker_default, { placeholder: jp_default.DepositPage.processingDateTo, locale: ja_JP_default3 }),
          /* @__PURE__ */ import_react131.default.createElement(button_default2, { style: { width: 120, marginLeft: 60 } }, jp_default.IncomePageJp.search),
          /* @__PURE__ */ import_react131.default.createElement(button_default2, { style: { width: 150, marginLeft: 60 } }, jp_default.buttons.csvExchange)
        )
      ),
      /* @__PURE__ */ import_react131.default.createElement(divider_default, null),
      /* @__PURE__ */ import_react131.default.createElement(DepositTable_default, null),
      /* @__PURE__ */ import_react131.default.createElement("div", { style: { display: "flex", marginTop: 20, justifyContent: "flex-end" } }, /* @__PURE__ */ import_react131.default.createElement(button_default2, { style: { width: 120 } }, jp_default.buttons.next))
    ), /* @__PURE__ */ import_react131.default.createElement(Index_default, null));
  };
  var DepositPage_default = DepositPage;

  // app/javascript/pages/BillingPage.jsx
  var import_react134 = __toESM(require_react());

  // app/javascript/components/Billing/BillingTable.jsx
  var import_react133 = __toESM(require_react());
  var BillingTable = ({ data, editRow, deleteRow }) => {
    const columns = [
      {
        title: "\u5E74/\u6708",
        dataIndex: "yearMonth",
        key: "yearMonth",
        render: (text) => /* @__PURE__ */ import_react133.default.createElement("a", null, text)
      },
      {
        title: "\u7DE0\u65E5",
        dataIndex: "closingDate",
        key: "closingDate"
      },
      {
        title: "\u4EF6\u6570",
        dataIndex: "number",
        key: "number"
      },
      {
        title: "\u5BFE\u8C61\u671F\u9593",
        dataIndex: "targetPeriod",
        key: "targetPeriod"
      },
      {
        title: "\u51E6\u7406\u65E5\u6642",
        dataIndex: "processingDateTime",
        key: "processingDateTime"
      },
      {
        title: "Action",
        key: "action",
        render: (_, record) => /* @__PURE__ */ import_react133.default.createElement(space_default, { size: "small" }, /* @__PURE__ */ import_react133.default.createElement(Button, { onClick: () => listRow(record.list) }, jp_default.buttons.list), /* @__PURE__ */ import_react133.default.createElement(Button, { onClick: () => detailRow(record.detail) }, jp_default.buttons.detail))
      }
    ];
    return /* @__PURE__ */ import_react133.default.createElement(table_default, { columns, dataSource: data, pagination: false });
  };
  var BillingTable_default = BillingTable;

  // app/javascript/pages/BillingPage.jsx
  var import_react135 = __toESM(require_react());
  var { Search: Search6 } = input_default;
  var { Content: Content8 } = layout_default2;
  var BillingPage = () => {
    const [isModalOpen, setIsModalOpen] = (0, import_react135.useState)(false);
    const showModal = () => {
      setIsModalOpen(true);
    };
    const handleOk = () => {
      setIsModalOpen(false);
    };
    const handleCancel = () => {
      setIsModalOpen(false);
    };
    return /* @__PURE__ */ import_react134.default.createElement("div", null, /* @__PURE__ */ import_react134.default.createElement(Navbar_default, null), /* @__PURE__ */ import_react134.default.createElement(
      Content8,
      {
        style: { width: 1280 },
        className: "mx-auto flex flex-col justify-content content-h"
      },
      /* @__PURE__ */ import_react134.default.createElement(
        "div",
        {
          name: "basic",
          initialValues: { remember: true },
          autoComplete: "off",
          style: { margin: "50px 0 0px 0" }
        },
        /* @__PURE__ */ import_react134.default.createElement("div", null, /* @__PURE__ */ import_react134.default.createElement(button_default2, { onClick: showModal }, jp_default.buttons.newPost), /* @__PURE__ */ import_react134.default.createElement(
          modal_default,
          {
            title: jp_default.Modal.depositRegist,
            open: isModalOpen,
            onOk: handleOk,
            onCancel: handleCancel,
            footer: [
              /* @__PURE__ */ import_react134.default.createElement(button_default2, { key: "ok", onClick: handleOk }, jp_default.buttons.change),
              /* @__PURE__ */ import_react134.default.createElement(button_default2, { key: "cancel", onClick: handleCancel }, jp_default.buttons.delete)
            ]
          },
          /* @__PURE__ */ import_react134.default.createElement("div", null, /* @__PURE__ */ import_react134.default.createElement(
            form_default.Item,
            {
              label: jp_default.Modal.shipperId,
              name: "shipperId",
              style: { display: "inline-block", width: 300, marginBottom: 0 }
            },
            /* @__PURE__ */ import_react134.default.createElement(
              select_default,
              {
                style: { width: 150, marginLeft: 45 }
              }
            )
          ), /* @__PURE__ */ import_react134.default.createElement(
            form_default.Item,
            {
              name: "shipperName",
              style: { display: "", width: 400, marginBottom: 0, flexFlow: "nowrap" }
            },
            /* @__PURE__ */ import_react134.default.createElement(
              input_default,
              {
                style: { width: 200, marginLeft: 43 }
              }
            )
          ), /* @__PURE__ */ import_react134.default.createElement(divider_default, null), /* @__PURE__ */ import_react134.default.createElement(
            form_default.Item,
            {
              name: "depositDate",
              label: jp_default.Modal.depositDate,
              style: {
                display: "inline-block",
                width: 400,
                marginBottom: 0
              }
            },
            /* @__PURE__ */ import_react134.default.createElement(date_picker_default, { placeholder: jp_default.Modal.depositDate, style: { marginLeft: 15, width: 150 }, locale: ja_JP_default3 })
          ), /* @__PURE__ */ import_react134.default.createElement(
            form_default.Item,
            {
              label: jp_default.Modal.depositAmount,
              name: "shipperName",
              style: { display: "", width: 400, marginBottom: 0, flexFlow: "nowrap" }
            },
            /* @__PURE__ */ import_react134.default.createElement(
              input_default,
              {
                style: { width: 150, marginLeft: 43 }
              }
            )
          ))
        )),
        /* @__PURE__ */ import_react134.default.createElement("div", { style: { display: "flex", marginTop: 20 } }, /* @__PURE__ */ import_react134.default.createElement(
          form_default.Item,
          {
            label: jp_default.BillingPage.yearMonth,
            name: "yearMonth",
            style: {
              display: "inline-block",
              width: 400,
              marginLeft: 0,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react134.default.createElement(
            date_picker_default,
            {
              style: { width: 150, marginLeft: 15 },
              placeholder: jp_default.BillingPage.yearMonth
            }
          )
        ), /* @__PURE__ */ import_react134.default.createElement(
          form_default.Item,
          {
            label: jp_default.BillingPage.closingDate,
            name: "username",
            style: { display: "", width: 300, marginBottom: 0, flexFlow: "nowrap" }
          },
          /* @__PURE__ */ import_react134.default.createElement(
            select_default,
            {
              style: { width: 150, marginLeft: 14 },
              placeholder: jp_default.BillingPage.closingDate
            }
          )
        ), /* @__PURE__ */ import_react134.default.createElement(
          form_default.Item,
          {
            name: "username",
            style: {
              display: "inline-block",
              width: 1e3,
              marginLeft: 0,
              marginBottom: 0
            }
          },
          /* @__PURE__ */ import_react134.default.createElement(button_default2, { style: { width: 120, marginLeft: 60 } }, jp_default.IncomePageJp.search)
        ))
      ),
      /* @__PURE__ */ import_react134.default.createElement(divider_default, null),
      /* @__PURE__ */ import_react134.default.createElement(BillingTable_default, null),
      /* @__PURE__ */ import_react134.default.createElement("div", { style: { display: "flex", marginTop: 20, justifyContent: "flex-end" } }, /* @__PURE__ */ import_react134.default.createElement(button_default2, { style: { width: 120 } }, jp_default.buttons.next))
    ), /* @__PURE__ */ import_react134.default.createElement(Index_default, null));
  };
  var BillingPage_default = BillingPage;

  // app/javascript/components/router/AppRouter.jsx
  var AppRouter = () => {
    return /* @__PURE__ */ import_react136.default.createElement(AuthContextProvider_default, null, /* @__PURE__ */ import_react136.default.createElement(BrowserRouter, null, /* @__PURE__ */ import_react136.default.createElement(Routes, null, /* @__PURE__ */ import_react136.default.createElement(Route, { path: "/", element: /* @__PURE__ */ import_react136.default.createElement(LoginPage_default, null) }), /* @__PURE__ */ import_react136.default.createElement(Route, { path: "/home", element: /* @__PURE__ */ import_react136.default.createElement(TopPage_default, null) }), /* @__PURE__ */ import_react136.default.createElement(Route, { path: "/in_process", element: /* @__PURE__ */ import_react136.default.createElement(IncomePage_default, null) }), /* @__PURE__ */ import_react136.default.createElement(Route, { path: "/out_process", element: /* @__PURE__ */ import_react136.default.createElement(OutputPage_default, null) }), /* @__PURE__ */ import_react136.default.createElement(Route, { path: "/inventory_control", element: /* @__PURE__ */ import_react136.default.createElement(InventoryPage_default, null) }), /* @__PURE__ */ import_react136.default.createElement(Route, { path: "/deposit_process", element: /* @__PURE__ */ import_react136.default.createElement(DepositPage_default, null) }), /* @__PURE__ */ import_react136.default.createElement(Route, { path: "/billing_process", element: /* @__PURE__ */ import_react136.default.createElement(BillingPage_default, null) }))));
  };

  // app/javascript/App.jsx
  var App = () => {
    return /* @__PURE__ */ import_react137.default.createElement(import_react137.default.Fragment, null, /* @__PURE__ */ import_react137.default.createElement(config_provider_default, null, /* @__PURE__ */ import_react137.default.createElement(AppRouter, null)));
  };
  var App_default = App;

  // app/javascript/application.jsx
  document.addEventListener("DOMContentLoaded", () => {
    const rootEl = document.getElementById("root");
    import_react_dom8.default.render(
      /* @__PURE__ */ import_react138.default.createElement(import_react138.default.StrictMode, null, /* @__PURE__ */ import_react138.default.createElement(Provider_default, { store }, /* @__PURE__ */ import_react138.default.createElement(App_default, null))),
      rootEl
    );
  });
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@babel/runtime/helpers/esm/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.14.2
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.21.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.21.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
